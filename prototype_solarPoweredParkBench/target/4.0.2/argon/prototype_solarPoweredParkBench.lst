
/Users/kdneeley/Documents/IoT/capstone/prototype_solarPoweredParkBench/target/4.0.2/argon/prototype_solarPoweredParkBench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000037f4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7810  000b7810  00007810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7834  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000047c  2003e1c0  000b7838  0001e1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001b4  2003e63c  2003e63c  0002e63c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b7cb4  000b7cb4  00027cb4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b7cdc  000b7cdc  00027cdc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0011a719  00000000  00000000  00027ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00013b4f  00000000  00000000  001423f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003bdf5  00000000  00000000  00155f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002fb0  00000000  00000000  00191d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a728  00000000  00000000  00194ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a212  00000000  00000000  0019f415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00042eef  00000000  00000000  001d9627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001346d0  00000000  00000000  0021c516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000086a4  00000000  00000000  00350be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 fe77 	bl	b6d20 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 fe7f 	bl	b6d3c <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e1c0 	.word	0x2003e1c0
   b4048:	000b7838 	.word	0x000b7838
   b404c:	2003e63c 	.word	0x2003e63c
   b4050:	2003e63c 	.word	0x2003e63c
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 fbf3 	bl	b6848 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b77dc 	.word	0x000b77dc
   b407c:	000b7804 	.word	0x000b7804

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b830 	b.w	b40e4 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f8c3 	bl	b4210 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 bb93 	b.w	b67b8 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 bb7f 	b.w	b5794 <malloc>

000b4096 <_Znaj>:
   b4096:	f001 bb7d 	b.w	b5794 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 bb83 	b.w	b57a4 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f001 fad0 	bl	b564c <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b52ad 	.word	0x000b52ad
   b40b4:	000b6eac 	.word	0x000b6eac

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c8:	b40e      	push	{r1, r2, r3}
   b40ca:	b503      	push	{r0, r1, lr}
   b40cc:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40ce:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40d4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40d6:	f001 fdda 	bl	b5c8e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40da:	b002      	add	sp, #8
   b40dc:	f85d eb04 	ldr.w	lr, [sp], #4
   b40e0:	b003      	add	sp, #12
   b40e2:	4770      	bx	lr

000b40e4 <setup>:
int movingTradRainbow (int startPixel, int endPixel, int hexColor);


SYSTEM_MODE(SEMI_AUTOMATIC);

void setup() {
   b40e4:	b538      	push	{r3, r4, r5, lr}
    Serial.begin(9600);
   b40e6:	f002 fae1 	bl	b66ac <_Z16_fetch_usbserialv>
   b40ea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40ee:	f002 facd 	bl	b668c <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b40f2:	2000      	movs	r0, #0
   b40f4:	f001 f8f2 	bl	b52dc <hal_timer_millis>
        while (_while() && !_condition()) {
   b40f8:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b40fc:	4604      	mov	r4, r0
   b40fe:	2000      	movs	r0, #0
   b4100:	f001 f8ec 	bl	b52dc <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4104:	1b00      	subs	r0, r0, r4
   b4106:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b410a:	42a8      	cmp	r0, r5
   b410c:	f171 0300 	sbcs.w	r3, r1, #0
   b4110:	d207      	bcs.n	b4122 <setup+0x3e>
    waitFor(Serial.isConnected, 15000);
   b4112:	f002 facb 	bl	b66ac <_Z16_fetch_usbserialv>
   b4116:	f002 fabd 	bl	b6694 <_ZN9USBSerial11isConnectedEv>
   b411a:	b910      	cbnz	r0, b4122 <setup+0x3e>
            spark_process();
   b411c:	f001 faca 	bl	b56b4 <spark_process>
        while (_while() && !_condition()) {
   b4120:	e7ed      	b.n	b40fe <setup+0x1a>
   b4122:	f002 fac3 	bl	b66ac <_Z16_fetch_usbserialv>
   b4126:	f002 fab5 	bl	b6694 <_ZN9USBSerial11isConnectedEv>
    // WiFi.connect();
    // while(WiFi.connecting()) {
    //     Serial.printf(".");
    // }
    // Serial.printf("\n\n");
    pixel.begin();
   b412a:	4808      	ldr	r0, [pc, #32]	; (b414c <setup+0x68>)
   b412c:	f000 f8f7 	bl	b431e <_ZN17Adafruit_NeoPixel5beginEv>

    myDisplay.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4130:	2102      	movs	r1, #2
   b4132:	4807      	ldr	r0, [pc, #28]	; (b4150 <setup+0x6c>)
   b4134:	223c      	movs	r2, #60	; 0x3c
   b4136:	f000 ffd1 	bl	b50dc <_ZN16Adafruit_SSD13065beginEhh>
    myDisplay.clearDisplay();
   b413a:	4805      	ldr	r0, [pc, #20]	; (b4150 <setup+0x6c>)
   b413c:	f000 fee6 	bl	b4f0c <_ZN16Adafruit_SSD130612clearDisplayEv>
    pinMode(MOTIONSNSR, INPUT);
}
   b4140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    pinMode(MOTIONSNSR, INPUT);
   b4144:	2100      	movs	r1, #0
   b4146:	2012      	movs	r0, #18
   b4148:	f002 bbee 	b.w	b6928 <pinMode>
   b414c:	2003e690 	.word	0x2003e690
   b4150:	2003e66c 	.word	0x2003e66c

000b4154 <_Z11tradRainbowiii>:

}

////FUNCTION DEFINITIONS
//NEOPIXEL FUNCTIONS
int tradRainbow (int startPixel, int endPixel, int hexColor) {
   b4154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int startColor = 0;
    int endColor = 9;

    for(int b=minBrightness; b<=maxBrightness; b++) {
        brightness = b;
        pixel.setBrightness(b);
   b4158:	f8df 80ac 	ldr.w	r8, [pc, #172]	; b4208 <_Z11tradRainbowiii+0xb4>
int tradRainbow (int startPixel, int endPixel, int hexColor) {
   b415c:	4606      	mov	r6, r0
   b415e:	460c      	mov	r4, r1
    for(int b=minBrightness; b<=maxBrightness; b++) {
   b4160:	2514      	movs	r5, #20
        brightness = b;
   b4162:	4b28      	ldr	r3, [pc, #160]	; (b4204 <_Z11tradRainbowiii+0xb0>)
   b4164:	f8df b0a4 	ldr.w	fp, [pc, #164]	; b420c <_Z11tradRainbowiii+0xb8>
   b4168:	601d      	str	r5, [r3, #0]
        pixel.setBrightness(b);
   b416a:	b2e9      	uxtb	r1, r5
   b416c:	4640      	mov	r0, r8
   b416e:	f000 fafe 	bl	b476e <_ZN17Adafruit_NeoPixel13setBrightnessEh>
        for(int c = startColor; c <= endColor; c++) {
   b4172:	f04f 0a00 	mov.w	sl, #0
   b4176:	46d9      	mov	r9, fp
            hexColor = traditionalrainbow[c];
   b4178:	f85b 2b04 	ldr.w	r2, [fp], #4
            for(int i=startPixel; i<endPixel+1; i++) {
   b417c:	4637      	mov	r7, r6
   b417e:	42a7      	cmp	r7, r4
   b4180:	dc0a      	bgt.n	b4198 <_Z11tradRainbowiii+0x44>
                    pixel.setPixelColor(i, hexColor);
   b4182:	b2b9      	uxth	r1, r7
   b4184:	4640      	mov	r0, r8
   b4186:	9201      	str	r2, [sp, #4]
   b4188:	f000 faae 	bl	b46e8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
                    pixel.show(); 
   b418c:	4640      	mov	r0, r8
   b418e:	f000 f8ff 	bl	b4390 <_ZN17Adafruit_NeoPixel4showEv>
            for(int i=startPixel; i<endPixel+1; i++) {
   b4192:	3701      	adds	r7, #1
   b4194:	9a01      	ldr	r2, [sp, #4]
   b4196:	e7f2      	b.n	b417e <_Z11tradRainbowiii+0x2a>
                }
            
            delay(100);
   b4198:	2064      	movs	r0, #100	; 0x64
        for(int c = startColor; c <= endColor; c++) {
   b419a:	f10a 0a01 	add.w	sl, sl, #1
            delay(100);
   b419e:	f001 fb31 	bl	b5804 <delay>
        for(int c = startColor; c <= endColor; c++) {
   b41a2:	f1ba 0f0a 	cmp.w	sl, #10
   b41a6:	d1e7      	bne.n	b4178 <_Z11tradRainbowiii+0x24>
    for(int b=minBrightness; b<=maxBrightness; b++) {
   b41a8:	3501      	adds	r5, #1
   b41aa:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   b41ae:	d1d8      	bne.n	b4162 <_Z11tradRainbowiii+0xe>
        }
    }
    for(int b = maxBrightness; b >= minBrightness; b--) {
        pixel.setBrightness(b);
   b41b0:	f8df a054 	ldr.w	sl, [pc, #84]	; b4208 <_Z11tradRainbowiii+0xb4>
    for(int b = maxBrightness; b >= minBrightness; b--) {
   b41b4:	25ff      	movs	r5, #255	; 0xff
        pixel.setBrightness(b);
   b41b6:	b2e9      	uxtb	r1, r5
   b41b8:	4650      	mov	r0, sl
   b41ba:	f000 fad8 	bl	b476e <_ZN17Adafruit_NeoPixel13setBrightnessEh>
        for(int c = endColor; c >= startColor; c--) {
   b41be:	2709      	movs	r7, #9
            hexColor = traditionalrainbow[c];
   b41c0:	f859 2027 	ldr.w	r2, [r9, r7, lsl #2]
            for(int i=startPixel; i<endPixel+1; i++) {
   b41c4:	46b0      	mov	r8, r6
   b41c6:	45a0      	cmp	r8, r4
   b41c8:	dc0c      	bgt.n	b41e4 <_Z11tradRainbowiii+0x90>
                    pixel.setPixelColor(i, hexColor);
   b41ca:	fa1f f188 	uxth.w	r1, r8
   b41ce:	4650      	mov	r0, sl
   b41d0:	9201      	str	r2, [sp, #4]
   b41d2:	f000 fa89 	bl	b46e8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
                    pixel.show(); 
   b41d6:	4650      	mov	r0, sl
   b41d8:	f000 f8da 	bl	b4390 <_ZN17Adafruit_NeoPixel4showEv>
            for(int i=startPixel; i<endPixel+1; i++) {
   b41dc:	f108 0801 	add.w	r8, r8, #1
   b41e0:	9a01      	ldr	r2, [sp, #4]
   b41e2:	e7f0      	b.n	b41c6 <_Z11tradRainbowiii+0x72>
                }
            delay(100);
   b41e4:	2064      	movs	r0, #100	; 0x64
   b41e6:	f001 fb0d 	bl	b5804 <delay>
        for(int c = endColor; c >= startColor; c--) {
   b41ea:	3f01      	subs	r7, #1
   b41ec:	d2e8      	bcs.n	b41c0 <_Z11tradRainbowiii+0x6c>
    for(int b = maxBrightness; b >= minBrightness; b--) {
   b41ee:	3d01      	subs	r5, #1
   b41f0:	2d13      	cmp	r5, #19
   b41f2:	d1e0      	bne.n	b41b6 <_Z11tradRainbowiii+0x62>
        }
    }
    pixel.show();
   b41f4:	4804      	ldr	r0, [pc, #16]	; (b4208 <_Z11tradRainbowiii+0xb4>)
   b41f6:	f000 f8cb 	bl	b4390 <_ZN17Adafruit_NeoPixel4showEv>

    return(endPixel);
}
   b41fa:	4620      	mov	r0, r4
   b41fc:	b003      	add	sp, #12
   b41fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4202:	bf00      	nop
   b4204:	2003e648 	.word	0x2003e648
   b4208:	2003e690 	.word	0x2003e690
   b420c:	000b6ed0 	.word	0x000b6ed0

000b4210 <loop>:
void loop() {
   b4210:	b570      	push	{r4, r5, r6, lr}
        distance = analogRead(MOTIONSNSR);
   b4212:	4d1c      	ldr	r5, [pc, #112]	; (b4284 <loop+0x74>)
        Serial.printf("Distance = %i\n", distance);
   b4214:	4e1c      	ldr	r6, [pc, #112]	; (b4288 <loop+0x78>)
        myDisplay.setRotation(2);
   b4216:	4c1d      	ldr	r4, [pc, #116]	; (b428c <loop+0x7c>)
    while(tradRainbow(0, PIXELCOUNT, fullgreen)) {
   b4218:	f44f 427f 	mov.w	r2, #65280	; 0xff00
   b421c:	2110      	movs	r1, #16
   b421e:	2000      	movs	r0, #0
   b4220:	f7ff ff98 	bl	b4154 <_Z11tradRainbowiii>
   b4224:	b368      	cbz	r0, b4282 <loop+0x72>
        distance = analogRead(MOTIONSNSR);
   b4226:	2012      	movs	r0, #18
   b4228:	f002 fba8 	bl	b697c <analogRead>
   b422c:	6028      	str	r0, [r5, #0]
        Serial.printf("Distance = %i\n", distance);
   b422e:	f002 fa3d 	bl	b66ac <_Z16_fetch_usbserialv>
   b4232:	682a      	ldr	r2, [r5, #0]
   b4234:	4631      	mov	r1, r6
   b4236:	f7ff ff47 	bl	b40c8 <_ZN5Print6printfEPKcz>
        myDisplay.setRotation(2);
   b423a:	4620      	mov	r0, r4
   b423c:	2102      	movs	r1, #2
   b423e:	f000 fc78 	bl	b4b32 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor (8,1);
   b4242:	2201      	movs	r2, #1
   b4244:	4620      	mov	r0, r4
   b4246:	2108      	movs	r1, #8
   b4248:	f000 fc66 	bl	b4b18 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.setTextSize(2);
   b424c:	4620      	mov	r0, r4
   b424e:	2102      	movs	r1, #2
   b4250:	f000 fc65 	bl	b4b1e <_ZN12Adafruit_GFX11setTextSizeEh>
        myDisplay.setTextColor(WHITE);
   b4254:	4620      	mov	r0, r4
   b4256:	2101      	movs	r1, #1
   b4258:	f000 fc66 	bl	b4b28 <_ZN12Adafruit_GFX12setTextColorEt>
        myDisplay.printf("Distance = %i\n", distance);
   b425c:	682a      	ldr	r2, [r5, #0]
   b425e:	4631      	mov	r1, r6
   b4260:	4620      	mov	r0, r4
   b4262:	f7ff ff31 	bl	b40c8 <_ZN5Print6printfEPKcz>
        myDisplay.display();
   b4266:	4620      	mov	r0, r4
   b4268:	f000 fec8 	bl	b4ffc <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b426c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4270:	f001 fac8 	bl	b5804 <delay>
        myDisplay.clearDisplay();
   b4274:	4620      	mov	r0, r4
   b4276:	f000 fe49 	bl	b4f0c <_ZN16Adafruit_SSD130612clearDisplayEv>
        myDisplay.display();
   b427a:	4620      	mov	r0, r4
   b427c:	f000 febe 	bl	b4ffc <_ZN16Adafruit_SSD13067displayEv>
    while(tradRainbow(0, PIXELCOUNT, fullgreen)) {
   b4280:	e7ca      	b.n	b4218 <loop+0x8>
}
   b4282:	bd70      	pop	{r4, r5, r6, pc}
   b4284:	2003e668 	.word	0x2003e668
   b4288:	000b6ec1 	.word	0x000b6ec1
   b428c:	2003e66c 	.word	0x2003e66c

000b4290 <_GLOBAL__sub_I_startPixel>:
            
        }
    }
    pixel.show();
    return (endPixel);
   b4290:	b508      	push	{r3, lr}
Adafruit_NeoPixel pixel(PIXELCOUNT, PIXELPIN, WS2812B);
   b4292:	2208      	movs	r2, #8
   b4294:	2302      	movs	r3, #2
   b4296:	2110      	movs	r1, #16
   b4298:	480c      	ldr	r0, [pc, #48]	; (b42cc <_GLOBAL__sub_I_startPixel+0x3c>)
   b429a:	f000 f867 	bl	b436c <_ZN17Adafruit_NeoPixelC1Ethh>
Adafruit_SSD1306 myDisplay(OLED_RESET); 
   b429e:	2104      	movs	r1, #4
   b42a0:	480b      	ldr	r0, [pc, #44]	; (b42d0 <_GLOBAL__sub_I_startPixel+0x40>)
   b42a2:	f000 fe1d 	bl	b4ee0 <_ZN16Adafruit_SSD1306C1Ea>
TCPClient client;                           // Create TCP Client object
   b42a6:	480b      	ldr	r0, [pc, #44]	; (b42d4 <_GLOBAL__sub_I_startPixel+0x44>)
   b42a8:	f002 f92e 	bl	b6508 <_ZN9TCPClientC1Ev>
String receivedData;
   b42ac:	490a      	ldr	r1, [pc, #40]	; (b42d8 <_GLOBAL__sub_I_startPixel+0x48>)
   b42ae:	480b      	ldr	r0, [pc, #44]	; (b42dc <_GLOBAL__sub_I_startPixel+0x4c>)
   b42b0:	f001 fe28 	bl	b5f04 <_ZN6StringC1EPK19__FlashStringHelper>
              error_(SYSTEM_ERROR_NONE) {
   b42b4:	4b0a      	ldr	r3, [pc, #40]	; (b42e0 <_GLOBAL__sub_I_startPixel+0x50>)
   b42b6:	2200      	movs	r2, #0
   b42b8:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b42bc:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b42c0:	609a      	str	r2, [r3, #8]
   b42c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        set_system_mode(mode);
   b42c6:	2002      	movs	r0, #2
   b42c8:	f001 b9d0 	b.w	b566c <set_system_mode>
   b42cc:	2003e690 	.word	0x2003e690
   b42d0:	2003e66c 	.word	0x2003e66c
   b42d4:	2003e64c 	.word	0x2003e64c
   b42d8:	000b6ecf 	.word	0x000b6ecf
   b42dc:	2003e6a4 	.word	0x2003e6a4
   b42e0:	2003e63c 	.word	0x2003e63c

000b42e4 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b42e4:	b538      	push	{r3, r4, r5, lr}
   b42e6:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b42e8:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b42ea:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b42ec:	b108      	cbz	r0, b42f2 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b42ee:	f001 fa59 	bl	b57a4 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b42f2:	79a3      	ldrb	r3, [r4, #6]
   b42f4:	2b06      	cmp	r3, #6
   b42f6:	bf0c      	ite	eq
   b42f8:	2004      	moveq	r0, #4
   b42fa:	2003      	movne	r0, #3
   b42fc:	fb10 f005 	smulbb	r0, r0, r5
   b4300:	b280      	uxth	r0, r0
   b4302:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b4304:	f001 fa46 	bl	b5794 <malloc>
   b4308:	60e0      	str	r0, [r4, #12]
   b430a:	b128      	cbz	r0, b4318 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b430c:	88a2      	ldrh	r2, [r4, #4]
   b430e:	2100      	movs	r1, #0
   b4310:	f002 fd14 	bl	b6d3c <memset>
    numLEDs = n;
   b4314:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b4316:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b4318:	80a0      	strh	r0, [r4, #4]
   b431a:	8060      	strh	r0, [r4, #2]
}
   b431c:	e7fb      	b.n	b4316 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b431e <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b431e:	b510      	push	{r4, lr}
   b4320:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b4322:	2101      	movs	r1, #1
   b4324:	79c0      	ldrb	r0, [r0, #7]
   b4326:	f002 faff 	bl	b6928 <pinMode>
  digitalWrite(pin, LOW);
   b432a:	79e0      	ldrb	r0, [r4, #7]
   b432c:	2100      	movs	r1, #0
   b432e:	f002 fb0c 	bl	b694a <digitalWrite>
  begun = true;
   b4332:	2301      	movs	r3, #1
   b4334:	7023      	strb	r3, [r4, #0]
}
   b4336:	bd10      	pop	{r4, pc}

000b4338 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4338:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b433a:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b433c:	4605      	mov	r5, r0
   b433e:	460c      	mov	r4, r1
    if (begun) {
   b4340:	b11b      	cbz	r3, b434a <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b4342:	79c0      	ldrb	r0, [r0, #7]
   b4344:	2100      	movs	r1, #0
   b4346:	f002 faef 	bl	b6928 <pinMode>
    }
    pin = p;
    if (begun) {
   b434a:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b434c:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b434e:	b15b      	cbz	r3, b4368 <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b4350:	b2a0      	uxth	r0, r4
   b4352:	2101      	movs	r1, #1
   b4354:	9001      	str	r0, [sp, #4]
   b4356:	f002 fae7 	bl	b6928 <pinMode>
        digitalWrite(p, LOW);
   b435a:	9801      	ldr	r0, [sp, #4]
   b435c:	2100      	movs	r1, #0
    }
}
   b435e:	b003      	add	sp, #12
   b4360:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b4364:	f002 baf1 	b.w	b694a <digitalWrite>
}
   b4368:	b003      	add	sp, #12
   b436a:	bd30      	pop	{r4, r5, pc}

000b436c <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b436c:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b436e:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4370:	4604      	mov	r4, r0
   b4372:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4374:	7183      	strb	r3, [r0, #6]
   b4376:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b437a:	7005      	strb	r5, [r0, #0]
   b437c:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b437e:	f7ff ffb1 	bl	b42e4 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b4382:	4620      	mov	r0, r4
   b4384:	4631      	mov	r1, r6
   b4386:	f7ff ffd7 	bl	b4338 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b438a:	4620      	mov	r0, r4
   b438c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4390 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b4390:	68c3      	ldr	r3, [r0, #12]
   b4392:	2b00      	cmp	r3, #0
   b4394:	f000 81a4 	beq.w	b46e0 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b4398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b439c:	7983      	ldrb	r3, [r0, #6]
   b439e:	3b02      	subs	r3, #2
   b43a0:	b2db      	uxtb	r3, r3
   b43a2:	2b04      	cmp	r3, #4
   b43a4:	bf9c      	itt	ls
   b43a6:	4abf      	ldrls	r2, [pc, #764]	; (b46a4 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b43a8:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b43ac:	b085      	sub	sp, #20
   b43ae:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b43b0:	bf88      	it	hi
   b43b2:	2432      	movhi	r4, #50	; 0x32
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b43b4:	f000 ff82 	bl	b52bc <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b43b8:	692b      	ldr	r3, [r5, #16]
   b43ba:	1ac0      	subs	r0, r0, r3
   b43bc:	42a0      	cmp	r0, r4
   b43be:	d3f9      	bcc.n	b43b4 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b43c0:	4cb9      	ldr	r4, [pc, #740]	; (b46a8 <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b43c2:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b43c4:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b43c8:	b91b      	cbnz	r3, b43d2 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b43ca:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b43ce:	2b00      	cmp	r3, #0
   b43d0:	db7e      	blt.n	b44d0 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b43d2:	4cb6      	ldr	r4, [pc, #728]	; (b46ac <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b43d4:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b43d8:	b923      	cbnz	r3, b43e4 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b43da:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b43de:	2b00      	cmp	r3, #0
   b43e0:	f2c0 816e 	blt.w	b46c0 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b43e4:	4cb2      	ldr	r4, [pc, #712]	; (b46b0 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b43e6:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b43ea:	2b00      	cmp	r3, #0
   b43ec:	f000 8144 	beq.w	b4678 <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b43f0:	79eb      	ldrb	r3, [r5, #7]
   b43f2:	4ab0      	ldr	r2, [pc, #704]	; (b46b4 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b43f4:	4cb0      	ldr	r4, [pc, #704]	; (b46b8 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b43f6:	6812      	ldr	r2, [r2, #0]
   b43f8:	0119      	lsls	r1, r3, #4
   b43fa:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b43fe:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b4400:	49ae      	ldr	r1, [pc, #696]	; (b46bc <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4402:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b4404:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b4408:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b440c:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4410:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4412:	f003 031f 	and.w	r3, r3, #31
   b4416:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b441a:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b441c:	433a      	orrs	r2, r7
   b441e:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b4420:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b4422:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b4426:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b442a:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b442c:	2900      	cmp	r1, #0
   b442e:	d044      	beq.n	b44ba <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b4430:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b4434:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b4436:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b443a:	f818 cb01 	ldrb.w	ip, [r8], #1
   b443e:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4440:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b4442:	6863      	ldr	r3, [r4, #4]
   b4444:	1a9b      	subs	r3, r3, r2
   b4446:	2b46      	cmp	r3, #70	; 0x46
   b4448:	d9fb      	bls.n	b4442 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b444a:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b444c:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b4450:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b4454:	ea43 0307 	orr.w	r3, r3, r7
   b4458:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b445c:	d02f      	beq.n	b44be <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b445e:	6863      	ldr	r3, [r4, #4]
   b4460:	1a9b      	subs	r3, r3, r2
   b4462:	2b28      	cmp	r3, #40	; 0x28
   b4464:	d9fb      	bls.n	b445e <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b4466:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b446a:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b446c:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4470:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4474:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4478:	d1e3      	bne.n	b4442 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b447a:	88ab      	ldrh	r3, [r5, #4]
   b447c:	f10e 0e01 	add.w	lr, lr, #1
   b4480:	fa1f fe8e 	uxth.w	lr, lr
   b4484:	4573      	cmp	r3, lr
   b4486:	d8d8      	bhi.n	b443a <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b4488:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b448c:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b4490:	6863      	ldr	r3, [r4, #4]
   b4492:	1a9b      	subs	r3, r3, r2
   b4494:	2b46      	cmp	r3, #70	; 0x46
   b4496:	d9fb      	bls.n	b4490 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b4498:	6863      	ldr	r3, [r4, #4]
   b449a:	eba3 0909 	sub.w	r9, r3, r9
   b449e:	4589      	cmp	r9, r1
   b44a0:	f0c0 80e4 	bcc.w	b466c <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b44a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b44a8:	f000 ff00 	bl	b52ac <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b44ac:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b44ae:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b44b2:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b44b6:	2900      	cmp	r1, #0
   b44b8:	d1ba      	bne.n	b4430 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b44ba:	460a      	mov	r2, r1
   b44bc:	e7e8      	b.n	b4490 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b44be:	6863      	ldr	r3, [r4, #4]
   b44c0:	1a9b      	subs	r3, r3, r2
   b44c2:	2b11      	cmp	r3, #17
   b44c4:	d8cf      	bhi.n	b4466 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b44c6:	6863      	ldr	r3, [r4, #4]
   b44c8:	1a9b      	subs	r3, r3, r2
   b44ca:	2b11      	cmp	r3, #17
   b44cc:	d9f7      	bls.n	b44be <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b44ce:	e7ca      	b.n	b4466 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b44d0:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b44d4:	2b00      	cmp	r3, #0
   b44d6:	f6bf af7c 	bge.w	b43d2 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b44da:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b44de:	2b00      	cmp	r3, #0
   b44e0:	f6bf af77 	bge.w	b43d2 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b44e4:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b44e8:	2b00      	cmp	r3, #0
   b44ea:	f6bf af72 	bge.w	b43d2 <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b44ee:	0136      	lsls	r6, r6, #4
   b44f0:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b44f2:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b44f4:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b44f6:	f001 f94d 	bl	b5794 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b44fa:	2800      	cmp	r0, #0
   b44fc:	f43f af78 	beq.w	b43f0 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b4500:	88ab      	ldrh	r3, [r5, #4]
   b4502:	2b00      	cmp	r3, #0
   b4504:	f000 80ed 	beq.w	b46e2 <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b4508:	68ea      	ldr	r2, [r5, #12]
   b450a:	3b01      	subs	r3, #1
   b450c:	fa12 f783 	uxtah	r7, r2, r3
   b4510:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    uint16_t pos = 0; // bit position
   b4514:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4516:	f248 0206 	movw	r2, #32774	; 0x8006
   b451a:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b451e:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4522:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b4526:	bf0c      	ite	eq
   b4528:	4693      	moveq	fp, r2
   b452a:	468b      	movne	fp, r1
   b452c:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b4530:	bf0c      	ite	eq
   b4532:	4616      	moveq	r6, r2
   b4534:	460e      	movne	r6, r1
   b4536:	f01c 0f20 	tst.w	ip, #32
   b453a:	bf0c      	ite	eq
   b453c:	4690      	moveq	r8, r2
   b453e:	4688      	movne	r8, r1
        pos++;
   b4540:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4544:	f8cd 8008 	str.w	r8, [sp, #8]
   b4548:	9601      	str	r6, [sp, #4]
        pos++;
   b454a:	f103 0802 	add.w	r8, r3, #2
   b454e:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4552:	9e01      	ldr	r6, [sp, #4]
   b4554:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b4558:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b455c:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b4560:	9e02      	ldr	r6, [sp, #8]
   b4562:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b4566:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b456a:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b456e:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4572:	bf0c      	ite	eq
   b4574:	4693      	moveq	fp, r2
   b4576:	468b      	movne	fp, r1
   b4578:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b457c:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4580:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b4584:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4588:	bf0c      	ite	eq
   b458a:	4693      	moveq	fp, r2
   b458c:	468b      	movne	fp, r1
   b458e:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4592:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4596:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b459a:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b459e:	bf0c      	ite	eq
   b45a0:	4693      	moveq	fp, r2
   b45a2:	468b      	movne	fp, r1
   b45a4:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b45a8:	f103 0a08 	add.w	sl, r3, #8
   b45ac:	f103 0806 	add.w	r8, r3, #6
   b45b0:	3307      	adds	r3, #7
   b45b2:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b45b4:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b45b8:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b45bc:	bf0c      	ite	eq
   b45be:	4693      	moveq	fp, r2
   b45c0:	468b      	movne	fp, r1
        pos++;
   b45c2:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b45c6:	f01c 0f01 	tst.w	ip, #1
   b45ca:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b45ce:	bf15      	itete	ne
   b45d0:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b45d4:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b45d8:	fa1f f38a 	uxthne.w	r3, sl
   b45dc:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b45e0:	4577      	cmp	r7, lr
   b45e2:	d19c      	bne.n	b451e <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b45e4:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b45e6:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b45e8:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b45ea:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b45ec:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b45ee:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b45f0:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b45f4:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b45f6:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b45f8:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b45fa:	4b2e      	ldr	r3, [pc, #184]	; (b46b4 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b45fc:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b45fe:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4600:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4602:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4604:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b4608:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b460c:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b4610:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b4614:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b4618:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b461c:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b4620:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b4624:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4628:	79eb      	ldrb	r3, [r5, #7]
   b462a:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b462e:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b4630:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4632:	5cfe      	ldrb	r6, [r7, r3]
   b4634:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b4638:	f003 031f 	and.w	r3, r3, #31
   b463c:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b4640:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b4644:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b4648:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b464c:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b464e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b4652:	2b00      	cmp	r3, #0
   b4654:	d0fb      	beq.n	b464e <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b4656:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4658:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pwm->EVENTS_SEQEND[0] = 0;
   b465c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b4660:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4664:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b4668:	f001 f89c 	bl	b57a4 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b466c:	f000 fe26 	bl	b52bc <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b4670:	6128      	str	r0, [r5, #16]
}
   b4672:	b005      	add	sp, #20
   b4674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4678:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b467c:	2b00      	cmp	r3, #0
   b467e:	f6bf aeb7 	bge.w	b43f0 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4682:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4686:	2b00      	cmp	r3, #0
   b4688:	f6bf aeb2 	bge.w	b43f0 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b468c:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4690:	2b00      	cmp	r3, #0
   b4692:	f6bf aead 	bge.w	b43f0 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4696:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b469a:	2b00      	cmp	r3, #0
   b469c:	f6bf aea8 	bge.w	b43f0 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b46a0:	e725      	b.n	b44ee <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b46a2:	bf00      	nop
   b46a4:	000b6ef4 	.word	0x000b6ef4
   b46a8:	4001c000 	.word	0x4001c000
   b46ac:	40021000 	.word	0x40021000
   b46b0:	40022000 	.word	0x40022000
   b46b4:	2003e6b4 	.word	0x2003e6b4
   b46b8:	e0001000 	.word	0xe0001000
   b46bc:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46c0:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46c4:	2b00      	cmp	r3, #0
   b46c6:	f6bf ae8d 	bge.w	b43e4 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46ca:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46ce:	2b00      	cmp	r3, #0
   b46d0:	f6bf ae88 	bge.w	b43e4 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b46d4:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b46d8:	2b00      	cmp	r3, #0
   b46da:	f6bf ae83 	bge.w	b43e4 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b46de:	e706      	b.n	b44ee <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b46e0:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b46e2:	2304      	movs	r3, #4
   b46e4:	2102      	movs	r1, #2
   b46e6:	e783      	b.n	b45f0 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b46e8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   b46e8:	8843      	ldrh	r3, [r0, #2]
   b46ea:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   b46ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   b46ee:	d92d      	bls.n	b474c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   b46f0:	7a06      	ldrb	r6, [r0, #8]
   b46f2:	f3c2 4307 	ubfx	r3, r2, #16, #8
   b46f6:	f3c2 2407 	ubfx	r4, r2, #8, #8
   b46fa:	b2d5      	uxtb	r5, r2
   b46fc:	b13e      	cbz	r6, b470e <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   b46fe:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
   b4700:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
   b4702:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
   b4704:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   b4708:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   b470c:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b470e:	f890 c006 	ldrb.w	ip, [r0, #6]
   b4712:	68c7      	ldr	r7, [r0, #12]
   b4714:	f1bc 0f06 	cmp.w	ip, #6
   b4718:	bf0c      	ite	eq
   b471a:	2604      	moveq	r6, #4
   b471c:	2603      	movne	r6, #3
   b471e:	434e      	muls	r6, r1
   b4720:	f1ac 0c02 	sub.w	ip, ip, #2
   b4724:	19b9      	adds	r1, r7, r6
    switch(type) {
   b4726:	f1bc 0f06 	cmp.w	ip, #6
   b472a:	d81d      	bhi.n	b4768 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   b472c:	e8df f00c 	tbb	[pc, ip]
   b4730:	04081c04 	.word	0x04081c04
   b4734:	040f      	.short	0x040f
   b4736:	04          	.byte	0x04
   b4737:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b4738:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
   b473a:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b473c:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
   b473e:	e005      	b.n	b474c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
   b4740:	2bfe      	cmp	r3, #254	; 0xfe
   b4742:	bf28      	it	cs
   b4744:	23fe      	movcs	r3, #254	; 0xfe
   b4746:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
   b4748:	704d      	strb	r5, [r1, #1]
          *p = g;
   b474a:	708c      	strb	r4, [r1, #2]
}
   b474c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b474e:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b4750:	704c      	strb	r4, [r1, #1]
          *p++ = b;
   b4752:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4754:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   b4756:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4758:	b913      	cbnz	r3, b4760 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   b475a:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   b475c:	70ca      	strb	r2, [r1, #3]
        } break;
   b475e:	e7f5      	b.n	b474c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4760:	435a      	muls	r2, r3
   b4762:	f3c2 2207 	ubfx	r2, r2, #8, #8
   b4766:	e7f9      	b.n	b475c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   b4768:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b476a:	704c      	strb	r4, [r1, #1]
   b476c:	e7e6      	b.n	b473c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

000b476e <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   b476e:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
   b4770:	1c4a      	adds	r2, r1, #1
   b4772:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   b4774:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   b4776:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
   b4778:	d01f      	beq.n	b47ba <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4c>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   b477a:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b477c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
   b4780:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b4782:	d00c      	beq.n	b479e <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   b4784:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   b4786:	bf1f      	itttt	ne
   b4788:	0211      	lslne	r1, r2, #8
   b478a:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
   b478e:	fbb1 f3f3 	udivne	r3, r1, r3
   b4792:	b29b      	uxthne	r3, r3
    else if(b == 255) scale = 65535 / oldBrightness;
   b4794:	bf04      	itt	eq
   b4796:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   b479a:	fbb1 f3f3 	udiveq	r3, r1, r3
            *ptr           = pixels,
   b479e:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
   b47a0:	8886      	ldrh	r6, [r0, #4]
   b47a2:	1b29      	subs	r1, r5, r4
   b47a4:	b289      	uxth	r1, r1
   b47a6:	428e      	cmp	r6, r1
   b47a8:	d906      	bls.n	b47b8 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
   b47aa:	7829      	ldrb	r1, [r5, #0]
   b47ac:	4359      	muls	r1, r3
   b47ae:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b47b2:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
   b47b6:	e7f3      	b.n	b47a0 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
   b47b8:	7202      	strb	r2, [r0, #8]
  }
}
   b47ba:	bd70      	pop	{r4, r5, r6, pc}

000b47bc <_GLOBAL__sub_I_PIN_MAP2>:
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
}
   b47bc:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b47be:	f000 fd95 	bl	b52ec <HAL_Pin_Map>
   b47c2:	4b01      	ldr	r3, [pc, #4]	; (b47c8 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b47c4:	6018      	str	r0, [r3, #0]
}
   b47c6:	bd08      	pop	{r3, pc}
   b47c8:	2003e6b4 	.word	0x2003e6b4

000b47cc <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b47cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b47d0:	b085      	sub	sp, #20
   b47d2:	461f      	mov	r7, r3
   b47d4:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b47d8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b47dc:	eba8 0902 	sub.w	r9, r8, r2
   b47e0:	eba7 0a01 	sub.w	sl, r7, r1
   b47e4:	f1b9 0f00 	cmp.w	r9, #0
   b47e8:	bfb8      	it	lt
   b47ea:	f1c9 0900 	rsblt	r9, r9, #0
   b47ee:	f1ba 0f00 	cmp.w	sl, #0
   b47f2:	bfb8      	it	lt
   b47f4:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b47f8:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b47fa:	4683      	mov	fp, r0
   b47fc:	460c      	mov	r4, r1
   b47fe:	4615      	mov	r5, r2
  if (steep) {
   b4800:	dd04      	ble.n	b480c <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b4802:	463a      	mov	r2, r7
    swap(x0, y0);
   b4804:	462c      	mov	r4, r5
    swap(x1, y1);
   b4806:	4647      	mov	r7, r8
    swap(x0, y0);
   b4808:	460d      	mov	r5, r1
    swap(x1, y1);
   b480a:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b480c:	42bc      	cmp	r4, r7
   b480e:	dd05      	ble.n	b481c <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b4810:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b4812:	4645      	mov	r5, r8
   b4814:	4690      	mov	r8, r2
  if (x0 > x1) {
   b4816:	4622      	mov	r2, r4
   b4818:	463c      	mov	r4, r7
   b481a:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b481c:	1b3e      	subs	r6, r7, r4
   b481e:	b2b2      	uxth	r2, r6
   b4820:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b4822:	eba8 0205 	sub.w	r2, r8, r5
   b4826:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b482a:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b482e:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b4832:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b4836:	4545      	cmp	r5, r8
   b4838:	bfb4      	ite	lt
   b483a:	2201      	movlt	r2, #1
   b483c:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
   b4840:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b4842:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b4844:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b4846:	42bc      	cmp	r4, r7
   b4848:	dc1c      	bgt.n	b4884 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b484a:	f8db 2000 	ldr.w	r2, [fp]
   b484e:	9303      	str	r3, [sp, #12]
    if (steep) {
   b4850:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b4852:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b4856:	bfc7      	ittee	gt
   b4858:	4629      	movgt	r1, r5
   b485a:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b485c:	462a      	movle	r2, r5
   b485e:	4621      	movle	r1, r4
   b4860:	4658      	mov	r0, fp
   b4862:	47c0      	blx	r8
    }
    err -= dy;
   b4864:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b4866:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b4868:	1ab6      	subs	r6, r6, r2
   b486a:	b2b1      	uxth	r1, r6
   b486c:	b236      	sxth	r6, r6
    if (err < 0) {
   b486e:	2e00      	cmp	r6, #0
   b4870:	da05      	bge.n	b487e <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b4872:	9a02      	ldr	r2, [sp, #8]
   b4874:	4415      	add	r5, r2
      err += dx;
   b4876:	9a00      	ldr	r2, [sp, #0]
   b4878:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b487a:	b22d      	sxth	r5, r5
      err += dx;
   b487c:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b487e:	3401      	adds	r4, #1
   b4880:	b224      	sxth	r4, r4
   b4882:	e7e0      	b.n	b4846 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b4884:	b005      	add	sp, #20
   b4886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b488a <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b488a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b488e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b4892:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b4894:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b4898:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b489c:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b489e:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b48a0:	4616      	mov	r6, r2
   b48a2:	468a      	mov	sl, r1
   b48a4:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b48a6:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b48a8:	6823      	ldr	r3, [r4, #0]
   b48aa:	f8cd 8000 	str.w	r8, [sp]
   b48ae:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b48b2:	4432      	add	r2, r6
   b48b4:	69df      	ldr	r7, [r3, #28]
   b48b6:	4651      	mov	r1, sl
   b48b8:	462b      	mov	r3, r5
   b48ba:	4620      	mov	r0, r4
   b48bc:	b212      	sxth	r2, r2
   b48be:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b48c0:	6823      	ldr	r3, [r4, #0]
   b48c2:	f8cd 8000 	str.w	r8, [sp]
   b48c6:	699f      	ldr	r7, [r3, #24]
   b48c8:	4632      	mov	r2, r6
   b48ca:	464b      	mov	r3, r9
   b48cc:	4651      	mov	r1, sl
   b48ce:	4620      	mov	r0, r4
   b48d0:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b48d2:	1e6b      	subs	r3, r5, #1
   b48d4:	eb03 010a 	add.w	r1, r3, sl
   b48d8:	6823      	ldr	r3, [r4, #0]
   b48da:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b48de:	699d      	ldr	r5, [r3, #24]
   b48e0:	4632      	mov	r2, r6
   b48e2:	464b      	mov	r3, r9
   b48e4:	b209      	sxth	r1, r1
   b48e6:	4620      	mov	r0, r4
   b48e8:	46ac      	mov	ip, r5
}
   b48ea:	b002      	add	sp, #8
   b48ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b48f0:	4760      	bx	ip

000b48f2 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b48f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b48f4:	3b01      	subs	r3, #1
   b48f6:	4413      	add	r3, r2
   b48f8:	6804      	ldr	r4, [r0, #0]
   b48fa:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b48fe:	9501      	str	r5, [sp, #4]
   b4900:	b21b      	sxth	r3, r3
   b4902:	9300      	str	r3, [sp, #0]
   b4904:	6964      	ldr	r4, [r4, #20]
   b4906:	460b      	mov	r3, r1
   b4908:	47a0      	blx	r4
}
   b490a:	b003      	add	sp, #12
   b490c:	bd30      	pop	{r4, r5, pc}

000b490e <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b490e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b4910:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b4914:	6804      	ldr	r4, [r0, #0]
   b4916:	e9cd 2500 	strd	r2, r5, [sp]
   b491a:	3b01      	subs	r3, #1
   b491c:	440b      	add	r3, r1
   b491e:	6964      	ldr	r4, [r4, #20]
   b4920:	b21b      	sxth	r3, r3
   b4922:	47a0      	blx	r4
}
   b4924:	b003      	add	sp, #12
   b4926:	bd30      	pop	{r4, r5, pc}

000b4928 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b4928:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b492c:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b4930:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4934:	4605      	mov	r5, r0
   b4936:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b4938:	460c      	mov	r4, r1
   b493a:	18ce      	adds	r6, r1, r3
   b493c:	42b4      	cmp	r4, r6
   b493e:	da0b      	bge.n	b4958 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b4940:	682b      	ldr	r3, [r5, #0]
   b4942:	f8cd 8000 	str.w	r8, [sp]
   b4946:	699f      	ldr	r7, [r3, #24]
   b4948:	4621      	mov	r1, r4
   b494a:	464b      	mov	r3, r9
   b494c:	4652      	mov	r2, sl
   b494e:	4628      	mov	r0, r5
   b4950:	3401      	adds	r4, #1
   b4952:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b4954:	b224      	sxth	r4, r4
   b4956:	e7f1      	b.n	b493c <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b4958:	b002      	add	sp, #8
   b495a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b495e <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b495e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b4960:	6802      	ldr	r2, [r0, #0]
   b4962:	9101      	str	r1, [sp, #4]
   b4964:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4968:	9100      	str	r1, [sp, #0]
   b496a:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b496c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4970:	2200      	movs	r2, #0
   b4972:	4611      	mov	r1, r2
   b4974:	47a0      	blx	r4
}
   b4976:	b002      	add	sp, #8
   b4978:	bd10      	pop	{r4, pc}

000b497a <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b497a:	4770      	bx	lr

000b497c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b497c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b497e:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b4980:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b4982:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    Print() : write_error(0) {}
   b4986:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b4988:	4d05      	ldr	r5, [pc, #20]	; (b49a0 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b498a:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b498c:	2201      	movs	r2, #1
   b498e:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b4990:	6005      	str	r5, [r0, #0]
   b4992:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b4994:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b4996:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b4998:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b499a:	7682      	strb	r2, [r0, #26]
}
   b499c:	bd30      	pop	{r4, r5, pc}
   b499e:	bf00      	nop
   b49a0:	000b740c 	.word	0x000b740c

000b49a4 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b49a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b49a8:	ed2d 8b02 	vpush	{d8}
   b49ac:	b08d      	sub	sp, #52	; 0x34
   b49ae:	4607      	mov	r7, r0
   b49b0:	9104      	str	r1, [sp, #16]
   b49b2:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b49b6:	9105      	str	r1, [sp, #20]
   b49b8:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b49bc:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b49be:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b49c2:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b49c4:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b49c8:	4281      	cmp	r1, r0
   b49ca:	dd52      	ble.n	b4a72 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b49cc:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b49d0:	4291      	cmp	r1, r2
   b49d2:	dd4e      	ble.n	b4a72 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b49d4:	2106      	movs	r1, #6
   b49d6:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b49da:	2c00      	cmp	r4, #0
   b49dc:	dd49      	ble.n	b4a72 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b49de:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b49e2:	2c00      	cmp	r4, #0
   b49e4:	dd45      	ble.n	b4a72 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b49e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b49ea:	930b      	str	r3, [sp, #44]	; 0x2c
   b49ec:	b293      	uxth	r3, r2
   b49ee:	9307      	str	r3, [sp, #28]
   b49f0:	3308      	adds	r3, #8
   b49f2:	b29b      	uxth	r3, r3
   b49f4:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b49f6:	2400      	movs	r4, #0
   b49f8:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b49fa:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b49fc:	bf1c      	itt	ne
   b49fe:	4b2c      	ldrne	r3, [pc, #176]	; (b4ab0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b4a00:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b4a02:	9e07      	ldr	r6, [sp, #28]
   b4a04:	bf16      	itet	ne
   b4a06:	191b      	addne	r3, r3, r4
      line = 0x0;
   b4a08:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b4a0a:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b4a0c:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4a0e:	9a04      	ldr	r2, [sp, #16]
   b4a10:	b2ab      	uxth	r3, r5
   b4a12:	930a      	str	r3, [sp, #40]	; 0x28
   b4a14:	fb04 f305 	mul.w	r3, r4, r5
   b4a18:	fa13 f382 	uxtah	r3, r3, r2
   b4a1c:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b4a1e:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4a22:	ee08 3a10 	vmov	s16, r3
   b4a26:	46b0      	mov	r8, r6
   b4a28:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b4a2c:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b4a30:	9b03      	ldr	r3, [sp, #12]
   b4a32:	07db      	lsls	r3, r3, #31
   b4a34:	d52f      	bpl.n	b4a96 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b4a36:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b4a38:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b4a3a:	d11f      	bne.n	b4a7c <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b4a3c:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b4a40:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b4a42:	b232      	sxth	r2, r6
   b4a44:	4651      	mov	r1, sl
   b4a46:	4638      	mov	r0, r7
   b4a48:	47d8      	blx	fp
      line >>= 1;
   b4a4a:	9b03      	ldr	r3, [sp, #12]
   b4a4c:	085b      	lsrs	r3, r3, #1
   b4a4e:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b4a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b4a52:	3601      	adds	r6, #1
   b4a54:	4498      	add	r8, r3
   b4a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b4a58:	b2b6      	uxth	r6, r6
   b4a5a:	42b3      	cmp	r3, r6
   b4a5c:	fa1f f888 	uxth.w	r8, r8
   b4a60:	d1e6      	bne.n	b4a30 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b4a62:	9b08      	ldr	r3, [sp, #32]
   b4a64:	3b01      	subs	r3, #1
   b4a66:	3401      	adds	r4, #1
   b4a68:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b4a6c:	b264      	sxtb	r4, r4
   b4a6e:	9308      	str	r3, [sp, #32]
   b4a70:	d1c3      	bne.n	b49fa <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b4a72:	b00d      	add	sp, #52	; 0x34
   b4a74:	ecbd 8b02 	vpop	{d8}
   b4a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b4a7c:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4a7e:	e9cd 9200 	strd	r9, r2, [sp]
   b4a82:	ee18 1a10 	vmov	r1, s16
   b4a86:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b4a8a:	fa0f f288 	sxth.w	r2, r8
   b4a8e:	464b      	mov	r3, r9
   b4a90:	4638      	mov	r0, r7
   b4a92:	47d8      	blx	fp
   b4a94:	e7d9      	b.n	b4a4a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b4a96:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b4a9a:	4293      	cmp	r3, r2
   b4a9c:	d0d5      	beq.n	b4a4a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b4a9e:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b4aa0:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b4aa2:	d103      	bne.n	b4aac <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b4aa4:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b4aa8:	9b06      	ldr	r3, [sp, #24]
   b4aaa:	e7ca      	b.n	b4a42 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4aac:	9a06      	ldr	r2, [sp, #24]
   b4aae:	e7e6      	b.n	b4a7e <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b4ab0:	000b6f08 	.word	0x000b6f08

000b4ab4 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b4ab4:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b4ab6:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b4ab8:	b085      	sub	sp, #20
   b4aba:	4604      	mov	r4, r0
  if (c == '\n') {
   b4abc:	d107      	bne.n	b4ace <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b4abe:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b4ac0:	8a63      	ldrh	r3, [r4, #18]
   b4ac2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b4ac6:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b4ac8:	2300      	movs	r3, #0
   b4aca:	8223      	strh	r3, [r4, #16]
   b4acc:	e021      	b.n	b4b12 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b4ace:	290d      	cmp	r1, #13
   b4ad0:	d01f      	beq.n	b4b12 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b4ad2:	7e03      	ldrb	r3, [r0, #24]
   b4ad4:	9302      	str	r3, [sp, #8]
   b4ad6:	8ac3      	ldrh	r3, [r0, #22]
   b4ad8:	9301      	str	r3, [sp, #4]
   b4ada:	8a83      	ldrh	r3, [r0, #20]
   b4adc:	9300      	str	r3, [sp, #0]
   b4ade:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b4ae2:	460b      	mov	r3, r1
   b4ae4:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b4ae8:	f7ff ff5c 	bl	b49a4 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b4aec:	7e20      	ldrb	r0, [r4, #24]
   b4aee:	8a23      	ldrh	r3, [r4, #16]
   b4af0:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b4af4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b4af8:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b4afa:	b21b      	sxth	r3, r3
   b4afc:	4602      	mov	r2, r0
   b4afe:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b4b00:	b139      	cbz	r1, b4b12 <_ZN12Adafruit_GFX5writeEh+0x5e>
   b4b02:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b4b06:	f06f 0505 	mvn.w	r5, #5
   b4b0a:	fb05 1100 	mla	r1, r5, r0, r1
   b4b0e:	428b      	cmp	r3, r1
   b4b10:	dcd6      	bgt.n	b4ac0 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b4b12:	2001      	movs	r0, #1
   b4b14:	b005      	add	sp, #20
   b4b16:	bd30      	pop	{r4, r5, pc}

000b4b18 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b4b18:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b4b1a:	8242      	strh	r2, [r0, #18]
}
   b4b1c:	4770      	bx	lr

000b4b1e <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b4b1e:	2901      	cmp	r1, #1
   b4b20:	bf38      	it	cc
   b4b22:	2101      	movcc	r1, #1
   b4b24:	7601      	strb	r1, [r0, #24]
}
   b4b26:	4770      	bx	lr

000b4b28 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b4b28:	82c1      	strh	r1, [r0, #22]
   b4b2a:	8281      	strh	r1, [r0, #20]
}
   b4b2c:	4770      	bx	lr

000b4b2e <_ZN12Adafruit_GFX11getRotationEv>:
}
   b4b2e:	7e40      	ldrb	r0, [r0, #25]
   b4b30:	4770      	bx	lr

000b4b32 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   b4b32:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
   b4b36:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
   b4b3a:	7643      	strb	r3, [r0, #25]
  switch(rotation) {
   b4b3c:	07c9      	lsls	r1, r1, #31
    _width  = WIDTH;
   b4b3e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4b42:	bf59      	ittee	pl
   b4b44:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   b4b46:	81c2      	strhpl	r2, [r0, #14]
    _width  = HEIGHT;
   b4b48:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   b4b4a:	81c3      	strhmi	r3, [r0, #14]
}
   b4b4c:	4770      	bx	lr

000b4b4e <_ZN12Adafruit_GFX5widthEv>:
}
   b4b4e:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b4b52:	4770      	bx	lr

000b4b54 <_ZN12Adafruit_GFX6heightEv>:
}
   b4b54:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b4b58:	4770      	bx	lr
	...

000b4b5c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b4b5e:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b4b60:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4b64:	2d02      	cmp	r5, #2
   b4b66:	d069      	beq.n	b4c3c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b4b68:	2d03      	cmp	r5, #3
   b4b6a:	f000 8099 	beq.w	b4ca0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b4b6e:	2d01      	cmp	r5, #1
   b4b70:	d16c      	bne.n	b4c4c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b4b72:	8905      	ldrh	r5, [r0, #8]
   b4b74:	43d2      	mvns	r2, r2
   b4b76:	442a      	add	r2, r5
   b4b78:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b4b7a:	2a00      	cmp	r2, #0
   b4b7c:	db5d      	blt.n	b4c3a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4b7e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4b82:	4295      	cmp	r5, r2
   b4b84:	dd59      	ble.n	b4c3a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b4b86:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b4b88:	bfbe      	ittt	lt
   b4b8a:	185b      	addlt	r3, r3, r1
   b4b8c:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4b8e:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b4b90:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4b94:	18cd      	adds	r5, r1, r3
   b4b96:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4b98:	bfc4      	itt	gt
   b4b9a:	1a43      	subgt	r3, r0, r1
   b4b9c:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b4b9e:	2b00      	cmp	r3, #0
   b4ba0:	dd4b      	ble.n	b4c3a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b4ba2:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b4ba6:	f8df c120 	ldr.w	ip, [pc, #288]	; b4cc8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b4baa:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b4bae:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b4bb2:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4bb4:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b4bb8:	d01a      	beq.n	b4bf0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b4bba:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b4bbe:	4e40      	ldr	r6, [pc, #256]	; (b4cc0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b4bc0:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b4bc2:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4bc4:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4bc6:	bf3f      	itttt	cc
   b4bc8:	eba5 0e03 	subcc.w	lr, r5, r3
   b4bcc:	26ff      	movcc	r6, #255	; 0xff
   b4bce:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4bd2:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b4bd4:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b4bd8:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4bda:	bf0c      	ite	eq
   b4bdc:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b4bde:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b4be0:	42ab      	cmp	r3, r5
   b4be2:	f80c 6002 	strb.w	r6, [ip, r2]
   b4be6:	d328      	bcc.n	b4c3a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b4be8:	3908      	subs	r1, #8
   b4bea:	440b      	add	r3, r1
   b4bec:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b4bee:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b4bf0:	2b07      	cmp	r3, #7
   b4bf2:	d919      	bls.n	b4c28 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4bf4:	2c01      	cmp	r4, #1
   b4bf6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b4bfa:	bf18      	it	ne
   b4bfc:	2500      	movne	r5, #0
   b4bfe:	b2ed      	uxtb	r5, r5
   b4c00:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4c04:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b4c06:	3a08      	subs	r2, #8
   b4c08:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4c0a:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4c0c:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4c10:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4c14:	d8f7      	bhi.n	b4c06 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b4c16:	f1a3 0208 	sub.w	r2, r3, #8
   b4c1a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4c1e:	3201      	adds	r2, #1
   b4c20:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4c24:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b4c28:	b13b      	cbz	r3, b4c3a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b4c2a:	4a26      	ldr	r2, [pc, #152]	; (b4cc4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b4c2c:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b4c2e:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4c30:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4c32:	bf0c      	ite	eq
   b4c34:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b4c36:	4393      	bicne	r3, r2
   b4c38:	7003      	strb	r3, [r0, #0]
}
   b4c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4c3c:	8945      	ldrh	r5, [r0, #10]
   b4c3e:	43d2      	mvns	r2, r2
   b4c40:	442a      	add	r2, r5
      x -= (w-1);
   b4c42:	18cd      	adds	r5, r1, r3
   b4c44:	8901      	ldrh	r1, [r0, #8]
   b4c46:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b4c48:	b212      	sxth	r2, r2
      x -= (w-1);
   b4c4a:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b4c4c:	2a00      	cmp	r2, #0
   b4c4e:	dbf4      	blt.n	b4c3a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4c50:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4c54:	4295      	cmp	r5, r2
   b4c56:	ddf0      	ble.n	b4c3a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b4c58:	2900      	cmp	r1, #0
    w += x;
   b4c5a:	bfbe      	ittt	lt
   b4c5c:	185b      	addlt	r3, r3, r1
   b4c5e:	b21b      	sxthlt	r3, r3
    x = 0;
   b4c60:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b4c62:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4c66:	18ce      	adds	r6, r1, r3
   b4c68:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4c6a:	bfc4      	itt	gt
   b4c6c:	1a6b      	subgt	r3, r5, r1
   b4c6e:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4c70:	2b00      	cmp	r3, #0
   b4c72:	dde2      	ble.n	b4c3a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4c74:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b4c76:	2580      	movs	r5, #128	; 0x80
   b4c78:	fb10 1105 	smlabb	r1, r0, r5, r1
   b4c7c:	4812      	ldr	r0, [pc, #72]	; (b4cc8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b4c7e:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b4c80:	f002 0007 	and.w	r0, r2, #7
   b4c84:	2201      	movs	r2, #1
   b4c86:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b4c88:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4c8a:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b4c8c:	440b      	add	r3, r1
   b4c8e:	d10c      	bne.n	b4caa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b4c90:	428b      	cmp	r3, r1
   b4c92:	d0d2      	beq.n	b4c3a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4c94:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4c98:	4310      	orrs	r0, r2
   b4c9a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4c9e:	e7f7      	b.n	b4c90 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b4ca0:	18cd      	adds	r5, r1, r3
   b4ca2:	8941      	ldrh	r1, [r0, #10]
   b4ca4:	1b49      	subs	r1, r1, r5
   b4ca6:	b209      	sxth	r1, r1
      break;
   b4ca8:	e767      	b.n	b4b7a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b4caa:	43d2      	mvns	r2, r2
   b4cac:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b4cae:	428b      	cmp	r3, r1
   b4cb0:	d0c3      	beq.n	b4c3a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b4cb2:	f811 0b01 	ldrb.w	r0, [r1], #1
   b4cb6:	4010      	ands	r0, r2
   b4cb8:	f801 0c01 	strb.w	r0, [r1, #-1]
   b4cbc:	e7f7      	b.n	b4cae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b4cbe:	bf00      	nop
   b4cc0:	2003e1c8 	.word	0x2003e1c8
   b4cc4:	2003e1c0 	.word	0x2003e1c0
   b4cc8:	2003e1d0 	.word	0x2003e1d0

000b4ccc <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b4cce:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b4cd0:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b4cd4:	2d02      	cmp	r5, #2
   b4cd6:	d034      	beq.n	b4d42 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b4cd8:	2d03      	cmp	r5, #3
   b4cda:	f000 809b 	beq.w	b4e14 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b4cde:	2d01      	cmp	r5, #1
   b4ce0:	d137      	bne.n	b4d52 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b4ce2:	18d5      	adds	r5, r2, r3
   b4ce4:	8902      	ldrh	r2, [r0, #8]
   b4ce6:	1b52      	subs	r2, r2, r5
   b4ce8:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b4cea:	2900      	cmp	r1, #0
   b4cec:	f2c0 8091 	blt.w	b4e12 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4cf0:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b4cf4:	428d      	cmp	r5, r1
   b4cf6:	f340 808c 	ble.w	b4e12 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b4cfa:	2a00      	cmp	r2, #0
    w += x;
   b4cfc:	bfbe      	ittt	lt
   b4cfe:	189b      	addlt	r3, r3, r2
   b4d00:	b21b      	sxthlt	r3, r3
    x = 0;
   b4d02:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b4d04:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b4d08:	18d6      	adds	r6, r2, r3
   b4d0a:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b4d0c:	bfc4      	itt	gt
   b4d0e:	1aab      	subgt	r3, r5, r2
   b4d10:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b4d12:	2b00      	cmp	r3, #0
   b4d14:	dd7d      	ble.n	b4e12 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b4d16:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b4d18:	2580      	movs	r5, #128	; 0x80
   b4d1a:	fb10 2205 	smlabb	r2, r0, r5, r2
   b4d1e:	4845      	ldr	r0, [pc, #276]	; (b4e34 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b4d20:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b4d22:	f001 0007 	and.w	r0, r1, #7
   b4d26:	2101      	movs	r1, #1
   b4d28:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b4d2a:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b4d2c:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b4d2e:	4413      	add	r3, r2
   b4d30:	d175      	bne.n	b4e1e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b4d32:	429a      	cmp	r2, r3
   b4d34:	d06d      	beq.n	b4e12 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4d36:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4d3a:	4308      	orrs	r0, r1
   b4d3c:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4d40:	e7f7      	b.n	b4d32 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b4d42:	8905      	ldrh	r5, [r0, #8]
   b4d44:	43c9      	mvns	r1, r1
   b4d46:	4429      	add	r1, r5
      y -= (h-1);
   b4d48:	18d5      	adds	r5, r2, r3
   b4d4a:	8942      	ldrh	r2, [r0, #10]
   b4d4c:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b4d4e:	b209      	sxth	r1, r1
      y -= (h-1);
   b4d50:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b4d52:	2900      	cmp	r1, #0
   b4d54:	db5d      	blt.n	b4e12 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4d56:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b4d5a:	428d      	cmp	r5, r1
   b4d5c:	dd59      	ble.n	b4e12 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b4d5e:	2a00      	cmp	r2, #0
    __h += __y;
   b4d60:	bfbe      	ittt	lt
   b4d62:	189b      	addlt	r3, r3, r2
   b4d64:	b21b      	sxthlt	r3, r3
    __y = 0;
   b4d66:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b4d68:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b4d6c:	18d5      	adds	r5, r2, r3
   b4d6e:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b4d70:	bfc4      	itt	gt
   b4d72:	1a83      	subgt	r3, r0, r2
   b4d74:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b4d76:	2b00      	cmp	r3, #0
   b4d78:	dd4b      	ble.n	b4e12 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b4d7a:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b4d7e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b4e34 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b4d82:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b4d86:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b4d8a:	b2db      	uxtb	r3, r3
  pBuf += x;
   b4d8c:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b4d90:	d01a      	beq.n	b4dc8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b4d92:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b4d96:	4e28      	ldr	r6, [pc, #160]	; (b4e38 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b4d98:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b4d9a:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b4d9c:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b4d9e:	bf3f      	itttt	cc
   b4da0:	eba5 0e03 	subcc.w	lr, r5, r3
   b4da4:	26ff      	movcc	r6, #255	; 0xff
   b4da6:	fa46 f60e 	asrcc.w	r6, r6, lr
   b4daa:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b4dac:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b4db0:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4db2:	bf0c      	ite	eq
   b4db4:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b4db6:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b4db8:	42ab      	cmp	r3, r5
   b4dba:	f80c 6001 	strb.w	r6, [ip, r1]
   b4dbe:	d328      	bcc.n	b4e12 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b4dc0:	3a08      	subs	r2, #8
   b4dc2:	4413      	add	r3, r2
   b4dc4:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b4dc6:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b4dc8:	2b07      	cmp	r3, #7
   b4dca:	d919      	bls.n	b4e00 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b4dcc:	2c01      	cmp	r4, #1
   b4dce:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b4dd2:	bf18      	it	ne
   b4dd4:	2500      	movne	r5, #0
   b4dd6:	b2ed      	uxtb	r5, r5
   b4dd8:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b4ddc:	461a      	mov	r2, r3
      h -= 8;
   b4dde:	3a08      	subs	r2, #8
   b4de0:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b4de2:	2a07      	cmp	r2, #7
      *pBuf = val;
   b4de4:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b4de8:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b4dec:	d8f7      	bhi.n	b4dde <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b4dee:	f1a3 0208 	sub.w	r2, r3, #8
   b4df2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b4df6:	3201      	adds	r2, #1
   b4df8:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b4dfc:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b4e00:	b13b      	cbz	r3, b4e12 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b4e02:	4a0e      	ldr	r2, [pc, #56]	; (b4e3c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b4e04:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b4e06:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b4e08:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b4e0a:	bf0c      	ite	eq
   b4e0c:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b4e0e:	4393      	bicne	r3, r2
   b4e10:	7003      	strb	r3, [r0, #0]
}
   b4e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b4e14:	8945      	ldrh	r5, [r0, #10]
   b4e16:	43c9      	mvns	r1, r1
   b4e18:	4429      	add	r1, r5
   b4e1a:	b209      	sxth	r1, r1
      break;
   b4e1c:	e765      	b.n	b4cea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b4e1e:	43c9      	mvns	r1, r1
   b4e20:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b4e22:	429a      	cmp	r2, r3
   b4e24:	d0f5      	beq.n	b4e12 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b4e26:	f812 0b01 	ldrb.w	r0, [r2], #1
   b4e2a:	4008      	ands	r0, r1
   b4e2c:	f802 0c01 	strb.w	r0, [r2, #-1]
   b4e30:	e7f7      	b.n	b4e22 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b4e32:	bf00      	nop
   b4e34:	2003e1d0 	.word	0x2003e1d0
   b4e38:	2003e1c8 	.word	0x2003e1c8
   b4e3c:	2003e1c0 	.word	0x2003e1c0

000b4e40 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b4e40:	4770      	bx	lr
	...

000b4e44 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b4e46:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4e48:	4606      	mov	r6, r0
   b4e4a:	4614      	mov	r4, r2
   b4e4c:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b4e4e:	db2d      	blt.n	b4eac <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4e50:	f7ff fe7d 	bl	b4b4e <_ZN12Adafruit_GFX5widthEv>
   b4e54:	42a8      	cmp	r0, r5
   b4e56:	dd29      	ble.n	b4eac <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4e58:	2c00      	cmp	r4, #0
   b4e5a:	db27      	blt.n	b4eac <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b4e5c:	4630      	mov	r0, r6
   b4e5e:	f7ff fe79 	bl	b4b54 <_ZN12Adafruit_GFX6heightEv>
   b4e62:	42a0      	cmp	r0, r4
   b4e64:	dd22      	ble.n	b4eac <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b4e66:	4630      	mov	r0, r6
   b4e68:	f7ff fe61 	bl	b4b2e <_ZN12Adafruit_GFX11getRotationEv>
   b4e6c:	2802      	cmp	r0, #2
   b4e6e:	d01e      	beq.n	b4eae <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b4e70:	2803      	cmp	r0, #3
   b4e72:	d025      	beq.n	b4ec0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b4e74:	2801      	cmp	r0, #1
   b4e76:	d104      	bne.n	b4e82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b4e78:	8933      	ldrh	r3, [r6, #8]
   b4e7a:	43e2      	mvns	r2, r4
   b4e7c:	441a      	add	r2, r3
    break;
   b4e7e:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b4e80:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b4e82:	2c00      	cmp	r4, #0
   b4e84:	4622      	mov	r2, r4
   b4e86:	bfb8      	it	lt
   b4e88:	1de2      	addlt	r2, r4, #7
   b4e8a:	10d2      	asrs	r2, r2, #3
   b4e8c:	2180      	movs	r1, #128	; 0x80
   b4e8e:	fb12 5501 	smlabb	r5, r2, r1, r5
   b4e92:	490e      	ldr	r1, [pc, #56]	; (b4ecc <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b4e94:	2201      	movs	r2, #1
   b4e96:	f004 0407 	and.w	r4, r4, #7
   b4e9a:	574b      	ldrsb	r3, [r1, r5]
   b4e9c:	fa02 f404 	lsl.w	r4, r2, r4
   b4ea0:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b4ea2:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b4ea4:	bf0c      	ite	eq
   b4ea6:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b4ea8:	43a3      	bicne	r3, r4
   b4eaa:	554b      	strb	r3, [r1, r5]
}
   b4eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b4eae:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b4eb0:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b4eb2:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b4eb4:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b4eb6:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b4eb8:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b4eba:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b4ebc:	b224      	sxth	r4, r4
    break;
   b4ebe:	e7e0      	b.n	b4e82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b4ec0:	8973      	ldrh	r3, [r6, #10]
   b4ec2:	3b01      	subs	r3, #1
   b4ec4:	1b5b      	subs	r3, r3, r5
    break;
   b4ec6:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b4ec8:	b21c      	sxth	r4, r3
    break;
   b4eca:	e7da      	b.n	b4e82 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b4ecc:	2003e1d0 	.word	0x2003e1d0

000b4ed0 <_ZN16Adafruit_SSD1306D0Ev>:
   b4ed0:	b510      	push	{r4, lr}
   b4ed2:	2124      	movs	r1, #36	; 0x24
   b4ed4:	4604      	mov	r4, r0
   b4ed6:	f7ff f8e0 	bl	b409a <_ZdlPvj>
   b4eda:	4620      	mov	r0, r4
   b4edc:	bd10      	pop	{r4, pc}
	...

000b4ee0 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b4ee0:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b4ee2:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b4ee4:	4604      	mov	r4, r0
   b4ee6:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b4ee8:	2180      	movs	r1, #128	; 0x80
   b4eea:	f7ff fd47 	bl	b497c <_ZN12Adafruit_GFXC1Ess>
   b4eee:	4b06      	ldr	r3, [pc, #24]	; (b4f08 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b4ef0:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b4ef2:	23ff      	movs	r3, #255	; 0xff
   b4ef4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b4ef8:	7763      	strb	r3, [r4, #29]
   b4efa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4efe:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b4f00:	f884 5020 	strb.w	r5, [r4, #32]
}
   b4f04:	4620      	mov	r0, r4
   b4f06:	bd38      	pop	{r3, r4, r5, pc}
   b4f08:	000b7444 	.word	0x000b7444

000b4f0c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b4f0c:	4802      	ldr	r0, [pc, #8]	; (b4f18 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b4f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b4f12:	2100      	movs	r1, #0
   b4f14:	f001 bf12 	b.w	b6d3c <memset>
   b4f18:	2003e1d0 	.word	0x2003e1d0

000b4f1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b4f1c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b4f1e:	4c0b      	ldr	r4, [pc, #44]	; (b4f4c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b4f20:	7821      	ldrb	r1, [r4, #0]
   b4f22:	f3bf 8f5b 	dmb	ish
   b4f26:	f011 0101 	ands.w	r1, r1, #1
   b4f2a:	d10b      	bne.n	b4f44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4f2c:	4620      	mov	r0, r4
   b4f2e:	9101      	str	r1, [sp, #4]
   b4f30:	f7ff f8c2 	bl	b40b8 <__cxa_guard_acquire>
   b4f34:	9901      	ldr	r1, [sp, #4]
   b4f36:	b128      	cbz	r0, b4f44 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b4f38:	4805      	ldr	r0, [pc, #20]	; (b4f50 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4f3a:	f000 fee5 	bl	b5d08 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4f3e:	4620      	mov	r0, r4
   b4f40:	f7ff f8bf 	bl	b40c2 <__cxa_guard_release>
        return instance;
    }
   b4f44:	4802      	ldr	r0, [pc, #8]	; (b4f50 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b4f46:	b002      	add	sp, #8
   b4f48:	bd10      	pop	{r4, pc}
   b4f4a:	bf00      	nop
   b4f4c:	2003e6b8 	.word	0x2003e6b8
   b4f50:	2003e6bc 	.word	0x2003e6bc

000b4f54 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b4f54:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b4f56:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b4f5a:	b143      	cbz	r3, b4f6e <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b4f5c:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b4f5e:	f7ff ffdd 	bl	b4f1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b4f62:	9901      	ldr	r1, [sp, #4]
}
   b4f64:	b003      	add	sp, #12
   b4f66:	f85d eb04 	ldr.w	lr, [sp], #4
   b4f6a:	f000 bf81 	b.w	b5e70 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4f6e:	460b      	mov	r3, r1
   b4f70:	7f81      	ldrb	r1, [r0, #30]
   b4f72:	7f40      	ldrb	r0, [r0, #29]
   b4f74:	2201      	movs	r2, #1
}
   b4f76:	b003      	add	sp, #12
   b4f78:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b4f7c:	f001 bd15 	b.w	b69aa <shiftOut>

000b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4f80:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b4f82:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b4f86:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b4f88:	4604      	mov	r4, r0
   b4f8a:	460d      	mov	r5, r1
  if (sid != -1)
   b4f8c:	d01d      	beq.n	b4fca <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b4f8e:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b4f92:	2101      	movs	r1, #1
   b4f94:	b280      	uxth	r0, r0
   b4f96:	f001 fcd8 	bl	b694a <digitalWrite>
    digitalWrite(dc, LOW);
   b4f9a:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b4f9e:	2100      	movs	r1, #0
   b4fa0:	b280      	uxth	r0, r0
   b4fa2:	f001 fcd2 	bl	b694a <digitalWrite>
    digitalWrite(cs, LOW);
   b4fa6:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4faa:	2100      	movs	r1, #0
   b4fac:	b280      	uxth	r0, r0
   b4fae:	f001 fccc 	bl	b694a <digitalWrite>
    fastSPIwrite(c);
   b4fb2:	4629      	mov	r1, r5
   b4fb4:	4620      	mov	r0, r4
   b4fb6:	f7ff ffcd 	bl	b4f54 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b4fba:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b4fbe:	2101      	movs	r1, #1
}
   b4fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b4fc4:	b280      	uxth	r0, r0
   b4fc6:	f001 bcc0 	b.w	b694a <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b4fca:	f001 fd2b 	bl	b6a24 <_Z19__fetch_global_Wirev>
   b4fce:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b4fd2:	f000 fcb5 	bl	b5940 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b4fd6:	f001 fd25 	bl	b6a24 <_Z19__fetch_global_Wirev>
   b4fda:	6803      	ldr	r3, [r0, #0]
   b4fdc:	2100      	movs	r1, #0
   b4fde:	689b      	ldr	r3, [r3, #8]
   b4fe0:	4798      	blx	r3
    Wire.write(c);
   b4fe2:	f001 fd1f 	bl	b6a24 <_Z19__fetch_global_Wirev>
   b4fe6:	6803      	ldr	r3, [r0, #0]
   b4fe8:	4629      	mov	r1, r5
   b4fea:	689b      	ldr	r3, [r3, #8]
   b4fec:	4798      	blx	r3
    Wire.endTransmission();
   b4fee:	f001 fd19 	bl	b6a24 <_Z19__fetch_global_Wirev>
}
   b4ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b4ff6:	f000 bcaa 	b.w	b594e <_ZN7TwoWire15endTransmissionEv>
	...

000b4ffc <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b4ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b4ffe:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b5000:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b5002:	f7ff ffbd 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b5006:	2100      	movs	r1, #0
   b5008:	4620      	mov	r0, r4
   b500a:	f7ff ffb9 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b500e:	217f      	movs	r1, #127	; 0x7f
   b5010:	4620      	mov	r0, r4
   b5012:	f7ff ffb5 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b5016:	2122      	movs	r1, #34	; 0x22
   b5018:	4620      	mov	r0, r4
   b501a:	f7ff ffb1 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b501e:	2100      	movs	r1, #0
   b5020:	4620      	mov	r0, r4
   b5022:	f7ff ffad 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b5026:	2107      	movs	r1, #7
   b5028:	4620      	mov	r0, r4
   b502a:	f7ff ffa9 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b502e:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b5032:	4f29      	ldr	r7, [pc, #164]	; (b50d8 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b5034:	3301      	adds	r3, #1
   b5036:	d02a      	beq.n	b508e <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b5038:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b503c:	2101      	movs	r1, #1
   b503e:	b280      	uxth	r0, r0
   b5040:	f001 fc83 	bl	b694a <digitalWrite>
    digitalWrite(dc, HIGH);
   b5044:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5048:	2101      	movs	r1, #1
   b504a:	b280      	uxth	r0, r0
   b504c:	f001 fc7d 	bl	b694a <digitalWrite>
    digitalWrite(cs, LOW);
   b5050:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5054:	2100      	movs	r1, #0
   b5056:	b280      	uxth	r0, r0
   b5058:	f001 fc77 	bl	b694a <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b505c:	2001      	movs	r0, #1
   b505e:	f000 f925 	bl	b52ac <HAL_Delay_Microseconds>
   b5062:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5066:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b5068:	f817 1b01 	ldrb.w	r1, [r7], #1
   b506c:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b506e:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b5070:	f7ff ff70 	bl	b4f54 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5074:	2d00      	cmp	r5, #0
   b5076:	d1f6      	bne.n	b5066 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b5078:	2001      	movs	r0, #1
   b507a:	f000 f917 	bl	b52ac <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b507e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5082:	2101      	movs	r1, #1
}
   b5084:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b5088:	b280      	uxth	r0, r0
   b508a:	f001 bc5e 	b.w	b694a <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b508e:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b5090:	f001 fcc8 	bl	b6a24 <_Z19__fetch_global_Wirev>
   b5094:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b5098:	f000 fc52 	bl	b5940 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b509c:	f001 fcc2 	bl	b6a24 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b50a0:	6803      	ldr	r3, [r0, #0]
   b50a2:	2140      	movs	r1, #64	; 0x40
   b50a4:	689b      	ldr	r3, [r3, #8]
   b50a6:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b50a8:	f105 0610 	add.w	r6, r5, #16
   b50ac:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b50ae:	f001 fcb9 	bl	b6a24 <_Z19__fetch_global_Wirev>
   b50b2:	6803      	ldr	r3, [r0, #0]
   b50b4:	5d79      	ldrb	r1, [r7, r5]
   b50b6:	689b      	ldr	r3, [r3, #8]
   b50b8:	4798      	blx	r3
		i++;
   b50ba:	1c6b      	adds	r3, r5, #1
   b50bc:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b50be:	42ae      	cmp	r6, r5
   b50c0:	d1f5      	bne.n	b50ae <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b50c2:	f001 fcaf 	bl	b6a24 <_Z19__fetch_global_Wirev>
   b50c6:	f000 fc42 	bl	b594e <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b50ca:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b50ce:	d100      	bne.n	b50d2 <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b50d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b50d2:	4635      	mov	r5, r6
   b50d4:	e7dc      	b.n	b5090 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b50d6:	bf00      	nop
   b50d8:	2003e1d0 	.word	0x2003e1d0

000b50dc <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b50dc:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b50de:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b50e2:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b50e4:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b50e6:	4604      	mov	r4, r0
   b50e8:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b50ea:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b50ec:	f000 80c9 	beq.w	b5282 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b50f0:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b50f4:	2101      	movs	r1, #1
   b50f6:	b280      	uxth	r0, r0
   b50f8:	f001 fc16 	bl	b6928 <pinMode>
    pinMode(cs, OUTPUT);
   b50fc:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5100:	2101      	movs	r1, #1
   b5102:	b280      	uxth	r0, r0
   b5104:	f001 fc10 	bl	b6928 <pinMode>
    if (!hwSPI){
   b5108:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b510c:	2b00      	cmp	r3, #0
   b510e:	f000 80a6 	beq.w	b525e <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b5112:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5116:	2101      	movs	r1, #1
   b5118:	b280      	uxth	r0, r0
   b511a:	f001 fc16 	bl	b694a <digitalWrite>
        instance().setBitOrder(order);
   b511e:	f7ff fefd 	bl	b4f1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5122:	2101      	movs	r1, #1
   b5124:	f000 fe0e 	bl	b5d44 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b5128:	f7ff fef8 	bl	b4f1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b512c:	2110      	movs	r1, #16
   b512e:	f000 fe79 	bl	b5e24 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b5132:	f7ff fef3 	bl	b4f1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5136:	2100      	movs	r1, #0
   b5138:	f000 fe18 	bl	b5d6c <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b513c:	f7ff feee 	bl	b4f1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5140:	f000 fdec 	bl	b5d1c <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b5144:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5148:	2101      	movs	r1, #1
   b514a:	b280      	uxth	r0, r0
   b514c:	f001 fbec 	bl	b6928 <pinMode>
  digitalWrite(rst, HIGH);
   b5150:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5154:	2101      	movs	r1, #1
   b5156:	b280      	uxth	r0, r0
   b5158:	f001 fbf7 	bl	b694a <digitalWrite>
  delay(1);
   b515c:	2001      	movs	r0, #1
   b515e:	f000 fb51 	bl	b5804 <delay>
  digitalWrite(rst, LOW);
   b5162:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5166:	2100      	movs	r1, #0
   b5168:	b280      	uxth	r0, r0
   b516a:	f001 fbee 	bl	b694a <digitalWrite>
  delay(10);
   b516e:	200a      	movs	r0, #10
   b5170:	f000 fb48 	bl	b5804 <delay>
  digitalWrite(rst, HIGH);
   b5174:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5178:	2101      	movs	r1, #1
   b517a:	b280      	uxth	r0, r0
   b517c:	f001 fbe5 	bl	b694a <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b5180:	4620      	mov	r0, r4
   b5182:	21ae      	movs	r1, #174	; 0xae
   b5184:	f7ff fefc 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b5188:	4620      	mov	r0, r4
   b518a:	21d5      	movs	r1, #213	; 0xd5
   b518c:	f7ff fef8 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b5190:	4620      	mov	r0, r4
   b5192:	2180      	movs	r1, #128	; 0x80
   b5194:	f7ff fef4 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b5198:	4620      	mov	r0, r4
   b519a:	21a8      	movs	r1, #168	; 0xa8
   b519c:	f7ff fef0 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b51a0:	4620      	mov	r0, r4
   b51a2:	213f      	movs	r1, #63	; 0x3f
   b51a4:	f7ff feec 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b51a8:	4620      	mov	r0, r4
   b51aa:	21d3      	movs	r1, #211	; 0xd3
   b51ac:	f7ff fee8 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b51b0:	4620      	mov	r0, r4
   b51b2:	2100      	movs	r1, #0
   b51b4:	f7ff fee4 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b51b8:	4620      	mov	r0, r4
   b51ba:	2140      	movs	r1, #64	; 0x40
   b51bc:	f7ff fee0 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b51c0:	218d      	movs	r1, #141	; 0x8d
   b51c2:	4620      	mov	r0, r4
   b51c4:	f7ff fedc 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b51c8:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b51ca:	bf0c      	ite	eq
   b51cc:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b51ce:	2114      	movne	r1, #20
   b51d0:	4620      	mov	r0, r4
   b51d2:	f7ff fed5 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b51d6:	4620      	mov	r0, r4
   b51d8:	2120      	movs	r1, #32
   b51da:	f7ff fed1 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b51de:	4620      	mov	r0, r4
   b51e0:	2100      	movs	r1, #0
   b51e2:	f7ff fecd 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b51e6:	4620      	mov	r0, r4
   b51e8:	21a1      	movs	r1, #161	; 0xa1
   b51ea:	f7ff fec9 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b51ee:	4620      	mov	r0, r4
   b51f0:	21c8      	movs	r1, #200	; 0xc8
   b51f2:	f7ff fec5 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b51f6:	4620      	mov	r0, r4
   b51f8:	21da      	movs	r1, #218	; 0xda
   b51fa:	f7ff fec1 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b51fe:	4620      	mov	r0, r4
   b5200:	2112      	movs	r1, #18
   b5202:	f7ff febd 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b5206:	2181      	movs	r1, #129	; 0x81
   b5208:	4620      	mov	r0, r4
   b520a:	f7ff feb9 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b520e:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b5210:	bf0c      	ite	eq
   b5212:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b5214:	21cf      	movne	r1, #207	; 0xcf
   b5216:	4620      	mov	r0, r4
   b5218:	f7ff feb2 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b521c:	21d9      	movs	r1, #217	; 0xd9
   b521e:	4620      	mov	r0, r4
   b5220:	f7ff feae 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5224:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b5226:	bf0c      	ite	eq
   b5228:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b522a:	21f1      	movne	r1, #241	; 0xf1
   b522c:	4620      	mov	r0, r4
   b522e:	f7ff fea7 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b5232:	4620      	mov	r0, r4
   b5234:	21db      	movs	r1, #219	; 0xdb
   b5236:	f7ff fea3 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b523a:	4620      	mov	r0, r4
   b523c:	2140      	movs	r1, #64	; 0x40
   b523e:	f7ff fe9f 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b5242:	4620      	mov	r0, r4
   b5244:	21a4      	movs	r1, #164	; 0xa4
   b5246:	f7ff fe9b 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b524a:	4620      	mov	r0, r4
   b524c:	21a6      	movs	r1, #166	; 0xa6
   b524e:	f7ff fe97 	bl	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b5252:	4620      	mov	r0, r4
   b5254:	21af      	movs	r1, #175	; 0xaf
}
   b5256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b525a:	f7ff be91 	b.w	b4f80 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b525e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5262:	2101      	movs	r1, #1
   b5264:	b280      	uxth	r0, r0
   b5266:	f001 fb5f 	bl	b6928 <pinMode>
    	pinMode(sclk, OUTPUT);
   b526a:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b526e:	2101      	movs	r1, #1
   b5270:	b280      	uxth	r0, r0
   b5272:	f001 fb59 	bl	b6928 <pinMode>
    if (hwSPI){
   b5276:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b527a:	2b00      	cmp	r3, #0
   b527c:	f43f af62 	beq.w	b5144 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b5280:	e747      	b.n	b5112 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b5282:	f001 fbcf 	bl	b6a24 <_Z19__fetch_global_Wirev>
   b5286:	f000 fb51 	bl	b592c <_ZN7TwoWire5beginEv>
   b528a:	e75b      	b.n	b5144 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b528c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b528c:	b508      	push	{r3, lr}
   b528e:	4b02      	ldr	r3, [pc, #8]	; (b5298 <os_mutex_recursive_create+0xc>)
   b5290:	681b      	ldr	r3, [r3, #0]
   b5292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5294:	9301      	str	r3, [sp, #4]
   b5296:	bd08      	pop	{r3, pc}
   b5298:	00030248 	.word	0x00030248

000b529c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b529c:	b508      	push	{r3, lr}
   b529e:	4b02      	ldr	r3, [pc, #8]	; (b52a8 <HAL_RNG_GetRandomNumber+0xc>)
   b52a0:	681b      	ldr	r3, [r3, #0]
   b52a2:	685b      	ldr	r3, [r3, #4]
   b52a4:	9301      	str	r3, [sp, #4]
   b52a6:	bd08      	pop	{r3, pc}
   b52a8:	00030218 	.word	0x00030218

000b52ac <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b52ac:	b508      	push	{r3, lr}
   b52ae:	4b02      	ldr	r3, [pc, #8]	; (b52b8 <HAL_Delay_Microseconds+0xc>)
   b52b0:	681b      	ldr	r3, [r3, #0]
   b52b2:	68db      	ldr	r3, [r3, #12]
   b52b4:	9301      	str	r3, [sp, #4]
   b52b6:	bd08      	pop	{r3, pc}
   b52b8:	00030218 	.word	0x00030218

000b52bc <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b52bc:	b508      	push	{r3, lr}
   b52be:	4b02      	ldr	r3, [pc, #8]	; (b52c8 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b52c0:	681b      	ldr	r3, [r3, #0]
   b52c2:	691b      	ldr	r3, [r3, #16]
   b52c4:	9301      	str	r3, [sp, #4]
   b52c6:	bd08      	pop	{r3, pc}
   b52c8:	00030218 	.word	0x00030218

000b52cc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b52cc:	b508      	push	{r3, lr}
   b52ce:	4b02      	ldr	r3, [pc, #8]	; (b52d8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b52d0:	681b      	ldr	r3, [r3, #0]
   b52d2:	695b      	ldr	r3, [r3, #20]
   b52d4:	9301      	str	r3, [sp, #4]
   b52d6:	bd08      	pop	{r3, pc}
   b52d8:	00030218 	.word	0x00030218

000b52dc <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b52dc:	b508      	push	{r3, lr}
   b52de:	4b02      	ldr	r3, [pc, #8]	; (b52e8 <hal_timer_millis+0xc>)
   b52e0:	681b      	ldr	r3, [r3, #0]
   b52e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b52e4:	9301      	str	r3, [sp, #4]
   b52e6:	bd08      	pop	{r3, pc}
   b52e8:	00030218 	.word	0x00030218

000b52ec <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b52ec:	b508      	push	{r3, lr}
   b52ee:	4b02      	ldr	r3, [pc, #8]	; (b52f8 <HAL_Pin_Map+0xc>)
   b52f0:	681b      	ldr	r3, [r3, #0]
   b52f2:	681b      	ldr	r3, [r3, #0]
   b52f4:	9301      	str	r3, [sp, #4]
   b52f6:	bd08      	pop	{r3, pc}
   b52f8:	0003022c 	.word	0x0003022c

000b52fc <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b52fc:	b508      	push	{r3, lr}
   b52fe:	4b02      	ldr	r3, [pc, #8]	; (b5308 <HAL_Validate_Pin_Function+0xc>)
   b5300:	681b      	ldr	r3, [r3, #0]
   b5302:	685b      	ldr	r3, [r3, #4]
   b5304:	9301      	str	r3, [sp, #4]
   b5306:	bd08      	pop	{r3, pc}
   b5308:	0003022c 	.word	0x0003022c

000b530c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b530c:	b508      	push	{r3, lr}
   b530e:	4b02      	ldr	r3, [pc, #8]	; (b5318 <HAL_Pin_Mode+0xc>)
   b5310:	681b      	ldr	r3, [r3, #0]
   b5312:	689b      	ldr	r3, [r3, #8]
   b5314:	9301      	str	r3, [sp, #4]
   b5316:	bd08      	pop	{r3, pc}
   b5318:	0003022c 	.word	0x0003022c

000b531c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b531c:	b508      	push	{r3, lr}
   b531e:	4b02      	ldr	r3, [pc, #8]	; (b5328 <HAL_Get_Pin_Mode+0xc>)
   b5320:	681b      	ldr	r3, [r3, #0]
   b5322:	68db      	ldr	r3, [r3, #12]
   b5324:	9301      	str	r3, [sp, #4]
   b5326:	bd08      	pop	{r3, pc}
   b5328:	0003022c 	.word	0x0003022c

000b532c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b532c:	b508      	push	{r3, lr}
   b532e:	4b02      	ldr	r3, [pc, #8]	; (b5338 <HAL_GPIO_Write+0xc>)
   b5330:	681b      	ldr	r3, [r3, #0]
   b5332:	691b      	ldr	r3, [r3, #16]
   b5334:	9301      	str	r3, [sp, #4]
   b5336:	bd08      	pop	{r3, pc}
   b5338:	0003022c 	.word	0x0003022c

000b533c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b533c:	b508      	push	{r3, lr}
   b533e:	4b02      	ldr	r3, [pc, #8]	; (b5348 <hal_adc_read+0xc>)
   b5340:	681b      	ldr	r3, [r3, #0]
   b5342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5344:	9301      	str	r3, [sp, #4]
   b5346:	bd08      	pop	{r3, pc}
   b5348:	0003022c 	.word	0x0003022c

000b534c <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b534c:	b508      	push	{r3, lr}
   b534e:	4b02      	ldr	r3, [pc, #8]	; (b5358 <hal_i2c_begin+0xc>)
   b5350:	681b      	ldr	r3, [r3, #0]
   b5352:	68db      	ldr	r3, [r3, #12]
   b5354:	9301      	str	r3, [sp, #4]
   b5356:	bd08      	pop	{r3, pc}
   b5358:	00030228 	.word	0x00030228

000b535c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b535c:	b508      	push	{r3, lr}
   b535e:	4b02      	ldr	r3, [pc, #8]	; (b5368 <hal_i2c_begin_transmission+0xc>)
   b5360:	681b      	ldr	r3, [r3, #0]
   b5362:	699b      	ldr	r3, [r3, #24]
   b5364:	9301      	str	r3, [sp, #4]
   b5366:	bd08      	pop	{r3, pc}
   b5368:	00030228 	.word	0x00030228

000b536c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b536c:	b508      	push	{r3, lr}
   b536e:	4b02      	ldr	r3, [pc, #8]	; (b5378 <hal_i2c_end_transmission+0xc>)
   b5370:	681b      	ldr	r3, [r3, #0]
   b5372:	69db      	ldr	r3, [r3, #28]
   b5374:	9301      	str	r3, [sp, #4]
   b5376:	bd08      	pop	{r3, pc}
   b5378:	00030228 	.word	0x00030228

000b537c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b537c:	b508      	push	{r3, lr}
   b537e:	4b02      	ldr	r3, [pc, #8]	; (b5388 <hal_i2c_write+0xc>)
   b5380:	681b      	ldr	r3, [r3, #0]
   b5382:	6a1b      	ldr	r3, [r3, #32]
   b5384:	9301      	str	r3, [sp, #4]
   b5386:	bd08      	pop	{r3, pc}
   b5388:	00030228 	.word	0x00030228

000b538c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b538c:	b508      	push	{r3, lr}
   b538e:	4b02      	ldr	r3, [pc, #8]	; (b5398 <hal_i2c_available+0xc>)
   b5390:	681b      	ldr	r3, [r3, #0]
   b5392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5394:	9301      	str	r3, [sp, #4]
   b5396:	bd08      	pop	{r3, pc}
   b5398:	00030228 	.word	0x00030228

000b539c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b539c:	b508      	push	{r3, lr}
   b539e:	4b02      	ldr	r3, [pc, #8]	; (b53a8 <hal_i2c_read+0xc>)
   b53a0:	681b      	ldr	r3, [r3, #0]
   b53a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b53a4:	9301      	str	r3, [sp, #4]
   b53a6:	bd08      	pop	{r3, pc}
   b53a8:	00030228 	.word	0x00030228

000b53ac <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b53ac:	b508      	push	{r3, lr}
   b53ae:	4b02      	ldr	r3, [pc, #8]	; (b53b8 <hal_i2c_peek+0xc>)
   b53b0:	681b      	ldr	r3, [r3, #0]
   b53b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b53b4:	9301      	str	r3, [sp, #4]
   b53b6:	bd08      	pop	{r3, pc}
   b53b8:	00030228 	.word	0x00030228

000b53bc <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b53bc:	b508      	push	{r3, lr}
   b53be:	4b02      	ldr	r3, [pc, #8]	; (b53c8 <hal_i2c_flush+0xc>)
   b53c0:	681b      	ldr	r3, [r3, #0]
   b53c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b53c4:	9301      	str	r3, [sp, #4]
   b53c6:	bd08      	pop	{r3, pc}
   b53c8:	00030228 	.word	0x00030228

000b53cc <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b53cc:	b508      	push	{r3, lr}
   b53ce:	4b02      	ldr	r3, [pc, #8]	; (b53d8 <hal_i2c_is_enabled+0xc>)
   b53d0:	681b      	ldr	r3, [r3, #0]
   b53d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b53d4:	9301      	str	r3, [sp, #4]
   b53d6:	bd08      	pop	{r3, pc}
   b53d8:	00030228 	.word	0x00030228

000b53dc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b53dc:	b508      	push	{r3, lr}
   b53de:	4b02      	ldr	r3, [pc, #8]	; (b53e8 <hal_i2c_init+0xc>)
   b53e0:	681b      	ldr	r3, [r3, #0]
   b53e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b53e4:	9301      	str	r3, [sp, #4]
   b53e6:	bd08      	pop	{r3, pc}
   b53e8:	00030228 	.word	0x00030228

000b53ec <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b53ec:	b508      	push	{r3, lr}
   b53ee:	4b02      	ldr	r3, [pc, #8]	; (b53f8 <if_index_to_name+0xc>)
   b53f0:	681b      	ldr	r3, [r3, #0]
   b53f2:	695b      	ldr	r3, [r3, #20]
   b53f4:	9301      	str	r3, [sp, #4]
   b53f6:	bd08      	pop	{r3, pc}
   b53f8:	0003026c 	.word	0x0003026c

000b53fc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b53fc:	b508      	push	{r3, lr}
   b53fe:	4b02      	ldr	r3, [pc, #8]	; (b5408 <inet_inet_ntop+0xc>)
   b5400:	681b      	ldr	r3, [r3, #0]
   b5402:	695b      	ldr	r3, [r3, #20]
   b5404:	9301      	str	r3, [sp, #4]
   b5406:	bd08      	pop	{r3, pc}
   b5408:	00030264 	.word	0x00030264

000b540c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b540c:	b508      	push	{r3, lr}
   b540e:	4b02      	ldr	r3, [pc, #8]	; (b5418 <inet_htonl+0xc>)
   b5410:	681b      	ldr	r3, [r3, #0]
   b5412:	6a1b      	ldr	r3, [r3, #32]
   b5414:	9301      	str	r3, [sp, #4]
   b5416:	bd08      	pop	{r3, pc}
   b5418:	00030264 	.word	0x00030264

000b541c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b541c:	b508      	push	{r3, lr}
   b541e:	4b02      	ldr	r3, [pc, #8]	; (b5428 <inet_htons+0xc>)
   b5420:	681b      	ldr	r3, [r3, #0]
   b5422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5424:	9301      	str	r3, [sp, #4]
   b5426:	bd08      	pop	{r3, pc}
   b5428:	00030264 	.word	0x00030264

000b542c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b542c:	b508      	push	{r3, lr}
   b542e:	4b02      	ldr	r3, [pc, #8]	; (b5438 <netdb_freeaddrinfo+0xc>)
   b5430:	681b      	ldr	r3, [r3, #0]
   b5432:	689b      	ldr	r3, [r3, #8]
   b5434:	9301      	str	r3, [sp, #4]
   b5436:	bd08      	pop	{r3, pc}
   b5438:	00030268 	.word	0x00030268

000b543c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b543c:	b508      	push	{r3, lr}
   b543e:	4b02      	ldr	r3, [pc, #8]	; (b5448 <netdb_getaddrinfo+0xc>)
   b5440:	681b      	ldr	r3, [r3, #0]
   b5442:	68db      	ldr	r3, [r3, #12]
   b5444:	9301      	str	r3, [sp, #4]
   b5446:	bd08      	pop	{r3, pc}
   b5448:	00030268 	.word	0x00030268

000b544c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b544c:	b508      	push	{r3, lr}
   b544e:	4b02      	ldr	r3, [pc, #8]	; (b5458 <sock_setsockopt+0xc>)
   b5450:	681b      	ldr	r3, [r3, #0]
   b5452:	699b      	ldr	r3, [r3, #24]
   b5454:	9301      	str	r3, [sp, #4]
   b5456:	bd08      	pop	{r3, pc}
   b5458:	00030238 	.word	0x00030238

000b545c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b545c:	b508      	push	{r3, lr}
   b545e:	4b02      	ldr	r3, [pc, #8]	; (b5468 <sock_close+0xc>)
   b5460:	681b      	ldr	r3, [r3, #0]
   b5462:	69db      	ldr	r3, [r3, #28]
   b5464:	9301      	str	r3, [sp, #4]
   b5466:	bd08      	pop	{r3, pc}
   b5468:	00030238 	.word	0x00030238

000b546c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b546c:	b508      	push	{r3, lr}
   b546e:	4b02      	ldr	r3, [pc, #8]	; (b5478 <sock_connect+0xc>)
   b5470:	681b      	ldr	r3, [r3, #0]
   b5472:	6a1b      	ldr	r3, [r3, #32]
   b5474:	9301      	str	r3, [sp, #4]
   b5476:	bd08      	pop	{r3, pc}
   b5478:	00030238 	.word	0x00030238

000b547c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b547c:	b508      	push	{r3, lr}
   b547e:	4b02      	ldr	r3, [pc, #8]	; (b5488 <sock_recv+0xc>)
   b5480:	681b      	ldr	r3, [r3, #0]
   b5482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5484:	9301      	str	r3, [sp, #4]
   b5486:	bd08      	pop	{r3, pc}
   b5488:	00030238 	.word	0x00030238

000b548c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b548c:	b508      	push	{r3, lr}
   b548e:	4b02      	ldr	r3, [pc, #8]	; (b5498 <sock_send+0xc>)
   b5490:	681b      	ldr	r3, [r3, #0]
   b5492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5494:	9301      	str	r3, [sp, #4]
   b5496:	bd08      	pop	{r3, pc}
   b5498:	00030238 	.word	0x00030238

000b549c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b549c:	b508      	push	{r3, lr}
   b549e:	4b02      	ldr	r3, [pc, #8]	; (b54a8 <sock_socket+0xc>)
   b54a0:	681b      	ldr	r3, [r3, #0]
   b54a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b54a4:	9301      	str	r3, [sp, #4]
   b54a6:	bd08      	pop	{r3, pc}
   b54a8:	00030238 	.word	0x00030238

000b54ac <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b54ac:	b508      	push	{r3, lr}
   b54ae:	4b02      	ldr	r3, [pc, #8]	; (b54b8 <hal_spi_begin+0xc>)
   b54b0:	681b      	ldr	r3, [r3, #0]
   b54b2:	681b      	ldr	r3, [r3, #0]
   b54b4:	9301      	str	r3, [sp, #4]
   b54b6:	bd08      	pop	{r3, pc}
   b54b8:	00030230 	.word	0x00030230

000b54bc <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b54bc:	b508      	push	{r3, lr}
   b54be:	4b02      	ldr	r3, [pc, #8]	; (b54c8 <hal_spi_set_bit_order+0xc>)
   b54c0:	681b      	ldr	r3, [r3, #0]
   b54c2:	689b      	ldr	r3, [r3, #8]
   b54c4:	9301      	str	r3, [sp, #4]
   b54c6:	bd08      	pop	{r3, pc}
   b54c8:	00030230 	.word	0x00030230

000b54cc <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b54cc:	b508      	push	{r3, lr}
   b54ce:	4b02      	ldr	r3, [pc, #8]	; (b54d8 <hal_spi_set_data_mode+0xc>)
   b54d0:	681b      	ldr	r3, [r3, #0]
   b54d2:	68db      	ldr	r3, [r3, #12]
   b54d4:	9301      	str	r3, [sp, #4]
   b54d6:	bd08      	pop	{r3, pc}
   b54d8:	00030230 	.word	0x00030230

000b54dc <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b54dc:	b508      	push	{r3, lr}
   b54de:	4b02      	ldr	r3, [pc, #8]	; (b54e8 <hal_spi_set_clock_divider+0xc>)
   b54e0:	681b      	ldr	r3, [r3, #0]
   b54e2:	691b      	ldr	r3, [r3, #16]
   b54e4:	9301      	str	r3, [sp, #4]
   b54e6:	bd08      	pop	{r3, pc}
   b54e8:	00030230 	.word	0x00030230

000b54ec <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b54ec:	b508      	push	{r3, lr}
   b54ee:	4b02      	ldr	r3, [pc, #8]	; (b54f8 <hal_spi_transfer+0xc>)
   b54f0:	681b      	ldr	r3, [r3, #0]
   b54f2:	695b      	ldr	r3, [r3, #20]
   b54f4:	9301      	str	r3, [sp, #4]
   b54f6:	bd08      	pop	{r3, pc}
   b54f8:	00030230 	.word	0x00030230

000b54fc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b54fc:	b508      	push	{r3, lr}
   b54fe:	4b02      	ldr	r3, [pc, #8]	; (b5508 <hal_spi_init+0xc>)
   b5500:	681b      	ldr	r3, [r3, #0]
   b5502:	69db      	ldr	r3, [r3, #28]
   b5504:	9301      	str	r3, [sp, #4]
   b5506:	bd08      	pop	{r3, pc}
   b5508:	00030230 	.word	0x00030230

000b550c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b550c:	b508      	push	{r3, lr}
   b550e:	4b02      	ldr	r3, [pc, #8]	; (b5518 <hal_spi_is_enabled+0xc>)
   b5510:	681b      	ldr	r3, [r3, #0]
   b5512:	6a1b      	ldr	r3, [r3, #32]
   b5514:	9301      	str	r3, [sp, #4]
   b5516:	bd08      	pop	{r3, pc}
   b5518:	00030230 	.word	0x00030230

000b551c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b551c:	b508      	push	{r3, lr}
   b551e:	4b02      	ldr	r3, [pc, #8]	; (b5528 <hal_spi_info+0xc>)
   b5520:	681b      	ldr	r3, [r3, #0]
   b5522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5524:	9301      	str	r3, [sp, #4]
   b5526:	bd08      	pop	{r3, pc}
   b5528:	00030230 	.word	0x00030230

000b552c <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b552c:	b508      	push	{r3, lr}
   b552e:	4b02      	ldr	r3, [pc, #8]	; (b5538 <hal_spi_acquire+0xc>)
   b5530:	681b      	ldr	r3, [r3, #0]
   b5532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5534:	9301      	str	r3, [sp, #4]
   b5536:	bd08      	pop	{r3, pc}
   b5538:	00030230 	.word	0x00030230

000b553c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b553c:	b508      	push	{r3, lr}
   b553e:	4b02      	ldr	r3, [pc, #8]	; (b5548 <hal_spi_release+0xc>)
   b5540:	681b      	ldr	r3, [r3, #0]
   b5542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5544:	9301      	str	r3, [sp, #4]
   b5546:	bd08      	pop	{r3, pc}
   b5548:	00030230 	.word	0x00030230

000b554c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b554c:	b508      	push	{r3, lr}
   b554e:	4b02      	ldr	r3, [pc, #8]	; (b5558 <hal_usart_write+0xc>)
   b5550:	681b      	ldr	r3, [r3, #0]
   b5552:	68db      	ldr	r3, [r3, #12]
   b5554:	9301      	str	r3, [sp, #4]
   b5556:	bd08      	pop	{r3, pc}
   b5558:	0003023c 	.word	0x0003023c

000b555c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b555c:	b508      	push	{r3, lr}
   b555e:	4b02      	ldr	r3, [pc, #8]	; (b5568 <hal_usart_available+0xc>)
   b5560:	681b      	ldr	r3, [r3, #0]
   b5562:	691b      	ldr	r3, [r3, #16]
   b5564:	9301      	str	r3, [sp, #4]
   b5566:	bd08      	pop	{r3, pc}
   b5568:	0003023c 	.word	0x0003023c

000b556c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b556c:	b508      	push	{r3, lr}
   b556e:	4b02      	ldr	r3, [pc, #8]	; (b5578 <hal_usart_read+0xc>)
   b5570:	681b      	ldr	r3, [r3, #0]
   b5572:	695b      	ldr	r3, [r3, #20]
   b5574:	9301      	str	r3, [sp, #4]
   b5576:	bd08      	pop	{r3, pc}
   b5578:	0003023c 	.word	0x0003023c

000b557c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b557c:	b508      	push	{r3, lr}
   b557e:	4b02      	ldr	r3, [pc, #8]	; (b5588 <hal_usart_peek+0xc>)
   b5580:	681b      	ldr	r3, [r3, #0]
   b5582:	699b      	ldr	r3, [r3, #24]
   b5584:	9301      	str	r3, [sp, #4]
   b5586:	bd08      	pop	{r3, pc}
   b5588:	0003023c 	.word	0x0003023c

000b558c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b558c:	b508      	push	{r3, lr}
   b558e:	4b02      	ldr	r3, [pc, #8]	; (b5598 <hal_usart_flush+0xc>)
   b5590:	681b      	ldr	r3, [r3, #0]
   b5592:	69db      	ldr	r3, [r3, #28]
   b5594:	9301      	str	r3, [sp, #4]
   b5596:	bd08      	pop	{r3, pc}
   b5598:	0003023c 	.word	0x0003023c

000b559c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b559c:	b508      	push	{r3, lr}
   b559e:	4b02      	ldr	r3, [pc, #8]	; (b55a8 <hal_usart_is_enabled+0xc>)
   b55a0:	681b      	ldr	r3, [r3, #0]
   b55a2:	6a1b      	ldr	r3, [r3, #32]
   b55a4:	9301      	str	r3, [sp, #4]
   b55a6:	bd08      	pop	{r3, pc}
   b55a8:	0003023c 	.word	0x0003023c

000b55ac <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b55ac:	b508      	push	{r3, lr}
   b55ae:	4b02      	ldr	r3, [pc, #8]	; (b55b8 <hal_usart_available_data_for_write+0xc>)
   b55b0:	681b      	ldr	r3, [r3, #0]
   b55b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b55b4:	9301      	str	r3, [sp, #4]
   b55b6:	bd08      	pop	{r3, pc}
   b55b8:	0003023c 	.word	0x0003023c

000b55bc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b55bc:	b508      	push	{r3, lr}
   b55be:	4b02      	ldr	r3, [pc, #8]	; (b55c8 <hal_usart_init_ex+0xc>)
   b55c0:	681b      	ldr	r3, [r3, #0]
   b55c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b55c4:	9301      	str	r3, [sp, #4]
   b55c6:	bd08      	pop	{r3, pc}
   b55c8:	0003023c 	.word	0x0003023c

000b55cc <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b55cc:	b508      	push	{r3, lr}
   b55ce:	4b02      	ldr	r3, [pc, #8]	; (b55d8 <HAL_USB_USART_Init+0xc>)
   b55d0:	681b      	ldr	r3, [r3, #0]
   b55d2:	681b      	ldr	r3, [r3, #0]
   b55d4:	9301      	str	r3, [sp, #4]
   b55d6:	bd08      	pop	{r3, pc}
   b55d8:	0003024c 	.word	0x0003024c

000b55dc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b55dc:	b508      	push	{r3, lr}
   b55de:	4b02      	ldr	r3, [pc, #8]	; (b55e8 <HAL_USB_USART_Begin+0xc>)
   b55e0:	681b      	ldr	r3, [r3, #0]
   b55e2:	685b      	ldr	r3, [r3, #4]
   b55e4:	9301      	str	r3, [sp, #4]
   b55e6:	bd08      	pop	{r3, pc}
   b55e8:	0003024c 	.word	0x0003024c

000b55ec <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b55ec:	b508      	push	{r3, lr}
   b55ee:	4b02      	ldr	r3, [pc, #8]	; (b55f8 <HAL_USB_USART_Available_Data+0xc>)
   b55f0:	681b      	ldr	r3, [r3, #0]
   b55f2:	691b      	ldr	r3, [r3, #16]
   b55f4:	9301      	str	r3, [sp, #4]
   b55f6:	bd08      	pop	{r3, pc}
   b55f8:	0003024c 	.word	0x0003024c

000b55fc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b55fc:	b508      	push	{r3, lr}
   b55fe:	4b02      	ldr	r3, [pc, #8]	; (b5608 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5600:	681b      	ldr	r3, [r3, #0]
   b5602:	695b      	ldr	r3, [r3, #20]
   b5604:	9301      	str	r3, [sp, #4]
   b5606:	bd08      	pop	{r3, pc}
   b5608:	0003024c 	.word	0x0003024c

000b560c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b560c:	b508      	push	{r3, lr}
   b560e:	4b02      	ldr	r3, [pc, #8]	; (b5618 <HAL_USB_USART_Receive_Data+0xc>)
   b5610:	681b      	ldr	r3, [r3, #0]
   b5612:	699b      	ldr	r3, [r3, #24]
   b5614:	9301      	str	r3, [sp, #4]
   b5616:	bd08      	pop	{r3, pc}
   b5618:	0003024c 	.word	0x0003024c

000b561c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b561c:	b508      	push	{r3, lr}
   b561e:	4b02      	ldr	r3, [pc, #8]	; (b5628 <HAL_USB_USART_Send_Data+0xc>)
   b5620:	681b      	ldr	r3, [r3, #0]
   b5622:	69db      	ldr	r3, [r3, #28]
   b5624:	9301      	str	r3, [sp, #4]
   b5626:	bd08      	pop	{r3, pc}
   b5628:	0003024c 	.word	0x0003024c

000b562c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b562c:	b508      	push	{r3, lr}
   b562e:	4b02      	ldr	r3, [pc, #8]	; (b5638 <HAL_USB_USART_Flush_Data+0xc>)
   b5630:	681b      	ldr	r3, [r3, #0]
   b5632:	6a1b      	ldr	r3, [r3, #32]
   b5634:	9301      	str	r3, [sp, #4]
   b5636:	bd08      	pop	{r3, pc}
   b5638:	0003024c 	.word	0x0003024c

000b563c <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b563c:	b508      	push	{r3, lr}
   b563e:	4b02      	ldr	r3, [pc, #8]	; (b5648 <HAL_USB_USART_Is_Connected+0xc>)
   b5640:	681b      	ldr	r3, [r3, #0]
   b5642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5644:	9301      	str	r3, [sp, #4]
   b5646:	bd08      	pop	{r3, pc}
   b5648:	0003024c 	.word	0x0003024c

000b564c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b564c:	b508      	push	{r3, lr}
   b564e:	4b02      	ldr	r3, [pc, #8]	; (b5658 <panic_+0xc>)
   b5650:	681b      	ldr	r3, [r3, #0]
   b5652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5654:	9301      	str	r3, [sp, #4]
   b5656:	bd08      	pop	{r3, pc}
   b5658:	00030260 	.word	0x00030260

000b565c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b565c:	b508      	push	{r3, lr}
   b565e:	4b02      	ldr	r3, [pc, #8]	; (b5668 <log_message+0xc>)
   b5660:	681b      	ldr	r3, [r3, #0]
   b5662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5664:	9301      	str	r3, [sp, #4]
   b5666:	bd08      	pop	{r3, pc}
   b5668:	00030260 	.word	0x00030260

000b566c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b566c:	b508      	push	{r3, lr}
   b566e:	4b02      	ldr	r3, [pc, #8]	; (b5678 <set_system_mode+0xc>)
   b5670:	681b      	ldr	r3, [r3, #0]
   b5672:	685b      	ldr	r3, [r3, #4]
   b5674:	9301      	str	r3, [sp, #4]
   b5676:	bd08      	pop	{r3, pc}
   b5678:	00030220 	.word	0x00030220

000b567c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b567c:	b508      	push	{r3, lr}
   b567e:	4b02      	ldr	r3, [pc, #8]	; (b5688 <system_delay_ms+0xc>)
   b5680:	681b      	ldr	r3, [r3, #0]
   b5682:	695b      	ldr	r3, [r3, #20]
   b5684:	9301      	str	r3, [sp, #4]
   b5686:	bd08      	pop	{r3, pc}
   b5688:	00030220 	.word	0x00030220

000b568c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b568c:	b508      	push	{r3, lr}
   b568e:	4b03      	ldr	r3, [pc, #12]	; (b569c <system_ctrl_set_app_request_handler+0x10>)
   b5690:	681b      	ldr	r3, [r3, #0]
   b5692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5696:	9301      	str	r3, [sp, #4]
   b5698:	bd08      	pop	{r3, pc}
   b569a:	0000      	.short	0x0000
   b569c:	00030220 	.word	0x00030220

000b56a0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b56a0:	b508      	push	{r3, lr}
   b56a2:	4b03      	ldr	r3, [pc, #12]	; (b56b0 <system_ctrl_set_result+0x10>)
   b56a4:	681b      	ldr	r3, [r3, #0]
   b56a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b56aa:	9301      	str	r3, [sp, #4]
   b56ac:	bd08      	pop	{r3, pc}
   b56ae:	0000      	.short	0x0000
   b56b0:	00030220 	.word	0x00030220

000b56b4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b56b4:	b508      	push	{r3, lr}
   b56b6:	4b02      	ldr	r3, [pc, #8]	; (b56c0 <spark_process+0xc>)
   b56b8:	681b      	ldr	r3, [r3, #0]
   b56ba:	689b      	ldr	r3, [r3, #8]
   b56bc:	9301      	str	r3, [sp, #4]
   b56be:	bd08      	pop	{r3, pc}
   b56c0:	00030244 	.word	0x00030244

000b56c4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b56c4:	b508      	push	{r3, lr}
   b56c6:	4b02      	ldr	r3, [pc, #8]	; (b56d0 <spark_set_random_seed_from_cloud_handler+0xc>)
   b56c8:	681b      	ldr	r3, [r3, #0]
   b56ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b56cc:	9301      	str	r3, [sp, #4]
   b56ce:	bd08      	pop	{r3, pc}
   b56d0:	00030244 	.word	0x00030244

000b56d4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b56d4:	b508      	push	{r3, lr}
   b56d6:	4b02      	ldr	r3, [pc, #8]	; (b56e0 <network_connect+0xc>)
   b56d8:	681b      	ldr	r3, [r3, #0]
   b56da:	685b      	ldr	r3, [r3, #4]
   b56dc:	9301      	str	r3, [sp, #4]
   b56de:	bd08      	pop	{r3, pc}
   b56e0:	00030240 	.word	0x00030240

000b56e4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b56e4:	b508      	push	{r3, lr}
   b56e6:	4b02      	ldr	r3, [pc, #8]	; (b56f0 <network_connecting+0xc>)
   b56e8:	681b      	ldr	r3, [r3, #0]
   b56ea:	689b      	ldr	r3, [r3, #8]
   b56ec:	9301      	str	r3, [sp, #4]
   b56ee:	bd08      	pop	{r3, pc}
   b56f0:	00030240 	.word	0x00030240

000b56f4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b56f4:	b508      	push	{r3, lr}
   b56f6:	4b02      	ldr	r3, [pc, #8]	; (b5700 <network_disconnect+0xc>)
   b56f8:	681b      	ldr	r3, [r3, #0]
   b56fa:	68db      	ldr	r3, [r3, #12]
   b56fc:	9301      	str	r3, [sp, #4]
   b56fe:	bd08      	pop	{r3, pc}
   b5700:	00030240 	.word	0x00030240

000b5704 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5704:	b508      	push	{r3, lr}
   b5706:	4b02      	ldr	r3, [pc, #8]	; (b5710 <network_ready+0xc>)
   b5708:	681b      	ldr	r3, [r3, #0]
   b570a:	691b      	ldr	r3, [r3, #16]
   b570c:	9301      	str	r3, [sp, #4]
   b570e:	bd08      	pop	{r3, pc}
   b5710:	00030240 	.word	0x00030240

000b5714 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5714:	b508      	push	{r3, lr}
   b5716:	4b02      	ldr	r3, [pc, #8]	; (b5720 <network_on+0xc>)
   b5718:	681b      	ldr	r3, [r3, #0]
   b571a:	695b      	ldr	r3, [r3, #20]
   b571c:	9301      	str	r3, [sp, #4]
   b571e:	bd08      	pop	{r3, pc}
   b5720:	00030240 	.word	0x00030240

000b5724 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5724:	b508      	push	{r3, lr}
   b5726:	4b02      	ldr	r3, [pc, #8]	; (b5730 <network_off+0xc>)
   b5728:	681b      	ldr	r3, [r3, #0]
   b572a:	699b      	ldr	r3, [r3, #24]
   b572c:	9301      	str	r3, [sp, #4]
   b572e:	bd08      	pop	{r3, pc}
   b5730:	00030240 	.word	0x00030240

000b5734 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5734:	b508      	push	{r3, lr}
   b5736:	4b02      	ldr	r3, [pc, #8]	; (b5740 <network_listen+0xc>)
   b5738:	681b      	ldr	r3, [r3, #0]
   b573a:	69db      	ldr	r3, [r3, #28]
   b573c:	9301      	str	r3, [sp, #4]
   b573e:	bd08      	pop	{r3, pc}
   b5740:	00030240 	.word	0x00030240

000b5744 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5744:	b508      	push	{r3, lr}
   b5746:	4b02      	ldr	r3, [pc, #8]	; (b5750 <network_listening+0xc>)
   b5748:	681b      	ldr	r3, [r3, #0]
   b574a:	6a1b      	ldr	r3, [r3, #32]
   b574c:	9301      	str	r3, [sp, #4]
   b574e:	bd08      	pop	{r3, pc}
   b5750:	00030240 	.word	0x00030240

000b5754 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5754:	b508      	push	{r3, lr}
   b5756:	4b02      	ldr	r3, [pc, #8]	; (b5760 <network_set_listen_timeout+0xc>)
   b5758:	681b      	ldr	r3, [r3, #0]
   b575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b575c:	9301      	str	r3, [sp, #4]
   b575e:	bd08      	pop	{r3, pc}
   b5760:	00030240 	.word	0x00030240

000b5764 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5764:	b508      	push	{r3, lr}
   b5766:	4b02      	ldr	r3, [pc, #8]	; (b5770 <network_get_listen_timeout+0xc>)
   b5768:	681b      	ldr	r3, [r3, #0]
   b576a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b576c:	9301      	str	r3, [sp, #4]
   b576e:	bd08      	pop	{r3, pc}
   b5770:	00030240 	.word	0x00030240

000b5774 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5774:	b508      	push	{r3, lr}
   b5776:	4b02      	ldr	r3, [pc, #8]	; (b5780 <network_is_on+0xc>)
   b5778:	681b      	ldr	r3, [r3, #0]
   b577a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b577c:	9301      	str	r3, [sp, #4]
   b577e:	bd08      	pop	{r3, pc}
   b5780:	00030240 	.word	0x00030240

000b5784 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5784:	b508      	push	{r3, lr}
   b5786:	4b02      	ldr	r3, [pc, #8]	; (b5790 <network_is_off+0xc>)
   b5788:	681b      	ldr	r3, [r3, #0]
   b578a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b578c:	9301      	str	r3, [sp, #4]
   b578e:	bd08      	pop	{r3, pc}
   b5790:	00030240 	.word	0x00030240

000b5794 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5794:	b508      	push	{r3, lr}
   b5796:	4b02      	ldr	r3, [pc, #8]	; (b57a0 <malloc+0xc>)
   b5798:	681b      	ldr	r3, [r3, #0]
   b579a:	681b      	ldr	r3, [r3, #0]
   b579c:	9301      	str	r3, [sp, #4]
   b579e:	bd08      	pop	{r3, pc}
   b57a0:	0003021c 	.word	0x0003021c

000b57a4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b57a4:	b508      	push	{r3, lr}
   b57a6:	4b02      	ldr	r3, [pc, #8]	; (b57b0 <free+0xc>)
   b57a8:	681b      	ldr	r3, [r3, #0]
   b57aa:	685b      	ldr	r3, [r3, #4]
   b57ac:	9301      	str	r3, [sp, #4]
   b57ae:	bd08      	pop	{r3, pc}
   b57b0:	0003021c 	.word	0x0003021c

000b57b4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b57b4:	b508      	push	{r3, lr}
   b57b6:	4b02      	ldr	r3, [pc, #8]	; (b57c0 <realloc+0xc>)
   b57b8:	681b      	ldr	r3, [r3, #0]
   b57ba:	689b      	ldr	r3, [r3, #8]
   b57bc:	9301      	str	r3, [sp, #4]
   b57be:	bd08      	pop	{r3, pc}
   b57c0:	0003021c 	.word	0x0003021c

000b57c4 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b57c4:	b508      	push	{r3, lr}
   b57c6:	4b02      	ldr	r3, [pc, #8]	; (b57d0 <vsnprintf+0xc>)
   b57c8:	681b      	ldr	r3, [r3, #0]
   b57ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b57cc:	9301      	str	r3, [sp, #4]
   b57ce:	bd08      	pop	{r3, pc}
   b57d0:	0003021c 	.word	0x0003021c

000b57d4 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b57d4:	b508      	push	{r3, lr}
   b57d6:	4b02      	ldr	r3, [pc, #8]	; (b57e0 <__errno+0xc>)
   b57d8:	681b      	ldr	r3, [r3, #0]
   b57da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b57dc:	9301      	str	r3, [sp, #4]
   b57de:	bd08      	pop	{r3, pc}
   b57e0:	0003021c 	.word	0x0003021c

000b57e4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b57e4:	b508      	push	{r3, lr}
   b57e6:	4b02      	ldr	r3, [pc, #8]	; (b57f0 <__assert_func+0xc>)
   b57e8:	681b      	ldr	r3, [r3, #0]
   b57ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b57ec:	9301      	str	r3, [sp, #4]
   b57ee:	bd08      	pop	{r3, pc}
   b57f0:	0003021c 	.word	0x0003021c

000b57f4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b57f4:	b508      	push	{r3, lr}
   b57f6:	4b02      	ldr	r3, [pc, #8]	; (b5800 <newlib_impure_ptr_callback+0xc>)
   b57f8:	681b      	ldr	r3, [r3, #0]
   b57fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b57fc:	9301      	str	r3, [sp, #4]
   b57fe:	bd08      	pop	{r3, pc}
   b5800:	0003021c 	.word	0x0003021c

000b5804 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5804:	2100      	movs	r1, #0
   b5806:	f7ff bf39 	b.w	b567c <system_delay_ms>
	...

000b580c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b580c:	4802      	ldr	r0, [pc, #8]	; (b5818 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b580e:	2300      	movs	r3, #0
   b5810:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5812:	f7ff bd3b 	b.w	b528c <os_mutex_recursive_create>
   b5816:	bf00      	nop
   b5818:	2003e6c4 	.word	0x2003e6c4

000b581c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b581c:	2200      	movs	r2, #0
   b581e:	6840      	ldr	r0, [r0, #4]
   b5820:	4611      	mov	r1, r2
   b5822:	f7ff bf8f 	b.w	b5744 <network_listening>

000b5826 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5826:	2200      	movs	r2, #0
   b5828:	6840      	ldr	r0, [r0, #4]
   b582a:	4611      	mov	r1, r2
   b582c:	f7ff bf9a 	b.w	b5764 <network_get_listen_timeout>

000b5830 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5830:	6840      	ldr	r0, [r0, #4]
   b5832:	2200      	movs	r2, #0
   b5834:	f7ff bf8e 	b.w	b5754 <network_set_listen_timeout>

000b5838 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5838:	6840      	ldr	r0, [r0, #4]
   b583a:	2200      	movs	r2, #0
   b583c:	f081 0101 	eor.w	r1, r1, #1
   b5840:	f7ff bf78 	b.w	b5734 <network_listen>

000b5844 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5844:	2300      	movs	r3, #0
   b5846:	6840      	ldr	r0, [r0, #4]
   b5848:	461a      	mov	r2, r3
   b584a:	4619      	mov	r1, r3
   b584c:	f7ff bf6a 	b.w	b5724 <network_off>

000b5850 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5850:	2300      	movs	r3, #0
   b5852:	6840      	ldr	r0, [r0, #4]
   b5854:	461a      	mov	r2, r3
   b5856:	4619      	mov	r1, r3
   b5858:	f7ff bf5c 	b.w	b5714 <network_on>

000b585c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b585c:	2200      	movs	r2, #0
   b585e:	6840      	ldr	r0, [r0, #4]
   b5860:	4611      	mov	r1, r2
   b5862:	f7ff bf4f 	b.w	b5704 <network_ready>

000b5866 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5866:	2200      	movs	r2, #0
   b5868:	6840      	ldr	r0, [r0, #4]
   b586a:	4611      	mov	r1, r2
   b586c:	f7ff bf3a 	b.w	b56e4 <network_connecting>

000b5870 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5870:	6840      	ldr	r0, [r0, #4]
   b5872:	2200      	movs	r2, #0
   b5874:	2102      	movs	r1, #2
   b5876:	f7ff bf3d 	b.w	b56f4 <network_disconnect>

000b587a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b587a:	2300      	movs	r3, #0
   b587c:	6840      	ldr	r0, [r0, #4]
   b587e:	461a      	mov	r2, r3
   b5880:	f7ff bf28 	b.w	b56d4 <network_connect>

000b5884 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5884:	4b02      	ldr	r3, [pc, #8]	; (b5890 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5886:	2203      	movs	r2, #3
   b5888:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b588a:	4a02      	ldr	r2, [pc, #8]	; (b5894 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b588c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b588e:	4770      	bx	lr
   b5890:	2003e6c8 	.word	0x2003e6c8
   b5894:	000b7484 	.word	0x000b7484

000b5898 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5898:	4770      	bx	lr

000b589a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b589a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b589c:	4606      	mov	r6, r0
   b589e:	4615      	mov	r5, r2
   b58a0:	460c      	mov	r4, r1
   b58a2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b58a4:	42bc      	cmp	r4, r7
   b58a6:	d006      	beq.n	b58b6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b58a8:	6833      	ldr	r3, [r6, #0]
   b58aa:	f814 1b01 	ldrb.w	r1, [r4], #1
   b58ae:	689b      	ldr	r3, [r3, #8]
   b58b0:	4630      	mov	r0, r6
   b58b2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b58b4:	e7f6      	b.n	b58a4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b58b6:	4628      	mov	r0, r5
   b58b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b58ba <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b58ba:	7c00      	ldrb	r0, [r0, #16]
   b58bc:	2200      	movs	r2, #0
   b58be:	f7ff bd5d 	b.w	b537c <hal_i2c_write>

000b58c2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b58c2:	7c00      	ldrb	r0, [r0, #16]
   b58c4:	2100      	movs	r1, #0
   b58c6:	f7ff bd61 	b.w	b538c <hal_i2c_available>

000b58ca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b58ca:	7c00      	ldrb	r0, [r0, #16]
   b58cc:	2100      	movs	r1, #0
   b58ce:	f7ff bd65 	b.w	b539c <hal_i2c_read>

000b58d2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b58d2:	7c00      	ldrb	r0, [r0, #16]
   b58d4:	2100      	movs	r1, #0
   b58d6:	f7ff bd69 	b.w	b53ac <hal_i2c_peek>

000b58da <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b58da:	7c00      	ldrb	r0, [r0, #16]
   b58dc:	2100      	movs	r1, #0
   b58de:	f7ff bd6d 	b.w	b53bc <hal_i2c_flush>

000b58e2 <_ZN7TwoWireD0Ev>:
   b58e2:	b510      	push	{r4, lr}
   b58e4:	2114      	movs	r1, #20
   b58e6:	4604      	mov	r4, r0
   b58e8:	f7fe fbd7 	bl	b409a <_ZdlPvj>
   b58ec:	4620      	mov	r0, r4
   b58ee:	bd10      	pop	{r4, pc}

000b58f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b58f0:	b538      	push	{r3, r4, r5, lr}
   b58f2:	4604      	mov	r4, r0
   b58f4:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b58f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b58fa:	2200      	movs	r2, #0
   b58fc:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5900:	4b09      	ldr	r3, [pc, #36]	; (b5928 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b5902:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5904:	4608      	mov	r0, r1
   b5906:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5908:	4629      	mov	r1, r5
   b590a:	f7ff fd67 	bl	b53dc <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b590e:	30bf      	adds	r0, #191	; 0xbf
   b5910:	d108      	bne.n	b5924 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5912:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5914:	07db      	lsls	r3, r3, #31
   b5916:	d505      	bpl.n	b5924 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5918:	6868      	ldr	r0, [r5, #4]
   b591a:	f7ff ff43 	bl	b57a4 <free>
    free(conf.tx_buffer);
   b591e:	68e8      	ldr	r0, [r5, #12]
   b5920:	f7ff ff40 	bl	b57a4 <free>
}
   b5924:	4620      	mov	r0, r4
   b5926:	bd38      	pop	{r3, r4, r5, pc}
   b5928:	000b74c0 	.word	0x000b74c0

000b592c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b592c:	2300      	movs	r3, #0
   b592e:	7c00      	ldrb	r0, [r0, #16]
   b5930:	461a      	mov	r2, r3
   b5932:	4619      	mov	r1, r3
   b5934:	f7ff bd0a 	b.w	b534c <hal_i2c_begin>

000b5938 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5938:	7c00      	ldrb	r0, [r0, #16]
   b593a:	2200      	movs	r2, #0
   b593c:	f7ff bd0e 	b.w	b535c <hal_i2c_begin_transmission>

000b5940 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b5940:	b2c9      	uxtb	r1, r1
   b5942:	f7ff bff9 	b.w	b5938 <_ZN7TwoWire17beginTransmissionEh>

000b5946 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5946:	7c00      	ldrb	r0, [r0, #16]
   b5948:	2200      	movs	r2, #0
   b594a:	f7ff bd0f 	b.w	b536c <hal_i2c_end_transmission>

000b594e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b594e:	2101      	movs	r1, #1
   b5950:	f7ff bff9 	b.w	b5946 <_ZN7TwoWire15endTransmissionEh>

000b5954 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5954:	4770      	bx	lr

000b5956 <_ZN9IPAddressD0Ev>:
   b5956:	b510      	push	{r4, lr}
   b5958:	2118      	movs	r1, #24
   b595a:	4604      	mov	r4, r0
   b595c:	f7fe fb9d 	bl	b409a <_ZdlPvj>
   b5960:	4620      	mov	r0, r4
   b5962:	bd10      	pop	{r4, pc}

000b5964 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5964:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5966:	7d03      	ldrb	r3, [r0, #20]
   b5968:	2b06      	cmp	r3, #6
{
   b596a:	b08d      	sub	sp, #52	; 0x34
   b596c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b596e:	f100 0704 	add.w	r7, r0, #4
   b5972:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5976:	d012      	beq.n	b599e <_ZNK9IPAddress7printToER5Print+0x3a>
   b5978:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b597c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5980:	220a      	movs	r2, #10
   b5982:	4630      	mov	r0, r6
   b5984:	f000 f965 	bl	b5c52 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5988:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b598a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b598c:	d019      	beq.n	b59c2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b598e:	2c00      	cmp	r4, #0
   b5990:	d0f4      	beq.n	b597c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5992:	212e      	movs	r1, #46	; 0x2e
   b5994:	4630      	mov	r0, r6
   b5996:	f000 f94d 	bl	b5c34 <_ZN5Print5printEc>
   b599a:	4404      	add	r4, r0
   b599c:	e7ee      	b.n	b597c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b599e:	232f      	movs	r3, #47	; 0x2f
   b59a0:	466a      	mov	r2, sp
   b59a2:	4639      	mov	r1, r7
   b59a4:	200a      	movs	r0, #10
		buf[0] = 0;
   b59a6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b59aa:	f7ff fd27 	bl	b53fc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b59ae:	4668      	mov	r0, sp
   b59b0:	f001 fa04 	bl	b6dbc <strlen>
   b59b4:	6833      	ldr	r3, [r6, #0]
   b59b6:	4602      	mov	r2, r0
   b59b8:	68db      	ldr	r3, [r3, #12]
   b59ba:	4669      	mov	r1, sp
   b59bc:	4630      	mov	r0, r6
   b59be:	4798      	blx	r3
   b59c0:	4604      	mov	r4, r0
    }
    return n;
}
   b59c2:	4620      	mov	r0, r4
   b59c4:	b00d      	add	sp, #52	; 0x34
   b59c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b59c8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b59c8:	b510      	push	{r4, lr}
   b59ca:	4b05      	ldr	r3, [pc, #20]	; (b59e0 <_ZN9IPAddressC1Ev+0x18>)
   b59cc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b59ce:	2211      	movs	r2, #17
   b59d0:	f840 3b04 	str.w	r3, [r0], #4
   b59d4:	2100      	movs	r1, #0
   b59d6:	f001 f9b1 	bl	b6d3c <memset>
}
   b59da:	4620      	mov	r0, r4
   b59dc:	bd10      	pop	{r4, pc}
   b59de:	bf00      	nop
   b59e0:	000b74e8 	.word	0x000b74e8

000b59e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b59e4:	4603      	mov	r3, r0
   b59e6:	4a07      	ldr	r2, [pc, #28]	; (b5a04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b59e8:	b510      	push	{r4, lr}
   b59ea:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b59ee:	f101 0210 	add.w	r2, r1, #16
   b59f2:	f851 4b04 	ldr.w	r4, [r1], #4
   b59f6:	f843 4b04 	str.w	r4, [r3], #4
   b59fa:	4291      	cmp	r1, r2
   b59fc:	d1f9      	bne.n	b59f2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b59fe:	780a      	ldrb	r2, [r1, #0]
   b5a00:	701a      	strb	r2, [r3, #0]
}
   b5a02:	bd10      	pop	{r4, pc}
   b5a04:	000b74e8 	.word	0x000b74e8

000b5a08 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b5a08:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b5a0a:	2b04      	cmp	r3, #4
   b5a0c:	d104      	bne.n	b5a18 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b5a0e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5a10:	3800      	subs	r0, #0
   b5a12:	bf18      	it	ne
   b5a14:	2001      	movne	r0, #1
   b5a16:	4770      	bx	lr
    } else if (version() == 6) {
   b5a18:	2b06      	cmp	r3, #6
   b5a1a:	d107      	bne.n	b5a2c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5a1c:	6843      	ldr	r3, [r0, #4]
   b5a1e:	b93b      	cbnz	r3, b5a30 <_ZNK9IPAddresscvbEv+0x28>
   b5a20:	6883      	ldr	r3, [r0, #8]
   b5a22:	b92b      	cbnz	r3, b5a30 <_ZNK9IPAddresscvbEv+0x28>
   b5a24:	68c3      	ldr	r3, [r0, #12]
   b5a26:	b91b      	cbnz	r3, b5a30 <_ZNK9IPAddresscvbEv+0x28>
   b5a28:	6900      	ldr	r0, [r0, #16]
   b5a2a:	e7f1      	b.n	b5a10 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b5a2c:	2000      	movs	r0, #0
   b5a2e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5a30:	2001      	movs	r0, #1
}
   b5a32:	4770      	bx	lr

000b5a34 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5a34:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5a36:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5a3a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5a3e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5a42:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5a46:	2304      	movs	r3, #4
   b5a48:	6041      	str	r1, [r0, #4]
   b5a4a:	7503      	strb	r3, [r0, #20]
}
   b5a4c:	bd10      	pop	{r4, pc}
	...

000b5a50 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5a50:	b507      	push	{r0, r1, r2, lr}
   b5a52:	4b06      	ldr	r3, [pc, #24]	; (b5a6c <_ZN9IPAddressC1EPKh+0x1c>)
   b5a54:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5a56:	78cb      	ldrb	r3, [r1, #3]
   b5a58:	9300      	str	r3, [sp, #0]
   b5a5a:	788b      	ldrb	r3, [r1, #2]
   b5a5c:	784a      	ldrb	r2, [r1, #1]
   b5a5e:	7809      	ldrb	r1, [r1, #0]
   b5a60:	f7ff ffe8 	bl	b5a34 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5a64:	b003      	add	sp, #12
   b5a66:	f85d fb04 	ldr.w	pc, [sp], #4
   b5a6a:	bf00      	nop
   b5a6c:	000b74e8 	.word	0x000b74e8

000b5a70 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5a70:	4b01      	ldr	r3, [pc, #4]	; (b5a78 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5a72:	4a02      	ldr	r2, [pc, #8]	; (b5a7c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5a74:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5a76:	4770      	bx	lr
   b5a78:	2003e6d0 	.word	0x2003e6d0
   b5a7c:	000b74f4 	.word	0x000b74f4

000b5a80 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5a80:	2300      	movs	r3, #0
   b5a82:	6840      	ldr	r0, [r0, #4]
   b5a84:	461a      	mov	r2, r3
   b5a86:	f7ff be25 	b.w	b56d4 <network_connect>

000b5a8a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5a8a:	6840      	ldr	r0, [r0, #4]
   b5a8c:	2200      	movs	r2, #0
   b5a8e:	2102      	movs	r1, #2
   b5a90:	f7ff be30 	b.w	b56f4 <network_disconnect>

000b5a94 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5a94:	2200      	movs	r2, #0
   b5a96:	6840      	ldr	r0, [r0, #4]
   b5a98:	4611      	mov	r1, r2
   b5a9a:	f7ff be23 	b.w	b56e4 <network_connecting>

000b5a9e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5a9e:	2200      	movs	r2, #0
   b5aa0:	6840      	ldr	r0, [r0, #4]
   b5aa2:	4611      	mov	r1, r2
   b5aa4:	f7ff be2e 	b.w	b5704 <network_ready>

000b5aa8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5aa8:	2300      	movs	r3, #0
   b5aaa:	6840      	ldr	r0, [r0, #4]
   b5aac:	461a      	mov	r2, r3
   b5aae:	4619      	mov	r1, r3
   b5ab0:	f7ff be30 	b.w	b5714 <network_on>

000b5ab4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5ab4:	2300      	movs	r3, #0
   b5ab6:	6840      	ldr	r0, [r0, #4]
   b5ab8:	461a      	mov	r2, r3
   b5aba:	4619      	mov	r1, r3
   b5abc:	f7ff be32 	b.w	b5724 <network_off>

000b5ac0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5ac0:	6840      	ldr	r0, [r0, #4]
   b5ac2:	2100      	movs	r1, #0
   b5ac4:	f7ff be56 	b.w	b5774 <network_is_on>

000b5ac8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5ac8:	6840      	ldr	r0, [r0, #4]
   b5aca:	2100      	movs	r1, #0
   b5acc:	f7ff be5a 	b.w	b5784 <network_is_off>

000b5ad0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5ad0:	6840      	ldr	r0, [r0, #4]
   b5ad2:	2200      	movs	r2, #0
   b5ad4:	f081 0101 	eor.w	r1, r1, #1
   b5ad8:	f7ff be2c 	b.w	b5734 <network_listen>

000b5adc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5adc:	6840      	ldr	r0, [r0, #4]
   b5ade:	2200      	movs	r2, #0
   b5ae0:	f7ff be38 	b.w	b5754 <network_set_listen_timeout>

000b5ae4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5ae4:	2200      	movs	r2, #0
   b5ae6:	6840      	ldr	r0, [r0, #4]
   b5ae8:	4611      	mov	r1, r2
   b5aea:	f7ff be3b 	b.w	b5764 <network_get_listen_timeout>

000b5aee <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5aee:	2200      	movs	r2, #0
   b5af0:	6840      	ldr	r0, [r0, #4]
   b5af2:	4611      	mov	r1, r2
   b5af4:	f7ff be26 	b.w	b5744 <network_listening>

000b5af8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5afc:	b095      	sub	sp, #84	; 0x54
   b5afe:	4614      	mov	r4, r2
   b5b00:	460d      	mov	r5, r1
   b5b02:	4607      	mov	r7, r0
    IPAddress addr;
   b5b04:	f7ff ff60 	bl	b59c8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5b08:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5b0a:	221c      	movs	r2, #28
   b5b0c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5b0e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5b10:	f001 f914 	bl	b6d3c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5b14:	2340      	movs	r3, #64	; 0x40
   b5b16:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5b18:	4620      	mov	r0, r4
   b5b1a:	466b      	mov	r3, sp
   b5b1c:	aa0c      	add	r2, sp, #48	; 0x30
   b5b1e:	2100      	movs	r1, #0
   b5b20:	f7ff fc8c 	bl	b543c <netdb_getaddrinfo>
    if (!r) {
   b5b24:	4604      	mov	r4, r0
   b5b26:	2800      	cmp	r0, #0
   b5b28:	d14b      	bne.n	b5bc2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5b2a:	4602      	mov	r2, r0
   b5b2c:	2101      	movs	r1, #1
   b5b2e:	6868      	ldr	r0, [r5, #4]
   b5b30:	f7ff fde8 	bl	b5704 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5b34:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5b36:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5b38:	4622      	mov	r2, r4
   b5b3a:	6868      	ldr	r0, [r5, #4]
   b5b3c:	f7ff fde2 	bl	b5704 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5b40:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5b42:	4681      	mov	r9, r0
        bool ok = false;
   b5b44:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5b46:	2e00      	cmp	r6, #0
   b5b48:	d03b      	beq.n	b5bc2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5b4a:	2900      	cmp	r1, #0
   b5b4c:	d139      	bne.n	b5bc2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5b4e:	6873      	ldr	r3, [r6, #4]
   b5b50:	2b02      	cmp	r3, #2
   b5b52:	d003      	beq.n	b5b5c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5b54:	2b0a      	cmp	r3, #10
   b5b56:	d011      	beq.n	b5b7c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5b58:	69f6      	ldr	r6, [r6, #28]
   b5b5a:	e7f4      	b.n	b5b46 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5b5c:	f1b8 0f00 	cmp.w	r8, #0
   b5b60:	d0fa      	beq.n	b5b58 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5b62:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5b64:	a806      	add	r0, sp, #24
   b5b66:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5b68:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5b6a:	f7ff ff71 	bl	b5a50 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b70:	1d3c      	adds	r4, r7, #4
   b5b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b74:	682b      	ldr	r3, [r5, #0]
   b5b76:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5b78:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5b7a:	e7ed      	b.n	b5b58 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5b7c:	f1b9 0f00 	cmp.w	r9, #0
   b5b80:	d0ea      	beq.n	b5b58 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5b82:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5b84:	2210      	movs	r2, #16
   b5b86:	a801      	add	r0, sp, #4
   b5b88:	f001 f8d8 	bl	b6d3c <memset>
                    a.v = 6;
   b5b8c:	2306      	movs	r3, #6
   b5b8e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5b92:	ad01      	add	r5, sp, #4
   b5b94:	f104 0308 	add.w	r3, r4, #8
   b5b98:	3418      	adds	r4, #24
   b5b9a:	6818      	ldr	r0, [r3, #0]
   b5b9c:	6859      	ldr	r1, [r3, #4]
   b5b9e:	462a      	mov	r2, r5
   b5ba0:	c203      	stmia	r2!, {r0, r1}
   b5ba2:	3308      	adds	r3, #8
   b5ba4:	42a3      	cmp	r3, r4
   b5ba6:	4615      	mov	r5, r2
   b5ba8:	d1f7      	bne.n	b5b9a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5baa:	a901      	add	r1, sp, #4
   b5bac:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5bae:	ad07      	add	r5, sp, #28
   b5bb0:	f7ff ff18 	bl	b59e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5bb6:	1d3c      	adds	r4, r7, #4
   b5bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5bba:	682b      	ldr	r3, [r5, #0]
   b5bbc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5bbe:	4649      	mov	r1, r9
   b5bc0:	e7ca      	b.n	b5b58 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5bc2:	9800      	ldr	r0, [sp, #0]
   b5bc4:	f7ff fc32 	bl	b542c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5bc8:	4638      	mov	r0, r7
   b5bca:	b015      	add	sp, #84	; 0x54
   b5bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5bd0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5bd0:	4b02      	ldr	r3, [pc, #8]	; (b5bdc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5bd2:	4a03      	ldr	r2, [pc, #12]	; (b5be0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5bd4:	601a      	str	r2, [r3, #0]
   b5bd6:	2200      	movs	r2, #0
   b5bd8:	605a      	str	r2, [r3, #4]

} // spark
   b5bda:	4770      	bx	lr
   b5bdc:	2003e6d4 	.word	0x2003e6d4
   b5be0:	000b7500 	.word	0x000b7500

000b5be4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5be6:	4606      	mov	r6, r0
   b5be8:	460d      	mov	r5, r1
  size_t n = 0;
   b5bea:	188f      	adds	r7, r1, r2
   b5bec:	2400      	movs	r4, #0
  while (size--) {
   b5bee:	42bd      	cmp	r5, r7
   b5bf0:	d00c      	beq.n	b5c0c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5bf2:	6833      	ldr	r3, [r6, #0]
   b5bf4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5bf8:	689b      	ldr	r3, [r3, #8]
   b5bfa:	4630      	mov	r0, r6
   b5bfc:	4798      	blx	r3
     if (chunk>=0)
   b5bfe:	1e03      	subs	r3, r0, #0
   b5c00:	db01      	blt.n	b5c06 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5c02:	441c      	add	r4, r3
  while (size--) {
   b5c04:	e7f3      	b.n	b5bee <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5c06:	2c00      	cmp	r4, #0
   b5c08:	bf08      	it	eq
   b5c0a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5c0c:	4620      	mov	r0, r4
   b5c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5c10 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5c10:	b513      	push	{r0, r1, r4, lr}
   b5c12:	4604      	mov	r4, r0
    }
   b5c14:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5c16:	b159      	cbz	r1, b5c30 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5c18:	9101      	str	r1, [sp, #4]
   b5c1a:	f001 f8cf 	bl	b6dbc <strlen>
   b5c1e:	6823      	ldr	r3, [r4, #0]
   b5c20:	9901      	ldr	r1, [sp, #4]
   b5c22:	68db      	ldr	r3, [r3, #12]
   b5c24:	4602      	mov	r2, r0
   b5c26:	4620      	mov	r0, r4
    }
   b5c28:	b002      	add	sp, #8
   b5c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5c2e:	4718      	bx	r3
    }
   b5c30:	b002      	add	sp, #8
   b5c32:	bd10      	pop	{r4, pc}

000b5c34 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5c34:	6803      	ldr	r3, [r0, #0]
   b5c36:	689b      	ldr	r3, [r3, #8]
   b5c38:	4718      	bx	r3

000b5c3a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5c3a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5c3c:	210d      	movs	r1, #13
{
   b5c3e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5c40:	f7ff fff8 	bl	b5c34 <_ZN5Print5printEc>
  n += print('\n');
   b5c44:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5c46:	4604      	mov	r4, r0
  n += print('\n');
   b5c48:	4628      	mov	r0, r5
   b5c4a:	f7ff fff3 	bl	b5c34 <_ZN5Print5printEc>
  return n;
}
   b5c4e:	4420      	add	r0, r4
   b5c50:	bd38      	pop	{r3, r4, r5, pc}

000b5c52 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5c52:	b530      	push	{r4, r5, lr}
   b5c54:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5c56:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5c58:	2a01      	cmp	r2, #1
  *str = '\0';
   b5c5a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5c5e:	bf98      	it	ls
   b5c60:	220a      	movls	r2, #10
   b5c62:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5c64:	460d      	mov	r5, r1
   b5c66:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5c6a:	fb01 5312 	mls	r3, r1, r2, r5
   b5c6e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5c72:	2b09      	cmp	r3, #9
   b5c74:	bf94      	ite	ls
   b5c76:	3330      	addls	r3, #48	; 0x30
   b5c78:	3337      	addhi	r3, #55	; 0x37
   b5c7a:	b2db      	uxtb	r3, r3
  } while(n);
   b5c7c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5c7e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5c82:	d9ef      	bls.n	b5c64 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5c84:	4621      	mov	r1, r4
   b5c86:	f7ff ffc3 	bl	b5c10 <_ZN5Print5writeEPKc>
}
   b5c8a:	b00b      	add	sp, #44	; 0x2c
   b5c8c:	bd30      	pop	{r4, r5, pc}

000b5c8e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5c92:	b086      	sub	sp, #24
   b5c94:	af00      	add	r7, sp, #0
   b5c96:	4605      	mov	r5, r0
   b5c98:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5c9a:	1d38      	adds	r0, r7, #4
   b5c9c:	2114      	movs	r1, #20
{
   b5c9e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5ca0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5ca2:	f7ff fd8f 	bl	b57c4 <vsnprintf>

    if (n<bufsize)
   b5ca6:	2813      	cmp	r0, #19
   b5ca8:	d80e      	bhi.n	b5cc8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5caa:	1d39      	adds	r1, r7, #4
   b5cac:	4628      	mov	r0, r5
   b5cae:	f7ff ffaf 	bl	b5c10 <_ZN5Print5writeEPKc>
   b5cb2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5cb4:	b11e      	cbz	r6, b5cbe <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b5cb6:	4628      	mov	r0, r5
   b5cb8:	f7ff ffbf 	bl	b5c3a <_ZN5Print7printlnEv>
   b5cbc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5cbe:	4620      	mov	r0, r4
   b5cc0:	3718      	adds	r7, #24
   b5cc2:	46bd      	mov	sp, r7
   b5cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5cc8:	f100 0308 	add.w	r3, r0, #8
   b5ccc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5cd0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5cd2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b5cd6:	4622      	mov	r2, r4
   b5cd8:	1c41      	adds	r1, r0, #1
   b5cda:	683b      	ldr	r3, [r7, #0]
   b5cdc:	4668      	mov	r0, sp
   b5cde:	f7ff fd71 	bl	b57c4 <vsnprintf>
  return write(str);
   b5ce2:	4669      	mov	r1, sp
   b5ce4:	4628      	mov	r0, r5
   b5ce6:	f7ff ff93 	bl	b5c10 <_ZN5Print5writeEPKc>
   b5cea:	4604      	mov	r4, r0
   b5cec:	46c5      	mov	sp, r8
   b5cee:	e7e1      	b.n	b5cb4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5cf0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5cf0:	4b01      	ldr	r3, [pc, #4]	; (b5cf8 <_GLOBAL__sub_I_RGB+0x8>)
   b5cf2:	2200      	movs	r2, #0
   b5cf4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5cf6:	4770      	bx	lr
   b5cf8:	2003e6dc 	.word	0x2003e6dc

000b5cfc <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5cfc:	2100      	movs	r1, #0
   b5cfe:	f7ff bc1d 	b.w	b553c <hal_spi_release>

000b5d02 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b5d02:	2100      	movs	r1, #0
   b5d04:	f7ff bc12 	b.w	b552c <hal_spi_acquire>

000b5d08 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5d08:	b510      	push	{r4, lr}
   b5d0a:	4604      	mov	r4, r0
   b5d0c:	4608      	mov	r0, r1
{
    _spi = spi;
   b5d0e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5d10:	f7ff fbf4 	bl	b54fc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5d14:	2300      	movs	r3, #0
   b5d16:	6063      	str	r3, [r4, #4]
}
   b5d18:	4620      	mov	r0, r4
   b5d1a:	bd10      	pop	{r4, pc}

000b5d1c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b5d1c:	b513      	push	{r0, r1, r4, lr}
   b5d1e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b5d20:	7800      	ldrb	r0, [r0, #0]
   b5d22:	f7ff ffee 	bl	b5d02 <_ZN8SPIClass4lockEv.isra.0>
   b5d26:	b958      	cbnz	r0, b5d40 <_ZN8SPIClass5beginEv+0x24>
   b5d28:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b5d2a:	9001      	str	r0, [sp, #4]
   b5d2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5d30:	f7ff fbbc 	bl	b54ac <hal_spi_begin>
        unlock();
   b5d34:	9801      	ldr	r0, [sp, #4]
    }
}
   b5d36:	b002      	add	sp, #8
   b5d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5d3c:	f7ff bfde 	b.w	b5cfc <_ZN8SPIClass6unlockEv.isra.0>
   b5d40:	b002      	add	sp, #8
   b5d42:	bd10      	pop	{r4, pc}

000b5d44 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b5d44:	b513      	push	{r0, r1, r4, lr}
   b5d46:	4604      	mov	r4, r0
    if (!lock())
   b5d48:	7800      	ldrb	r0, [r0, #0]
{
   b5d4a:	9101      	str	r1, [sp, #4]
    if (!lock())
   b5d4c:	f7ff ffd9 	bl	b5d02 <_ZN8SPIClass4lockEv.isra.0>
   b5d50:	9901      	ldr	r1, [sp, #4]
   b5d52:	b948      	cbnz	r0, b5d68 <_ZN8SPIClass11setBitOrderEh+0x24>
   b5d54:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b5d56:	9001      	str	r0, [sp, #4]
   b5d58:	f7ff fbb0 	bl	b54bc <hal_spi_set_bit_order>
        unlock();
   b5d5c:	9801      	ldr	r0, [sp, #4]
    }
}
   b5d5e:	b002      	add	sp, #8
   b5d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5d64:	f7ff bfca 	b.w	b5cfc <_ZN8SPIClass6unlockEv.isra.0>
   b5d68:	b002      	add	sp, #8
   b5d6a:	bd10      	pop	{r4, pc}

000b5d6c <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b5d6c:	b513      	push	{r0, r1, r4, lr}
   b5d6e:	4604      	mov	r4, r0
    if (!lock())
   b5d70:	7800      	ldrb	r0, [r0, #0]
{
   b5d72:	9101      	str	r1, [sp, #4]
    if (!lock())
   b5d74:	f7ff ffc5 	bl	b5d02 <_ZN8SPIClass4lockEv.isra.0>
   b5d78:	9901      	ldr	r1, [sp, #4]
   b5d7a:	b948      	cbnz	r0, b5d90 <_ZN8SPIClass11setDataModeEh+0x24>
   b5d7c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b5d7e:	9001      	str	r0, [sp, #4]
   b5d80:	f7ff fba4 	bl	b54cc <hal_spi_set_data_mode>
        unlock();
   b5d84:	9801      	ldr	r0, [sp, #4]
    }
}
   b5d86:	b002      	add	sp, #8
   b5d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5d8c:	f7ff bfb6 	b.w	b5cfc <_ZN8SPIClass6unlockEv.isra.0>
   b5d90:	b002      	add	sp, #8
   b5d92:	bd10      	pop	{r4, pc}

000b5d94 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5d94:	0840      	lsrs	r0, r0, #1
{
   b5d96:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5d98:	6018      	str	r0, [r3, #0]
   b5d9a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5d9c:	6818      	ldr	r0, [r3, #0]
   b5d9e:	4288      	cmp	r0, r1
   b5da0:	b2e5      	uxtb	r5, r4
   b5da2:	d906      	bls.n	b5db2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5da4:	3401      	adds	r4, #1
   b5da6:	2c08      	cmp	r4, #8
   b5da8:	d002      	beq.n	b5db0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b5daa:	0840      	lsrs	r0, r0, #1
   b5dac:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5dae:	e7f5      	b.n	b5d9c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5db0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5db2:	4b02      	ldr	r3, [pc, #8]	; (b5dbc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5db4:	5d5b      	ldrb	r3, [r3, r5]
   b5db6:	7013      	strb	r3, [r2, #0]
}
   b5db8:	bd30      	pop	{r4, r5, pc}
   b5dba:	bf00      	nop
   b5dbc:	000b7534 	.word	0x000b7534

000b5dc0 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b5dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5dc4:	b088      	sub	sp, #32
    unsigned clock = 0;
   b5dc6:	2300      	movs	r3, #0
{
   b5dc8:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b5dca:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b5dcc:	9302      	str	r3, [sp, #8]
{
   b5dce:	460e      	mov	r6, r1
   b5dd0:	4617      	mov	r7, r2
    if (!lock())
   b5dd2:	f7ff ff96 	bl	b5d02 <_ZN8SPIClass4lockEv.isra.0>
   b5dd6:	4605      	mov	r5, r0
   b5dd8:	bb00      	cbnz	r0, b5e1c <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b5dda:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5dde:	4601      	mov	r1, r0
   b5de0:	2214      	movs	r2, #20
   b5de2:	a803      	add	r0, sp, #12
   b5de4:	f000 ffaa 	bl	b6d3c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5de8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b5dea:	462a      	mov	r2, r5
   b5dec:	a903      	add	r1, sp, #12
   b5dee:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b5df0:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b5df4:	f7ff fb92 	bl	b551c <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b5df8:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b5dfa:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b5dfe:	ab02      	add	r3, sp, #8
   b5e00:	f10d 0207 	add.w	r2, sp, #7
   b5e04:	fb07 f106 	mul.w	r1, r7, r6
   b5e08:	f7ff ffc4 	bl	b5d94 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b5e0c:	7820      	ldrb	r0, [r4, #0]
   b5e0e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b5e12:	f7ff fb63 	bl	b54dc <hal_spi_set_clock_divider>
        unlock();
   b5e16:	7820      	ldrb	r0, [r4, #0]
   b5e18:	f7ff ff70 	bl	b5cfc <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b5e1c:	9802      	ldr	r0, [sp, #8]
   b5e1e:	b008      	add	sp, #32
   b5e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5e24 <_ZN8SPIClass15setClockDividerEh>:
{
   b5e24:	b538      	push	{r3, r4, r5, lr}
   b5e26:	4604      	mov	r4, r0
    if (!lock())
   b5e28:	7800      	ldrb	r0, [r0, #0]
{
   b5e2a:	460d      	mov	r5, r1
    if (!lock())
   b5e2c:	f7ff ff69 	bl	b5d02 <_ZN8SPIClass4lockEv.isra.0>
   b5e30:	4603      	mov	r3, r0
   b5e32:	b9d0      	cbnz	r0, b5e6a <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b5e34:	6861      	ldr	r1, [r4, #4]
   b5e36:	b199      	cbz	r1, b5e60 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b5e38:	4a0c      	ldr	r2, [pc, #48]	; (b5e6c <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b5e3a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5e3e:	4285      	cmp	r5, r0
   b5e40:	d002      	beq.n	b5e48 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b5e42:	3301      	adds	r3, #1
   b5e44:	2b08      	cmp	r3, #8
   b5e46:	d1f8      	bne.n	b5e3a <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b5e48:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b5e4a:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b5e4c:	2201      	movs	r2, #1
   b5e4e:	40d9      	lsrs	r1, r3
   b5e50:	4620      	mov	r0, r4
   b5e52:	f7ff ffb5 	bl	b5dc0 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b5e56:	7820      	ldrb	r0, [r4, #0]
}
   b5e58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b5e5c:	f7ff bf4e 	b.w	b5cfc <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b5e60:	7820      	ldrb	r0, [r4, #0]
   b5e62:	4629      	mov	r1, r5
   b5e64:	f7ff fb3a 	bl	b54dc <hal_spi_set_clock_divider>
   b5e68:	e7f5      	b.n	b5e56 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b5e6a:	bd38      	pop	{r3, r4, r5, pc}
   b5e6c:	000b7534 	.word	0x000b7534

000b5e70 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b5e70:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b5e72:	7800      	ldrb	r0, [r0, #0]
   b5e74:	f7ff fb3a 	bl	b54ec <hal_spi_transfer>
}
   b5e78:	b2c0      	uxtb	r0, r0
   b5e7a:	bd08      	pop	{r3, pc}

000b5e7c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5e7c:	b510      	push	{r4, lr}
   b5e7e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5e80:	6800      	ldr	r0, [r0, #0]
   b5e82:	b108      	cbz	r0, b5e88 <_ZN6String10invalidateEv+0xc>
   b5e84:	f7ff fc8e 	bl	b57a4 <free>
	buffer = NULL;
   b5e88:	2300      	movs	r3, #0
	capacity = len = 0;
   b5e8a:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5e8e:	6023      	str	r3, [r4, #0]
}
   b5e90:	bd10      	pop	{r4, pc}

000b5e92 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5e92:	b538      	push	{r3, r4, r5, lr}
   b5e94:	4604      	mov	r4, r0
   b5e96:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5e98:	6800      	ldr	r0, [r0, #0]
   b5e9a:	3101      	adds	r1, #1
   b5e9c:	f7ff fc8a 	bl	b57b4 <realloc>
	if (newbuffer) {
   b5ea0:	b110      	cbz	r0, b5ea8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5ea2:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5ea6:	2001      	movs	r0, #1
	}
	return 0;
}
   b5ea8:	bd38      	pop	{r3, r4, r5, pc}

000b5eaa <_ZN6String7reserveEj>:
{
   b5eaa:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5eac:	6803      	ldr	r3, [r0, #0]
{
   b5eae:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5eb0:	b123      	cbz	r3, b5ebc <_ZN6String7reserveEj+0x12>
   b5eb2:	6843      	ldr	r3, [r0, #4]
   b5eb4:	428b      	cmp	r3, r1
   b5eb6:	d301      	bcc.n	b5ebc <_ZN6String7reserveEj+0x12>
   b5eb8:	2001      	movs	r0, #1
}
   b5eba:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5ebc:	4620      	mov	r0, r4
   b5ebe:	f7ff ffe8 	bl	b5e92 <_ZN6String12changeBufferEj>
   b5ec2:	2800      	cmp	r0, #0
   b5ec4:	d0f9      	beq.n	b5eba <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5ec6:	68a3      	ldr	r3, [r4, #8]
   b5ec8:	2b00      	cmp	r3, #0
   b5eca:	d1f5      	bne.n	b5eb8 <_ZN6String7reserveEj+0xe>
   b5ecc:	6822      	ldr	r2, [r4, #0]
   b5ece:	7013      	strb	r3, [r2, #0]
   b5ed0:	e7f2      	b.n	b5eb8 <_ZN6String7reserveEj+0xe>

000b5ed2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5ed2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5ed4:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5ed6:	4611      	mov	r1, r2
   b5ed8:	9201      	str	r2, [sp, #4]
{
   b5eda:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5edc:	f7ff ffe5 	bl	b5eaa <_ZN6String7reserveEj>
   b5ee0:	9a01      	ldr	r2, [sp, #4]
   b5ee2:	b928      	cbnz	r0, b5ef0 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5ee4:	4620      	mov	r0, r4
   b5ee6:	f7ff ffc9 	bl	b5e7c <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5eea:	4620      	mov	r0, r4
   b5eec:	b003      	add	sp, #12
   b5eee:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5ef0:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5ef2:	4629      	mov	r1, r5
   b5ef4:	6820      	ldr	r0, [r4, #0]
   b5ef6:	f000 ff13 	bl	b6d20 <memcpy>
	buffer[len] = 0;
   b5efa:	6822      	ldr	r2, [r4, #0]
   b5efc:	68a3      	ldr	r3, [r4, #8]
   b5efe:	2100      	movs	r1, #0
   b5f00:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5f02:	e7f2      	b.n	b5eea <_ZN6String4copyEPKcj+0x18>

000b5f04 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5f04:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5f06:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5f08:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5f0c:	4604      	mov	r4, r0
	len = 0;
   b5f0e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5f10:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5f12:	b141      	cbz	r1, b5f26 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5f14:	4608      	mov	r0, r1
   b5f16:	9101      	str	r1, [sp, #4]
   b5f18:	f000 ff50 	bl	b6dbc <strlen>
   b5f1c:	9901      	ldr	r1, [sp, #4]
   b5f1e:	4602      	mov	r2, r0
   b5f20:	4620      	mov	r0, r4
   b5f22:	f7ff ffd6 	bl	b5ed2 <_ZN6String4copyEPKcj>
}
   b5f26:	4620      	mov	r0, r4
   b5f28:	b002      	add	sp, #8
   b5f2a:	bd10      	pop	{r4, pc}

000b5f2c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5f2c:	4b05      	ldr	r3, [pc, #20]	; (b5f44 <_GLOBAL__sub_I_System+0x18>)
   b5f2e:	2202      	movs	r2, #2
   b5f30:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5f32:	4b05      	ldr	r3, [pc, #20]	; (b5f48 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5f34:	4a05      	ldr	r2, [pc, #20]	; (b5f4c <_GLOBAL__sub_I_System+0x20>)
   b5f36:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5f38:	2000      	movs	r0, #0
   b5f3a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5f3e:	f7ff bb95 	b.w	b566c <set_system_mode>
   b5f42:	bf00      	nop
   b5f44:	2003e6f8 	.word	0x2003e6f8
   b5f48:	2003e6ec 	.word	0x2003e6ec
   b5f4c:	ffff0000 	.word	0xffff0000

000b5f50 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b5f50:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5f52:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b5f54:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b5f58:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5f5a:	2201      	movs	r2, #1
   b5f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5f60:	f10d 0107 	add.w	r1, sp, #7
   b5f64:	47a0      	blx	r4
}
   b5f66:	b002      	add	sp, #8
   b5f68:	bd10      	pop	{r4, pc}

000b5f6a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b5f6a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5f6c:	6803      	ldr	r3, [r0, #0]
   b5f6e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b5f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5f74:	46a4      	mov	ip, r4
}
   b5f76:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b5f7a:	4760      	bx	ip

000b5f7c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5f7c:	b513      	push	{r0, r1, r4, lr}
   b5f7e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b5f80:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b5f82:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b5f86:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5f88:	f10d 0107 	add.w	r1, sp, #7
   b5f8c:	2201      	movs	r2, #1
   b5f8e:	47a0      	blx	r4
}
   b5f90:	b002      	add	sp, #8
   b5f92:	bd10      	pop	{r4, pc}

000b5f94 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b5f94:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5f96:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5f98:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b5f9c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b5fa0:	429a      	cmp	r2, r3
int TCPClient::read() {
   b5fa2:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5fa4:	d008      	beq.n	b5fb8 <_ZN9TCPClient4readEv+0x24>
   b5fa6:	6963      	ldr	r3, [r4, #20]
   b5fa8:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b5fac:	1c51      	adds	r1, r2, #1
   b5fae:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b5fb2:	4413      	add	r3, r2
   b5fb4:	7918      	ldrb	r0, [r3, #4]
}
   b5fb6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b5fb8:	6803      	ldr	r3, [r0, #0]
   b5fba:	691b      	ldr	r3, [r3, #16]
   b5fbc:	4798      	blx	r3
   b5fbe:	2800      	cmp	r0, #0
   b5fc0:	d1f1      	bne.n	b5fa6 <_ZN9TCPClient4readEv+0x12>
   b5fc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5fc6:	e7f6      	b.n	b5fb6 <_ZN9TCPClient4readEv+0x22>

000b5fc8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b5fc8:	4770      	bx	lr

000b5fca <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b5fca:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b5fcc:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b5fce:	43c0      	mvns	r0, r0
   b5fd0:	0fc0      	lsrs	r0, r0, #31
   b5fd2:	4770      	bx	lr

000b5fd4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5fd4:	4770      	bx	lr
	...

000b5fd8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b5fd8:	4b06      	ldr	r3, [pc, #24]	; (b5ff4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b5fda:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b5fdc:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b5fde:	f100 040c 	add.w	r4, r0, #12
	    ||
   b5fe2:	d005      	beq.n	b5ff0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b5fe4:	4608      	mov	r0, r1
   b5fe6:	f000 fd83 	bl	b6af0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b5fea:	2800      	cmp	r0, #0
   b5fec:	bf08      	it	eq
   b5fee:	2400      	moveq	r4, #0
      }
   b5ff0:	4620      	mov	r0, r4
   b5ff2:	bd10      	pop	{r4, pc}
   b5ff4:	000b7474 	.word	0x000b7474

000b5ff8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b5ff8:	b510      	push	{r4, lr}
   b5ffa:	21ac      	movs	r1, #172	; 0xac
   b5ffc:	4604      	mov	r4, r0
   b5ffe:	f7fe f84c 	bl	b409a <_ZdlPvj>
   b6002:	4620      	mov	r0, r4
   b6004:	bd10      	pop	{r4, pc}

000b6006 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6006:	21ac      	movs	r1, #172	; 0xac
   b6008:	f7fe b847 	b.w	b409a <_ZdlPvj>

000b600c <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b600c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6010:	f04f 0800 	mov.w	r8, #0
   b6014:	b086      	sub	sp, #24
   b6016:	461c      	mov	r4, r3
   b6018:	f8c0 8004 	str.w	r8, [r0, #4]
   b601c:	4605      	mov	r5, r0
   b601e:	460e      	mov	r6, r1
   b6020:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6022:	4641      	mov	r1, r8
   b6024:	2210      	movs	r2, #16
   b6026:	a802      	add	r0, sp, #8
   b6028:	f000 fe88 	bl	b6d3c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b602c:	1c63      	adds	r3, r4, #1
   b602e:	d009      	beq.n	b6044 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6034:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6038:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b603c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6040:	435c      	muls	r4, r3
   b6042:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6044:	6968      	ldr	r0, [r5, #20]
   b6046:	2310      	movs	r3, #16
   b6048:	9300      	str	r3, [sp, #0]
   b604a:	6800      	ldr	r0, [r0, #0]
   b604c:	ab02      	add	r3, sp, #8
   b604e:	f241 0205 	movw	r2, #4101	; 0x1005
   b6052:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6056:	f7ff f9f9 	bl	b544c <sock_setsockopt>
    if (ret < 0) {
   b605a:	2800      	cmp	r0, #0
   b605c:	da07      	bge.n	b606e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b605e:	f7ff fbb9 	bl	b57d4 <__errno>
   b6062:	6803      	ldr	r3, [r0, #0]
   b6064:	606b      	str	r3, [r5, #4]
        return 0;
   b6066:	2000      	movs	r0, #0
}
   b6068:	b006      	add	sp, #24
   b606a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b606e:	6968      	ldr	r0, [r5, #20]
   b6070:	2300      	movs	r3, #0
   b6072:	6800      	ldr	r0, [r0, #0]
   b6074:	463a      	mov	r2, r7
   b6076:	4631      	mov	r1, r6
   b6078:	f7ff fa08 	bl	b548c <sock_send>
    if (ret < 0) {
   b607c:	1e03      	subs	r3, r0, #0
   b607e:	dbee      	blt.n	b605e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b6080:	4618      	mov	r0, r3
   b6082:	e7f1      	b.n	b6068 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b6084 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b6084:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b6086:	6984      	ldr	r4, [r0, #24]
   b6088:	4b0a      	ldr	r3, [pc, #40]	; (b60b4 <_ZN9TCPClientD1Ev+0x30>)
   b608a:	6003      	str	r3, [r0, #0]
   b608c:	4605      	mov	r5, r0
   b608e:	b17c      	cbz	r4, b60b0 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b6090:	6863      	ldr	r3, [r4, #4]
   b6092:	3b01      	subs	r3, #1
   b6094:	6063      	str	r3, [r4, #4]
   b6096:	b95b      	cbnz	r3, b60b0 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b6098:	6823      	ldr	r3, [r4, #0]
   b609a:	4620      	mov	r0, r4
   b609c:	689b      	ldr	r3, [r3, #8]
   b609e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b60a0:	68a3      	ldr	r3, [r4, #8]
   b60a2:	3b01      	subs	r3, #1
   b60a4:	60a3      	str	r3, [r4, #8]
   b60a6:	b91b      	cbnz	r3, b60b0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b60a8:	6823      	ldr	r3, [r4, #0]
   b60aa:	4620      	mov	r0, r4
   b60ac:	68db      	ldr	r3, [r3, #12]
   b60ae:	4798      	blx	r3
   b60b0:	4628      	mov	r0, r5
   b60b2:	bd38      	pop	{r3, r4, r5, pc}
   b60b4:	000b7578 	.word	0x000b7578

000b60b8 <_ZN9TCPClientD0Ev>:
   b60b8:	b510      	push	{r4, lr}
   b60ba:	4604      	mov	r4, r0
   b60bc:	f7ff ffe2 	bl	b6084 <_ZN9TCPClientD1Ev>
   b60c0:	4620      	mov	r0, r4
   b60c2:	211c      	movs	r1, #28
   b60c4:	f7fd ffe9 	bl	b409a <_ZdlPvj>
   b60c8:	4620      	mov	r0, r4
   b60ca:	bd10      	pop	{r4, pc}

000b60cc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b60cc:	b530      	push	{r4, r5, lr}
   b60ce:	b087      	sub	sp, #28
   b60d0:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b60d2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b60d4:	4668      	mov	r0, sp
   b60d6:	f7ff fcbb 	bl	b5a50 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b60da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b60dc:	3404      	adds	r4, #4
   b60de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b60e0:	682b      	ldr	r3, [r5, #0]
   b60e2:	7023      	strb	r3, [r4, #0]
    }
   b60e4:	b007      	add	sp, #28
   b60e6:	bd30      	pop	{r4, r5, pc}

000b60e8 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b60e8:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b60ea:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b60ec:	4b05      	ldr	r3, [pc, #20]	; (b6104 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b60ee:	4604      	mov	r4, r0
   b60f0:	358c      	adds	r5, #140	; 0x8c
   b60f2:	f844 3b04 	str.w	r3, [r4], #4
   b60f6:	4606      	mov	r6, r0
   b60f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b60fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b60fc:	682b      	ldr	r3, [r5, #0]
   b60fe:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b6100:	4630      	mov	r0, r6
   b6102:	bd70      	pop	{r4, r5, r6, pc}
   b6104:	000b74e8 	.word	0x000b74e8

000b6108 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b610c:	4698      	mov	r8, r3
    stop();
   b610e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6110:	b093      	sub	sp, #76	; 0x4c
   b6112:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b6114:	2400      	movs	r4, #0
    stop();
   b6116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6118:	4606      	mov	r6, r0
   b611a:	4617      	mov	r7, r2
    stop();
   b611c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b611e:	4628      	mov	r0, r5
   b6120:	466b      	mov	r3, sp
   b6122:	4622      	mov	r2, r4
   b6124:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b6126:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6128:	f7ff f988 	bl	b543c <netdb_getaddrinfo>
   b612c:	4605      	mov	r5, r0
   b612e:	2800      	cmp	r0, #0
   b6130:	d163      	bne.n	b61fa <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b6132:	9b00      	ldr	r3, [sp, #0]
   b6134:	2b00      	cmp	r3, #0
   b6136:	d04b      	beq.n	b61d0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6138:	695b      	ldr	r3, [r3, #20]
   b613a:	2b00      	cmp	r3, #0
   b613c:	d048      	beq.n	b61d0 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b613e:	a806      	add	r0, sp, #24
   b6140:	f7ff fc42 	bl	b59c8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b6144:	9b00      	ldr	r3, [sp, #0]
   b6146:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6148:	7863      	ldrb	r3, [r4, #1]
   b614a:	2b02      	cmp	r3, #2
   b614c:	d104      	bne.n	b6158 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b614e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6150:	a806      	add	r0, sp, #24
   b6152:	f7ff ffbb 	bl	b60cc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b6156:	e026      	b.n	b61a6 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6158:	2b0a      	cmp	r3, #10
   b615a:	d124      	bne.n	b61a6 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b615c:	2211      	movs	r2, #17
   b615e:	4629      	mov	r1, r5
   b6160:	a801      	add	r0, sp, #4
   b6162:	f000 fdeb 	bl	b6d3c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6166:	68a3      	ldr	r3, [r4, #8]
   b6168:	2b00      	cmp	r3, #0
   b616a:	d038      	beq.n	b61de <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b616c:	f104 0308 	add.w	r3, r4, #8
   b6170:	f10d 0c04 	add.w	ip, sp, #4
   b6174:	3418      	adds	r4, #24
   b6176:	6818      	ldr	r0, [r3, #0]
   b6178:	6859      	ldr	r1, [r3, #4]
   b617a:	4662      	mov	r2, ip
   b617c:	c203      	stmia	r2!, {r0, r1}
   b617e:	3308      	adds	r3, #8
   b6180:	42a3      	cmp	r3, r4
   b6182:	4694      	mov	ip, r2
   b6184:	d1f7      	bne.n	b6176 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b6186:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6188:	a901      	add	r1, sp, #4
   b618a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b618c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6190:	f7ff fc28 	bl	b59e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6194:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6198:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b619c:	ac07      	add	r4, sp, #28
   b619e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b61a0:	f8dc 3000 	ldr.w	r3, [ip]
   b61a4:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b61a6:	a806      	add	r0, sp, #24
   b61a8:	f7ff fc2e 	bl	b5a08 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b61ac:	b180      	cbz	r0, b61d0 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b61ae:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b61b0:	ad07      	add	r5, sp, #28
   b61b2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b61b6:	4b12      	ldr	r3, [pc, #72]	; (b6200 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b61b8:	930c      	str	r3, [sp, #48]	; 0x30
   b61ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b61bc:	ac0d      	add	r4, sp, #52	; 0x34
   b61be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b61c0:	682b      	ldr	r3, [r5, #0]
   b61c2:	7023      	strb	r3, [r4, #0]
   b61c4:	463a      	mov	r2, r7
   b61c6:	4643      	mov	r3, r8
   b61c8:	a90c      	add	r1, sp, #48	; 0x30
   b61ca:	4630      	mov	r0, r6
   b61cc:	47c8      	blx	r9
   b61ce:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b61d0:	9800      	ldr	r0, [sp, #0]
   b61d2:	f7ff f92b 	bl	b542c <netdb_freeaddrinfo>
}
   b61d6:	4628      	mov	r0, r5
   b61d8:	b013      	add	sp, #76	; 0x4c
   b61da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b61de:	68e3      	ldr	r3, [r4, #12]
   b61e0:	2b00      	cmp	r3, #0
   b61e2:	d1c3      	bne.n	b616c <_ZN9TCPClient7connectEPKctm+0x64>
   b61e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b61e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b61ec:	f7ff f90e 	bl	b540c <inet_htonl>
   b61f0:	4581      	cmp	r9, r0
   b61f2:	d1bb      	bne.n	b616c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b61f4:	f104 0114 	add.w	r1, r4, #20
   b61f8:	e7aa      	b.n	b6150 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b61fa:	4625      	mov	r5, r4
   b61fc:	e7e8      	b.n	b61d0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b61fe:	bf00      	nop
   b6200:	000b74e8 	.word	0x000b74e8

000b6204 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b6204:	b538      	push	{r3, r4, r5, lr}
   b6206:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b6208:	681a      	ldr	r2, [r3, #0]
   b620a:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b620c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b620e:	da10      	bge.n	b6232 <_ZN9TCPClient9connectedEv+0x2e>
   b6210:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6214:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6218:	429a      	cmp	r2, r3
   b621a:	d10a      	bne.n	b6232 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b621c:	6803      	ldr	r3, [r0, #0]
   b621e:	691b      	ldr	r3, [r3, #16]
   b6220:	4798      	blx	r3
        if (!rv) {
   b6222:	4604      	mov	r4, r0
   b6224:	b928      	cbnz	r0, b6232 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b6226:	682b      	ldr	r3, [r5, #0]
   b6228:	4628      	mov	r0, r5
   b622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b622c:	4798      	blx	r3
        rv = available();
   b622e:	4620      	mov	r0, r4
}
   b6230:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b6232:	2001      	movs	r0, #1
   b6234:	e7fc      	b.n	b6230 <_ZN9TCPClient9connectedEv+0x2c>

000b6236 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b6236:	b510      	push	{r4, lr}
   b6238:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b623a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b623e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6242:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b6244:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6246:	d005      	beq.n	b6254 <_ZN9TCPClient4peekEv+0x1e>
   b6248:	6963      	ldr	r3, [r4, #20]
   b624a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b624e:	4413      	add	r3, r2
   b6250:	7918      	ldrb	r0, [r3, #4]
}
   b6252:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6254:	6803      	ldr	r3, [r0, #0]
   b6256:	691b      	ldr	r3, [r3, #16]
   b6258:	4798      	blx	r3
   b625a:	2800      	cmp	r0, #0
   b625c:	d1f4      	bne.n	b6248 <_ZN9TCPClient4peekEv+0x12>
   b625e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6262:	e7f6      	b.n	b6252 <_ZN9TCPClient4peekEv+0x1c>

000b6264 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6266:	6943      	ldr	r3, [r0, #20]
   b6268:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b626a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b626e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6272:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6274:	4605      	mov	r5, r0
   b6276:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b6278:	d016      	beq.n	b62a8 <_ZN9TCPClient4readEPhj+0x44>
   b627a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b627c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b6280:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b6284:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b6286:	42bc      	cmp	r4, r7
   b6288:	bf28      	it	cs
   b628a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b628c:	3304      	adds	r3, #4
   b628e:	4622      	mov	r2, r4
   b6290:	4419      	add	r1, r3
   b6292:	4630      	mov	r0, r6
   b6294:	f000 fd44 	bl	b6d20 <memcpy>
   b6298:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b629a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b629e:	4423      	add	r3, r4
   b62a0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b62a4:	4620      	mov	r0, r4
   b62a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b62a8:	6803      	ldr	r3, [r0, #0]
   b62aa:	691b      	ldr	r3, [r3, #16]
   b62ac:	4798      	blx	r3
   b62ae:	2800      	cmp	r0, #0
   b62b0:	d1e3      	bne.n	b627a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b62b2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b62b6:	e7f5      	b.n	b62a4 <_ZN9TCPClient4readEPhj+0x40>

000b62b8 <_ZN9TCPClient12flush_bufferEv>:
   b62b8:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b62ba:	2300      	movs	r3, #0
   b62bc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b62c0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b62c2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b62c6:	4770      	bx	lr

000b62c8 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b62c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b62cc:	461f      	mov	r7, r3
    stop();
   b62ce:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b62d0:	460c      	mov	r4, r1
    stop();
   b62d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b62d4:	b08a      	sub	sp, #40	; 0x28
   b62d6:	4605      	mov	r5, r0
   b62d8:	4616      	mov	r6, r2
    stop();
   b62da:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b62dc:	7d23      	ldrb	r3, [r4, #20]
   b62de:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b62e2:	2b04      	cmp	r3, #4
   b62e4:	bf0c      	ite	eq
   b62e6:	2002      	moveq	r0, #2
   b62e8:	200a      	movne	r0, #10
   b62ea:	2206      	movs	r2, #6
   b62ec:	2101      	movs	r1, #1
   b62ee:	f7ff f8d5 	bl	b549c <sock_socket>
   b62f2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b62f6:	696b      	ldr	r3, [r5, #20]
   b62f8:	681b      	ldr	r3, [r3, #0]
   b62fa:	2b00      	cmp	r3, #0
   b62fc:	da08      	bge.n	b6310 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b62fe:	682b      	ldr	r3, [r5, #0]
   b6300:	4628      	mov	r0, r5
   b6302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6304:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b6306:	4798      	blx	r3
}
   b6308:	4620      	mov	r0, r4
   b630a:	b00a      	add	sp, #40	; 0x28
   b630c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b6310:	4628      	mov	r0, r5
   b6312:	f7ff ffd1 	bl	b62b8 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b6316:	b1b7      	cbz	r7, b6346 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b6318:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b631a:	a903      	add	r1, sp, #12
   b631c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b631e:	9303      	str	r3, [sp, #12]
   b6320:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6324:	f7ff f862 	bl	b53ec <if_index_to_name>
   b6328:	2800      	cmp	r0, #0
   b632a:	d1e8      	bne.n	b62fe <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b632c:	6968      	ldr	r0, [r5, #20]
   b632e:	2306      	movs	r3, #6
   b6330:	9300      	str	r3, [sp, #0]
   b6332:	6800      	ldr	r0, [r0, #0]
   b6334:	ab03      	add	r3, sp, #12
   b6336:	f241 020b 	movw	r2, #4107	; 0x100b
   b633a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b633e:	f7ff f885 	bl	b544c <sock_setsockopt>
   b6342:	2800      	cmp	r0, #0
   b6344:	d1db      	bne.n	b62fe <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b6346:	221c      	movs	r2, #28
   b6348:	2100      	movs	r1, #0
   b634a:	a803      	add	r0, sp, #12
   b634c:	f000 fcf6 	bl	b6d3c <memset>
    if (ip.version() == 4) {
   b6350:	7d23      	ldrb	r3, [r4, #20]
   b6352:	2b04      	cmp	r3, #4
   b6354:	d11d      	bne.n	b6392 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b6356:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b635a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b635c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b6360:	f7ff f85c 	bl	b541c <inet_htons>
   b6364:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b6368:	6860      	ldr	r0, [r4, #4]
   b636a:	f7ff f84f 	bl	b540c <inet_htonl>
   b636e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b6370:	696b      	ldr	r3, [r5, #20]
   b6372:	221c      	movs	r2, #28
   b6374:	6818      	ldr	r0, [r3, #0]
   b6376:	a903      	add	r1, sp, #12
   b6378:	f7ff f878 	bl	b546c <sock_connect>
   b637c:	2800      	cmp	r0, #0
   b637e:	d1be      	bne.n	b62fe <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b6380:	3404      	adds	r4, #4
   b6382:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6384:	696d      	ldr	r5, [r5, #20]
   b6386:	358c      	adds	r5, #140	; 0x8c
   b6388:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b638a:	6823      	ldr	r3, [r4, #0]
   b638c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b638e:	2401      	movs	r4, #1
   b6390:	e7ba      	b.n	b6308 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b6392:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b6396:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b6398:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b639c:	f7ff f83e 	bl	b541c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b63a0:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b63a2:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b63a6:	1d23      	adds	r3, r4, #4
   b63a8:	f104 0714 	add.w	r7, r4, #20
   b63ac:	6818      	ldr	r0, [r3, #0]
   b63ae:	6859      	ldr	r1, [r3, #4]
   b63b0:	4632      	mov	r2, r6
   b63b2:	c203      	stmia	r2!, {r0, r1}
   b63b4:	3308      	adds	r3, #8
   b63b6:	42bb      	cmp	r3, r7
   b63b8:	4616      	mov	r6, r2
   b63ba:	d1f7      	bne.n	b63ac <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b63bc:	e7d8      	b.n	b6370 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b63c0 <_ZN9TCPClient9availableEv>:
{
   b63c0:	b530      	push	{r4, r5, lr}
   b63c2:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b63c4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b63c8:	b08b      	sub	sp, #44	; 0x2c
   b63ca:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b63cc:	b12b      	cbz	r3, b63da <_ZN9TCPClient9availableEv+0x1a>
   b63ce:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b63d2:	429a      	cmp	r2, r3
   b63d4:	d101      	bne.n	b63da <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b63d6:	f7ff ff6f 	bl	b62b8 <_ZN9TCPClient12flush_bufferEv>
   b63da:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b63dc:	6808      	ldr	r0, [r1, #0]
   b63de:	2800      	cmp	r0, #0
   b63e0:	db18      	blt.n	b6414 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b63e2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b63e6:	2d7f      	cmp	r5, #127	; 0x7f
   b63e8:	d814      	bhi.n	b6414 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b63ea:	3104      	adds	r1, #4
   b63ec:	2308      	movs	r3, #8
   b63ee:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b63f2:	4429      	add	r1, r5
   b63f4:	f7ff f842 	bl	b547c <sock_recv>
            if (ret > 0) {
   b63f8:	2800      	cmp	r0, #0
   b63fa:	dd13      	ble.n	b6424 <_ZN9TCPClient9availableEv+0x64>
   b63fc:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b63fe:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6402:	b90a      	cbnz	r2, b6408 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b6404:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b6408:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b640a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b640e:	4410      	add	r0, r2
   b6410:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b6414:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b6416:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b641a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b641e:	1ac0      	subs	r0, r0, r3
   b6420:	b00b      	add	sp, #44	; 0x2c
   b6422:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b6424:	f7ff f9d6 	bl	b57d4 <__errno>
   b6428:	6803      	ldr	r3, [r0, #0]
   b642a:	2b0b      	cmp	r3, #11
   b642c:	d0f2      	beq.n	b6414 <_ZN9TCPClient9availableEv+0x54>
   b642e:	f7ff f9d1 	bl	b57d4 <__errno>
   b6432:	6803      	ldr	r3, [r0, #0]
   b6434:	2b0b      	cmp	r3, #11
   b6436:	d0ed      	beq.n	b6414 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b6438:	2320      	movs	r3, #32
   b643a:	2500      	movs	r5, #0
   b643c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b6440:	f7ff f9c8 	bl	b57d4 <__errno>
   b6444:	6803      	ldr	r3, [r0, #0]
   b6446:	9301      	str	r3, [sp, #4]
   b6448:	4b08      	ldr	r3, [pc, #32]	; (b646c <_ZN9TCPClient9availableEv+0xac>)
   b644a:	4909      	ldr	r1, [pc, #36]	; (b6470 <_ZN9TCPClient9availableEv+0xb0>)
   b644c:	9300      	str	r3, [sp, #0]
   b644e:	aa02      	add	r2, sp, #8
   b6450:	462b      	mov	r3, r5
   b6452:	2032      	movs	r0, #50	; 0x32
   b6454:	f7ff f902 	bl	b565c <log_message>
                    sock_close(d_->sock);
   b6458:	6963      	ldr	r3, [r4, #20]
   b645a:	6818      	ldr	r0, [r3, #0]
   b645c:	f7fe fffe 	bl	b545c <sock_close>
   b6460:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b6462:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6466:	601a      	str	r2, [r3, #0]
   b6468:	e7d4      	b.n	b6414 <_ZN9TCPClient9availableEv+0x54>
   b646a:	bf00      	nop
   b646c:	000b7543 	.word	0x000b7543
   b6470:	000b753c 	.word	0x000b753c

000b6474 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b6474:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b6476:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b6478:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b647a:	6818      	ldr	r0, [r3, #0]
   b647c:	2800      	cmp	r0, #0
   b647e:	db01      	blt.n	b6484 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b6480:	f7fe ffec 	bl	b545c <sock_close>
   b6484:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b6486:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b648a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b648c:	6960      	ldr	r0, [r4, #20]
   b648e:	2211      	movs	r2, #17
   b6490:	2100      	movs	r1, #0
   b6492:	308c      	adds	r0, #140	; 0x8c
   b6494:	f000 fc52 	bl	b6d3c <memset>
    flush_buffer();
   b6498:	4620      	mov	r0, r4
}
   b649a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b649e:	f7ff bf0b 	b.w	b62b8 <_ZN9TCPClient12flush_bufferEv>

000b64a2 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b64a2:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b64a4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b64a6:	4604      	mov	r4, r0
          total(0) {
   b64a8:	6001      	str	r1, [r0, #0]
   b64aa:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b64ae:	3088      	adds	r0, #136	; 0x88
   b64b0:	f7ff fa8a 	bl	b59c8 <_ZN9IPAddressC1Ev>
}
   b64b4:	4620      	mov	r0, r4
   b64b6:	bd10      	pop	{r4, pc}

000b64b8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b64b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b64ba:	2300      	movs	r3, #0
   b64bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b64c0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b64c4:	4a0e      	ldr	r2, [pc, #56]	; (b6500 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b64c6:	6103      	str	r3, [r0, #16]
   b64c8:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b64ca:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b64cc:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b64ce:	20ac      	movs	r0, #172	; 0xac
   b64d0:	9101      	str	r1, [sp, #4]
   b64d2:	f7fd fdde 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b64d6:	1e05      	subs	r5, r0, #0
   b64d8:	f105 060c 	add.w	r6, r5, #12
   b64dc:	d008      	beq.n	b64f0 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b64de:	2301      	movs	r3, #1
   b64e0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b64e4:	4b07      	ldr	r3, [pc, #28]	; (b6504 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b64e6:	9901      	ldr	r1, [sp, #4]
   b64e8:	602b      	str	r3, [r5, #0]
   b64ea:	4630      	mov	r0, r6
   b64ec:	f7ff ffd9 	bl	b64a2 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b64f0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b64f2:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b64f6:	f7ff fedf 	bl	b62b8 <_ZN9TCPClient12flush_bufferEv>
}
   b64fa:	b002      	add	sp, #8
   b64fc:	bd70      	pop	{r4, r5, r6, pc}
   b64fe:	bf00      	nop
   b6500:	000b7578 	.word	0x000b7578
   b6504:	000b755c 	.word	0x000b755c

000b6508 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b6508:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b650a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b650e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b6510:	f7ff ffd2 	bl	b64b8 <_ZN9TCPClientC1Ei>
}
   b6514:	4620      	mov	r0, r4
   b6516:	bd10      	pop	{r4, pc}

000b6518 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b6518:	b510      	push	{r4, lr}
   b651a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b651c:	6800      	ldr	r0, [r0, #0]
   b651e:	2800      	cmp	r0, #0
   b6520:	db01      	blt.n	b6526 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b6522:	f7fe ff9b 	bl	b545c <sock_close>
    }
}
   b6526:	4620      	mov	r0, r4
   b6528:	bd10      	pop	{r4, pc}

000b652a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b652a:	300c      	adds	r0, #12
   b652c:	f7ff bff4 	b.w	b6518 <_ZN9TCPClient4DataD1Ev>

000b6530 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6530:	4b02      	ldr	r3, [pc, #8]	; (b653c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6532:	681a      	ldr	r2, [r3, #0]
   b6534:	4b02      	ldr	r3, [pc, #8]	; (b6540 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6536:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6538:	4770      	bx	lr
   b653a:	bf00      	nop
   b653c:	2003e5d0 	.word	0x2003e5d0
   b6540:	2003e6fc 	.word	0x2003e6fc

000b6544 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6544:	4770      	bx	lr

000b6546 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6546:	7441      	strb	r1, [r0, #17]
}
   b6548:	4770      	bx	lr

000b654a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b654a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b654c:	7c00      	ldrb	r0, [r0, #16]
   b654e:	f7ff f82d 	bl	b55ac <hal_usart_available_data_for_write>
}
   b6552:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6556:	bd08      	pop	{r3, pc}

000b6558 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6558:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b655a:	7c00      	ldrb	r0, [r0, #16]
   b655c:	f7fe fffe 	bl	b555c <hal_usart_available>
}
   b6560:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6564:	bd08      	pop	{r3, pc}

000b6566 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6566:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6568:	7c00      	ldrb	r0, [r0, #16]
   b656a:	f7ff f807 	bl	b557c <hal_usart_peek>
}
   b656e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6572:	bd08      	pop	{r3, pc}

000b6574 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6574:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6576:	7c00      	ldrb	r0, [r0, #16]
   b6578:	f7fe fff8 	bl	b556c <hal_usart_read>
}
   b657c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6580:	bd08      	pop	{r3, pc}

000b6582 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6582:	7c00      	ldrb	r0, [r0, #16]
   b6584:	f7ff b802 	b.w	b558c <hal_usart_flush>

000b6588 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6588:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b658a:	7c45      	ldrb	r5, [r0, #17]
{
   b658c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b658e:	b12d      	cbz	r5, b659c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6590:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6592:	b003      	add	sp, #12
   b6594:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6598:	f7fe bfd8 	b.w	b554c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b659c:	7c00      	ldrb	r0, [r0, #16]
   b659e:	9101      	str	r1, [sp, #4]
   b65a0:	f7ff f804 	bl	b55ac <hal_usart_available_data_for_write>
   b65a4:	2800      	cmp	r0, #0
   b65a6:	9901      	ldr	r1, [sp, #4]
   b65a8:	dcf2      	bgt.n	b6590 <_ZN11USARTSerial5writeEh+0x8>
}
   b65aa:	4628      	mov	r0, r5
   b65ac:	b003      	add	sp, #12
   b65ae:	bd30      	pop	{r4, r5, pc}

000b65b0 <_ZN11USARTSerialD0Ev>:
   b65b0:	b510      	push	{r4, lr}
   b65b2:	2114      	movs	r1, #20
   b65b4:	4604      	mov	r4, r0
   b65b6:	f7fd fd70 	bl	b409a <_ZdlPvj>
   b65ba:	4620      	mov	r0, r4
   b65bc:	bd10      	pop	{r4, pc}
	...

000b65c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b65c0:	b510      	push	{r4, lr}
   b65c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b65c6:	4604      	mov	r4, r0
   b65c8:	4608      	mov	r0, r1
   b65ca:	4611      	mov	r1, r2
   b65cc:	2200      	movs	r2, #0
   b65ce:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b65d2:	4b04      	ldr	r3, [pc, #16]	; (b65e4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b65d4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b65d6:	2301      	movs	r3, #1
  _serial = serial;
   b65d8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b65da:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b65dc:	f7fe ffee 	bl	b55bc <hal_usart_init_ex>
}
   b65e0:	4620      	mov	r0, r4
   b65e2:	bd10      	pop	{r4, pc}
   b65e4:	000b75e0 	.word	0x000b75e0

000b65e8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b65e8:	7441      	strb	r1, [r0, #17]
}
   b65ea:	4770      	bx	lr

000b65ec <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b65ec:	4770      	bx	lr

000b65ee <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b65ee:	4770      	bx	lr

000b65f0 <_ZN9USBSerial4readEv>:
{
   b65f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b65f2:	2100      	movs	r1, #0
   b65f4:	7c00      	ldrb	r0, [r0, #16]
   b65f6:	f7ff f809 	bl	b560c <HAL_USB_USART_Receive_Data>
}
   b65fa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b65fe:	bd08      	pop	{r3, pc}

000b6600 <_ZN9USBSerial4peekEv>:
{
   b6600:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6602:	2101      	movs	r1, #1
   b6604:	7c00      	ldrb	r0, [r0, #16]
   b6606:	f7ff f801 	bl	b560c <HAL_USB_USART_Receive_Data>
}
   b660a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b660e:	bd08      	pop	{r3, pc}

000b6610 <_ZN9USBSerial17availableForWriteEv>:
{
   b6610:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6612:	7c00      	ldrb	r0, [r0, #16]
   b6614:	f7fe fff2 	bl	b55fc <HAL_USB_USART_Available_Data_For_Write>
}
   b6618:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b661c:	bd08      	pop	{r3, pc}

000b661e <_ZN9USBSerial9availableEv>:
{
   b661e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6620:	7c00      	ldrb	r0, [r0, #16]
   b6622:	f7fe ffe3 	bl	b55ec <HAL_USB_USART_Available_Data>
}
   b6626:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b662a:	bd08      	pop	{r3, pc}

000b662c <_ZN9USBSerial5writeEh>:
{
   b662c:	b513      	push	{r0, r1, r4, lr}
   b662e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6630:	7c00      	ldrb	r0, [r0, #16]
{
   b6632:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6634:	f7fe ffe2 	bl	b55fc <HAL_USB_USART_Available_Data_For_Write>
   b6638:	2800      	cmp	r0, #0
   b663a:	9901      	ldr	r1, [sp, #4]
   b663c:	dc01      	bgt.n	b6642 <_ZN9USBSerial5writeEh+0x16>
   b663e:	7c60      	ldrb	r0, [r4, #17]
   b6640:	b120      	cbz	r0, b664c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6642:	7c20      	ldrb	r0, [r4, #16]
   b6644:	f7fe ffea 	bl	b561c <HAL_USB_USART_Send_Data>
   b6648:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b664c:	b002      	add	sp, #8
   b664e:	bd10      	pop	{r4, pc}

000b6650 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6650:	7c00      	ldrb	r0, [r0, #16]
   b6652:	f7fe bfeb 	b.w	b562c <HAL_USB_USART_Flush_Data>

000b6656 <_ZN9USBSerialD0Ev>:
   b6656:	b510      	push	{r4, lr}
   b6658:	2114      	movs	r1, #20
   b665a:	4604      	mov	r4, r0
   b665c:	f7fd fd1d 	bl	b409a <_ZdlPvj>
   b6660:	4620      	mov	r0, r4
   b6662:	bd10      	pop	{r4, pc}

000b6664 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6664:	b510      	push	{r4, lr}
   b6666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b666a:	4604      	mov	r4, r0
   b666c:	4608      	mov	r0, r1
   b666e:	2100      	movs	r1, #0
   b6670:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6674:	4b04      	ldr	r3, [pc, #16]	; (b6688 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6676:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6678:	2301      	movs	r3, #1
  _serial = serial;
   b667a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b667c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b667e:	4611      	mov	r1, r2
   b6680:	f7fe ffa4 	bl	b55cc <HAL_USB_USART_Init>
}
   b6684:	4620      	mov	r0, r4
   b6686:	bd10      	pop	{r4, pc}
   b6688:	000b7610 	.word	0x000b7610

000b668c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b668c:	7c00      	ldrb	r0, [r0, #16]
   b668e:	2200      	movs	r2, #0
   b6690:	f7fe bfa4 	b.w	b55dc <HAL_USB_USART_Begin>

000b6694 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b6694:	7c00      	ldrb	r0, [r0, #16]
   b6696:	f7fe bfd1 	b.w	b563c <HAL_USB_USART_Is_Connected>

000b669a <_Z19acquireSerialBufferv>:
{
   b669a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b669c:	2214      	movs	r2, #20
{
   b669e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b66a0:	2100      	movs	r1, #0
   b66a2:	f000 fb4b 	bl	b6d3c <memset>
}
   b66a6:	4620      	mov	r0, r4
   b66a8:	bd10      	pop	{r4, pc}
	...

000b66ac <_Z16_fetch_usbserialv>:
{
   b66ac:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b66ae:	4c0f      	ldr	r4, [pc, #60]	; (b66ec <_Z16_fetch_usbserialv+0x40>)
{
   b66b0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b66b2:	a803      	add	r0, sp, #12
   b66b4:	f7ff fff1 	bl	b669a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b66b8:	7821      	ldrb	r1, [r4, #0]
   b66ba:	f3bf 8f5b 	dmb	ish
   b66be:	f011 0101 	ands.w	r1, r1, #1
   b66c2:	d10f      	bne.n	b66e4 <_Z16_fetch_usbserialv+0x38>
   b66c4:	4620      	mov	r0, r4
   b66c6:	9101      	str	r1, [sp, #4]
   b66c8:	f7fd fcf6 	bl	b40b8 <__cxa_guard_acquire>
   b66cc:	9901      	ldr	r1, [sp, #4]
   b66ce:	b148      	cbz	r0, b66e4 <_Z16_fetch_usbserialv+0x38>
   b66d0:	aa03      	add	r2, sp, #12
   b66d2:	4807      	ldr	r0, [pc, #28]	; (b66f0 <_Z16_fetch_usbserialv+0x44>)
   b66d4:	f7ff ffc6 	bl	b6664 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b66d8:	4620      	mov	r0, r4
   b66da:	f7fd fcf2 	bl	b40c2 <__cxa_guard_release>
   b66de:	4805      	ldr	r0, [pc, #20]	; (b66f4 <_Z16_fetch_usbserialv+0x48>)
   b66e0:	f000 fb18 	bl	b6d14 <atexit>
	return _usbserial;
}
   b66e4:	4802      	ldr	r0, [pc, #8]	; (b66f0 <_Z16_fetch_usbserialv+0x44>)
   b66e6:	b008      	add	sp, #32
   b66e8:	bd10      	pop	{r4, pc}
   b66ea:	bf00      	nop
   b66ec:	2003e700 	.word	0x2003e700
   b66f0:	2003e704 	.word	0x2003e704
   b66f4:	000b65ed 	.word	0x000b65ed

000b66f8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b66f8:	2200      	movs	r2, #0
   b66fa:	6840      	ldr	r0, [r0, #4]
   b66fc:	4611      	mov	r1, r2
   b66fe:	f7ff b801 	b.w	b5704 <network_ready>

000b6702 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6702:	2200      	movs	r2, #0
   b6704:	6840      	ldr	r0, [r0, #4]
   b6706:	4611      	mov	r1, r2
   b6708:	f7ff b81c 	b.w	b5744 <network_listening>

000b670c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b670c:	2200      	movs	r2, #0
   b670e:	6840      	ldr	r0, [r0, #4]
   b6710:	4611      	mov	r1, r2
   b6712:	f7ff b827 	b.w	b5764 <network_get_listen_timeout>

000b6716 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6716:	6840      	ldr	r0, [r0, #4]
   b6718:	2200      	movs	r2, #0
   b671a:	f7ff b81b 	b.w	b5754 <network_set_listen_timeout>

000b671e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b671e:	6840      	ldr	r0, [r0, #4]
   b6720:	2200      	movs	r2, #0
   b6722:	f081 0101 	eor.w	r1, r1, #1
   b6726:	f7ff b805 	b.w	b5734 <network_listen>

000b672a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b672a:	2300      	movs	r3, #0
   b672c:	6840      	ldr	r0, [r0, #4]
   b672e:	461a      	mov	r2, r3
   b6730:	4619      	mov	r1, r3
   b6732:	f7fe bff7 	b.w	b5724 <network_off>

000b6736 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6736:	2300      	movs	r3, #0
   b6738:	6840      	ldr	r0, [r0, #4]
   b673a:	461a      	mov	r2, r3
   b673c:	4619      	mov	r1, r3
   b673e:	f7fe bfe9 	b.w	b5714 <network_on>

000b6742 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6742:	2200      	movs	r2, #0
   b6744:	6840      	ldr	r0, [r0, #4]
   b6746:	4611      	mov	r1, r2
   b6748:	f7fe bfcc 	b.w	b56e4 <network_connecting>

000b674c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b674c:	6840      	ldr	r0, [r0, #4]
   b674e:	2200      	movs	r2, #0
   b6750:	2102      	movs	r1, #2
   b6752:	f7fe bfcf 	b.w	b56f4 <network_disconnect>

000b6756 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6756:	2300      	movs	r3, #0
   b6758:	6840      	ldr	r0, [r0, #4]
   b675a:	461a      	mov	r2, r3
   b675c:	f7fe bfba 	b.w	b56d4 <network_connect>

000b6760 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6760:	4b02      	ldr	r3, [pc, #8]	; (b676c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6762:	2204      	movs	r2, #4
   b6764:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6766:	4a02      	ldr	r2, [pc, #8]	; (b6770 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6768:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b676a:	4770      	bx	lr
   b676c:	2003e718 	.word	0x2003e718
   b6770:	000b7640 	.word	0x000b7640

000b6774 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6774:	4b01      	ldr	r3, [pc, #4]	; (b677c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6776:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6778:	4770      	bx	lr
   b677a:	bf00      	nop
   b677c:	2003e5d4 	.word	0x2003e5d4

000b6780 <serialEventRun>:
{
   b6780:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6782:	4b0b      	ldr	r3, [pc, #44]	; (b67b0 <serialEventRun+0x30>)
   b6784:	b143      	cbz	r3, b6798 <serialEventRun+0x18>
   b6786:	f7ff ff91 	bl	b66ac <_Z16_fetch_usbserialv>
   b678a:	6803      	ldr	r3, [r0, #0]
   b678c:	691b      	ldr	r3, [r3, #16]
   b678e:	4798      	blx	r3
   b6790:	2800      	cmp	r0, #0
   b6792:	dd01      	ble.n	b6798 <serialEventRun+0x18>
        serialEvent();
   b6794:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6798:	4b06      	ldr	r3, [pc, #24]	; (b67b4 <serialEventRun+0x34>)
   b679a:	b143      	cbz	r3, b67ae <serialEventRun+0x2e>
   b679c:	f000 f982 	bl	b6aa4 <_Z22__fetch_global_Serial1v>
   b67a0:	6803      	ldr	r3, [r0, #0]
   b67a2:	691b      	ldr	r3, [r3, #16]
   b67a4:	4798      	blx	r3
   b67a6:	2800      	cmp	r0, #0
   b67a8:	dd01      	ble.n	b67ae <serialEventRun+0x2e>
        serialEvent1();
   b67aa:	f3af 8000 	nop.w
}
   b67ae:	bd08      	pop	{r3, pc}
	...

000b67b8 <_post_loop>:
{
   b67b8:	b508      	push	{r3, lr}
	serialEventRun();
   b67ba:	f7ff ffe1 	bl	b6780 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b67be:	f7fe fd85 	bl	b52cc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b67c2:	4b01      	ldr	r3, [pc, #4]	; (b67c8 <_post_loop+0x10>)
   b67c4:	6018      	str	r0, [r3, #0]
}
   b67c6:	bd08      	pop	{r3, pc}
   b67c8:	2003e728 	.word	0x2003e728

000b67cc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b67cc:	4805      	ldr	r0, [pc, #20]	; (b67e4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b67ce:	4a06      	ldr	r2, [pc, #24]	; (b67e8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b67d0:	4906      	ldr	r1, [pc, #24]	; (b67ec <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b67d2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b67d4:	1a12      	subs	r2, r2, r0
   b67d6:	f000 faa3 	bl	b6d20 <memcpy>
    __backup_sram_signature = signature;
   b67da:	4b05      	ldr	r3, [pc, #20]	; (b67f0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b67dc:	4a05      	ldr	r2, [pc, #20]	; (b67f4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b67de:	601a      	str	r2, [r3, #0]
}
   b67e0:	bd08      	pop	{r3, pc}
   b67e2:	bf00      	nop
   b67e4:	2003f400 	.word	0x2003f400
   b67e8:	2003f404 	.word	0x2003f404
   b67ec:	000b7834 	.word	0x000b7834
   b67f0:	2003f400 	.word	0x2003f400
   b67f4:	9a271c1e 	.word	0x9a271c1e

000b67f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b67f8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b67fa:	2300      	movs	r3, #0
   b67fc:	9300      	str	r3, [sp, #0]
   b67fe:	461a      	mov	r2, r3
   b6800:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6804:	f7fe ff4c 	bl	b56a0 <system_ctrl_set_result>
}
   b6808:	b003      	add	sp, #12
   b680a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6810 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6810:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6812:	8843      	ldrh	r3, [r0, #2]
   b6814:	2b0a      	cmp	r3, #10
   b6816:	d008      	beq.n	b682a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6818:	2b50      	cmp	r3, #80	; 0x50
   b681a:	d10b      	bne.n	b6834 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b681c:	4b09      	ldr	r3, [pc, #36]	; (b6844 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b681e:	681b      	ldr	r3, [r3, #0]
   b6820:	b14b      	cbz	r3, b6836 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6822:	b003      	add	sp, #12
   b6824:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6828:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b682a:	f7ff ffe5 	bl	b67f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b682e:	b003      	add	sp, #12
   b6830:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6834:	2300      	movs	r3, #0
   b6836:	9300      	str	r3, [sp, #0]
   b6838:	461a      	mov	r2, r3
   b683a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b683e:	f7fe ff2f 	bl	b56a0 <system_ctrl_set_result>
}
   b6842:	e7f4      	b.n	b682e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6844:	2003e724 	.word	0x2003e724

000b6848 <module_user_init_hook>:
{
   b6848:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b684a:	4812      	ldr	r0, [pc, #72]	; (b6894 <module_user_init_hook+0x4c>)
   b684c:	2100      	movs	r1, #0
   b684e:	f7fe ffd1 	bl	b57f4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6852:	4b11      	ldr	r3, [pc, #68]	; (b6898 <module_user_init_hook+0x50>)
   b6854:	681a      	ldr	r2, [r3, #0]
   b6856:	4b11      	ldr	r3, [pc, #68]	; (b689c <module_user_init_hook+0x54>)
   b6858:	429a      	cmp	r2, r3
   b685a:	4b11      	ldr	r3, [pc, #68]	; (b68a0 <module_user_init_hook+0x58>)
   b685c:	bf0c      	ite	eq
   b685e:	2201      	moveq	r2, #1
   b6860:	2200      	movne	r2, #0
   b6862:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6864:	d001      	beq.n	b686a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6866:	f7ff ffb1 	bl	b67cc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b686a:	f7fe fd17 	bl	b529c <HAL_RNG_GetRandomNumber>
   b686e:	4604      	mov	r4, r0
    srand(seed);
   b6870:	f000 fa6c 	bl	b6d4c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6874:	4b0b      	ldr	r3, [pc, #44]	; (b68a4 <module_user_init_hook+0x5c>)
   b6876:	b113      	cbz	r3, b687e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6878:	4620      	mov	r0, r4
   b687a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b687e:	2100      	movs	r1, #0
   b6880:	4808      	ldr	r0, [pc, #32]	; (b68a4 <module_user_init_hook+0x5c>)
   b6882:	f7fe ff1f 	bl	b56c4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b688a:	4807      	ldr	r0, [pc, #28]	; (b68a8 <module_user_init_hook+0x60>)
   b688c:	2100      	movs	r1, #0
   b688e:	f7fe befd 	b.w	b568c <system_ctrl_set_app_request_handler>
   b6892:	bf00      	nop
   b6894:	000b6775 	.word	0x000b6775
   b6898:	2003f400 	.word	0x2003f400
   b689c:	9a271c1e 	.word	0x9a271c1e
   b68a0:	2003e720 	.word	0x2003e720
   b68a4:	00000000 	.word	0x00000000
   b68a8:	000b6811 	.word	0x000b6811

000b68ac <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b68ac:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b68ae:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b68b0:	d902      	bls.n	b68b8 <pinAvailable+0xc>
    return false;
   b68b2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b68b4:	b002      	add	sp, #8
   b68b6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b68b8:	f1a0 030b 	sub.w	r3, r0, #11
   b68bc:	2b02      	cmp	r3, #2
   b68be:	d81a      	bhi.n	b68f6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b68c0:	4c17      	ldr	r4, [pc, #92]	; (b6920 <pinAvailable+0x74>)
   b68c2:	7821      	ldrb	r1, [r4, #0]
   b68c4:	f3bf 8f5b 	dmb	ish
   b68c8:	f011 0101 	ands.w	r1, r1, #1
   b68cc:	d10b      	bne.n	b68e6 <pinAvailable+0x3a>
   b68ce:	4620      	mov	r0, r4
   b68d0:	9101      	str	r1, [sp, #4]
   b68d2:	f7fd fbf1 	bl	b40b8 <__cxa_guard_acquire>
   b68d6:	9901      	ldr	r1, [sp, #4]
   b68d8:	b128      	cbz	r0, b68e6 <pinAvailable+0x3a>
   b68da:	4812      	ldr	r0, [pc, #72]	; (b6924 <pinAvailable+0x78>)
   b68dc:	f7ff fa14 	bl	b5d08 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b68e0:	4620      	mov	r0, r4
   b68e2:	f7fd fbee 	bl	b40c2 <__cxa_guard_release>
   b68e6:	4b0f      	ldr	r3, [pc, #60]	; (b6924 <pinAvailable+0x78>)
   b68e8:	7818      	ldrb	r0, [r3, #0]
   b68ea:	f7fe fe0f 	bl	b550c <hal_spi_is_enabled>
   b68ee:	2800      	cmp	r0, #0
   b68f0:	d1df      	bne.n	b68b2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b68f2:	2001      	movs	r0, #1
   b68f4:	e7de      	b.n	b68b4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b68f6:	2801      	cmp	r0, #1
   b68f8:	d809      	bhi.n	b690e <pinAvailable+0x62>
   b68fa:	f000 f893 	bl	b6a24 <_Z19__fetch_global_Wirev>
   b68fe:	2100      	movs	r1, #0
   b6900:	7c00      	ldrb	r0, [r0, #16]
   b6902:	f7fe fd63 	bl	b53cc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6906:	f080 0001 	eor.w	r0, r0, #1
   b690a:	b2c0      	uxtb	r0, r0
   b690c:	e7d2      	b.n	b68b4 <pinAvailable+0x8>
   b690e:	3809      	subs	r0, #9
   b6910:	2801      	cmp	r0, #1
   b6912:	d8ee      	bhi.n	b68f2 <pinAvailable+0x46>
   b6914:	f000 f8c6 	bl	b6aa4 <_Z22__fetch_global_Serial1v>
   b6918:	7c00      	ldrb	r0, [r0, #16]
   b691a:	f7fe fe3f 	bl	b559c <hal_usart_is_enabled>
   b691e:	e7f2      	b.n	b6906 <pinAvailable+0x5a>
   b6920:	2003e6b8 	.word	0x2003e6b8
   b6924:	2003e6bc 	.word	0x2003e6bc

000b6928 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6928:	2823      	cmp	r0, #35	; 0x23
{
   b692a:	b538      	push	{r3, r4, r5, lr}
   b692c:	4604      	mov	r4, r0
   b692e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6930:	d80a      	bhi.n	b6948 <pinMode+0x20>
   b6932:	29ff      	cmp	r1, #255	; 0xff
   b6934:	d008      	beq.n	b6948 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6936:	f7ff ffb9 	bl	b68ac <pinAvailable>
   b693a:	b128      	cbz	r0, b6948 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b693c:	4629      	mov	r1, r5
   b693e:	4620      	mov	r0, r4
}
   b6940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6944:	f7fe bce2 	b.w	b530c <HAL_Pin_Mode>
}
   b6948:	bd38      	pop	{r3, r4, r5, pc}

000b694a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b694a:	b538      	push	{r3, r4, r5, lr}
   b694c:	4604      	mov	r4, r0
   b694e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6950:	f7fe fce4 	bl	b531c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6954:	28ff      	cmp	r0, #255	; 0xff
   b6956:	d010      	beq.n	b697a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6958:	2806      	cmp	r0, #6
   b695a:	d804      	bhi.n	b6966 <digitalWrite+0x1c>
   b695c:	234d      	movs	r3, #77	; 0x4d
   b695e:	fa23 f000 	lsr.w	r0, r3, r0
   b6962:	07c3      	lsls	r3, r0, #31
   b6964:	d409      	bmi.n	b697a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6966:	4620      	mov	r0, r4
   b6968:	f7ff ffa0 	bl	b68ac <pinAvailable>
   b696c:	b128      	cbz	r0, b697a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b696e:	4629      	mov	r1, r5
   b6970:	4620      	mov	r0, r4
}
   b6972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b6976:	f7fe bcd9 	b.w	b532c <HAL_GPIO_Write>
}
   b697a:	bd38      	pop	{r3, r4, r5, pc}

000b697c <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b697c:	280d      	cmp	r0, #13
{
   b697e:	b510      	push	{r4, lr}
   b6980:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b6982:	bf9c      	itt	ls
   b6984:	340e      	addls	r4, #14
   b6986:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b6988:	4620      	mov	r0, r4
   b698a:	f7ff ff8f 	bl	b68ac <pinAvailable>
   b698e:	b150      	cbz	r0, b69a6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b6990:	2103      	movs	r1, #3
   b6992:	4620      	mov	r0, r4
   b6994:	f7fe fcb2 	bl	b52fc <HAL_Validate_Pin_Function>
   b6998:	2803      	cmp	r0, #3
   b699a:	d104      	bne.n	b69a6 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b699c:	4620      	mov	r0, r4
}
   b699e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b69a2:	f7fe bccb 	b.w	b533c <hal_adc_read>
}
   b69a6:	2000      	movs	r0, #0
   b69a8:	bd10      	pop	{r4, pc}

000b69aa <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b69aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b69ae:	4690      	mov	r8, r2
   b69b0:	461f      	mov	r7, r3
   b69b2:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b69b4:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b69b6:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b69b8:	f1c4 0107 	rsb	r1, r4, #7
   b69bc:	f1b8 0f00 	cmp.w	r8, #0
   b69c0:	d112      	bne.n	b69e8 <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b69c2:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b69c6:	f001 0101 	and.w	r1, r1, #1
   b69ca:	4630      	mov	r0, r6
   b69cc:	f7ff ffbd 	bl	b694a <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b69d0:	2101      	movs	r1, #1
   b69d2:	4628      	mov	r0, r5
   b69d4:	f7ff ffb9 	bl	b694a <digitalWrite>
    digitalWrite(clockPin, LOW);
   b69d8:	2100      	movs	r1, #0
   b69da:	4628      	mov	r0, r5
   b69dc:	f7ff ffb5 	bl	b694a <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b69e0:	3c01      	subs	r4, #1
   b69e2:	d2e9      	bcs.n	b69b8 <shiftOut+0xe>
  }
}
   b69e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b69e8:	fa47 f104 	asr.w	r1, r7, r4
   b69ec:	e7eb      	b.n	b69c6 <shiftOut+0x1c>

000b69ee <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b69ee:	4770      	bx	lr

000b69f0 <_Z17acquireWireBufferv>:
{
   b69f0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b69f2:	4b0a      	ldr	r3, [pc, #40]	; (b6a1c <_Z17acquireWireBufferv+0x2c>)
   b69f4:	6003      	str	r3, [r0, #0]
   b69f6:	2301      	movs	r3, #1
{
   b69f8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b69fa:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b69fc:	4908      	ldr	r1, [pc, #32]	; (b6a20 <_Z17acquireWireBufferv+0x30>)
   b69fe:	2020      	movs	r0, #32
   b6a00:	f000 f874 	bl	b6aec <_ZnajRKSt9nothrow_t>
	};
   b6a04:	2520      	movs	r5, #32
   b6a06:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6a08:	4905      	ldr	r1, [pc, #20]	; (b6a20 <_Z17acquireWireBufferv+0x30>)
	};
   b6a0a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6a0c:	4628      	mov	r0, r5
   b6a0e:	f000 f86d 	bl	b6aec <_ZnajRKSt9nothrow_t>
	};
   b6a12:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b6a16:	4620      	mov	r0, r4
   b6a18:	bd38      	pop	{r3, r4, r5, pc}
   b6a1a:	bf00      	nop
   b6a1c:	00010018 	.word	0x00010018
   b6a20:	000b7674 	.word	0x000b7674

000b6a24 <_Z19__fetch_global_Wirev>:
{
   b6a24:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6a26:	4d0e      	ldr	r5, [pc, #56]	; (b6a60 <_Z19__fetch_global_Wirev+0x3c>)
   b6a28:	7829      	ldrb	r1, [r5, #0]
   b6a2a:	f3bf 8f5b 	dmb	ish
   b6a2e:	f011 0401 	ands.w	r4, r1, #1
{
   b6a32:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6a34:	d111      	bne.n	b6a5a <_Z19__fetch_global_Wirev+0x36>
   b6a36:	4628      	mov	r0, r5
   b6a38:	f7fd fb3e 	bl	b40b8 <__cxa_guard_acquire>
   b6a3c:	b168      	cbz	r0, b6a5a <_Z19__fetch_global_Wirev+0x36>
   b6a3e:	4668      	mov	r0, sp
   b6a40:	f7ff ffd6 	bl	b69f0 <_Z17acquireWireBufferv>
   b6a44:	466a      	mov	r2, sp
   b6a46:	4621      	mov	r1, r4
   b6a48:	4806      	ldr	r0, [pc, #24]	; (b6a64 <_Z19__fetch_global_Wirev+0x40>)
   b6a4a:	f7fe ff51 	bl	b58f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6a4e:	4628      	mov	r0, r5
   b6a50:	f7fd fb37 	bl	b40c2 <__cxa_guard_release>
   b6a54:	4804      	ldr	r0, [pc, #16]	; (b6a68 <_Z19__fetch_global_Wirev+0x44>)
   b6a56:	f000 f95d 	bl	b6d14 <atexit>
	return wire;
}
   b6a5a:	4802      	ldr	r0, [pc, #8]	; (b6a64 <_Z19__fetch_global_Wirev+0x40>)
   b6a5c:	b007      	add	sp, #28
   b6a5e:	bd30      	pop	{r4, r5, pc}
   b6a60:	2003e72c 	.word	0x2003e72c
   b6a64:	2003e730 	.word	0x2003e730
   b6a68:	000b69ef 	.word	0x000b69ef

000b6a6c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6a6c:	4770      	bx	lr
	...

000b6a70 <_Z20acquireSerial1Bufferv>:
{
   b6a70:	b538      	push	{r3, r4, r5, lr}
   b6a72:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6a74:	2514      	movs	r5, #20
   b6a76:	462a      	mov	r2, r5
   b6a78:	2100      	movs	r1, #0
   b6a7a:	f000 f95f 	bl	b6d3c <memset>
   b6a7e:	8025      	strh	r5, [r4, #0]
   b6a80:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6a82:	4907      	ldr	r1, [pc, #28]	; (b6aa0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6a84:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6a86:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6a88:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6a8a:	f000 f82f 	bl	b6aec <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6a8e:	4904      	ldr	r1, [pc, #16]	; (b6aa0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6a90:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6a92:	4628      	mov	r0, r5
   b6a94:	f000 f82a 	bl	b6aec <_ZnajRKSt9nothrow_t>
    };
   b6a98:	60e0      	str	r0, [r4, #12]
}
   b6a9a:	4620      	mov	r0, r4
   b6a9c:	bd38      	pop	{r3, r4, r5, pc}
   b6a9e:	bf00      	nop
   b6aa0:	000b7674 	.word	0x000b7674

000b6aa4 <_Z22__fetch_global_Serial1v>:
{
   b6aa4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6aa6:	4d0e      	ldr	r5, [pc, #56]	; (b6ae0 <_Z22__fetch_global_Serial1v+0x3c>)
   b6aa8:	7829      	ldrb	r1, [r5, #0]
   b6aaa:	f3bf 8f5b 	dmb	ish
   b6aae:	f011 0401 	ands.w	r4, r1, #1
{
   b6ab2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6ab4:	d111      	bne.n	b6ada <_Z22__fetch_global_Serial1v+0x36>
   b6ab6:	4628      	mov	r0, r5
   b6ab8:	f7fd fafe 	bl	b40b8 <__cxa_guard_acquire>
   b6abc:	b168      	cbz	r0, b6ada <_Z22__fetch_global_Serial1v+0x36>
   b6abe:	a801      	add	r0, sp, #4
   b6ac0:	f7ff ffd6 	bl	b6a70 <_Z20acquireSerial1Bufferv>
   b6ac4:	aa01      	add	r2, sp, #4
   b6ac6:	4621      	mov	r1, r4
   b6ac8:	4806      	ldr	r0, [pc, #24]	; (b6ae4 <_Z22__fetch_global_Serial1v+0x40>)
   b6aca:	f7ff fd79 	bl	b65c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6ace:	4628      	mov	r0, r5
   b6ad0:	f7fd faf7 	bl	b40c2 <__cxa_guard_release>
   b6ad4:	4804      	ldr	r0, [pc, #16]	; (b6ae8 <_Z22__fetch_global_Serial1v+0x44>)
   b6ad6:	f000 f91d 	bl	b6d14 <atexit>
    return serial1;
}
   b6ada:	4802      	ldr	r0, [pc, #8]	; (b6ae4 <_Z22__fetch_global_Serial1v+0x40>)
   b6adc:	b007      	add	sp, #28
   b6ade:	bd30      	pop	{r4, r5, pc}
   b6ae0:	2003e744 	.word	0x2003e744
   b6ae4:	2003e748 	.word	0x2003e748
   b6ae8:	000b6a6d 	.word	0x000b6a6d

000b6aec <_ZnajRKSt9nothrow_t>:
   b6aec:	f7fd bad3 	b.w	b4096 <_Znaj>

000b6af0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6af0:	4901      	ldr	r1, [pc, #4]	; (b6af8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b6af2:	f000 b8f9 	b.w	b6ce8 <_ZNKSt9type_infoeqERKS_>
   b6af6:	bf00      	nop
   b6af8:	000b7690 	.word	0x000b7690

000b6afc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6afc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6afe:	2400      	movs	r4, #0
   b6b00:	2310      	movs	r3, #16
   b6b02:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b6b06:	6803      	ldr	r3, [r0, #0]
   b6b08:	4615      	mov	r5, r2
   b6b0a:	699e      	ldr	r6, [r3, #24]
   b6b0c:	6812      	ldr	r2, [r2, #0]
   b6b0e:	466b      	mov	r3, sp
   b6b10:	e9cd 4400 	strd	r4, r4, [sp]
   b6b14:	47b0      	blx	r6
   b6b16:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6b1a:	f003 0306 	and.w	r3, r3, #6
   b6b1e:	2b06      	cmp	r3, #6
   b6b20:	bf03      	ittte	eq
   b6b22:	9b00      	ldreq	r3, [sp, #0]
   b6b24:	602b      	streq	r3, [r5, #0]
   b6b26:	2001      	moveq	r0, #1
   b6b28:	4620      	movne	r0, r4
   b6b2a:	b004      	add	sp, #16
   b6b2c:	bd70      	pop	{r4, r5, r6, pc}

000b6b2e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b6b2e:	9800      	ldr	r0, [sp, #0]
   b6b30:	4290      	cmp	r0, r2
   b6b32:	bf14      	ite	ne
   b6b34:	2001      	movne	r0, #1
   b6b36:	2006      	moveq	r0, #6
   b6b38:	4770      	bx	lr
	...

000b6b3c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b6b3c:	b510      	push	{r4, lr}
   b6b3e:	4b03      	ldr	r3, [pc, #12]	; (b6b4c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b6b40:	6003      	str	r3, [r0, #0]
   b6b42:	4604      	mov	r4, r0
   b6b44:	f000 f8cd 	bl	b6ce2 <_ZNSt9type_infoD1Ev>
   b6b48:	4620      	mov	r0, r4
   b6b4a:	bd10      	pop	{r4, pc}
   b6b4c:	000b76d0 	.word	0x000b76d0

000b6b50 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b6b50:	b510      	push	{r4, lr}
   b6b52:	4604      	mov	r4, r0
   b6b54:	f7ff fff2 	bl	b6b3c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6b58:	4620      	mov	r0, r4
   b6b5a:	2108      	movs	r1, #8
   b6b5c:	f7fd fa9d 	bl	b409a <_ZdlPvj>
   b6b60:	4620      	mov	r0, r4
   b6b62:	bd10      	pop	{r4, pc}

000b6b64 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b6b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6b68:	461f      	mov	r7, r3
   b6b6a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b6b6e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b6b72:	4598      	cmp	r8, r3
   b6b74:	4606      	mov	r6, r0
   b6b76:	4615      	mov	r5, r2
   b6b78:	d107      	bne.n	b6b8a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6b7a:	9907      	ldr	r1, [sp, #28]
   b6b7c:	f000 f8b4 	bl	b6ce8 <_ZNKSt9type_infoeqERKS_>
   b6b80:	b118      	cbz	r0, b6b8a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6b82:	7165      	strb	r5, [r4, #5]
   b6b84:	2000      	movs	r0, #0
   b6b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6b8a:	4639      	mov	r1, r7
   b6b8c:	4630      	mov	r0, r6
   b6b8e:	f000 f8ab 	bl	b6ce8 <_ZNKSt9type_infoeqERKS_>
   b6b92:	2800      	cmp	r0, #0
   b6b94:	d0f6      	beq.n	b6b84 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b6b96:	2301      	movs	r3, #1
   b6b98:	f8c4 8000 	str.w	r8, [r4]
   b6b9c:	7125      	strb	r5, [r4, #4]
   b6b9e:	71a3      	strb	r3, [r4, #6]
   b6ba0:	e7f0      	b.n	b6b84 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b6ba2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b6ba2:	b538      	push	{r3, r4, r5, lr}
   b6ba4:	4615      	mov	r5, r2
   b6ba6:	461c      	mov	r4, r3
   b6ba8:	f000 f89e 	bl	b6ce8 <_ZNKSt9type_infoeqERKS_>
   b6bac:	b120      	cbz	r0, b6bb8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b6bae:	2308      	movs	r3, #8
   b6bb0:	60e3      	str	r3, [r4, #12]
   b6bb2:	2306      	movs	r3, #6
   b6bb4:	6025      	str	r5, [r4, #0]
   b6bb6:	7123      	strb	r3, [r4, #4]
   b6bb8:	bd38      	pop	{r3, r4, r5, pc}

000b6bba <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b6bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6bbc:	4605      	mov	r5, r0
   b6bbe:	460c      	mov	r4, r1
   b6bc0:	9201      	str	r2, [sp, #4]
   b6bc2:	461e      	mov	r6, r3
   b6bc4:	f000 f890 	bl	b6ce8 <_ZNKSt9type_infoeqERKS_>
   b6bc8:	b950      	cbnz	r0, b6be0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6bca:	2e03      	cmp	r6, #3
   b6bcc:	d808      	bhi.n	b6be0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6bce:	6823      	ldr	r3, [r4, #0]
   b6bd0:	9a01      	ldr	r2, [sp, #4]
   b6bd2:	695b      	ldr	r3, [r3, #20]
   b6bd4:	4629      	mov	r1, r5
   b6bd6:	4620      	mov	r0, r4
   b6bd8:	b002      	add	sp, #8
   b6bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6bde:	4718      	bx	r3
   b6be0:	b002      	add	sp, #8
   b6be2:	bd70      	pop	{r4, r5, r6, pc}

000b6be4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b6be4:	b510      	push	{r4, lr}
   b6be6:	4b03      	ldr	r3, [pc, #12]	; (b6bf4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b6be8:	6003      	str	r3, [r0, #0]
   b6bea:	4604      	mov	r4, r0
   b6bec:	f7ff ffa6 	bl	b6b3c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6bf0:	4620      	mov	r0, r4
   b6bf2:	bd10      	pop	{r4, pc}
   b6bf4:	000b7730 	.word	0x000b7730

000b6bf8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b6bf8:	b510      	push	{r4, lr}
   b6bfa:	4604      	mov	r4, r0
   b6bfc:	f7ff fff2 	bl	b6be4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b6c00:	4620      	mov	r0, r4
   b6c02:	210c      	movs	r1, #12
   b6c04:	f7fd fa49 	bl	b409a <_ZdlPvj>
   b6c08:	4620      	mov	r0, r4
   b6c0a:	bd10      	pop	{r4, pc}

000b6c0c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b6c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6c0e:	9f08      	ldr	r7, [sp, #32]
   b6c10:	4297      	cmp	r7, r2
   b6c12:	4605      	mov	r5, r0
   b6c14:	460e      	mov	r6, r1
   b6c16:	4614      	mov	r4, r2
   b6c18:	d00a      	beq.n	b6c30 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b6c1a:	68a8      	ldr	r0, [r5, #8]
   b6c1c:	6802      	ldr	r2, [r0, #0]
   b6c1e:	9708      	str	r7, [sp, #32]
   b6c20:	6a15      	ldr	r5, [r2, #32]
   b6c22:	4631      	mov	r1, r6
   b6c24:	4622      	mov	r2, r4
   b6c26:	46ac      	mov	ip, r5
   b6c28:	b003      	add	sp, #12
   b6c2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6c2e:	4760      	bx	ip
   b6c30:	4619      	mov	r1, r3
   b6c32:	9301      	str	r3, [sp, #4]
   b6c34:	f000 f858 	bl	b6ce8 <_ZNKSt9type_infoeqERKS_>
   b6c38:	9b01      	ldr	r3, [sp, #4]
   b6c3a:	2800      	cmp	r0, #0
   b6c3c:	d0ed      	beq.n	b6c1a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b6c3e:	2006      	movs	r0, #6
   b6c40:	b003      	add	sp, #12
   b6c42:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6c44 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6c44:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6c48:	460d      	mov	r5, r1
   b6c4a:	4619      	mov	r1, r3
   b6c4c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b6c50:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6c54:	4681      	mov	r9, r0
   b6c56:	4617      	mov	r7, r2
   b6c58:	4698      	mov	r8, r3
   b6c5a:	f000 f845 	bl	b6ce8 <_ZNKSt9type_infoeqERKS_>
   b6c5e:	b190      	cbz	r0, b6c86 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b6c60:	2d00      	cmp	r5, #0
   b6c62:	6034      	str	r4, [r6, #0]
   b6c64:	7137      	strb	r7, [r6, #4]
   b6c66:	db09      	blt.n	b6c7c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b6c68:	1961      	adds	r1, r4, r5
   b6c6a:	458a      	cmp	sl, r1
   b6c6c:	bf0c      	ite	eq
   b6c6e:	2106      	moveq	r1, #6
   b6c70:	2101      	movne	r1, #1
   b6c72:	71b1      	strb	r1, [r6, #6]
   b6c74:	2000      	movs	r0, #0
   b6c76:	b001      	add	sp, #4
   b6c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6c7c:	3502      	adds	r5, #2
   b6c7e:	d1f9      	bne.n	b6c74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6c80:	2301      	movs	r3, #1
   b6c82:	71b3      	strb	r3, [r6, #6]
   b6c84:	e7f6      	b.n	b6c74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6c86:	4554      	cmp	r4, sl
   b6c88:	d106      	bne.n	b6c98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6c8a:	4659      	mov	r1, fp
   b6c8c:	4648      	mov	r0, r9
   b6c8e:	f000 f82b 	bl	b6ce8 <_ZNKSt9type_infoeqERKS_>
   b6c92:	b108      	cbz	r0, b6c98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6c94:	7177      	strb	r7, [r6, #5]
   b6c96:	e7ed      	b.n	b6c74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6c98:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b6c9c:	6803      	ldr	r3, [r0, #0]
   b6c9e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b6ca2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b6ca6:	69dc      	ldr	r4, [r3, #28]
   b6ca8:	463a      	mov	r2, r7
   b6caa:	4643      	mov	r3, r8
   b6cac:	4629      	mov	r1, r5
   b6cae:	46a4      	mov	ip, r4
   b6cb0:	b001      	add	sp, #4
   b6cb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6cb6:	4760      	bx	ip

000b6cb8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b6cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6cbc:	4607      	mov	r7, r0
   b6cbe:	460c      	mov	r4, r1
   b6cc0:	4615      	mov	r5, r2
   b6cc2:	461e      	mov	r6, r3
   b6cc4:	f7ff ff6d 	bl	b6ba2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b6cc8:	b948      	cbnz	r0, b6cde <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b6cca:	68b8      	ldr	r0, [r7, #8]
   b6ccc:	6803      	ldr	r3, [r0, #0]
   b6cce:	699f      	ldr	r7, [r3, #24]
   b6cd0:	462a      	mov	r2, r5
   b6cd2:	4633      	mov	r3, r6
   b6cd4:	4621      	mov	r1, r4
   b6cd6:	46bc      	mov	ip, r7
   b6cd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b6cdc:	4760      	bx	ip
   b6cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6ce2 <_ZNSt9type_infoD1Ev>:
   b6ce2:	4770      	bx	lr

000b6ce4 <_ZNKSt9type_info14__is_pointer_pEv>:
   b6ce4:	2000      	movs	r0, #0
   b6ce6:	4770      	bx	lr

000b6ce8 <_ZNKSt9type_infoeqERKS_>:
   b6ce8:	4281      	cmp	r1, r0
   b6cea:	b508      	push	{r3, lr}
   b6cec:	d00e      	beq.n	b6d0c <_ZNKSt9type_infoeqERKS_+0x24>
   b6cee:	6840      	ldr	r0, [r0, #4]
   b6cf0:	7803      	ldrb	r3, [r0, #0]
   b6cf2:	2b2a      	cmp	r3, #42	; 0x2a
   b6cf4:	d00c      	beq.n	b6d10 <_ZNKSt9type_infoeqERKS_+0x28>
   b6cf6:	6849      	ldr	r1, [r1, #4]
   b6cf8:	780b      	ldrb	r3, [r1, #0]
   b6cfa:	2b2a      	cmp	r3, #42	; 0x2a
   b6cfc:	bf08      	it	eq
   b6cfe:	3101      	addeq	r1, #1
   b6d00:	f000 f852 	bl	b6da8 <strcmp>
   b6d04:	fab0 f080 	clz	r0, r0
   b6d08:	0940      	lsrs	r0, r0, #5
   b6d0a:	bd08      	pop	{r3, pc}
   b6d0c:	2001      	movs	r0, #1
   b6d0e:	e7fc      	b.n	b6d0a <_ZNKSt9type_infoeqERKS_+0x22>
   b6d10:	2000      	movs	r0, #0
   b6d12:	e7fa      	b.n	b6d0a <_ZNKSt9type_infoeqERKS_+0x22>

000b6d14 <atexit>:
   b6d14:	2300      	movs	r3, #0
   b6d16:	4601      	mov	r1, r0
   b6d18:	461a      	mov	r2, r3
   b6d1a:	4618      	mov	r0, r3
   b6d1c:	f000 b856 	b.w	b6dcc <__register_exitproc>

000b6d20 <memcpy>:
   b6d20:	440a      	add	r2, r1
   b6d22:	4291      	cmp	r1, r2
   b6d24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6d28:	d100      	bne.n	b6d2c <memcpy+0xc>
   b6d2a:	4770      	bx	lr
   b6d2c:	b510      	push	{r4, lr}
   b6d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6d32:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6d36:	4291      	cmp	r1, r2
   b6d38:	d1f9      	bne.n	b6d2e <memcpy+0xe>
   b6d3a:	bd10      	pop	{r4, pc}

000b6d3c <memset>:
   b6d3c:	4402      	add	r2, r0
   b6d3e:	4603      	mov	r3, r0
   b6d40:	4293      	cmp	r3, r2
   b6d42:	d100      	bne.n	b6d46 <memset+0xa>
   b6d44:	4770      	bx	lr
   b6d46:	f803 1b01 	strb.w	r1, [r3], #1
   b6d4a:	e7f9      	b.n	b6d40 <memset+0x4>

000b6d4c <srand>:
   b6d4c:	b538      	push	{r3, r4, r5, lr}
   b6d4e:	4b10      	ldr	r3, [pc, #64]	; (b6d90 <srand+0x44>)
   b6d50:	681d      	ldr	r5, [r3, #0]
   b6d52:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6d54:	4604      	mov	r4, r0
   b6d56:	b9b3      	cbnz	r3, b6d86 <srand+0x3a>
   b6d58:	2018      	movs	r0, #24
   b6d5a:	f7fe fd1b 	bl	b5794 <malloc>
   b6d5e:	4602      	mov	r2, r0
   b6d60:	63a8      	str	r0, [r5, #56]	; 0x38
   b6d62:	b920      	cbnz	r0, b6d6e <srand+0x22>
   b6d64:	4b0b      	ldr	r3, [pc, #44]	; (b6d94 <srand+0x48>)
   b6d66:	480c      	ldr	r0, [pc, #48]	; (b6d98 <srand+0x4c>)
   b6d68:	2142      	movs	r1, #66	; 0x42
   b6d6a:	f7fe fd3b 	bl	b57e4 <__assert_func>
   b6d6e:	490b      	ldr	r1, [pc, #44]	; (b6d9c <srand+0x50>)
   b6d70:	4b0b      	ldr	r3, [pc, #44]	; (b6da0 <srand+0x54>)
   b6d72:	e9c0 1300 	strd	r1, r3, [r0]
   b6d76:	4b0b      	ldr	r3, [pc, #44]	; (b6da4 <srand+0x58>)
   b6d78:	6083      	str	r3, [r0, #8]
   b6d7a:	230b      	movs	r3, #11
   b6d7c:	8183      	strh	r3, [r0, #12]
   b6d7e:	2100      	movs	r1, #0
   b6d80:	2001      	movs	r0, #1
   b6d82:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6d86:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6d88:	2200      	movs	r2, #0
   b6d8a:	611c      	str	r4, [r3, #16]
   b6d8c:	615a      	str	r2, [r3, #20]
   b6d8e:	bd38      	pop	{r3, r4, r5, pc}
   b6d90:	2003e5d4 	.word	0x2003e5d4
   b6d94:	000b7769 	.word	0x000b7769
   b6d98:	000b7780 	.word	0x000b7780
   b6d9c:	abcd330e 	.word	0xabcd330e
   b6da0:	e66d1234 	.word	0xe66d1234
   b6da4:	0005deec 	.word	0x0005deec

000b6da8 <strcmp>:
   b6da8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6dac:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6db0:	2a01      	cmp	r2, #1
   b6db2:	bf28      	it	cs
   b6db4:	429a      	cmpcs	r2, r3
   b6db6:	d0f7      	beq.n	b6da8 <strcmp>
   b6db8:	1ad0      	subs	r0, r2, r3
   b6dba:	4770      	bx	lr

000b6dbc <strlen>:
   b6dbc:	4603      	mov	r3, r0
   b6dbe:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6dc2:	2a00      	cmp	r2, #0
   b6dc4:	d1fb      	bne.n	b6dbe <strlen+0x2>
   b6dc6:	1a18      	subs	r0, r3, r0
   b6dc8:	3801      	subs	r0, #1
   b6dca:	4770      	bx	lr

000b6dcc <__register_exitproc>:
   b6dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6dd0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6e8c <__register_exitproc+0xc0>
   b6dd4:	4606      	mov	r6, r0
   b6dd6:	f8d8 0000 	ldr.w	r0, [r8]
   b6dda:	461f      	mov	r7, r3
   b6ddc:	460d      	mov	r5, r1
   b6dde:	4691      	mov	r9, r2
   b6de0:	f000 f856 	bl	b6e90 <__retarget_lock_acquire_recursive>
   b6de4:	4b25      	ldr	r3, [pc, #148]	; (b6e7c <__register_exitproc+0xb0>)
   b6de6:	681c      	ldr	r4, [r3, #0]
   b6de8:	b934      	cbnz	r4, b6df8 <__register_exitproc+0x2c>
   b6dea:	4c25      	ldr	r4, [pc, #148]	; (b6e80 <__register_exitproc+0xb4>)
   b6dec:	601c      	str	r4, [r3, #0]
   b6dee:	4b25      	ldr	r3, [pc, #148]	; (b6e84 <__register_exitproc+0xb8>)
   b6df0:	b113      	cbz	r3, b6df8 <__register_exitproc+0x2c>
   b6df2:	681b      	ldr	r3, [r3, #0]
   b6df4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6df8:	6863      	ldr	r3, [r4, #4]
   b6dfa:	2b1f      	cmp	r3, #31
   b6dfc:	dd07      	ble.n	b6e0e <__register_exitproc+0x42>
   b6dfe:	f8d8 0000 	ldr.w	r0, [r8]
   b6e02:	f000 f847 	bl	b6e94 <__retarget_lock_release_recursive>
   b6e06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6e0e:	b34e      	cbz	r6, b6e64 <__register_exitproc+0x98>
   b6e10:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6e14:	b988      	cbnz	r0, b6e3a <__register_exitproc+0x6e>
   b6e16:	4b1c      	ldr	r3, [pc, #112]	; (b6e88 <__register_exitproc+0xbc>)
   b6e18:	b923      	cbnz	r3, b6e24 <__register_exitproc+0x58>
   b6e1a:	f8d8 0000 	ldr.w	r0, [r8]
   b6e1e:	f000 f838 	bl	b6e92 <__retarget_lock_release>
   b6e22:	e7f0      	b.n	b6e06 <__register_exitproc+0x3a>
   b6e24:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6e28:	f7fe fcb4 	bl	b5794 <malloc>
   b6e2c:	2800      	cmp	r0, #0
   b6e2e:	d0f4      	beq.n	b6e1a <__register_exitproc+0x4e>
   b6e30:	2300      	movs	r3, #0
   b6e32:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6e36:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6e3a:	6863      	ldr	r3, [r4, #4]
   b6e3c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6e40:	2201      	movs	r2, #1
   b6e42:	409a      	lsls	r2, r3
   b6e44:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6e48:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6e4c:	4313      	orrs	r3, r2
   b6e4e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6e52:	2e02      	cmp	r6, #2
   b6e54:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6e58:	bf02      	ittt	eq
   b6e5a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6e5e:	4313      	orreq	r3, r2
   b6e60:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6e64:	6863      	ldr	r3, [r4, #4]
   b6e66:	f8d8 0000 	ldr.w	r0, [r8]
   b6e6a:	1c5a      	adds	r2, r3, #1
   b6e6c:	3302      	adds	r3, #2
   b6e6e:	6062      	str	r2, [r4, #4]
   b6e70:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6e74:	f000 f80e 	bl	b6e94 <__retarget_lock_release_recursive>
   b6e78:	2000      	movs	r0, #0
   b6e7a:	e7c6      	b.n	b6e0a <__register_exitproc+0x3e>
   b6e7c:	2003e7e8 	.word	0x2003e7e8
   b6e80:	2003e75c 	.word	0x2003e75c
   b6e84:	00000000 	.word	0x00000000
   b6e88:	000b5795 	.word	0x000b5795
   b6e8c:	2003e638 	.word	0x2003e638

000b6e90 <__retarget_lock_acquire_recursive>:
   b6e90:	4770      	bx	lr

000b6e92 <__retarget_lock_release>:
   b6e92:	4770      	bx	lr

000b6e94 <__retarget_lock_release_recursive>:
   b6e94:	4770      	bx	lr

000b6e96 <link_code_end>:
	...

000b6e98 <dynalib_user>:
   b6e98:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b6ea8:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b6eb8:	7620 7269 7574 6c61 4400 7369 6174 636e      virtual.Distanc
   b6ec8:	2065 203d 6925 000a                         e = %i..

000b6ed0 <_ZL18traditionalrainbow>:
   b6ed0:	0000 00ff 00ff 00ff 7700 00ff ff00 00ff     .........w......
   b6ee0:	ff00 0000 ffff 0000 ff77 0000 00ff 0000     ........w.......
   b6ef0:	00ff 0077                                   ..w.

000b6ef4 <CSWTCH.88>:
   b6ef4:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   b6f04:	0050 0000                                   P...

000b6f08 <_ZL4font>:
   b6f08:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b6f18:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b6f28:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b6f38:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b6f48:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b6f58:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b6f68:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b6f78:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b6f88:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b6f98:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b6fa8:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b6fb8:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b6fc8:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b6fd8:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b6fe8:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b6ff8:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b7008:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b7018:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b7028:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b7038:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b7048:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b7058:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b7068:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b7078:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b7088:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b7098:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b70a8:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b70b8:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b70c8:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b70d8:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b70e8:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b70f8:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b7108:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b7118:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b7128:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b7138:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b7148:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b7158:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b7168:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b7178:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b7188:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b7198:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b71a8:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b71b8:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b71c8:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b71d8:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b71e8:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b71f8:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b7208:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b7218:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b7228:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b7238:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b7248:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b7258:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b7268:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b7278:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b7288:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b7298:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b72a8:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b72b8:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b72c8:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b72d8:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b72e8:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b72f8:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b7308:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b7318:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b7328:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b7338:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b7348:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b7358:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b7368:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b7378:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b7388:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b7398:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b73a8:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b73b8:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b73c8:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b73d8:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b73e8:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b73f8:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000b7404 <_ZTV12Adafruit_GFX>:
	...
   b7414:	4ab5 000b 5be5 000b 40a1 000b 47cd 000b     .J...[...@...G..
   b7424:	48f3 000b 490f 000b 488b 000b 4929 000b     .H...I...H..)I..
   b7434:	495f 000b 497b 000b                         _I..{I..

000b743c <_ZTV16Adafruit_SSD1306>:
	...
   b7444:	4e41 000b 4ed1 000b 4ab5 000b 5be5 000b     AN...N...J...[..
   b7454:	4e45 000b 47cd 000b 4ccd 000b 4b5d 000b     EN...G...L..]K..
   b7464:	488b 000b 4929 000b 495f 000b 497b 000b     .H..)I.._I..{I..

000b7474 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b747c <_ZTVN5spark13EthernetClassE>:
	...
   b7484:	587b 000b 5871 000b 5867 000b 585d 000b     {X..qX..gX..]X..
   b7494:	5851 000b 5845 000b 5ac1 000b 5ac9 000b     QX..EX...Z...Z..
   b74a4:	5839 000b 5831 000b 5827 000b 581d 000b     9X..1X..'X...X..
   b74b4:	5af9 000b                                   .Z..

000b74b8 <_ZTV7TwoWire>:
	...
   b74c0:	5899 000b 58e3 000b 58bb 000b 589b 000b     .X...X...X...X..
   b74d0:	58c3 000b 58cb 000b 58d3 000b 58db 000b     .X...X...X...X..

000b74e0 <_ZTV9IPAddress>:
	...
   b74e8:	5965 000b 5955 000b 5957 000b 7061 0070     eY..UY..WY..app.

000b74f8 <_ZTVN5spark12NetworkClassE>:
	...
   b7500:	5a81 000b 5a8b 000b 5a95 000b 5a9f 000b     .Z...Z...Z...Z..
   b7510:	5aa9 000b 5ab5 000b 5ac1 000b 5ac9 000b     .Z...Z...Z...Z..
   b7520:	5ad1 000b 5add 000b 5ae5 000b 5aef 000b     .Z...Z...Z...Z..
   b7530:	5af9 000b                                   .Z..

000b7534 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b7534:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   b7544:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000b7554 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b755c:	5fd5 000b 5ff9 000b 652b 000b 6007 000b     ._..._..+e...`..
   b756c:	5fd9 000b                                   ._..

000b7570 <_ZTV9TCPClient>:
	...
   b7578:	6085 000b 60b9 000b 5f51 000b 5f6b 000b     .`...`..Q_..k_..
   b7588:	63c1 000b 5f95 000b 6237 000b 5fc9 000b     .c..._..7b..._..
   b7598:	62c9 000b 6109 000b 6265 000b 6475 000b     .b...a..eb..ud..
   b75a8:	6205 000b 5fcb 000b 5f7d 000b 600d 000b     .b..._..}_...`..
   b75b8:	60e9 000b 5925 252d 2d6d 6425 2554 3a48     .`..%Y-%m-%dT%H:
   b75c8:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b75d8 <_ZTV11USARTSerial>:
	...
   b75e0:	6545 000b 65b1 000b 6589 000b 5be5 000b     Ee...e...e...[..
   b75f0:	6559 000b 6575 000b 6567 000b 6583 000b     Ye..ue..ge...e..
   b7600:	6547 000b 654b 000b                         Ge..Ke..

000b7608 <_ZTV9USBSerial>:
	...
   b7610:	65ef 000b 6657 000b 662d 000b 5be5 000b     .e..Wf..-f...[..
   b7620:	661f 000b 65f1 000b 6601 000b 6651 000b     .f...e...f..Qf..
   b7630:	6611 000b 65e9 000b                         .f...e..

000b7638 <_ZTVN5spark9WiFiClassE>:
	...
   b7640:	6757 000b 674d 000b 6743 000b 66f9 000b     Wg..Mg..Cg...f..
   b7650:	6737 000b 672b 000b 5ac1 000b 5ac9 000b     7g..+g...Z...Z..
   b7660:	671f 000b 6717 000b 670d 000b 6703 000b     .g...g...g...g..
   b7670:	5af9 000b                                   .Z..

000b7674 <_ZSt7nothrow>:
	...

000b7675 <_ZTSSt19_Sp_make_shared_tag>:
   b7675:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b7685:	6572 5f64 6174 0067 0000                     red_tag....

000b7690 <_ZTISt19_Sp_make_shared_tag>:
   b7690:	76d0 000b 7675 000b                         .v..uv..

000b7698 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b7698:	7730 000b 76a4 000b 7754 000b               0w...v..Tw..

000b76a4 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b76a4:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b76b4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b76c4:	0045 0000                                   E...

000b76c8 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b76c8:	0000 0000 7698 000b 6b3d 000b 6b51 000b     .....v..=k..Qk..
   b76d8:	6ce5 000b 6ce5 000b 6bbb 000b 6afd 000b     .l...l...k...j..
   b76e8:	6ba3 000b 6b65 000b 6b2f 000b               .k..ek../k..

000b76f4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b76f4:	7730 000b 7700 000b 7698 000b               0w...w...v..

000b7700 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b7700:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b7710:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b7720:	666e 456f 0000 0000                         nfoE....

000b7728 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b7728:	0000 0000 76f4 000b 6be5 000b 6bf9 000b     .....v...k...k..
   b7738:	6ce5 000b 6ce5 000b 6bbb 000b 6afd 000b     .l...l...k...j..
   b7748:	6cb9 000b 6c45 000b 6c0d 000b               .l..El...l..

000b7754 <_ZTISt9type_info>:
   b7754:	76d0 000b 775c 000b                         .v..\w..

000b775c <_ZTSSt9type_info>:
   b775c:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b776c:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b777c:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b778c:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b779c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b77ac:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b77bc:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b77cc:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b77d9 <link_const_variable_data_end>:
   b77d9:	00          	.byte	0x00
	...

000b77dc <link_constructors_location>:
   b77dc:	000b4291 	.word	0x000b4291
   b77e0:	000b47bd 	.word	0x000b47bd
   b77e4:	000b580d 	.word	0x000b580d
   b77e8:	000b5885 	.word	0x000b5885
   b77ec:	000b5a71 	.word	0x000b5a71
   b77f0:	000b5bd1 	.word	0x000b5bd1
   b77f4:	000b5cf1 	.word	0x000b5cf1
   b77f8:	000b5f2d 	.word	0x000b5f2d
   b77fc:	000b6531 	.word	0x000b6531
   b7800:	000b6761 	.word	0x000b6761

000b7804 <link_constructors_end>:
	...
