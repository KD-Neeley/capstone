
/Users/kdneeley/Documents/IoT/capstone/prototype_solarPoweredParkBench/target/4.0.2/argon/prototype_solarPoweredParkBench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004954  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b8970  000b8970  00008970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b8994  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000480  2003da04  000b8998  0001da04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000096c  2003de84  2003de84  0002de84  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b8e18  000b8e18  00028e18  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b8e40  000b8e40  00028e40  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0013272f  00000000  00000000  00028e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001599a  00000000  00000000  0015b573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0004137e  00000000  00000000  00170f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003310  00000000  00000000  001b228b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b118  00000000  00000000  001b559b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d149  00000000  00000000  001c06b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004b0cf  00000000  00000000  001fd7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00136dc5  00000000  00000000  002488cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000929c  00000000  00000000  0037f690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 fd83 	bl	b7b38 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 fd8b 	bl	b7b54 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003da04 	.word	0x2003da04
   b4048:	000b8998 	.word	0x000b8998
   b404c:	2003de84 	.word	0x2003de84
   b4050:	2003de84 	.word	0x2003de84
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 fafb 	bl	b7658 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b893c 	.word	0x000b893c
   b407c:	000b8964 	.word	0x000b8964

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b86a 	b.w	b4158 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f919 	bl	b42bc <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 ba9b 	b.w	b75c8 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f002 ba1d 	b.w	b64d0 <malloc>

000b4096 <_Znaj>:
   b4096:	f002 ba1b 	b.w	b64d0 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f002 ba21 	b.w	b64e0 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f002 f96e 	bl	b6388 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b5fe9 	.word	0x000b5fe9
   b40b4:	000b7e18 	.word	0x000b7e18

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN16JsonParserStaticILj512ELj16EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40c8:	b510      	push	{r4, lr}
   b40ca:	4b03      	ldr	r3, [pc, #12]	; (b40d8 <_ZN16JsonParserStaticILj512ELj16EED1Ev+0x10>)
   b40cc:	6003      	str	r3, [r0, #0]
   b40ce:	4604      	mov	r4, r0
   b40d0:	f001 fbbc 	bl	b584c <_ZN10JsonParserD1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	bd10      	pop	{r4, pc}
   b40d8:	000b7ef0 	.word	0x000b7ef0

000b40dc <_ZN16JsonParserStaticILj512ELj16EED0Ev>:
   b40dc:	b510      	push	{r4, lr}
   b40de:	4604      	mov	r4, r0
   b40e0:	f7ff fff2 	bl	b40c8 <_ZN16JsonParserStaticILj512ELj16EED1Ev>
   b40e4:	4620      	mov	r0, r4
   b40e6:	f44f 714b 	mov.w	r1, #812	; 0x32c
   b40ea:	f7ff ffd6 	bl	b409a <_ZdlPvj>
   b40ee:	4620      	mov	r0, r4
   b40f0:	bd10      	pop	{r4, pc}

000b40f2 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40f2:	b40e      	push	{r1, r2, r3}
   b40f4:	b503      	push	{r0, r1, lr}
   b40f6:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40f8:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40fa:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40fe:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4100:	f002 fc71 	bl	b69e6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4104:	b002      	add	sp, #8
   b4106:	f85d eb04 	ldr.w	lr, [sp], #4
   b410a:	b003      	add	sp, #12
   b410c:	4770      	bx	lr
	...

000b4110 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b4110:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4112:	6984      	ldr	r4, [r0, #24]
   b4114:	4b0a      	ldr	r3, [pc, #40]	; (b4140 <_ZN9TCPClientD1Ev+0x30>)
   b4116:	6003      	str	r3, [r0, #0]
   b4118:	4605      	mov	r5, r0
   b411a:	b17c      	cbz	r4, b413c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b411c:	6863      	ldr	r3, [r4, #4]
   b411e:	3b01      	subs	r3, #1
   b4120:	6063      	str	r3, [r4, #4]
   b4122:	b95b      	cbnz	r3, b413c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b4124:	6823      	ldr	r3, [r4, #0]
   b4126:	4620      	mov	r0, r4
   b4128:	689b      	ldr	r3, [r3, #8]
   b412a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b412c:	68a3      	ldr	r3, [r4, #8]
   b412e:	3b01      	subs	r3, #1
   b4130:	60a3      	str	r3, [r4, #8]
   b4132:	b91b      	cbnz	r3, b413c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b4134:	6823      	ldr	r3, [r4, #0]
   b4136:	4620      	mov	r0, r4
   b4138:	68db      	ldr	r3, [r3, #12]
   b413a:	4798      	blx	r3
   b413c:	4628      	mov	r0, r5
   b413e:	bd38      	pop	{r3, r4, r5, pc}
   b4140:	000b85d8 	.word	0x000b85d8

000b4144 <_ZN9TCPClientD0Ev>:
   b4144:	b510      	push	{r4, lr}
   b4146:	4604      	mov	r4, r0
   b4148:	f7ff ffe2 	bl	b4110 <_ZN9TCPClientD1Ev>
   b414c:	4620      	mov	r0, r4
   b414e:	211c      	movs	r1, #28
   b4150:	f7ff ffa3 	bl	b409a <_ZdlPvj>
   b4154:	4620      	mov	r0, r4
   b4156:	bd10      	pop	{r4, pc}

000b4158 <setup>:



SYSTEM_MODE(AUTOMATIC);

void setup() {
   b4158:	b570      	push	{r4, r5, r6, lr}
    Serial.begin(9600);
   b415a:	f003 f9af 	bl	b74bc <_Z16_fetch_usbserialv>
   b415e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4162:	f003 f99b 	bl	b749c <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b4166:	2000      	movs	r0, #0
   b4168:	f001 ff56 	bl	b6018 <hal_timer_millis>
        while (_while() && !_condition()) {
   b416c:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b4170:	4604      	mov	r4, r0
   b4172:	2000      	movs	r0, #0
   b4174:	f001 ff50 	bl	b6018 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4178:	1b00      	subs	r0, r0, r4
   b417a:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b417e:	42a8      	cmp	r0, r5
   b4180:	f171 0300 	sbcs.w	r3, r1, #0
   b4184:	d207      	bcs.n	b4196 <setup+0x3e>
    waitFor(Serial.isConnected, 15000);
   b4186:	f003 f999 	bl	b74bc <_Z16_fetch_usbserialv>
   b418a:	f003 f98b 	bl	b74a4 <_ZN9USBSerial11isConnectedEv>
   b418e:	b910      	cbnz	r0, b4196 <setup+0x3e>
            spark_process();
   b4190:	f002 f92e 	bl	b63f0 <spark_process>
        while (_while() && !_condition()) {
   b4194:	e7ed      	b.n	b4172 <setup+0x1a>
   b4196:	f003 f991 	bl	b74bc <_Z16_fetch_usbserialv>
   b419a:	f003 f983 	bl	b74a4 <_ZN9USBSerial11isConnectedEv>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b419e:	4d2d      	ldr	r5, [pc, #180]	; (b4254 <setup+0xfc>)
    pixel.begin();
   b41a0:	482d      	ldr	r0, [pc, #180]	; (b4258 <setup+0x100>)

    //Connect to Internet but not Particle Cloud
    WiFi.on();
    WiFi.connect();
    while(WiFi.connecting()) {
        Serial.printf(".");
   b41a2:	4e2e      	ldr	r6, [pc, #184]	; (b425c <setup+0x104>)
    pixel.begin();
   b41a4:	f000 fc07 	bl	b49b6 <_ZN17Adafruit_NeoPixel5beginEv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b41a8:	2300      	movs	r3, #0
   b41aa:	461a      	mov	r2, r3
   b41ac:	4619      	mov	r1, r3
   b41ae:	6868      	ldr	r0, [r5, #4]
   b41b0:	f002 f94e 	bl	b6450 <network_on>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   b41b4:	2300      	movs	r3, #0
   b41b6:	6868      	ldr	r0, [r5, #4]
   b41b8:	461a      	mov	r2, r3
   b41ba:	4619      	mov	r1, r3
   b41bc:	f002 f928 	bl	b6410 <network_connect>
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   b41c0:	2200      	movs	r2, #0
   b41c2:	6868      	ldr	r0, [r5, #4]
   b41c4:	4611      	mov	r1, r2
   b41c6:	f002 f92b 	bl	b6420 <network_connecting>
    while(WiFi.connecting()) {
   b41ca:	4604      	mov	r4, r0
   b41cc:	b128      	cbz	r0, b41da <setup+0x82>
        Serial.printf(".");
   b41ce:	f003 f975 	bl	b74bc <_Z16_fetch_usbserialv>
   b41d2:	4631      	mov	r1, r6
   b41d4:	f7ff ff8d 	bl	b40f2 <_ZN5Print6printfEPKcz>
    while(WiFi.connecting()) {
   b41d8:	e7f2      	b.n	b41c0 <setup+0x68>
    }
    Serial.printf("\n\n");
   b41da:	f003 f96f 	bl	b74bc <_Z16_fetch_usbserialv>
   b41de:	4920      	ldr	r1, [pc, #128]	; (b4260 <setup+0x108>)
   b41e0:	f7ff ff87 	bl	b40f2 <_ZN5Print6printfEPKcz>


    //initialize Sound Input
   // Define our pin modes
    pinMode(STROBE, OUTPUT);
   b41e4:	2101      	movs	r1, #1
   b41e6:	2010      	movs	r0, #16
   b41e8:	f003 faa6 	bl	b7738 <pinMode>
    pinMode(RESETPIN, OUTPUT);
   b41ec:	2101      	movs	r1, #1
   b41ee:	2011      	movs	r0, #17
   b41f0:	f003 faa2 	bl	b7738 <pinMode>
    pinMode(OUT, INPUT);
   b41f4:	4621      	mov	r1, r4
   b41f6:	200f      	movs	r0, #15
   b41f8:	f003 fa9e 	bl	b7738 <pinMode>
 
// Initialize the Sound Sensor Pins
    digitalWrite(RESETPIN, LOW);
   b41fc:	4621      	mov	r1, r4
   b41fe:	2011      	movs	r0, #17
   b4200:	f003 faab 	bl	b775a <digitalWrite>
    digitalWrite(STROBE, LOW);
   b4204:	4621      	mov	r1, r4
   b4206:	2010      	movs	r0, #16
   b4208:	f003 faa7 	bl	b775a <digitalWrite>
    delay(1);
   b420c:	2001      	movs	r0, #1
   b420e:	f002 f997 	bl	b6540 <delay>
 
  // Reset MSGEQ7 
    digitalWrite(RESETPIN, HIGH);
   b4212:	2101      	movs	r1, #1
   b4214:	2011      	movs	r0, #17
   b4216:	f003 faa0 	bl	b775a <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b421a:	4620      	mov	r0, r4
   b421c:	f001 fee4 	bl	b5fe8 <HAL_Delay_Microseconds>
    delayMicroseconds(.1);
    digitalWrite(RESETPIN, LOW);
   b4220:	4621      	mov	r1, r4
   b4222:	2011      	movs	r0, #17
   b4224:	f003 fa99 	bl	b775a <digitalWrite>
    digitalWrite(STROBE, HIGH); 
   b4228:	2101      	movs	r1, #1
   b422a:	2010      	movs	r0, #16
   b422c:	f003 fa95 	bl	b775a <digitalWrite>
   b4230:	2048      	movs	r0, #72	; 0x48
   b4232:	f001 fed9 	bl	b5fe8 <HAL_Delay_Microseconds>
    delayMicroseconds(72);

//Initialize the OLED
    myDisplay.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4236:	2102      	movs	r1, #2
   b4238:	480a      	ldr	r0, [pc, #40]	; (b4264 <setup+0x10c>)
   b423a:	223c      	movs	r2, #60	; 0x3c
   b423c:	f001 fa15 	bl	b566a <_ZN16Adafruit_SSD13065beginEhh>
    myDisplay.clearDisplay();
   b4240:	4808      	ldr	r0, [pc, #32]	; (b4264 <setup+0x10c>)
   b4242:	f001 f99b 	bl	b557c <_ZN16Adafruit_SSD130612clearDisplayEv>

//Initialize the IR Distance Sensor
    pinMode(MOTIONSENSOR, INPUT);
   b4246:	4621      	mov	r1, r4
   b4248:	2012      	movs	r0, #18
}
   b424a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pinMode(MOTIONSENSOR, INPUT);
   b424e:	f003 ba73 	b.w	b7738 <pinMode>
   b4252:	bf00      	nop
   b4254:	2003e718 	.word	0x2003e718
   b4258:	2003e624 	.word	0x2003e624
   b425c:	000b7e2d 	.word	0x000b7e2d
   b4260:	000b7e2f 	.word	0x000b7e2f
   b4264:	2003e600 	.word	0x2003e600

000b4268 <_Z9pixelFilliiii>:
    
}

////FUNCTION DEFINITIONS
//NEOPIXEL FUNCTIONS
int pixelFill(int startPixel, int endPixel, int brightness, int hexColor) {
   b4268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b426a:	4604      	mov	r4, r0
            pixel.clear();
   b426c:	4812      	ldr	r0, [pc, #72]	; (b42b8 <_Z9pixelFilliiii+0x50>)
int pixelFill(int startPixel, int endPixel, int brightness, int hexColor) {
   b426e:	4617      	mov	r7, r2
   b4270:	460d      	mov	r5, r1
   b4272:	461e      	mov	r6, r3
            pixel.clear();
   b4274:	f000 fdee 	bl	b4e54 <_ZN17Adafruit_NeoPixel5clearEv>
            pixel.show();
   b4278:	480f      	ldr	r0, [pc, #60]	; (b42b8 <_Z9pixelFilliiii+0x50>)
   b427a:	f000 fbd5 	bl	b4a28 <_ZN17Adafruit_NeoPixel4showEv>
            pixel.setBrightness(brightness);
   b427e:	b2f9      	uxtb	r1, r7
   b4280:	480d      	ldr	r0, [pc, #52]	; (b42b8 <_Z9pixelFilliiii+0x50>)
            for(int i = startPixel; i < endPixel; i++) {
                pixel.setPixelColor(i, hexColor);
   b4282:	4f0d      	ldr	r7, [pc, #52]	; (b42b8 <_Z9pixelFilliiii+0x50>)
            pixel.setBrightness(brightness);
   b4284:	f000 fdbf 	bl	b4e06 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
            for(int i = startPixel; i < endPixel; i++) {
   b4288:	42ac      	cmp	r4, r5
   b428a:	da06      	bge.n	b429a <_Z9pixelFilliiii+0x32>
                pixel.setPixelColor(i, hexColor);
   b428c:	b2a1      	uxth	r1, r4
   b428e:	4632      	mov	r2, r6
   b4290:	4638      	mov	r0, r7
   b4292:	f000 fd75 	bl	b4d80 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
            for(int i = startPixel; i < endPixel; i++) {
   b4296:	3401      	adds	r4, #1
   b4298:	e7f6      	b.n	b4288 <_Z9pixelFilliiii+0x20>
            }
            pixel.show();
   b429a:	4807      	ldr	r0, [pc, #28]	; (b42b8 <_Z9pixelFilliiii+0x50>)
   b429c:	f000 fbc4 	bl	b4a28 <_ZN17Adafruit_NeoPixel4showEv>
            delay(100);
   b42a0:	2064      	movs	r0, #100	; 0x64
   b42a2:	f002 f94d 	bl	b6540 <delay>
            pixel.clear();
   b42a6:	4804      	ldr	r0, [pc, #16]	; (b42b8 <_Z9pixelFilliiii+0x50>)
   b42a8:	f000 fdd4 	bl	b4e54 <_ZN17Adafruit_NeoPixel5clearEv>
            pixel.show();
   b42ac:	4802      	ldr	r0, [pc, #8]	; (b42b8 <_Z9pixelFilliiii+0x50>)
   b42ae:	f000 fbbb 	bl	b4a28 <_ZN17Adafruit_NeoPixel4showEv>

            return(endPixel);
}
   b42b2:	4628      	mov	r0, r5
   b42b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b42b6:	bf00      	nop
   b42b8:	2003e624 	.word	0x2003e624

000b42bc <loop>:
void loop() {
   b42bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    distance = analogRead(MOTIONSENSOR); //Get Distance to determine if the program will run given a presence
   b42be:	2012      	movs	r0, #18
   b42c0:	f003 fa64 	bl	b778c <analogRead>
   b42c4:	4ccd      	ldr	r4, [pc, #820]	; (b45fc <loop+0x340>)
   b42c6:	6020      	str	r0, [r4, #0]
    Serial.printf("first read is %i", distance);
   b42c8:	f003 f8f8 	bl	b74bc <_Z16_fetch_usbserialv>
   b42cc:	6822      	ldr	r2, [r4, #0]
   b42ce:	49cc      	ldr	r1, [pc, #816]	; (b4600 <loop+0x344>)
   b42d0:	f7ff ff0f 	bl	b40f2 <_ZN5Print6printfEPKcz>
    if(distance > distanceThreshold) { //if a presence is sensed run the program
   b42d4:	4bcb      	ldr	r3, [pc, #812]	; (b4604 <loop+0x348>)
   b42d6:	6822      	ldr	r2, [r4, #0]
   b42d8:	681b      	ldr	r3, [r3, #0]
   b42da:	429a      	cmp	r2, r3
   b42dc:	f340 82cd 	ble.w	b487a <loop+0x5be>
        digitalWrite(STROBE, LOW);
   b42e0:	2100      	movs	r1, #0
   b42e2:	2010      	movs	r0, #16
   b42e4:	f003 fa39 	bl	b775a <digitalWrite>
   b42e8:	2048      	movs	r0, #72	; 0x48
   b42ea:	f001 fe7d 	bl	b5fe8 <HAL_Delay_Microseconds>
        soundLevel[0] = analogRead(OUT);
   b42ee:	200f      	movs	r0, #15
   b42f0:	f003 fa4c 	bl	b778c <analogRead>
   b42f4:	4cc4      	ldr	r4, [pc, #784]	; (b4608 <loop+0x34c>)
   b42f6:	6020      	str	r0, [r4, #0]
        Serial.printf("Level 0\n Value %i\n", soundLevel[0]);
   b42f8:	f003 f8e0 	bl	b74bc <_Z16_fetch_usbserialv>
   b42fc:	6822      	ldr	r2, [r4, #0]
   b42fe:	49c3      	ldr	r1, [pc, #780]	; (b460c <loop+0x350>)
   b4300:	f7ff fef7 	bl	b40f2 <_ZN5Print6printfEPKcz>
        digitalWrite(STROBE, HIGH);
   b4304:	2101      	movs	r1, #1
   b4306:	2010      	movs	r0, #16
   b4308:	f003 fa27 	bl	b775a <digitalWrite>
   b430c:	2048      	movs	r0, #72	; 0x48
   b430e:	f001 fe6b 	bl	b5fe8 <HAL_Delay_Microseconds>
        if(soundLevel[0] < 400) {
   b4312:	6823      	ldr	r3, [r4, #0]
   b4314:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b4318:	da06      	bge.n	b4328 <loop+0x6c>
            pixelFill(0, 2, 50, fullred);
   b431a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   b431e:	2232      	movs	r2, #50	; 0x32
   b4320:	2102      	movs	r1, #2
   b4322:	2000      	movs	r0, #0
   b4324:	f7ff ffa0 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[0] >= 400 && soundLevel[0] < 1000) {
   b4328:	6823      	ldr	r3, [r4, #0]
   b432a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
   b432e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b4332:	d206      	bcs.n	b4342 <loop+0x86>
            pixelFill(0, 2, 100, fullred);
   b4334:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   b4338:	2264      	movs	r2, #100	; 0x64
   b433a:	2102      	movs	r1, #2
   b433c:	2000      	movs	r0, #0
   b433e:	f7ff ff93 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[0] >= 1000 && soundLevel[0] < 2000) {
   b4342:	6823      	ldr	r3, [r4, #0]
   b4344:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   b4348:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b434c:	d206      	bcs.n	b435c <loop+0xa0>
            pixelFill(0, 2, 150, fullred);
   b434e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   b4352:	2296      	movs	r2, #150	; 0x96
   b4354:	2102      	movs	r1, #2
   b4356:	2000      	movs	r0, #0
   b4358:	f7ff ff86 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[0] >= 2000 && soundLevel[0] < 3000) {
   b435c:	6823      	ldr	r3, [r4, #0]
   b435e:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
   b4362:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b4366:	d206      	bcs.n	b4376 <loop+0xba>
            pixelFill(0, 2, 200, fullred);
   b4368:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   b436c:	22c8      	movs	r2, #200	; 0xc8
   b436e:	2102      	movs	r1, #2
   b4370:	2000      	movs	r0, #0
   b4372:	f7ff ff79 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[0] >= 3000) {
   b4376:	6822      	ldr	r2, [r4, #0]
   b4378:	f640 33b7 	movw	r3, #2999	; 0xbb7
   b437c:	429a      	cmp	r2, r3
   b437e:	dd06      	ble.n	b438e <loop+0xd2>
            pixelFill(0, 2, 255, fullred);
   b4380:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   b4384:	22ff      	movs	r2, #255	; 0xff
   b4386:	2102      	movs	r1, #2
   b4388:	2000      	movs	r0, #0
   b438a:	f7ff ff6d 	bl	b4268 <_Z9pixelFilliiii>
        digitalWrite(STROBE, LOW);
   b438e:	2100      	movs	r1, #0
   b4390:	2010      	movs	r0, #16
   b4392:	f003 f9e2 	bl	b775a <digitalWrite>
   b4396:	2048      	movs	r0, #72	; 0x48
   b4398:	f001 fe26 	bl	b5fe8 <HAL_Delay_Microseconds>
        soundLevel[1] = analogRead(OUT);
   b439c:	200f      	movs	r0, #15
   b439e:	f003 f9f5 	bl	b778c <analogRead>
   b43a2:	6060      	str	r0, [r4, #4]
        Serial.printf("Level 0\n Value %i\n", soundLevel[1]);
   b43a4:	f003 f88a 	bl	b74bc <_Z16_fetch_usbserialv>
   b43a8:	6862      	ldr	r2, [r4, #4]
   b43aa:	4998      	ldr	r1, [pc, #608]	; (b460c <loop+0x350>)
   b43ac:	f7ff fea1 	bl	b40f2 <_ZN5Print6printfEPKcz>
        digitalWrite(STROBE, HIGH);
   b43b0:	2101      	movs	r1, #1
   b43b2:	2010      	movs	r0, #16
   b43b4:	f003 f9d1 	bl	b775a <digitalWrite>
   b43b8:	2048      	movs	r0, #72	; 0x48
   b43ba:	f001 fe15 	bl	b5fe8 <HAL_Delay_Microseconds>
        if(soundLevel[1] < 400) {
   b43be:	6863      	ldr	r3, [r4, #4]
   b43c0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b43c4:	da06      	bge.n	b43d4 <loop+0x118>
            pixelFill(3, 5, 50, fullmagenta);
   b43c6:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
   b43ca:	2232      	movs	r2, #50	; 0x32
   b43cc:	2105      	movs	r1, #5
   b43ce:	2003      	movs	r0, #3
   b43d0:	f7ff ff4a 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[1] >= 400 && soundLevel[1] < 1000) {
   b43d4:	6863      	ldr	r3, [r4, #4]
   b43d6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
   b43da:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b43de:	d206      	bcs.n	b43ee <loop+0x132>
            pixelFill(3, 5, 100, fullmagenta);
   b43e0:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
   b43e4:	2264      	movs	r2, #100	; 0x64
   b43e6:	2105      	movs	r1, #5
   b43e8:	2003      	movs	r0, #3
   b43ea:	f7ff ff3d 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[1] >= 1000 && soundLevel[1] < 2000) {
   b43ee:	6863      	ldr	r3, [r4, #4]
   b43f0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   b43f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b43f8:	d206      	bcs.n	b4408 <loop+0x14c>
            pixelFill(3, 5, 150, fullmagenta);
   b43fa:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
   b43fe:	2296      	movs	r2, #150	; 0x96
   b4400:	2105      	movs	r1, #5
   b4402:	2003      	movs	r0, #3
   b4404:	f7ff ff30 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[1] >= 2000 && soundLevel[1] < 3000) {
   b4408:	6863      	ldr	r3, [r4, #4]
   b440a:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
   b440e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b4412:	d206      	bcs.n	b4422 <loop+0x166>
            pixelFill(3, 5, 200, fullmagenta);
   b4414:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
   b4418:	22c8      	movs	r2, #200	; 0xc8
   b441a:	2105      	movs	r1, #5
   b441c:	2003      	movs	r0, #3
   b441e:	f7ff ff23 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[1] >= 3000) {
   b4422:	6862      	ldr	r2, [r4, #4]
   b4424:	f640 33b7 	movw	r3, #2999	; 0xbb7
   b4428:	429a      	cmp	r2, r3
   b442a:	dd06      	ble.n	b443a <loop+0x17e>
            pixelFill(3, 5, 255, fullmagenta);
   b442c:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
   b4430:	22ff      	movs	r2, #255	; 0xff
   b4432:	2105      	movs	r1, #5
   b4434:	2003      	movs	r0, #3
   b4436:	f7ff ff17 	bl	b4268 <_Z9pixelFilliiii>
        digitalWrite(STROBE, LOW);
   b443a:	2100      	movs	r1, #0
   b443c:	2010      	movs	r0, #16
   b443e:	f003 f98c 	bl	b775a <digitalWrite>
   b4442:	2048      	movs	r0, #72	; 0x48
   b4444:	f001 fdd0 	bl	b5fe8 <HAL_Delay_Microseconds>
        soundLevel[2] = analogRead(OUT);
   b4448:	200f      	movs	r0, #15
   b444a:	f003 f99f 	bl	b778c <analogRead>
   b444e:	60a0      	str	r0, [r4, #8]
        Serial.printf("Level 0\n Value %i\n", soundLevel[2]);
   b4450:	f003 f834 	bl	b74bc <_Z16_fetch_usbserialv>
   b4454:	68a2      	ldr	r2, [r4, #8]
   b4456:	496d      	ldr	r1, [pc, #436]	; (b460c <loop+0x350>)
   b4458:	f7ff fe4b 	bl	b40f2 <_ZN5Print6printfEPKcz>
        digitalWrite(STROBE, HIGH);
   b445c:	2101      	movs	r1, #1
   b445e:	2010      	movs	r0, #16
   b4460:	f003 f97b 	bl	b775a <digitalWrite>
   b4464:	2048      	movs	r0, #72	; 0x48
   b4466:	f001 fdbf 	bl	b5fe8 <HAL_Delay_Microseconds>
        if(soundLevel[2] < 400) {
   b446a:	68a3      	ldr	r3, [r4, #8]
   b446c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b4470:	da05      	bge.n	b447e <loop+0x1c2>
            pixelFill(6, 8, 50, purple);
   b4472:	4b67      	ldr	r3, [pc, #412]	; (b4610 <loop+0x354>)
   b4474:	2232      	movs	r2, #50	; 0x32
   b4476:	2108      	movs	r1, #8
   b4478:	2006      	movs	r0, #6
   b447a:	f7ff fef5 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[2] >= 400 && soundLevel[2] < 1000) {
   b447e:	68a3      	ldr	r3, [r4, #8]
   b4480:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
   b4484:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b4488:	d205      	bcs.n	b4496 <loop+0x1da>
            pixelFill(6, 8, 100, purple);
   b448a:	4b61      	ldr	r3, [pc, #388]	; (b4610 <loop+0x354>)
   b448c:	2264      	movs	r2, #100	; 0x64
   b448e:	2108      	movs	r1, #8
   b4490:	2006      	movs	r0, #6
   b4492:	f7ff fee9 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[2] >= 1000 && soundLevel[2] < 2000) {
   b4496:	68a3      	ldr	r3, [r4, #8]
   b4498:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   b449c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b44a0:	d205      	bcs.n	b44ae <loop+0x1f2>
            pixelFill(6, 8, 150, purple);
   b44a2:	4b5b      	ldr	r3, [pc, #364]	; (b4610 <loop+0x354>)
   b44a4:	2296      	movs	r2, #150	; 0x96
   b44a6:	2108      	movs	r1, #8
   b44a8:	2006      	movs	r0, #6
   b44aa:	f7ff fedd 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[2] >= 2000 && soundLevel[2] < 3000) {
   b44ae:	68a3      	ldr	r3, [r4, #8]
   b44b0:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
   b44b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b44b8:	d205      	bcs.n	b44c6 <loop+0x20a>
            pixelFill(6, 8, 200, purple);
   b44ba:	4b55      	ldr	r3, [pc, #340]	; (b4610 <loop+0x354>)
   b44bc:	22c8      	movs	r2, #200	; 0xc8
   b44be:	2108      	movs	r1, #8
   b44c0:	2006      	movs	r0, #6
   b44c2:	f7ff fed1 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[2] >= 3000) {
   b44c6:	68a2      	ldr	r2, [r4, #8]
   b44c8:	f640 33b7 	movw	r3, #2999	; 0xbb7
   b44cc:	429a      	cmp	r2, r3
   b44ce:	dd05      	ble.n	b44dc <loop+0x220>
            pixelFill(6, 8, 255, purple);
   b44d0:	4b4f      	ldr	r3, [pc, #316]	; (b4610 <loop+0x354>)
   b44d2:	22ff      	movs	r2, #255	; 0xff
   b44d4:	2108      	movs	r1, #8
   b44d6:	2006      	movs	r0, #6
   b44d8:	f7ff fec6 	bl	b4268 <_Z9pixelFilliiii>
        digitalWrite(STROBE, LOW);
   b44dc:	2100      	movs	r1, #0
   b44de:	2010      	movs	r0, #16
   b44e0:	f003 f93b 	bl	b775a <digitalWrite>
   b44e4:	2048      	movs	r0, #72	; 0x48
   b44e6:	f001 fd7f 	bl	b5fe8 <HAL_Delay_Microseconds>
        soundLevel[3] = analogRead(OUT);
   b44ea:	200f      	movs	r0, #15
   b44ec:	f003 f94e 	bl	b778c <analogRead>
   b44f0:	60e0      	str	r0, [r4, #12]
        Serial.printf("Level 0\n Value %i\n", soundLevel[3]);
   b44f2:	f002 ffe3 	bl	b74bc <_Z16_fetch_usbserialv>
   b44f6:	68e2      	ldr	r2, [r4, #12]
   b44f8:	4944      	ldr	r1, [pc, #272]	; (b460c <loop+0x350>)
   b44fa:	f7ff fdfa 	bl	b40f2 <_ZN5Print6printfEPKcz>
        digitalWrite(STROBE, HIGH);
   b44fe:	2101      	movs	r1, #1
   b4500:	2010      	movs	r0, #16
   b4502:	f003 f92a 	bl	b775a <digitalWrite>
   b4506:	2048      	movs	r0, #72	; 0x48
   b4508:	f001 fd6e 	bl	b5fe8 <HAL_Delay_Microseconds>
        if(soundLevel[3] < 400) {
   b450c:	68e3      	ldr	r3, [r4, #12]
   b450e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b4512:	da05      	bge.n	b4520 <loop+0x264>
            pixelFill(9, 11, 50, fullblue);
   b4514:	23ff      	movs	r3, #255	; 0xff
   b4516:	2232      	movs	r2, #50	; 0x32
   b4518:	210b      	movs	r1, #11
   b451a:	2009      	movs	r0, #9
   b451c:	f7ff fea4 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[3] >= 400 && soundLevel[3] < 1000) {
   b4520:	68e3      	ldr	r3, [r4, #12]
   b4522:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
   b4526:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b452a:	d205      	bcs.n	b4538 <loop+0x27c>
            pixelFill(9, 11, 100, fullblue);
   b452c:	23ff      	movs	r3, #255	; 0xff
   b452e:	2264      	movs	r2, #100	; 0x64
   b4530:	210b      	movs	r1, #11
   b4532:	2009      	movs	r0, #9
   b4534:	f7ff fe98 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[3] >= 1000 && soundLevel[3] < 2000) {
   b4538:	68e3      	ldr	r3, [r4, #12]
   b453a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   b453e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b4542:	d205      	bcs.n	b4550 <loop+0x294>
            pixelFill(9, 11, 150, fullblue);
   b4544:	23ff      	movs	r3, #255	; 0xff
   b4546:	2296      	movs	r2, #150	; 0x96
   b4548:	210b      	movs	r1, #11
   b454a:	2009      	movs	r0, #9
   b454c:	f7ff fe8c 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[3] >= 2000 && soundLevel[3] < 3000) {
   b4550:	68e3      	ldr	r3, [r4, #12]
   b4552:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
   b4556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b455a:	d205      	bcs.n	b4568 <loop+0x2ac>
            pixelFill(9, 11, 200, fullblue);
   b455c:	23ff      	movs	r3, #255	; 0xff
   b455e:	22c8      	movs	r2, #200	; 0xc8
   b4560:	210b      	movs	r1, #11
   b4562:	2009      	movs	r0, #9
   b4564:	f7ff fe80 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[3] >= 3000) {
   b4568:	68e2      	ldr	r2, [r4, #12]
   b456a:	f640 33b7 	movw	r3, #2999	; 0xbb7
   b456e:	429a      	cmp	r2, r3
   b4570:	dd05      	ble.n	b457e <loop+0x2c2>
            pixelFill(9, 11, 255, fullblue);
   b4572:	23ff      	movs	r3, #255	; 0xff
   b4574:	461a      	mov	r2, r3
   b4576:	210b      	movs	r1, #11
   b4578:	2009      	movs	r0, #9
   b457a:	f7ff fe75 	bl	b4268 <_Z9pixelFilliiii>
        digitalWrite(STROBE, LOW);
   b457e:	2100      	movs	r1, #0
   b4580:	2010      	movs	r0, #16
   b4582:	f003 f8ea 	bl	b775a <digitalWrite>
   b4586:	2048      	movs	r0, #72	; 0x48
   b4588:	f001 fd2e 	bl	b5fe8 <HAL_Delay_Microseconds>
        soundLevel[4] = analogRead(OUT);
   b458c:	200f      	movs	r0, #15
   b458e:	f003 f8fd 	bl	b778c <analogRead>
   b4592:	6120      	str	r0, [r4, #16]
        Serial.printf("Level 0\n Value %i\n", soundLevel[4]);
   b4594:	f002 ff92 	bl	b74bc <_Z16_fetch_usbserialv>
   b4598:	6922      	ldr	r2, [r4, #16]
   b459a:	491c      	ldr	r1, [pc, #112]	; (b460c <loop+0x350>)
   b459c:	f7ff fda9 	bl	b40f2 <_ZN5Print6printfEPKcz>
        digitalWrite(STROBE, HIGH);
   b45a0:	2101      	movs	r1, #1
   b45a2:	2010      	movs	r0, #16
   b45a4:	f003 f8d9 	bl	b775a <digitalWrite>
   b45a8:	2048      	movs	r0, #72	; 0x48
   b45aa:	f001 fd1d 	bl	b5fe8 <HAL_Delay_Microseconds>
        if(soundLevel[4] < 400) {
   b45ae:	6923      	ldr	r3, [r4, #16]
   b45b0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b45b4:	da06      	bge.n	b45c4 <loop+0x308>
            pixelFill(12, 13, 50, fullgreen);
   b45b6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b45ba:	2232      	movs	r2, #50	; 0x32
   b45bc:	210d      	movs	r1, #13
   b45be:	200c      	movs	r0, #12
   b45c0:	f7ff fe52 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[4] >= 400 && soundLevel[4] < 1000) {
   b45c4:	6923      	ldr	r3, [r4, #16]
   b45c6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
   b45ca:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b45ce:	d206      	bcs.n	b45de <loop+0x322>
            pixelFill(12, 13, 100, fullgreen);
   b45d0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b45d4:	2264      	movs	r2, #100	; 0x64
   b45d6:	210d      	movs	r1, #13
   b45d8:	200c      	movs	r0, #12
   b45da:	f7ff fe45 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[4] >= 1000 && soundLevel[4] < 2000) {
   b45de:	6923      	ldr	r3, [r4, #16]
   b45e0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   b45e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b45e8:	d214      	bcs.n	b4614 <loop+0x358>
            pixelFill(12, 13, 150, fullgreen);
   b45ea:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b45ee:	2296      	movs	r2, #150	; 0x96
   b45f0:	210d      	movs	r1, #13
   b45f2:	200c      	movs	r0, #12
   b45f4:	f7ff fe38 	bl	b4268 <_Z9pixelFilliiii>
   b45f8:	e00c      	b.n	b4614 <loop+0x358>
   b45fa:	bf00      	nop
   b45fc:	2003deac 	.word	0x2003deac
   b4600:	000b7e32 	.word	0x000b7e32
   b4604:	2003da04 	.word	0x2003da04
   b4608:	2003e698 	.word	0x2003e698
   b460c:	000b7e43 	.word	0x000b7e43
   b4610:	007700ff 	.word	0x007700ff
        if(soundLevel[4] >= 2000 && soundLevel[4] < 3000) {
   b4614:	6923      	ldr	r3, [r4, #16]
   b4616:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
   b461a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b461e:	d206      	bcs.n	b462e <loop+0x372>
            pixelFill(12, 13, 200, fullgreen);
   b4620:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b4624:	22c8      	movs	r2, #200	; 0xc8
   b4626:	210d      	movs	r1, #13
   b4628:	200c      	movs	r0, #12
   b462a:	f7ff fe1d 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[4] >= 3000) {
   b462e:	6922      	ldr	r2, [r4, #16]
   b4630:	f640 33b7 	movw	r3, #2999	; 0xbb7
   b4634:	429a      	cmp	r2, r3
   b4636:	dd06      	ble.n	b4646 <loop+0x38a>
            pixelFill(12, 13, 255, fullgreen);
   b4638:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b463c:	22ff      	movs	r2, #255	; 0xff
   b463e:	210d      	movs	r1, #13
   b4640:	200c      	movs	r0, #12
   b4642:	f7ff fe11 	bl	b4268 <_Z9pixelFilliiii>
        digitalWrite(STROBE, LOW);
   b4646:	2100      	movs	r1, #0
   b4648:	2010      	movs	r0, #16
   b464a:	f003 f886 	bl	b775a <digitalWrite>
   b464e:	2048      	movs	r0, #72	; 0x48
   b4650:	f001 fcca 	bl	b5fe8 <HAL_Delay_Microseconds>
        soundLevel[5] = analogRead(OUT);
   b4654:	200f      	movs	r0, #15
   b4656:	f003 f899 	bl	b778c <analogRead>
   b465a:	6160      	str	r0, [r4, #20]
        Serial.printf("Level 0\n Value %i\n", soundLevel[5]);
   b465c:	f002 ff2e 	bl	b74bc <_Z16_fetch_usbserialv>
   b4660:	6962      	ldr	r2, [r4, #20]
   b4662:	4989      	ldr	r1, [pc, #548]	; (b4888 <loop+0x5cc>)
   b4664:	f7ff fd45 	bl	b40f2 <_ZN5Print6printfEPKcz>
        digitalWrite(STROBE, HIGH);
   b4668:	2101      	movs	r1, #1
   b466a:	2010      	movs	r0, #16
   b466c:	f003 f875 	bl	b775a <digitalWrite>
   b4670:	2048      	movs	r0, #72	; 0x48
   b4672:	f001 fcb9 	bl	b5fe8 <HAL_Delay_Microseconds>
        if(soundLevel[4] < 400) {
   b4676:	6923      	ldr	r3, [r4, #16]
   b4678:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b467c:	da05      	bge.n	b468a <loop+0x3ce>
            pixelFill(14, 15, 50, fullyellow);
   b467e:	4b83      	ldr	r3, [pc, #524]	; (b488c <loop+0x5d0>)
   b4680:	2232      	movs	r2, #50	; 0x32
   b4682:	210f      	movs	r1, #15
   b4684:	200e      	movs	r0, #14
   b4686:	f7ff fdef 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[5] >= 400 && soundLevel[5] < 1000) {
   b468a:	6963      	ldr	r3, [r4, #20]
   b468c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
   b4690:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b4694:	d205      	bcs.n	b46a2 <loop+0x3e6>
            pixelFill(14, 15, 100, fullyellow);
   b4696:	4b7d      	ldr	r3, [pc, #500]	; (b488c <loop+0x5d0>)
   b4698:	2264      	movs	r2, #100	; 0x64
   b469a:	210f      	movs	r1, #15
   b469c:	200e      	movs	r0, #14
   b469e:	f7ff fde3 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[5] >= 1000 && soundLevel[5] < 2000) {
   b46a2:	6963      	ldr	r3, [r4, #20]
   b46a4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   b46a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b46ac:	d205      	bcs.n	b46ba <loop+0x3fe>
            pixelFill(14, 15, 150, fullyellow);
   b46ae:	4b77      	ldr	r3, [pc, #476]	; (b488c <loop+0x5d0>)
   b46b0:	2296      	movs	r2, #150	; 0x96
   b46b2:	210f      	movs	r1, #15
   b46b4:	200e      	movs	r0, #14
   b46b6:	f7ff fdd7 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[5] >= 2000 && soundLevel[5] < 3000) {
   b46ba:	6963      	ldr	r3, [r4, #20]
   b46bc:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
   b46c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b46c4:	d205      	bcs.n	b46d2 <loop+0x416>
            pixelFill(14, 15, 200, fullyellow);
   b46c6:	4b71      	ldr	r3, [pc, #452]	; (b488c <loop+0x5d0>)
   b46c8:	22c8      	movs	r2, #200	; 0xc8
   b46ca:	210f      	movs	r1, #15
   b46cc:	200e      	movs	r0, #14
   b46ce:	f7ff fdcb 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[5] >= 3000) {
   b46d2:	6962      	ldr	r2, [r4, #20]
   b46d4:	f640 33b7 	movw	r3, #2999	; 0xbb7
   b46d8:	429a      	cmp	r2, r3
   b46da:	dd05      	ble.n	b46e8 <loop+0x42c>
            pixelFill(14, 15, 255, fullyellow);
   b46dc:	4b6b      	ldr	r3, [pc, #428]	; (b488c <loop+0x5d0>)
   b46de:	22ff      	movs	r2, #255	; 0xff
   b46e0:	210f      	movs	r1, #15
   b46e2:	200e      	movs	r0, #14
   b46e4:	f7ff fdc0 	bl	b4268 <_Z9pixelFilliiii>
        digitalWrite(STROBE, LOW);
   b46e8:	2100      	movs	r1, #0
   b46ea:	2010      	movs	r0, #16
   b46ec:	f003 f835 	bl	b775a <digitalWrite>
   b46f0:	2048      	movs	r0, #72	; 0x48
   b46f2:	f001 fc79 	bl	b5fe8 <HAL_Delay_Microseconds>
        soundLevel[6] = analogRead(OUT);
   b46f6:	200f      	movs	r0, #15
   b46f8:	f003 f848 	bl	b778c <analogRead>
   b46fc:	61a0      	str	r0, [r4, #24]
        Serial.printf("Level 0\n Value %i\n", soundLevel[6]);
   b46fe:	f002 fedd 	bl	b74bc <_Z16_fetch_usbserialv>
   b4702:	69a2      	ldr	r2, [r4, #24]
   b4704:	4960      	ldr	r1, [pc, #384]	; (b4888 <loop+0x5cc>)
   b4706:	f7ff fcf4 	bl	b40f2 <_ZN5Print6printfEPKcz>
        digitalWrite(STROBE, HIGH);
   b470a:	2101      	movs	r1, #1
   b470c:	2010      	movs	r0, #16
   b470e:	f003 f824 	bl	b775a <digitalWrite>
   b4712:	2048      	movs	r0, #72	; 0x48
   b4714:	f001 fc68 	bl	b5fe8 <HAL_Delay_Microseconds>
        if(soundLevel[6] < 400) {
   b4718:	69a3      	ldr	r3, [r4, #24]
   b471a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b471e:	da05      	bge.n	b472c <loop+0x470>
            pixelFill(14, 15, 50, orange);
   b4720:	4b5b      	ldr	r3, [pc, #364]	; (b4890 <loop+0x5d4>)
   b4722:	2232      	movs	r2, #50	; 0x32
   b4724:	210f      	movs	r1, #15
   b4726:	200e      	movs	r0, #14
   b4728:	f7ff fd9e 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[6] >= 400 && soundLevel[6] < 1000) {
   b472c:	4c59      	ldr	r4, [pc, #356]	; (b4894 <loop+0x5d8>)
   b472e:	69a3      	ldr	r3, [r4, #24]
   b4730:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
   b4734:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b4738:	d205      	bcs.n	b4746 <loop+0x48a>
            pixelFill(16, 16, 100, orange);
   b473a:	2110      	movs	r1, #16
   b473c:	4b54      	ldr	r3, [pc, #336]	; (b4890 <loop+0x5d4>)
   b473e:	2264      	movs	r2, #100	; 0x64
   b4740:	4608      	mov	r0, r1
   b4742:	f7ff fd91 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[6] >= 1000 && soundLevel[6] < 2000) {
   b4746:	69a3      	ldr	r3, [r4, #24]
   b4748:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   b474c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b4750:	d205      	bcs.n	b475e <loop+0x4a2>
            pixelFill(16, 16, 150, orange);
   b4752:	2110      	movs	r1, #16
   b4754:	4b4e      	ldr	r3, [pc, #312]	; (b4890 <loop+0x5d4>)
   b4756:	2296      	movs	r2, #150	; 0x96
   b4758:	4608      	mov	r0, r1
   b475a:	f7ff fd85 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[6] >= 2000 && soundLevel[6] < 3000) {
   b475e:	69a3      	ldr	r3, [r4, #24]
   b4760:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
   b4764:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b4768:	d205      	bcs.n	b4776 <loop+0x4ba>
            pixelFill(16, 16, 200, orange);
   b476a:	2110      	movs	r1, #16
   b476c:	4b48      	ldr	r3, [pc, #288]	; (b4890 <loop+0x5d4>)
   b476e:	22c8      	movs	r2, #200	; 0xc8
   b4770:	4608      	mov	r0, r1
   b4772:	f7ff fd79 	bl	b4268 <_Z9pixelFilliiii>
        if(soundLevel[6] >= 3000) {
   b4776:	69a2      	ldr	r2, [r4, #24]
   b4778:	f640 33b7 	movw	r3, #2999	; 0xbb7
   b477c:	429a      	cmp	r2, r3
   b477e:	dd05      	ble.n	b478c <loop+0x4d0>
            pixelFill(16, 16, 255, orange);
   b4780:	2110      	movs	r1, #16
   b4782:	4b43      	ldr	r3, [pc, #268]	; (b4890 <loop+0x5d4>)
   b4784:	22ff      	movs	r2, #255	; 0xff
   b4786:	4608      	mov	r0, r1
   b4788:	f7ff fd6e 	bl	b4268 <_Z9pixelFilliiii>
   b478c:	4b42      	ldr	r3, [pc, #264]	; (b4898 <loop+0x5dc>)
   b478e:	2200      	movs	r2, #0
   b4790:	6858      	ldr	r0, [r3, #4]
   b4792:	4611      	mov	r1, r2
   b4794:	f001 fe44 	bl	b6420 <network_connecting>
       if(WiFi.connecting() == false) {
   b4798:	4606      	mov	r6, r0
   b479a:	2800      	cmp	r0, #0
   b479c:	d171      	bne.n	b4882 <loop+0x5c6>
          if((millis()-lastTime > 60000)) {
   b479e:	4f3f      	ldr	r7, [pc, #252]	; (b489c <loop+0x5e0>)
   b47a0:	4d3f      	ldr	r5, [pc, #252]	; (b48a0 <loop+0x5e4>)
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b47a2:	f001 fc31 	bl	b6008 <HAL_Timer_Get_Milli_Seconds>
   b47a6:	683b      	ldr	r3, [r7, #0]
   b47a8:	1ac0      	subs	r0, r0, r3
   b47aa:	f64e 2360 	movw	r3, #60000	; 0xea60
   b47ae:	4298      	cmp	r0, r3
   b47b0:	d94a      	bls.n	b4848 <loop+0x58c>
            request.hostname = "gluebench.bubbleapps.io";
   b47b2:	4c3c      	ldr	r4, [pc, #240]	; (b48a4 <loop+0x5e8>)
   b47b4:	493c      	ldr	r1, [pc, #240]	; (b48a8 <loop+0x5ec>)
   b47b6:	4620      	mov	r0, r4
   b47b8:	f002 fa6b 	bl	b6c92 <_ZN6StringaSEPKc>
            request.port = PORT;
   b47bc:	2350      	movs	r3, #80	; 0x50
            request.path = "/version-test/api/1.1/wf/getMainTemp";
   b47be:	493b      	ldr	r1, [pc, #236]	; (b48ac <loop+0x5f0>)
            request.port = PORT;
   b47c0:	63a3      	str	r3, [r4, #56]	; 0x38
            request.path = "/version-test/api/1.1/wf/getMainTemp";
   b47c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b47c6:	f002 fa64 	bl	b6c92 <_ZN6StringaSEPKc>
    * HTTP request methods.
    * Can't use 'delete' as name since it's a C++ keyword.
    */
    void get(http_request_t &aRequest, http_response_t &aResponse)
    {
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_GET);
   b47ca:	4b39      	ldr	r3, [pc, #228]	; (b48b0 <loop+0x5f4>)
   b47cc:	9300      	str	r3, [sp, #0]
   b47ce:	4839      	ldr	r0, [pc, #228]	; (b48b4 <loop+0x5f8>)
   b47d0:	4633      	mov	r3, r6
   b47d2:	462a      	mov	r2, r5
   b47d4:	4621      	mov	r1, r4
   b47d6:	f001 facf 	bl	b5d78 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
            if (response.status == 200) {
   b47da:	682b      	ldr	r3, [r5, #0]
   b47dc:	2bc8      	cmp	r3, #200	; 0xc8
   b47de:	d127      	bne.n	b4830 <loop+0x574>
                jsonParser.clear();
   b47e0:	4835      	ldr	r0, [pc, #212]	; (b48b8 <loop+0x5fc>)
   b47e2:	f001 f84f 	bl	b5884 <_ZN10JsonBuffer5clearEv>
                Serial.print("Application>\tResponse status: ");
   b47e6:	f002 fe69 	bl	b74bc <_Z16_fetch_usbserialv>
   b47ea:	4934      	ldr	r1, [pc, #208]	; (b48bc <loop+0x600>)
   b47ec:	f002 f8c0 	bl	b6970 <_ZN5Print5printEPKc>
                Serial.println(response.status);
   b47f0:	f002 fe64 	bl	b74bc <_Z16_fetch_usbserialv>
   b47f4:	682c      	ldr	r4, [r5, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b47f6:	2c00      	cmp	r4, #0
   b47f8:	4606      	mov	r6, r0
   b47fa:	da23      	bge.n	b4844 <loop+0x588>
            t = print('-');
   b47fc:	212d      	movs	r1, #45	; 0x2d
   b47fe:	f002 f8bb 	bl	b6978 <_ZN5Print5printEc>
            val = -n;
   b4802:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4804:	220a      	movs	r2, #10
   b4806:	4630      	mov	r0, r6
   b4808:	f002 f8cf 	bl	b69aa <_ZN5Print11printNumberEmh>
        n += println();
   b480c:	4630      	mov	r0, r6
   b480e:	f002 f8b6 	bl	b697e <_ZN5Print7printlnEv>
                Serial.print("Application>\tHTTP Response Body: ");
   b4812:	f002 fe53 	bl	b74bc <_Z16_fetch_usbserialv>
   b4816:	492a      	ldr	r1, [pc, #168]	; (b48c0 <loop+0x604>)
   b4818:	f002 f8aa 	bl	b6970 <_ZN5Print5printEPKc>
                Serial.println(response.body);
   b481c:	f002 fe4e 	bl	b74bc <_Z16_fetch_usbserialv>
   b4820:	6869      	ldr	r1, [r5, #4]
   b4822:	f002 f8b8 	bl	b6996 <_ZN5Print7printlnEPKc>
                mainTemp = jsonParser.parse();
   b4826:	4824      	ldr	r0, [pc, #144]	; (b48b8 <loop+0x5fc>)
   b4828:	f001 fa22 	bl	b5c70 <_ZN10JsonParser5parseEv>
   b482c:	4b25      	ldr	r3, [pc, #148]	; (b48c4 <loop+0x608>)
   b482e:	6018      	str	r0, [r3, #0]
   b4830:	f001 fbea 	bl	b6008 <HAL_Timer_Get_Milli_Seconds>
            lastTime = millis();
   b4834:	6038      	str	r0, [r7, #0]
            delay(5000);
   b4836:	f241 3088 	movw	r0, #5000	; 0x1388
}
   b483a:	b003      	add	sp, #12
   b483c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            delay(5000);
   b4840:	f001 be7e 	b.w	b6540 <delay>
            val = n;
   b4844:	4621      	mov	r1, r4
   b4846:	e7dd      	b.n	b4804 <loop+0x548>
                Serial.printf("HTTP error: ");
   b4848:	f002 fe38 	bl	b74bc <_Z16_fetch_usbserialv>
   b484c:	491e      	ldr	r1, [pc, #120]	; (b48c8 <loop+0x60c>)
   b484e:	f7ff fc50 	bl	b40f2 <_ZN5Print6printfEPKcz>
                Serial.println(response.status);
   b4852:	f002 fe33 	bl	b74bc <_Z16_fetch_usbserialv>
   b4856:	682c      	ldr	r4, [r5, #0]
        if (n < 0 && base == 10) {
   b4858:	2c00      	cmp	r4, #0
   b485a:	4606      	mov	r6, r0
   b485c:	da0b      	bge.n	b4876 <loop+0x5ba>
            t = print('-');
   b485e:	212d      	movs	r1, #45	; 0x2d
   b4860:	f002 f88a 	bl	b6978 <_ZN5Print5printEc>
            val = -n;
   b4864:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b4866:	220a      	movs	r2, #10
   b4868:	4630      	mov	r0, r6
   b486a:	f002 f89e 	bl	b69aa <_ZN5Print11printNumberEmh>
        n += println();
   b486e:	4630      	mov	r0, r6
   b4870:	f002 f885 	bl	b697e <_ZN5Print7printlnEv>
        return n;
   b4874:	e7df      	b.n	b4836 <loop+0x57a>
            val = n;
   b4876:	4621      	mov	r1, r4
   b4878:	e7f5      	b.n	b4866 <loop+0x5aa>
        distance = analogRead(MOTIONSENSOR);
   b487a:	2012      	movs	r0, #18
   b487c:	f002 ff86 	bl	b778c <analogRead>
   b4880:	6020      	str	r0, [r4, #0]
}
   b4882:	b003      	add	sp, #12
   b4884:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4886:	bf00      	nop
   b4888:	000b7e43 	.word	0x000b7e43
   b488c:	00ffff00 	.word	0x00ffff00
   b4890:	00ff7700 	.word	0x00ff7700
   b4894:	2003e698 	.word	0x2003e698
   b4898:	2003e718 	.word	0x2003e718
   b489c:	2003e5f8 	.word	0x2003e5f8
   b48a0:	2003e684 	.word	0x2003e684
   b48a4:	2003e638 	.word	0x2003e638
   b48a8:	000b7e56 	.word	0x000b7e56
   b48ac:	000b7e6e 	.word	0x000b7e6e
   b48b0:	000b7e93 	.word	0x000b7e93
   b48b4:	2003deb0 	.word	0x2003deb0
   b48b8:	2003e2cc 	.word	0x2003e2cc
   b48bc:	000b7e97 	.word	0x000b7e97
   b48c0:	000b7eb6 	.word	0x000b7eb6
   b48c4:	2003e5fc 	.word	0x2003e5fc
   b48c8:	000b7ed8 	.word	0x000b7ed8

000b48cc <_GLOBAL__sub_I_soundInput>:
            
        }
    }
    pixel.show();
    return (endPixel);
}
   b48cc:	b513      	push	{r0, r1, r4, lr}
Adafruit_NeoPixel pixel(PIXELCOUNT, PIXELPIN, WS2812B);
   b48ce:	2302      	movs	r3, #2
   b48d0:	2208      	movs	r2, #8
   b48d2:	2110      	movs	r1, #16
   b48d4:	481f      	ldr	r0, [pc, #124]	; (b4954 <_GLOBAL__sub_I_soundInput+0x88>)
} http_request_t;
   b48d6:	4c20      	ldr	r4, [pc, #128]	; (b4958 <_GLOBAL__sub_I_soundInput+0x8c>)
   b48d8:	f000 f894 	bl	b4a04 <_ZN17Adafruit_NeoPixelC1Ethh>
Adafruit_SSD1306 myDisplay(OLED_RESET); 
   b48dc:	2104      	movs	r1, #4
   b48de:	481f      	ldr	r0, [pc, #124]	; (b495c <_GLOBAL__sub_I_soundInput+0x90>)
   b48e0:	f000 fe36 	bl	b5550 <_ZN16Adafruit_SSD1306C1Ea>
TCPClient TheClient; // Create TCP Client object  
   b48e4:	481e      	ldr	r0, [pc, #120]	; (b4960 <_GLOBAL__sub_I_soundInput+0x94>)
   b48e6:	f002 fd17 	bl	b7318 <_ZN9TCPClientC1Ev>
HttpClient http;
   b48ea:	481e      	ldr	r0, [pc, #120]	; (b4964 <_GLOBAL__sub_I_soundInput+0x98>)
   b48ec:	f001 fa0d 	bl	b5d0a <_ZN10HttpClientC1Ev>
   b48f0:	491d      	ldr	r1, [pc, #116]	; (b4968 <_GLOBAL__sub_I_soundInput+0x9c>)
   b48f2:	4620      	mov	r0, r4
   b48f4:	f002 f9b9 	bl	b6c6a <_ZN6StringC1EPK19__FlashStringHelper>
   b48f8:	f104 0010 	add.w	r0, r4, #16
   b48fc:	f001 ff02 	bl	b6704 <_ZN9IPAddressC1Ev>
   b4900:	4919      	ldr	r1, [pc, #100]	; (b4968 <_GLOBAL__sub_I_soundInput+0x9c>)
   b4902:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b4906:	f002 f9b0 	bl	b6c6a <_ZN6StringC1EPK19__FlashStringHelper>
   b490a:	4917      	ldr	r1, [pc, #92]	; (b4968 <_GLOBAL__sub_I_soundInput+0x9c>)
   b490c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b4910:	f002 f9ab 	bl	b6c6a <_ZN6StringC1EPK19__FlashStringHelper>
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b4914:	4c15      	ldr	r4, [pc, #84]	; (b496c <_GLOBAL__sub_I_soundInput+0xa0>)
} http_response_t;
   b4916:	4914      	ldr	r1, [pc, #80]	; (b4968 <_GLOBAL__sub_I_soundInput+0x9c>)
   b4918:	4815      	ldr	r0, [pc, #84]	; (b4970 <_GLOBAL__sub_I_soundInput+0xa4>)
   b491a:	f002 f9a6 	bl	b6c6a <_ZN6StringC1EPK19__FlashStringHelper>
   b491e:	2310      	movs	r3, #16
   b4920:	9300      	str	r3, [sp, #0]
   b4922:	f44f 7200 	mov.w	r2, #512	; 0x200
   b4926:	f504 730b 	add.w	r3, r4, #556	; 0x22c
   b492a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b492e:	4620      	mov	r0, r4
   b4930:	f000 ffb2 	bl	b5898 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b4934:	4b0f      	ldr	r3, [pc, #60]	; (b4974 <_GLOBAL__sub_I_soundInput+0xa8>)
   b4936:	6023      	str	r3, [r4, #0]
              error_(SYSTEM_ERROR_NONE) {
   b4938:	4b0f      	ldr	r3, [pc, #60]	; (b4978 <_GLOBAL__sub_I_soundInput+0xac>)
   b493a:	2200      	movs	r2, #0
   b493c:	e9c3 2200 	strd	r2, r2, [r3]
        set_system_mode(mode);
   b4940:	2001      	movs	r0, #1
    SleepResult() {}
   b4942:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4946:	609a      	str	r2, [r3, #8]
}
   b4948:	b002      	add	sp, #8
   b494a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        set_system_mode(mode);
   b494e:	f001 bd2b 	b.w	b63a8 <set_system_mode>
   b4952:	bf00      	nop
   b4954:	2003e624 	.word	0x2003e624
   b4958:	2003e638 	.word	0x2003e638
   b495c:	2003e600 	.word	0x2003e600
   b4960:	2003de90 	.word	0x2003de90
   b4964:	2003deb0 	.word	0x2003deb0
   b4968:	000b7e31 	.word	0x000b7e31
   b496c:	2003e2cc 	.word	0x2003e2cc
   b4970:	2003e688 	.word	0x2003e688
   b4974:	000b7ef0 	.word	0x000b7ef0
   b4978:	2003de84 	.word	0x2003de84

000b497c <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b497c:	b538      	push	{r3, r4, r5, lr}
   b497e:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b4980:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b4982:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b4984:	b108      	cbz	r0, b498a <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b4986:	f001 fdab 	bl	b64e0 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b498a:	79a3      	ldrb	r3, [r4, #6]
   b498c:	2b06      	cmp	r3, #6
   b498e:	bf0c      	ite	eq
   b4990:	2004      	moveq	r0, #4
   b4992:	2003      	movne	r0, #3
   b4994:	fb10 f005 	smulbb	r0, r0, r5
   b4998:	b280      	uxth	r0, r0
   b499a:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b499c:	f001 fd98 	bl	b64d0 <malloc>
   b49a0:	60e0      	str	r0, [r4, #12]
   b49a2:	b128      	cbz	r0, b49b0 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b49a4:	88a2      	ldrh	r2, [r4, #4]
   b49a6:	2100      	movs	r1, #0
   b49a8:	f003 f8d4 	bl	b7b54 <memset>
    numLEDs = n;
   b49ac:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b49ae:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b49b0:	80a0      	strh	r0, [r4, #4]
   b49b2:	8060      	strh	r0, [r4, #2]
}
   b49b4:	e7fb      	b.n	b49ae <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b49b6 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b49b6:	b510      	push	{r4, lr}
   b49b8:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b49ba:	2101      	movs	r1, #1
   b49bc:	79c0      	ldrb	r0, [r0, #7]
   b49be:	f002 febb 	bl	b7738 <pinMode>
  digitalWrite(pin, LOW);
   b49c2:	79e0      	ldrb	r0, [r4, #7]
   b49c4:	2100      	movs	r1, #0
   b49c6:	f002 fec8 	bl	b775a <digitalWrite>
  begun = true;
   b49ca:	2301      	movs	r3, #1
   b49cc:	7023      	strb	r3, [r4, #0]
}
   b49ce:	bd10      	pop	{r4, pc}

000b49d0 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b49d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b49d2:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b49d4:	4605      	mov	r5, r0
   b49d6:	460c      	mov	r4, r1
    if (begun) {
   b49d8:	b11b      	cbz	r3, b49e2 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b49da:	79c0      	ldrb	r0, [r0, #7]
   b49dc:	2100      	movs	r1, #0
   b49de:	f002 feab 	bl	b7738 <pinMode>
    }
    pin = p;
    if (begun) {
   b49e2:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b49e4:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b49e6:	b15b      	cbz	r3, b4a00 <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b49e8:	b2a0      	uxth	r0, r4
   b49ea:	2101      	movs	r1, #1
   b49ec:	9001      	str	r0, [sp, #4]
   b49ee:	f002 fea3 	bl	b7738 <pinMode>
        digitalWrite(p, LOW);
   b49f2:	9801      	ldr	r0, [sp, #4]
   b49f4:	2100      	movs	r1, #0
    }
}
   b49f6:	b003      	add	sp, #12
   b49f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b49fc:	f002 bead 	b.w	b775a <digitalWrite>
}
   b4a00:	b003      	add	sp, #12
   b4a02:	bd30      	pop	{r4, r5, pc}

000b4a04 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4a04:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4a06:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4a08:	4604      	mov	r4, r0
   b4a0a:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4a0c:	7183      	strb	r3, [r0, #6]
   b4a0e:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b4a12:	7005      	strb	r5, [r0, #0]
   b4a14:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b4a16:	f7ff ffb1 	bl	b497c <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b4a1a:	4620      	mov	r0, r4
   b4a1c:	4631      	mov	r1, r6
   b4a1e:	f7ff ffd7 	bl	b49d0 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b4a22:	4620      	mov	r0, r4
   b4a24:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4a28 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b4a28:	68c3      	ldr	r3, [r0, #12]
   b4a2a:	2b00      	cmp	r3, #0
   b4a2c:	f000 81a4 	beq.w	b4d78 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b4a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4a34:	7983      	ldrb	r3, [r0, #6]
   b4a36:	3b02      	subs	r3, #2
   b4a38:	b2db      	uxtb	r3, r3
   b4a3a:	2b04      	cmp	r3, #4
   b4a3c:	bf9c      	itt	ls
   b4a3e:	4abf      	ldrls	r2, [pc, #764]	; (b4d3c <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b4a40:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b4a44:	b085      	sub	sp, #20
   b4a46:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b4a48:	bf88      	it	hi
   b4a4a:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4a4c:	f001 fad4 	bl	b5ff8 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b4a50:	692b      	ldr	r3, [r5, #16]
   b4a52:	1ac0      	subs	r0, r0, r3
   b4a54:	42a0      	cmp	r0, r4
   b4a56:	d3f9      	bcc.n	b4a4c <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b4a58:	4cb9      	ldr	r4, [pc, #740]	; (b4d40 <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4a5a:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b4a5c:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4a60:	b91b      	cbnz	r3, b4a6a <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4a62:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4a66:	2b00      	cmp	r3, #0
   b4a68:	db7e      	blt.n	b4b68 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b4a6a:	4cb6      	ldr	r4, [pc, #728]	; (b4d44 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b4a6c:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4a70:	b923      	cbnz	r3, b4a7c <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4a72:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4a76:	2b00      	cmp	r3, #0
   b4a78:	f2c0 816e 	blt.w	b4d58 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b4a7c:	4cb2      	ldr	r4, [pc, #712]	; (b4d48 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b4a7e:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4a82:	2b00      	cmp	r3, #0
   b4a84:	f000 8144 	beq.w	b4d10 <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4a88:	79eb      	ldrb	r3, [r5, #7]
   b4a8a:	4ab0      	ldr	r2, [pc, #704]	; (b4d4c <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4a8c:	4cb0      	ldr	r4, [pc, #704]	; (b4d50 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4a8e:	6812      	ldr	r2, [r2, #0]
   b4a90:	0119      	lsls	r1, r3, #4
   b4a92:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b4a96:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b4a98:	49ae      	ldr	r1, [pc, #696]	; (b4d54 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4a9a:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b4a9c:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b4aa0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b4aa4:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4aa8:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4aaa:	f003 031f 	and.w	r3, r3, #31
   b4aae:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b4ab2:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4ab4:	433a      	orrs	r2, r7
   b4ab6:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b4ab8:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b4aba:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b4abe:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4ac2:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b4ac4:	2900      	cmp	r1, #0
   b4ac6:	d044      	beq.n	b4b52 <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b4ac8:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b4acc:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b4ace:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b4ad2:	f818 cb01 	ldrb.w	ip, [r8], #1
   b4ad6:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4ad8:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b4ada:	6863      	ldr	r3, [r4, #4]
   b4adc:	1a9b      	subs	r3, r3, r2
   b4ade:	2b46      	cmp	r3, #70	; 0x46
   b4ae0:	d9fb      	bls.n	b4ada <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b4ae2:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b4ae4:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b4ae8:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b4aec:	ea43 0307 	orr.w	r3, r3, r7
   b4af0:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b4af4:	d02f      	beq.n	b4b56 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b4af6:	6863      	ldr	r3, [r4, #4]
   b4af8:	1a9b      	subs	r3, r3, r2
   b4afa:	2b28      	cmp	r3, #40	; 0x28
   b4afc:	d9fb      	bls.n	b4af6 <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b4afe:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4b02:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4b04:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4b08:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4b0c:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4b10:	d1e3      	bne.n	b4ada <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b4b12:	88ab      	ldrh	r3, [r5, #4]
   b4b14:	f10e 0e01 	add.w	lr, lr, #1
   b4b18:	fa1f fe8e 	uxth.w	lr, lr
   b4b1c:	4573      	cmp	r3, lr
   b4b1e:	d8d8      	bhi.n	b4ad2 <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b4b20:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b4b24:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b4b28:	6863      	ldr	r3, [r4, #4]
   b4b2a:	1a9b      	subs	r3, r3, r2
   b4b2c:	2b46      	cmp	r3, #70	; 0x46
   b4b2e:	d9fb      	bls.n	b4b28 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b4b30:	6863      	ldr	r3, [r4, #4]
   b4b32:	eba3 0909 	sub.w	r9, r3, r9
   b4b36:	4589      	cmp	r9, r1
   b4b38:	f0c0 80e4 	bcc.w	b4d04 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4b3c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4b40:	f001 fa52 	bl	b5fe8 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b4b44:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b4b46:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b4b4a:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b4b4e:	2900      	cmp	r1, #0
   b4b50:	d1ba      	bne.n	b4ac8 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b4b52:	460a      	mov	r2, r1
   b4b54:	e7e8      	b.n	b4b28 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b4b56:	6863      	ldr	r3, [r4, #4]
   b4b58:	1a9b      	subs	r3, r3, r2
   b4b5a:	2b11      	cmp	r3, #17
   b4b5c:	d8cf      	bhi.n	b4afe <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b4b5e:	6863      	ldr	r3, [r4, #4]
   b4b60:	1a9b      	subs	r3, r3, r2
   b4b62:	2b11      	cmp	r3, #17
   b4b64:	d9f7      	bls.n	b4b56 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b4b66:	e7ca      	b.n	b4afe <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b68:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b6c:	2b00      	cmp	r3, #0
   b4b6e:	f6bf af7c 	bge.w	b4a6a <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b72:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b76:	2b00      	cmp	r3, #0
   b4b78:	f6bf af77 	bge.w	b4a6a <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4b7c:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b80:	2b00      	cmp	r3, #0
   b4b82:	f6bf af72 	bge.w	b4a6a <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4b86:	0136      	lsls	r6, r6, #4
   b4b88:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b4b8a:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4b8c:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b4b8e:	f001 fc9f 	bl	b64d0 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b4b92:	2800      	cmp	r0, #0
   b4b94:	f43f af78 	beq.w	b4a88 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b4b98:	88ab      	ldrh	r3, [r5, #4]
   b4b9a:	2b00      	cmp	r3, #0
   b4b9c:	f000 80ed 	beq.w	b4d7a <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b4ba0:	68ea      	ldr	r2, [r5, #12]
   b4ba2:	3b01      	subs	r3, #1
   b4ba4:	fa12 f783 	uxtah	r7, r2, r3
   b4ba8:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    uint16_t pos = 0; // bit position
   b4bac:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4bae:	f248 0206 	movw	r2, #32774	; 0x8006
   b4bb2:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b4bb6:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4bba:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b4bbe:	bf0c      	ite	eq
   b4bc0:	4693      	moveq	fp, r2
   b4bc2:	468b      	movne	fp, r1
   b4bc4:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b4bc8:	bf0c      	ite	eq
   b4bca:	4616      	moveq	r6, r2
   b4bcc:	460e      	movne	r6, r1
   b4bce:	f01c 0f20 	tst.w	ip, #32
   b4bd2:	bf0c      	ite	eq
   b4bd4:	4690      	moveq	r8, r2
   b4bd6:	4688      	movne	r8, r1
        pos++;
   b4bd8:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4bdc:	f8cd 8008 	str.w	r8, [sp, #8]
   b4be0:	9601      	str	r6, [sp, #4]
        pos++;
   b4be2:	f103 0802 	add.w	r8, r3, #2
   b4be6:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4bea:	9e01      	ldr	r6, [sp, #4]
   b4bec:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b4bf0:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4bf4:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b4bf8:	9e02      	ldr	r6, [sp, #8]
   b4bfa:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b4bfe:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4c02:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b4c06:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4c0a:	bf0c      	ite	eq
   b4c0c:	4693      	moveq	fp, r2
   b4c0e:	468b      	movne	fp, r1
   b4c10:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4c14:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4c18:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b4c1c:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4c20:	bf0c      	ite	eq
   b4c22:	4693      	moveq	fp, r2
   b4c24:	468b      	movne	fp, r1
   b4c26:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4c2a:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4c2e:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b4c32:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4c36:	bf0c      	ite	eq
   b4c38:	4693      	moveq	fp, r2
   b4c3a:	468b      	movne	fp, r1
   b4c3c:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4c40:	f103 0a08 	add.w	sl, r3, #8
   b4c44:	f103 0806 	add.w	r8, r3, #6
   b4c48:	3307      	adds	r3, #7
   b4c4a:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4c4c:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b4c50:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4c54:	bf0c      	ite	eq
   b4c56:	4693      	moveq	fp, r2
   b4c58:	468b      	movne	fp, r1
        pos++;
   b4c5a:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4c5e:	f01c 0f01 	tst.w	ip, #1
   b4c62:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b4c66:	bf15      	itete	ne
   b4c68:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b4c6c:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b4c70:	fa1f f38a 	uxthne.w	r3, sl
   b4c74:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b4c78:	4577      	cmp	r7, lr
   b4c7a:	d19c      	bne.n	b4bb6 <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4c7c:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4c7e:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4c80:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4c82:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4c84:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4c86:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4c88:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b4c8c:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4c8e:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4c90:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4c92:	4b2e      	ldr	r3, [pc, #184]	; (b4d4c <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4c94:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4c96:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4c98:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4c9a:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4c9c:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b4ca0:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4ca4:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b4ca8:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b4cac:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b4cb0:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4cb4:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b4cb8:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b4cbc:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4cc0:	79eb      	ldrb	r3, [r5, #7]
   b4cc2:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b4cc6:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b4cc8:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4cca:	5cfe      	ldrb	r6, [r7, r3]
   b4ccc:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b4cd0:	f003 031f 	and.w	r3, r3, #31
   b4cd4:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b4cd8:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b4cdc:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b4ce0:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b4ce4:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b4ce6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b4cea:	2b00      	cmp	r3, #0
   b4cec:	d0fb      	beq.n	b4ce6 <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b4cee:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4cf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pwm->EVENTS_SEQEND[0] = 0;
   b4cf4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b4cf8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4cfc:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b4d00:	f001 fbee 	bl	b64e0 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4d04:	f001 f978 	bl	b5ff8 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b4d08:	6128      	str	r0, [r5, #16]
}
   b4d0a:	b005      	add	sp, #20
   b4d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d10:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4d14:	2b00      	cmp	r3, #0
   b4d16:	f6bf aeb7 	bge.w	b4a88 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d1a:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d1e:	2b00      	cmp	r3, #0
   b4d20:	f6bf aeb2 	bge.w	b4a88 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d24:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d28:	2b00      	cmp	r3, #0
   b4d2a:	f6bf aead 	bge.w	b4a88 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4d2e:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d32:	2b00      	cmp	r3, #0
   b4d34:	f6bf aea8 	bge.w	b4a88 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b4d38:	e725      	b.n	b4b86 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b4d3a:	bf00      	nop
   b4d3c:	000b7ef8 	.word	0x000b7ef8
   b4d40:	4001c000 	.word	0x4001c000
   b4d44:	40021000 	.word	0x40021000
   b4d48:	40022000 	.word	0x40022000
   b4d4c:	2003e6b4 	.word	0x2003e6b4
   b4d50:	e0001000 	.word	0xe0001000
   b4d54:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d58:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d5c:	2b00      	cmp	r3, #0
   b4d5e:	f6bf ae8d 	bge.w	b4a7c <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d62:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d66:	2b00      	cmp	r3, #0
   b4d68:	f6bf ae88 	bge.w	b4a7c <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4d6c:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d70:	2b00      	cmp	r3, #0
   b4d72:	f6bf ae83 	bge.w	b4a7c <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b4d76:	e706      	b.n	b4b86 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b4d78:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b4d7a:	2304      	movs	r3, #4
   b4d7c:	2102      	movs	r1, #2
   b4d7e:	e783      	b.n	b4c88 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b4d80 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   b4d80:	8843      	ldrh	r3, [r0, #2]
   b4d82:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   b4d84:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   b4d86:	d92d      	bls.n	b4de4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   b4d88:	7a06      	ldrb	r6, [r0, #8]
   b4d8a:	f3c2 4307 	ubfx	r3, r2, #16, #8
   b4d8e:	f3c2 2407 	ubfx	r4, r2, #8, #8
   b4d92:	b2d5      	uxtb	r5, r2
   b4d94:	b13e      	cbz	r6, b4da6 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   b4d96:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
   b4d98:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
   b4d9a:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
   b4d9c:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   b4da0:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   b4da4:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b4da6:	f890 c006 	ldrb.w	ip, [r0, #6]
   b4daa:	68c7      	ldr	r7, [r0, #12]
   b4dac:	f1bc 0f06 	cmp.w	ip, #6
   b4db0:	bf0c      	ite	eq
   b4db2:	2604      	moveq	r6, #4
   b4db4:	2603      	movne	r6, #3
   b4db6:	434e      	muls	r6, r1
   b4db8:	f1ac 0c02 	sub.w	ip, ip, #2
   b4dbc:	19b9      	adds	r1, r7, r6
    switch(type) {
   b4dbe:	f1bc 0f06 	cmp.w	ip, #6
   b4dc2:	d81d      	bhi.n	b4e00 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   b4dc4:	e8df f00c 	tbb	[pc, ip]
   b4dc8:	04081c04 	.word	0x04081c04
   b4dcc:	040f      	.short	0x040f
   b4dce:	04          	.byte	0x04
   b4dcf:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b4dd0:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
   b4dd2:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b4dd4:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
   b4dd6:	e005      	b.n	b4de4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
   b4dd8:	2bfe      	cmp	r3, #254	; 0xfe
   b4dda:	bf28      	it	cs
   b4ddc:	23fe      	movcs	r3, #254	; 0xfe
   b4dde:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
   b4de0:	704d      	strb	r5, [r1, #1]
          *p = g;
   b4de2:	708c      	strb	r4, [r1, #2]
}
   b4de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b4de6:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b4de8:	704c      	strb	r4, [r1, #1]
          *p++ = b;
   b4dea:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4dec:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   b4dee:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4df0:	b913      	cbnz	r3, b4df8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   b4df2:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4df4:	70ca      	strb	r2, [r1, #3]
        } break;
   b4df6:	e7f5      	b.n	b4de4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4df8:	435a      	muls	r2, r3
   b4dfa:	f3c2 2207 	ubfx	r2, r2, #8, #8
   b4dfe:	e7f9      	b.n	b4df4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   b4e00:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b4e02:	704c      	strb	r4, [r1, #1]
   b4e04:	e7e6      	b.n	b4dd4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

000b4e06 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   b4e06:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
   b4e08:	1c4a      	adds	r2, r1, #1
   b4e0a:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   b4e0c:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   b4e0e:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
   b4e10:	d01f      	beq.n	b4e52 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4c>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   b4e12:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b4e14:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
   b4e18:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b4e1a:	d00c      	beq.n	b4e36 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   b4e1c:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   b4e1e:	bf1f      	itttt	ne
   b4e20:	0211      	lslne	r1, r2, #8
   b4e22:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
   b4e26:	fbb1 f3f3 	udivne	r3, r1, r3
   b4e2a:	b29b      	uxthne	r3, r3
    else if(b == 255) scale = 65535 / oldBrightness;
   b4e2c:	bf04      	itt	eq
   b4e2e:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   b4e32:	fbb1 f3f3 	udiveq	r3, r1, r3
            *ptr           = pixels,
   b4e36:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
   b4e38:	8886      	ldrh	r6, [r0, #4]
   b4e3a:	1b29      	subs	r1, r5, r4
   b4e3c:	b289      	uxth	r1, r1
   b4e3e:	428e      	cmp	r6, r1
   b4e40:	d906      	bls.n	b4e50 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
   b4e42:	7829      	ldrb	r1, [r5, #0]
   b4e44:	4359      	muls	r1, r3
   b4e46:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b4e4a:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
   b4e4e:	e7f3      	b.n	b4e38 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
   b4e50:	7202      	strb	r2, [r0, #8]
  }
}
   b4e52:	bd70      	pop	{r4, r5, r6, pc}

000b4e54 <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   b4e54:	8882      	ldrh	r2, [r0, #4]
   b4e56:	68c0      	ldr	r0, [r0, #12]
   b4e58:	2100      	movs	r1, #0
   b4e5a:	f002 be7b 	b.w	b7b54 <memset>
	...

000b4e60 <_GLOBAL__sub_I_PIN_MAP2>:
}
   b4e60:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b4e62:	f001 f8e1 	bl	b6028 <HAL_Pin_Map>
   b4e66:	4b01      	ldr	r3, [pc, #4]	; (b4e6c <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b4e68:	6018      	str	r0, [r3, #0]
}
   b4e6a:	bd08      	pop	{r3, pc}
   b4e6c:	2003e6b4 	.word	0x2003e6b4

000b4e70 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b4e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4e74:	b085      	sub	sp, #20
   b4e76:	461f      	mov	r7, r3
   b4e78:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4e7c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4e80:	eba8 0902 	sub.w	r9, r8, r2
   b4e84:	eba7 0a01 	sub.w	sl, r7, r1
   b4e88:	f1b9 0f00 	cmp.w	r9, #0
   b4e8c:	bfb8      	it	lt
   b4e8e:	f1c9 0900 	rsblt	r9, r9, #0
   b4e92:	f1ba 0f00 	cmp.w	sl, #0
   b4e96:	bfb8      	it	lt
   b4e98:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b4e9c:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b4e9e:	4683      	mov	fp, r0
   b4ea0:	460c      	mov	r4, r1
   b4ea2:	4615      	mov	r5, r2
  if (steep) {
   b4ea4:	dd04      	ble.n	b4eb0 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b4ea6:	463a      	mov	r2, r7
    swap(x0, y0);
   b4ea8:	462c      	mov	r4, r5
    swap(x1, y1);
   b4eaa:	4647      	mov	r7, r8
    swap(x0, y0);
   b4eac:	460d      	mov	r5, r1
    swap(x1, y1);
   b4eae:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b4eb0:	42bc      	cmp	r4, r7
   b4eb2:	dd05      	ble.n	b4ec0 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b4eb4:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b4eb6:	4645      	mov	r5, r8
   b4eb8:	4690      	mov	r8, r2
  if (x0 > x1) {
   b4eba:	4622      	mov	r2, r4
   b4ebc:	463c      	mov	r4, r7
   b4ebe:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b4ec0:	1b3e      	subs	r6, r7, r4
   b4ec2:	b2b2      	uxth	r2, r6
   b4ec4:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b4ec6:	eba8 0205 	sub.w	r2, r8, r5
   b4eca:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4ece:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b4ed2:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b4ed6:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b4eda:	4545      	cmp	r5, r8
   b4edc:	bfb4      	ite	lt
   b4ede:	2201      	movlt	r2, #1
   b4ee0:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
   b4ee4:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b4ee6:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b4ee8:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b4eea:	42bc      	cmp	r4, r7
   b4eec:	dc1c      	bgt.n	b4f28 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b4eee:	f8db 2000 	ldr.w	r2, [fp]
   b4ef2:	9303      	str	r3, [sp, #12]
    if (steep) {
   b4ef4:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b4ef6:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b4efa:	bfc7      	ittee	gt
   b4efc:	4629      	movgt	r1, r5
   b4efe:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b4f00:	462a      	movle	r2, r5
   b4f02:	4621      	movle	r1, r4
   b4f04:	4658      	mov	r0, fp
   b4f06:	47c0      	blx	r8
    }
    err -= dy;
   b4f08:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b4f0a:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b4f0c:	1ab6      	subs	r6, r6, r2
   b4f0e:	b2b1      	uxth	r1, r6
   b4f10:	b236      	sxth	r6, r6
    if (err < 0) {
   b4f12:	2e00      	cmp	r6, #0
   b4f14:	da05      	bge.n	b4f22 <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b4f16:	9a02      	ldr	r2, [sp, #8]
   b4f18:	4415      	add	r5, r2
      err += dx;
   b4f1a:	9a00      	ldr	r2, [sp, #0]
   b4f1c:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b4f1e:	b22d      	sxth	r5, r5
      err += dx;
   b4f20:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b4f22:	3401      	adds	r4, #1
   b4f24:	b224      	sxth	r4, r4
   b4f26:	e7e0      	b.n	b4eea <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b4f28:	b005      	add	sp, #20
   b4f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4f2e <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b4f2e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4f32:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b4f36:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b4f38:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b4f3c:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b4f40:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b4f42:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b4f44:	4616      	mov	r6, r2
   b4f46:	468a      	mov	sl, r1
   b4f48:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b4f4a:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b4f4c:	6823      	ldr	r3, [r4, #0]
   b4f4e:	f8cd 8000 	str.w	r8, [sp]
   b4f52:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b4f56:	4432      	add	r2, r6
   b4f58:	69df      	ldr	r7, [r3, #28]
   b4f5a:	4651      	mov	r1, sl
   b4f5c:	462b      	mov	r3, r5
   b4f5e:	4620      	mov	r0, r4
   b4f60:	b212      	sxth	r2, r2
   b4f62:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b4f64:	6823      	ldr	r3, [r4, #0]
   b4f66:	f8cd 8000 	str.w	r8, [sp]
   b4f6a:	699f      	ldr	r7, [r3, #24]
   b4f6c:	4632      	mov	r2, r6
   b4f6e:	464b      	mov	r3, r9
   b4f70:	4651      	mov	r1, sl
   b4f72:	4620      	mov	r0, r4
   b4f74:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b4f76:	1e6b      	subs	r3, r5, #1
   b4f78:	eb03 010a 	add.w	r1, r3, sl
   b4f7c:	6823      	ldr	r3, [r4, #0]
   b4f7e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b4f82:	699d      	ldr	r5, [r3, #24]
   b4f84:	4632      	mov	r2, r6
   b4f86:	464b      	mov	r3, r9
   b4f88:	b209      	sxth	r1, r1
   b4f8a:	4620      	mov	r0, r4
   b4f8c:	46ac      	mov	ip, r5
}
   b4f8e:	b002      	add	sp, #8
   b4f90:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b4f94:	4760      	bx	ip

000b4f96 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b4f96:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b4f98:	3b01      	subs	r3, #1
   b4f9a:	4413      	add	r3, r2
   b4f9c:	6804      	ldr	r4, [r0, #0]
   b4f9e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b4fa2:	9501      	str	r5, [sp, #4]
   b4fa4:	b21b      	sxth	r3, r3
   b4fa6:	9300      	str	r3, [sp, #0]
   b4fa8:	6964      	ldr	r4, [r4, #20]
   b4faa:	460b      	mov	r3, r1
   b4fac:	47a0      	blx	r4
}
   b4fae:	b003      	add	sp, #12
   b4fb0:	bd30      	pop	{r4, r5, pc}

000b4fb2 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b4fb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b4fb4:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b4fb8:	6804      	ldr	r4, [r0, #0]
   b4fba:	e9cd 2500 	strd	r2, r5, [sp]
   b4fbe:	3b01      	subs	r3, #1
   b4fc0:	440b      	add	r3, r1
   b4fc2:	6964      	ldr	r4, [r4, #20]
   b4fc4:	b21b      	sxth	r3, r3
   b4fc6:	47a0      	blx	r4
}
   b4fc8:	b003      	add	sp, #12
   b4fca:	bd30      	pop	{r4, r5, pc}

000b4fcc <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b4fcc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4fd0:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b4fd4:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4fd8:	4605      	mov	r5, r0
   b4fda:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b4fdc:	460c      	mov	r4, r1
   b4fde:	18ce      	adds	r6, r1, r3
   b4fe0:	42b4      	cmp	r4, r6
   b4fe2:	da0b      	bge.n	b4ffc <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b4fe4:	682b      	ldr	r3, [r5, #0]
   b4fe6:	f8cd 8000 	str.w	r8, [sp]
   b4fea:	699f      	ldr	r7, [r3, #24]
   b4fec:	4621      	mov	r1, r4
   b4fee:	464b      	mov	r3, r9
   b4ff0:	4652      	mov	r2, sl
   b4ff2:	4628      	mov	r0, r5
   b4ff4:	3401      	adds	r4, #1
   b4ff6:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b4ff8:	b224      	sxth	r4, r4
   b4ffa:	e7f1      	b.n	b4fe0 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b4ffc:	b002      	add	sp, #8
   b4ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b5002 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b5002:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b5004:	6802      	ldr	r2, [r0, #0]
   b5006:	9101      	str	r1, [sp, #4]
   b5008:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b500c:	9100      	str	r1, [sp, #0]
   b500e:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b5010:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5014:	2200      	movs	r2, #0
   b5016:	4611      	mov	r1, r2
   b5018:	47a0      	blx	r4
}
   b501a:	b002      	add	sp, #8
   b501c:	bd10      	pop	{r4, pc}

000b501e <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b501e:	4770      	bx	lr

000b5020 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5020:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b5022:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b5024:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b5026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    Print() : write_error(0) {}
   b502a:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b502c:	4d05      	ldr	r5, [pc, #20]	; (b5044 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b502e:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b5030:	2201      	movs	r2, #1
   b5032:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b5034:	6005      	str	r5, [r0, #0]
   b5036:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b5038:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b503a:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b503c:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b503e:	7682      	strb	r2, [r0, #26]
}
   b5040:	bd30      	pop	{r4, r5, pc}
   b5042:	bf00      	nop
   b5044:	000b8410 	.word	0x000b8410

000b5048 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b504c:	ed2d 8b02 	vpush	{d8}
   b5050:	b08d      	sub	sp, #52	; 0x34
   b5052:	4607      	mov	r7, r0
   b5054:	9104      	str	r1, [sp, #16]
   b5056:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b505a:	9105      	str	r1, [sp, #20]
   b505c:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b5060:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b5062:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b5066:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5068:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b506c:	4281      	cmp	r1, r0
   b506e:	dd52      	ble.n	b5116 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b5070:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b5074:	4291      	cmp	r1, r2
   b5076:	dd4e      	ble.n	b5116 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b5078:	2106      	movs	r1, #6
   b507a:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b507e:	2c00      	cmp	r4, #0
   b5080:	dd49      	ble.n	b5116 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b5082:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b5086:	2c00      	cmp	r4, #0
   b5088:	dd45      	ble.n	b5116 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b508a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b508e:	930b      	str	r3, [sp, #44]	; 0x2c
   b5090:	b293      	uxth	r3, r2
   b5092:	9307      	str	r3, [sp, #28]
   b5094:	3308      	adds	r3, #8
   b5096:	b29b      	uxth	r3, r3
   b5098:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b509a:	2400      	movs	r4, #0
   b509c:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b509e:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b50a0:	bf1c      	itt	ne
   b50a2:	4b2c      	ldrne	r3, [pc, #176]	; (b5154 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b50a4:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b50a6:	9e07      	ldr	r6, [sp, #28]
   b50a8:	bf16      	itet	ne
   b50aa:	191b      	addne	r3, r3, r4
      line = 0x0;
   b50ac:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b50ae:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b50b0:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b50b2:	9a04      	ldr	r2, [sp, #16]
   b50b4:	b2ab      	uxth	r3, r5
   b50b6:	930a      	str	r3, [sp, #40]	; 0x28
   b50b8:	fb04 f305 	mul.w	r3, r4, r5
   b50bc:	fa13 f382 	uxtah	r3, r3, r2
   b50c0:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b50c2:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b50c6:	ee08 3a10 	vmov	s16, r3
   b50ca:	46b0      	mov	r8, r6
   b50cc:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b50d0:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b50d4:	9b03      	ldr	r3, [sp, #12]
   b50d6:	07db      	lsls	r3, r3, #31
   b50d8:	d52f      	bpl.n	b513a <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b50da:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b50dc:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b50de:	d11f      	bne.n	b5120 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b50e0:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b50e4:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b50e6:	b232      	sxth	r2, r6
   b50e8:	4651      	mov	r1, sl
   b50ea:	4638      	mov	r0, r7
   b50ec:	47d8      	blx	fp
      line >>= 1;
   b50ee:	9b03      	ldr	r3, [sp, #12]
   b50f0:	085b      	lsrs	r3, r3, #1
   b50f2:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b50f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b50f6:	3601      	adds	r6, #1
   b50f8:	4498      	add	r8, r3
   b50fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b50fc:	b2b6      	uxth	r6, r6
   b50fe:	42b3      	cmp	r3, r6
   b5100:	fa1f f888 	uxth.w	r8, r8
   b5104:	d1e6      	bne.n	b50d4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b5106:	9b08      	ldr	r3, [sp, #32]
   b5108:	3b01      	subs	r3, #1
   b510a:	3401      	adds	r4, #1
   b510c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5110:	b264      	sxtb	r4, r4
   b5112:	9308      	str	r3, [sp, #32]
   b5114:	d1c3      	bne.n	b509e <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b5116:	b00d      	add	sp, #52	; 0x34
   b5118:	ecbd 8b02 	vpop	{d8}
   b511c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b5120:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5122:	e9cd 9200 	strd	r9, r2, [sp]
   b5126:	ee18 1a10 	vmov	r1, s16
   b512a:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b512e:	fa0f f288 	sxth.w	r2, r8
   b5132:	464b      	mov	r3, r9
   b5134:	4638      	mov	r0, r7
   b5136:	47d8      	blx	fp
   b5138:	e7d9      	b.n	b50ee <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b513a:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b513e:	4293      	cmp	r3, r2
   b5140:	d0d5      	beq.n	b50ee <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b5142:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5144:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5146:	d103      	bne.n	b5150 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b5148:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b514c:	9b06      	ldr	r3, [sp, #24]
   b514e:	e7ca      	b.n	b50e6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5150:	9a06      	ldr	r2, [sp, #24]
   b5152:	e7e6      	b.n	b5122 <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b5154:	000b7f0c 	.word	0x000b7f0c

000b5158 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5158:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b515a:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b515c:	b085      	sub	sp, #20
   b515e:	4604      	mov	r4, r0
  if (c == '\n') {
   b5160:	d107      	bne.n	b5172 <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b5162:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b5164:	8a63      	ldrh	r3, [r4, #18]
   b5166:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b516a:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b516c:	2300      	movs	r3, #0
   b516e:	8223      	strh	r3, [r4, #16]
   b5170:	e021      	b.n	b51b6 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b5172:	290d      	cmp	r1, #13
   b5174:	d01f      	beq.n	b51b6 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b5176:	7e03      	ldrb	r3, [r0, #24]
   b5178:	9302      	str	r3, [sp, #8]
   b517a:	8ac3      	ldrh	r3, [r0, #22]
   b517c:	9301      	str	r3, [sp, #4]
   b517e:	8a83      	ldrh	r3, [r0, #20]
   b5180:	9300      	str	r3, [sp, #0]
   b5182:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b5186:	460b      	mov	r3, r1
   b5188:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b518c:	f7ff ff5c 	bl	b5048 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b5190:	7e20      	ldrb	r0, [r4, #24]
   b5192:	8a23      	ldrh	r3, [r4, #16]
   b5194:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b5198:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b519c:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b519e:	b21b      	sxth	r3, r3
   b51a0:	4602      	mov	r2, r0
   b51a2:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b51a4:	b139      	cbz	r1, b51b6 <_ZN12Adafruit_GFX5writeEh+0x5e>
   b51a6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b51aa:	f06f 0505 	mvn.w	r5, #5
   b51ae:	fb05 1100 	mla	r1, r5, r0, r1
   b51b2:	428b      	cmp	r3, r1
   b51b4:	dcd6      	bgt.n	b5164 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b51b6:	2001      	movs	r0, #1
   b51b8:	b005      	add	sp, #20
   b51ba:	bd30      	pop	{r4, r5, pc}

000b51bc <_ZN12Adafruit_GFX11getRotationEv>:
}
   b51bc:	7e40      	ldrb	r0, [r0, #25]
   b51be:	4770      	bx	lr

000b51c0 <_ZN12Adafruit_GFX5widthEv>:
}
   b51c0:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b51c4:	4770      	bx	lr

000b51c6 <_ZN12Adafruit_GFX6heightEv>:
}
   b51c6:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b51ca:	4770      	bx	lr

000b51cc <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b51cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b51ce:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b51d0:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b51d4:	2d02      	cmp	r5, #2
   b51d6:	d069      	beq.n	b52ac <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b51d8:	2d03      	cmp	r5, #3
   b51da:	f000 8099 	beq.w	b5310 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b51de:	2d01      	cmp	r5, #1
   b51e0:	d16c      	bne.n	b52bc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b51e2:	8905      	ldrh	r5, [r0, #8]
   b51e4:	43d2      	mvns	r2, r2
   b51e6:	442a      	add	r2, r5
   b51e8:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b51ea:	2a00      	cmp	r2, #0
   b51ec:	db5d      	blt.n	b52aa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b51ee:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b51f2:	4295      	cmp	r5, r2
   b51f4:	dd59      	ble.n	b52aa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b51f6:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b51f8:	bfbe      	ittt	lt
   b51fa:	185b      	addlt	r3, r3, r1
   b51fc:	b21b      	sxthlt	r3, r3
    __y = 0;
   b51fe:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b5200:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b5204:	18cd      	adds	r5, r1, r3
   b5206:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b5208:	bfc4      	itt	gt
   b520a:	1a43      	subgt	r3, r0, r1
   b520c:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b520e:	2b00      	cmp	r3, #0
   b5210:	dd4b      	ble.n	b52aa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b5212:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b5216:	f8df c120 	ldr.w	ip, [pc, #288]	; b5338 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b521a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b521e:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b5222:	b2db      	uxtb	r3, r3
  pBuf += x;
   b5224:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b5228:	d01a      	beq.n	b5260 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b522a:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b522e:	4e40      	ldr	r6, [pc, #256]	; (b5330 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b5230:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b5232:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b5234:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b5236:	bf3f      	itttt	cc
   b5238:	eba5 0e03 	subcc.w	lr, r5, r3
   b523c:	26ff      	movcc	r6, #255	; 0xff
   b523e:	fa46 f60e 	asrcc.w	r6, r6, lr
   b5242:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b5244:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b5248:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b524a:	bf0c      	ite	eq
   b524c:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b524e:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b5250:	42ab      	cmp	r3, r5
   b5252:	f80c 6002 	strb.w	r6, [ip, r2]
   b5256:	d328      	bcc.n	b52aa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b5258:	3908      	subs	r1, #8
   b525a:	440b      	add	r3, r1
   b525c:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b525e:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b5260:	2b07      	cmp	r3, #7
   b5262:	d919      	bls.n	b5298 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b5264:	2c01      	cmp	r4, #1
   b5266:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b526a:	bf18      	it	ne
   b526c:	2500      	movne	r5, #0
   b526e:	b2ed      	uxtb	r5, r5
   b5270:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b5274:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b5276:	3a08      	subs	r2, #8
   b5278:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b527a:	2a07      	cmp	r2, #7
      *pBuf = val;
   b527c:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b5280:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b5284:	d8f7      	bhi.n	b5276 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b5286:	f1a3 0208 	sub.w	r2, r3, #8
   b528a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b528e:	3201      	adds	r2, #1
   b5290:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b5294:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b5298:	b13b      	cbz	r3, b52aa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b529a:	4a26      	ldr	r2, [pc, #152]	; (b5334 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b529c:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b529e:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b52a0:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b52a2:	bf0c      	ite	eq
   b52a4:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b52a6:	4393      	bicne	r3, r2
   b52a8:	7003      	strb	r3, [r0, #0]
}
   b52aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b52ac:	8945      	ldrh	r5, [r0, #10]
   b52ae:	43d2      	mvns	r2, r2
   b52b0:	442a      	add	r2, r5
      x -= (w-1);
   b52b2:	18cd      	adds	r5, r1, r3
   b52b4:	8901      	ldrh	r1, [r0, #8]
   b52b6:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b52b8:	b212      	sxth	r2, r2
      x -= (w-1);
   b52ba:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b52bc:	2a00      	cmp	r2, #0
   b52be:	dbf4      	blt.n	b52aa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b52c0:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b52c4:	4295      	cmp	r5, r2
   b52c6:	ddf0      	ble.n	b52aa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b52c8:	2900      	cmp	r1, #0
    w += x;
   b52ca:	bfbe      	ittt	lt
   b52cc:	185b      	addlt	r3, r3, r1
   b52ce:	b21b      	sxthlt	r3, r3
    x = 0;
   b52d0:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b52d2:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b52d6:	18ce      	adds	r6, r1, r3
   b52d8:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b52da:	bfc4      	itt	gt
   b52dc:	1a6b      	subgt	r3, r5, r1
   b52de:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b52e0:	2b00      	cmp	r3, #0
   b52e2:	dde2      	ble.n	b52aa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b52e4:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b52e6:	2580      	movs	r5, #128	; 0x80
   b52e8:	fb10 1105 	smlabb	r1, r0, r5, r1
   b52ec:	4812      	ldr	r0, [pc, #72]	; (b5338 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b52ee:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b52f0:	f002 0007 	and.w	r0, r2, #7
   b52f4:	2201      	movs	r2, #1
   b52f6:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b52f8:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b52fa:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b52fc:	440b      	add	r3, r1
   b52fe:	d10c      	bne.n	b531a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b5300:	428b      	cmp	r3, r1
   b5302:	d0d2      	beq.n	b52aa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5304:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5308:	4310      	orrs	r0, r2
   b530a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b530e:	e7f7      	b.n	b5300 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b5310:	18cd      	adds	r5, r1, r3
   b5312:	8941      	ldrh	r1, [r0, #10]
   b5314:	1b49      	subs	r1, r1, r5
   b5316:	b209      	sxth	r1, r1
      break;
   b5318:	e767      	b.n	b51ea <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b531a:	43d2      	mvns	r2, r2
   b531c:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b531e:	428b      	cmp	r3, r1
   b5320:	d0c3      	beq.n	b52aa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5322:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5326:	4010      	ands	r0, r2
   b5328:	f801 0c01 	strb.w	r0, [r1, #-1]
   b532c:	e7f7      	b.n	b531e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b532e:	bf00      	nop
   b5330:	2003da10 	.word	0x2003da10
   b5334:	2003da08 	.word	0x2003da08
   b5338:	2003da18 	.word	0x2003da18

000b533c <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b533c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b533e:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5340:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b5344:	2d02      	cmp	r5, #2
   b5346:	d034      	beq.n	b53b2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b5348:	2d03      	cmp	r5, #3
   b534a:	f000 809b 	beq.w	b5484 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b534e:	2d01      	cmp	r5, #1
   b5350:	d137      	bne.n	b53c2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b5352:	18d5      	adds	r5, r2, r3
   b5354:	8902      	ldrh	r2, [r0, #8]
   b5356:	1b52      	subs	r2, r2, r5
   b5358:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b535a:	2900      	cmp	r1, #0
   b535c:	f2c0 8091 	blt.w	b5482 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5360:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b5364:	428d      	cmp	r5, r1
   b5366:	f340 808c 	ble.w	b5482 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b536a:	2a00      	cmp	r2, #0
    w += x;
   b536c:	bfbe      	ittt	lt
   b536e:	189b      	addlt	r3, r3, r2
   b5370:	b21b      	sxthlt	r3, r3
    x = 0;
   b5372:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b5374:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b5378:	18d6      	adds	r6, r2, r3
   b537a:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b537c:	bfc4      	itt	gt
   b537e:	1aab      	subgt	r3, r5, r2
   b5380:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b5382:	2b00      	cmp	r3, #0
   b5384:	dd7d      	ble.n	b5482 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b5386:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b5388:	2580      	movs	r5, #128	; 0x80
   b538a:	fb10 2205 	smlabb	r2, r0, r5, r2
   b538e:	4845      	ldr	r0, [pc, #276]	; (b54a4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b5390:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b5392:	f001 0007 	and.w	r0, r1, #7
   b5396:	2101      	movs	r1, #1
   b5398:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b539a:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b539c:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b539e:	4413      	add	r3, r2
   b53a0:	d175      	bne.n	b548e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b53a2:	429a      	cmp	r2, r3
   b53a4:	d06d      	beq.n	b5482 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b53a6:	f812 0b01 	ldrb.w	r0, [r2], #1
   b53aa:	4308      	orrs	r0, r1
   b53ac:	f802 0c01 	strb.w	r0, [r2, #-1]
   b53b0:	e7f7      	b.n	b53a2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b53b2:	8905      	ldrh	r5, [r0, #8]
   b53b4:	43c9      	mvns	r1, r1
   b53b6:	4429      	add	r1, r5
      y -= (h-1);
   b53b8:	18d5      	adds	r5, r2, r3
   b53ba:	8942      	ldrh	r2, [r0, #10]
   b53bc:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b53be:	b209      	sxth	r1, r1
      y -= (h-1);
   b53c0:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b53c2:	2900      	cmp	r1, #0
   b53c4:	db5d      	blt.n	b5482 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b53c6:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b53ca:	428d      	cmp	r5, r1
   b53cc:	dd59      	ble.n	b5482 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b53ce:	2a00      	cmp	r2, #0
    __h += __y;
   b53d0:	bfbe      	ittt	lt
   b53d2:	189b      	addlt	r3, r3, r2
   b53d4:	b21b      	sxthlt	r3, r3
    __y = 0;
   b53d6:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b53d8:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b53dc:	18d5      	adds	r5, r2, r3
   b53de:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b53e0:	bfc4      	itt	gt
   b53e2:	1a83      	subgt	r3, r0, r2
   b53e4:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b53e6:	2b00      	cmp	r3, #0
   b53e8:	dd4b      	ble.n	b5482 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b53ea:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b53ee:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b54a4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b53f2:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b53f6:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b53fa:	b2db      	uxtb	r3, r3
  pBuf += x;
   b53fc:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b5400:	d01a      	beq.n	b5438 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b5402:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b5406:	4e28      	ldr	r6, [pc, #160]	; (b54a8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b5408:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b540a:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b540c:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b540e:	bf3f      	itttt	cc
   b5410:	eba5 0e03 	subcc.w	lr, r5, r3
   b5414:	26ff      	movcc	r6, #255	; 0xff
   b5416:	fa46 f60e 	asrcc.w	r6, r6, lr
   b541a:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b541c:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b5420:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5422:	bf0c      	ite	eq
   b5424:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b5426:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b5428:	42ab      	cmp	r3, r5
   b542a:	f80c 6001 	strb.w	r6, [ip, r1]
   b542e:	d328      	bcc.n	b5482 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b5430:	3a08      	subs	r2, #8
   b5432:	4413      	add	r3, r2
   b5434:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b5436:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b5438:	2b07      	cmp	r3, #7
   b543a:	d919      	bls.n	b5470 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b543c:	2c01      	cmp	r4, #1
   b543e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b5442:	bf18      	it	ne
   b5444:	2500      	movne	r5, #0
   b5446:	b2ed      	uxtb	r5, r5
   b5448:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b544c:	461a      	mov	r2, r3
      h -= 8;
   b544e:	3a08      	subs	r2, #8
   b5450:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b5452:	2a07      	cmp	r2, #7
      *pBuf = val;
   b5454:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b5458:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b545c:	d8f7      	bhi.n	b544e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b545e:	f1a3 0208 	sub.w	r2, r3, #8
   b5462:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b5466:	3201      	adds	r2, #1
   b5468:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b546c:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b5470:	b13b      	cbz	r3, b5482 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b5472:	4a0e      	ldr	r2, [pc, #56]	; (b54ac <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b5474:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b5476:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b5478:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b547a:	bf0c      	ite	eq
   b547c:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b547e:	4393      	bicne	r3, r2
   b5480:	7003      	strb	r3, [r0, #0]
}
   b5482:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b5484:	8945      	ldrh	r5, [r0, #10]
   b5486:	43c9      	mvns	r1, r1
   b5488:	4429      	add	r1, r5
   b548a:	b209      	sxth	r1, r1
      break;
   b548c:	e765      	b.n	b535a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b548e:	43c9      	mvns	r1, r1
   b5490:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b5492:	429a      	cmp	r2, r3
   b5494:	d0f5      	beq.n	b5482 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5496:	f812 0b01 	ldrb.w	r0, [r2], #1
   b549a:	4008      	ands	r0, r1
   b549c:	f802 0c01 	strb.w	r0, [r2, #-1]
   b54a0:	e7f7      	b.n	b5492 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b54a2:	bf00      	nop
   b54a4:	2003da18 	.word	0x2003da18
   b54a8:	2003da10 	.word	0x2003da10
   b54ac:	2003da08 	.word	0x2003da08

000b54b0 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b54b0:	4770      	bx	lr
	...

000b54b4 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b54b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b54b6:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b54b8:	4606      	mov	r6, r0
   b54ba:	4614      	mov	r4, r2
   b54bc:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b54be:	db2d      	blt.n	b551c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b54c0:	f7ff fe7e 	bl	b51c0 <_ZN12Adafruit_GFX5widthEv>
   b54c4:	42a8      	cmp	r0, r5
   b54c6:	dd29      	ble.n	b551c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b54c8:	2c00      	cmp	r4, #0
   b54ca:	db27      	blt.n	b551c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b54cc:	4630      	mov	r0, r6
   b54ce:	f7ff fe7a 	bl	b51c6 <_ZN12Adafruit_GFX6heightEv>
   b54d2:	42a0      	cmp	r0, r4
   b54d4:	dd22      	ble.n	b551c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b54d6:	4630      	mov	r0, r6
   b54d8:	f7ff fe70 	bl	b51bc <_ZN12Adafruit_GFX11getRotationEv>
   b54dc:	2802      	cmp	r0, #2
   b54de:	d01e      	beq.n	b551e <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b54e0:	2803      	cmp	r0, #3
   b54e2:	d025      	beq.n	b5530 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b54e4:	2801      	cmp	r0, #1
   b54e6:	d104      	bne.n	b54f2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b54e8:	8933      	ldrh	r3, [r6, #8]
   b54ea:	43e2      	mvns	r2, r4
   b54ec:	441a      	add	r2, r3
    break;
   b54ee:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b54f0:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b54f2:	2c00      	cmp	r4, #0
   b54f4:	4622      	mov	r2, r4
   b54f6:	bfb8      	it	lt
   b54f8:	1de2      	addlt	r2, r4, #7
   b54fa:	10d2      	asrs	r2, r2, #3
   b54fc:	2180      	movs	r1, #128	; 0x80
   b54fe:	fb12 5501 	smlabb	r5, r2, r1, r5
   b5502:	490e      	ldr	r1, [pc, #56]	; (b553c <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b5504:	2201      	movs	r2, #1
   b5506:	f004 0407 	and.w	r4, r4, #7
   b550a:	574b      	ldrsb	r3, [r1, r5]
   b550c:	fa02 f404 	lsl.w	r4, r2, r4
   b5510:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b5512:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b5514:	bf0c      	ite	eq
   b5516:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b5518:	43a3      	bicne	r3, r4
   b551a:	554b      	strb	r3, [r1, r5]
}
   b551c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b551e:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b5520:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b5522:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b5524:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b5526:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b5528:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b552a:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b552c:	b224      	sxth	r4, r4
    break;
   b552e:	e7e0      	b.n	b54f2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b5530:	8973      	ldrh	r3, [r6, #10]
   b5532:	3b01      	subs	r3, #1
   b5534:	1b5b      	subs	r3, r3, r5
    break;
   b5536:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b5538:	b21c      	sxth	r4, r3
    break;
   b553a:	e7da      	b.n	b54f2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b553c:	2003da18 	.word	0x2003da18

000b5540 <_ZN16Adafruit_SSD1306D0Ev>:
   b5540:	b510      	push	{r4, lr}
   b5542:	2124      	movs	r1, #36	; 0x24
   b5544:	4604      	mov	r4, r0
   b5546:	f7fe fda8 	bl	b409a <_ZdlPvj>
   b554a:	4620      	mov	r0, r4
   b554c:	bd10      	pop	{r4, pc}
	...

000b5550 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b5550:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b5552:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b5554:	4604      	mov	r4, r0
   b5556:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b5558:	2180      	movs	r1, #128	; 0x80
   b555a:	f7ff fd61 	bl	b5020 <_ZN12Adafruit_GFXC1Ess>
   b555e:	4b06      	ldr	r3, [pc, #24]	; (b5578 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b5560:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b5562:	23ff      	movs	r3, #255	; 0xff
   b5564:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b5568:	7763      	strb	r3, [r4, #29]
   b556a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b556e:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b5570:	f884 5020 	strb.w	r5, [r4, #32]
}
   b5574:	4620      	mov	r0, r4
   b5576:	bd38      	pop	{r3, r4, r5, pc}
   b5578:	000b8448 	.word	0x000b8448

000b557c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b557c:	4802      	ldr	r0, [pc, #8]	; (b5588 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b557e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b5582:	2100      	movs	r1, #0
   b5584:	f002 bae6 	b.w	b7b54 <memset>
   b5588:	2003da18 	.word	0x2003da18

000b558c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b558c:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b558e:	4c0b      	ldr	r4, [pc, #44]	; (b55bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5590:	7821      	ldrb	r1, [r4, #0]
   b5592:	f3bf 8f5b 	dmb	ish
   b5596:	f011 0101 	ands.w	r1, r1, #1
   b559a:	d10b      	bne.n	b55b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b559c:	4620      	mov	r0, r4
   b559e:	9101      	str	r1, [sp, #4]
   b55a0:	f7fe fd8a 	bl	b40b8 <__cxa_guard_acquire>
   b55a4:	9901      	ldr	r1, [sp, #4]
   b55a6:	b128      	cbz	r0, b55b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b55a8:	4805      	ldr	r0, [pc, #20]	; (b55c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b55aa:	f001 fa59 	bl	b6a60 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b55ae:	4620      	mov	r0, r4
   b55b0:	f7fe fd87 	bl	b40c2 <__cxa_guard_release>
        return instance;
    }
   b55b4:	4802      	ldr	r0, [pc, #8]	; (b55c0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b55b6:	b002      	add	sp, #8
   b55b8:	bd10      	pop	{r4, pc}
   b55ba:	bf00      	nop
   b55bc:	2003e6b8 	.word	0x2003e6b8
   b55c0:	2003e6bc 	.word	0x2003e6bc

000b55c4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b55c4:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b55c6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b55ca:	b143      	cbz	r3, b55de <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b55cc:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b55ce:	f7ff ffdd 	bl	b558c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b55d2:	9901      	ldr	r1, [sp, #4]
}
   b55d4:	b003      	add	sp, #12
   b55d6:	f85d eb04 	ldr.w	lr, [sp], #4
   b55da:	f001 baf5 	b.w	b6bc8 <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b55de:	460b      	mov	r3, r1
   b55e0:	7f81      	ldrb	r1, [r0, #30]
   b55e2:	7f40      	ldrb	r0, [r0, #29]
   b55e4:	2201      	movs	r2, #1
}
   b55e6:	b003      	add	sp, #12
   b55e8:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b55ec:	f002 b8e5 	b.w	b77ba <shiftOut>

000b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b55f0:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b55f2:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b55f6:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b55f8:	4604      	mov	r4, r0
   b55fa:	460d      	mov	r5, r1
  if (sid != -1)
   b55fc:	d01d      	beq.n	b563a <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b55fe:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b5602:	2101      	movs	r1, #1
   b5604:	b280      	uxth	r0, r0
   b5606:	f002 f8a8 	bl	b775a <digitalWrite>
    digitalWrite(dc, LOW);
   b560a:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b560e:	2100      	movs	r1, #0
   b5610:	b280      	uxth	r0, r0
   b5612:	f002 f8a2 	bl	b775a <digitalWrite>
    digitalWrite(cs, LOW);
   b5616:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b561a:	2100      	movs	r1, #0
   b561c:	b280      	uxth	r0, r0
   b561e:	f002 f89c 	bl	b775a <digitalWrite>
    fastSPIwrite(c);
   b5622:	4629      	mov	r1, r5
   b5624:	4620      	mov	r0, r4
   b5626:	f7ff ffcd 	bl	b55c4 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b562a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b562e:	2101      	movs	r1, #1
}
   b5630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b5634:	b280      	uxth	r0, r0
   b5636:	f002 b890 	b.w	b775a <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b563a:	f002 f8fb 	bl	b7834 <_Z19__fetch_global_Wirev>
   b563e:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b5642:	f001 f81b 	bl	b667c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b5646:	f002 f8f5 	bl	b7834 <_Z19__fetch_global_Wirev>
   b564a:	6803      	ldr	r3, [r0, #0]
   b564c:	2100      	movs	r1, #0
   b564e:	689b      	ldr	r3, [r3, #8]
   b5650:	4798      	blx	r3
    Wire.write(c);
   b5652:	f002 f8ef 	bl	b7834 <_Z19__fetch_global_Wirev>
   b5656:	6803      	ldr	r3, [r0, #0]
   b5658:	4629      	mov	r1, r5
   b565a:	689b      	ldr	r3, [r3, #8]
   b565c:	4798      	blx	r3
    Wire.endTransmission();
   b565e:	f002 f8e9 	bl	b7834 <_Z19__fetch_global_Wirev>
}
   b5662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b5666:	f001 b810 	b.w	b668a <_ZN7TwoWire15endTransmissionEv>

000b566a <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b566a:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b566c:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b5670:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b5672:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b5674:	4604      	mov	r4, r0
   b5676:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b5678:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b567a:	f000 80c9 	beq.w	b5810 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b567e:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b5682:	2101      	movs	r1, #1
   b5684:	b280      	uxth	r0, r0
   b5686:	f002 f857 	bl	b7738 <pinMode>
    pinMode(cs, OUTPUT);
   b568a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b568e:	2101      	movs	r1, #1
   b5690:	b280      	uxth	r0, r0
   b5692:	f002 f851 	bl	b7738 <pinMode>
    if (!hwSPI){
   b5696:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b569a:	2b00      	cmp	r3, #0
   b569c:	f000 80a6 	beq.w	b57ec <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b56a0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b56a4:	2101      	movs	r1, #1
   b56a6:	b280      	uxth	r0, r0
   b56a8:	f002 f857 	bl	b775a <digitalWrite>
        instance().setBitOrder(order);
   b56ac:	f7ff ff6e 	bl	b558c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b56b0:	2101      	movs	r1, #1
   b56b2:	f001 f9f3 	bl	b6a9c <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b56b6:	f7ff ff69 	bl	b558c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b56ba:	2110      	movs	r1, #16
   b56bc:	f001 fa5e 	bl	b6b7c <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b56c0:	f7ff ff64 	bl	b558c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b56c4:	2100      	movs	r1, #0
   b56c6:	f001 f9fd 	bl	b6ac4 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b56ca:	f7ff ff5f 	bl	b558c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b56ce:	f001 f9d1 	bl	b6a74 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b56d2:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b56d6:	2101      	movs	r1, #1
   b56d8:	b280      	uxth	r0, r0
   b56da:	f002 f82d 	bl	b7738 <pinMode>
  digitalWrite(rst, HIGH);
   b56de:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b56e2:	2101      	movs	r1, #1
   b56e4:	b280      	uxth	r0, r0
   b56e6:	f002 f838 	bl	b775a <digitalWrite>
  delay(1);
   b56ea:	2001      	movs	r0, #1
   b56ec:	f000 ff28 	bl	b6540 <delay>
  digitalWrite(rst, LOW);
   b56f0:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b56f4:	2100      	movs	r1, #0
   b56f6:	b280      	uxth	r0, r0
   b56f8:	f002 f82f 	bl	b775a <digitalWrite>
  delay(10);
   b56fc:	200a      	movs	r0, #10
   b56fe:	f000 ff1f 	bl	b6540 <delay>
  digitalWrite(rst, HIGH);
   b5702:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5706:	2101      	movs	r1, #1
   b5708:	b280      	uxth	r0, r0
   b570a:	f002 f826 	bl	b775a <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b570e:	4620      	mov	r0, r4
   b5710:	21ae      	movs	r1, #174	; 0xae
   b5712:	f7ff ff6d 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b5716:	4620      	mov	r0, r4
   b5718:	21d5      	movs	r1, #213	; 0xd5
   b571a:	f7ff ff69 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b571e:	4620      	mov	r0, r4
   b5720:	2180      	movs	r1, #128	; 0x80
   b5722:	f7ff ff65 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b5726:	4620      	mov	r0, r4
   b5728:	21a8      	movs	r1, #168	; 0xa8
   b572a:	f7ff ff61 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b572e:	4620      	mov	r0, r4
   b5730:	213f      	movs	r1, #63	; 0x3f
   b5732:	f7ff ff5d 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b5736:	4620      	mov	r0, r4
   b5738:	21d3      	movs	r1, #211	; 0xd3
   b573a:	f7ff ff59 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b573e:	4620      	mov	r0, r4
   b5740:	2100      	movs	r1, #0
   b5742:	f7ff ff55 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b5746:	4620      	mov	r0, r4
   b5748:	2140      	movs	r1, #64	; 0x40
   b574a:	f7ff ff51 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b574e:	218d      	movs	r1, #141	; 0x8d
   b5750:	4620      	mov	r0, r4
   b5752:	f7ff ff4d 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5756:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b5758:	bf0c      	ite	eq
   b575a:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b575c:	2114      	movne	r1, #20
   b575e:	4620      	mov	r0, r4
   b5760:	f7ff ff46 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b5764:	4620      	mov	r0, r4
   b5766:	2120      	movs	r1, #32
   b5768:	f7ff ff42 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b576c:	4620      	mov	r0, r4
   b576e:	2100      	movs	r1, #0
   b5770:	f7ff ff3e 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b5774:	4620      	mov	r0, r4
   b5776:	21a1      	movs	r1, #161	; 0xa1
   b5778:	f7ff ff3a 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b577c:	4620      	mov	r0, r4
   b577e:	21c8      	movs	r1, #200	; 0xc8
   b5780:	f7ff ff36 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b5784:	4620      	mov	r0, r4
   b5786:	21da      	movs	r1, #218	; 0xda
   b5788:	f7ff ff32 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b578c:	4620      	mov	r0, r4
   b578e:	2112      	movs	r1, #18
   b5790:	f7ff ff2e 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b5794:	2181      	movs	r1, #129	; 0x81
   b5796:	4620      	mov	r0, r4
   b5798:	f7ff ff2a 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b579c:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b579e:	bf0c      	ite	eq
   b57a0:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b57a2:	21cf      	movne	r1, #207	; 0xcf
   b57a4:	4620      	mov	r0, r4
   b57a6:	f7ff ff23 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b57aa:	21d9      	movs	r1, #217	; 0xd9
   b57ac:	4620      	mov	r0, r4
   b57ae:	f7ff ff1f 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b57b2:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b57b4:	bf0c      	ite	eq
   b57b6:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b57b8:	21f1      	movne	r1, #241	; 0xf1
   b57ba:	4620      	mov	r0, r4
   b57bc:	f7ff ff18 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b57c0:	4620      	mov	r0, r4
   b57c2:	21db      	movs	r1, #219	; 0xdb
   b57c4:	f7ff ff14 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b57c8:	4620      	mov	r0, r4
   b57ca:	2140      	movs	r1, #64	; 0x40
   b57cc:	f7ff ff10 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b57d0:	4620      	mov	r0, r4
   b57d2:	21a4      	movs	r1, #164	; 0xa4
   b57d4:	f7ff ff0c 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b57d8:	4620      	mov	r0, r4
   b57da:	21a6      	movs	r1, #166	; 0xa6
   b57dc:	f7ff ff08 	bl	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b57e0:	4620      	mov	r0, r4
   b57e2:	21af      	movs	r1, #175	; 0xaf
}
   b57e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b57e8:	f7ff bf02 	b.w	b55f0 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b57ec:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b57f0:	2101      	movs	r1, #1
   b57f2:	b280      	uxth	r0, r0
   b57f4:	f001 ffa0 	bl	b7738 <pinMode>
    	pinMode(sclk, OUTPUT);
   b57f8:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b57fc:	2101      	movs	r1, #1
   b57fe:	b280      	uxth	r0, r0
   b5800:	f001 ff9a 	bl	b7738 <pinMode>
    if (hwSPI){
   b5804:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5808:	2b00      	cmp	r3, #0
   b580a:	f43f af62 	beq.w	b56d2 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b580e:	e747      	b.n	b56a0 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b5810:	f002 f810 	bl	b7834 <_Z19__fetch_global_Wirev>
   b5814:	f000 ff28 	bl	b6668 <_ZN7TwoWire5beginEv>
   b5818:	e75b      	b.n	b56d2 <_ZN16Adafruit_SSD13065beginEhh+0x68>
	...

000b581c <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b581c:	b510      	push	{r4, lr}
   b581e:	4b05      	ldr	r3, [pc, #20]	; (b5834 <_ZN10JsonBufferD1Ev+0x18>)
   b5820:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b5822:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b5824:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b5826:	b91b      	cbnz	r3, b5830 <_ZN10JsonBufferD1Ev+0x14>
   b5828:	6840      	ldr	r0, [r0, #4]
   b582a:	b108      	cbz	r0, b5830 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b582c:	f000 fe58 	bl	b64e0 <free>
	}
}
   b5830:	4620      	mov	r0, r4
   b5832:	bd10      	pop	{r4, pc}
   b5834:	000b8480 	.word	0x000b8480

000b5838 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b5838:	b510      	push	{r4, lr}
   b583a:	4604      	mov	r4, r0
}
   b583c:	f7ff ffee 	bl	b581c <_ZN10JsonBufferD1Ev>
   b5840:	4620      	mov	r0, r4
   b5842:	2114      	movs	r1, #20
   b5844:	f7fe fc29 	bl	b409a <_ZdlPvj>
   b5848:	4620      	mov	r0, r4
   b584a:	bd10      	pop	{r4, pc}

000b584c <_ZN10JsonParserD1Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   b584c:	b510      	push	{r4, lr}
   b584e:	4b07      	ldr	r3, [pc, #28]	; (b586c <_ZN10JsonParserD1Ev+0x20>)
   b5850:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b5852:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b5854:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b5856:	b91b      	cbnz	r3, b5860 <_ZN10JsonParserD1Ev+0x14>
   b5858:	6940      	ldr	r0, [r0, #20]
   b585a:	b108      	cbz	r0, b5860 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b585c:	f000 fe40 	bl	b64e0 <free>
JsonParser::~JsonParser() {
   b5860:	4620      	mov	r0, r4
   b5862:	f7ff ffdb 	bl	b581c <_ZN10JsonBufferD1Ev>
	}
}
   b5866:	4620      	mov	r0, r4
   b5868:	bd10      	pop	{r4, pc}
   b586a:	bf00      	nop
   b586c:	000b8490 	.word	0x000b8490

000b5870 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b5870:	b510      	push	{r4, lr}
   b5872:	4604      	mov	r4, r0
}
   b5874:	f7ff ffea 	bl	b584c <_ZN10JsonParserD1Ev>
   b5878:	4620      	mov	r0, r4
   b587a:	212c      	movs	r1, #44	; 0x2c
   b587c:	f7fe fc0d 	bl	b409a <_ZdlPvj>
   b5880:	4620      	mov	r0, r4
   b5882:	bd10      	pop	{r4, pc}

000b5884 <_ZN10JsonBuffer5clearEv>:
	if (buffer && bufferLen) {
   b5884:	6843      	ldr	r3, [r0, #4]
	offset = 0;
   b5886:	2100      	movs	r1, #0
   b5888:	60c1      	str	r1, [r0, #12]
	if (buffer && bufferLen) {
   b588a:	b123      	cbz	r3, b5896 <_ZN10JsonBuffer5clearEv+0x12>
   b588c:	6882      	ldr	r2, [r0, #8]
   b588e:	b112      	cbz	r2, b5896 <_ZN10JsonBuffer5clearEv+0x12>
		memset(buffer, 0, bufferLen);
   b5890:	4618      	mov	r0, r3
   b5892:	f002 b95f 	b.w	b7b54 <memset>
}
   b5896:	4770      	bx	lr

000b5898 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b5898:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b589a:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b589e:	2200      	movs	r2, #0
   b58a0:	60c2      	str	r2, [r0, #12]
   b58a2:	2201      	movs	r2, #1
   b58a4:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b58a6:	6143      	str	r3, [r0, #20]
   b58a8:	4a02      	ldr	r2, [pc, #8]	; (b58b4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b58aa:	9b02      	ldr	r3, [sp, #8]
   b58ac:	6002      	str	r2, [r0, #0]
   b58ae:	61c3      	str	r3, [r0, #28]
}
   b58b0:	bd10      	pop	{r4, pc}
   b58b2:	bf00      	nop
   b58b4:	000b8490 	.word	0x000b8490

000b58b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b58b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b58bc:	6844      	ldr	r4, [r0, #4]
   b58be:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b58c2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b58c6:	f8d0 e000 	ldr.w	lr, [r0]
   b58ca:	4596      	cmp	lr, r2
   b58cc:	f080 81b9 	bcs.w	b5c42 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b58d0:	f811 800e 	ldrb.w	r8, [r1, lr]
   b58d4:	f1b8 0f00 	cmp.w	r8, #0
   b58d8:	f000 81b3 	beq.w	b5c42 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b58dc:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b58e0:	f000 8098 	beq.w	b5a14 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b58e4:	d833      	bhi.n	b594e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b58e6:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b58ea:	f000 80a6 	beq.w	b5a3a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b58ee:	d810      	bhi.n	b5912 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b58f0:	f1a8 0809 	sub.w	r8, r8, #9
   b58f4:	fa5f f888 	uxtb.w	r8, r8
   b58f8:	f1b8 0f17 	cmp.w	r8, #23
   b58fc:	d80d      	bhi.n	b591a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b58fe:	4d9f      	ldr	r5, [pc, #636]	; (b5b7c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b5900:	fa0c f808 	lsl.w	r8, ip, r8
   b5904:	ea18 0f05 	tst.w	r8, r5
   b5908:	d007      	beq.n	b591a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b590a:	6805      	ldr	r5, [r0, #0]
   b590c:	3501      	adds	r5, #1
   b590e:	6005      	str	r5, [r0, #0]
   b5910:	e7d9      	b.n	b58c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b5912:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b5916:	f000 8133 	beq.w	b5b80 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b591a:	f8d0 8000 	ldr.w	r8, [r0]
   b591e:	4542      	cmp	r2, r8
   b5920:	d90e      	bls.n	b5940 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b5922:	f811 5008 	ldrb.w	r5, [r1, r8]
   b5926:	b15d      	cbz	r5, b5940 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b5928:	2d3a      	cmp	r5, #58	; 0x3a
   b592a:	f200 8169 	bhi.w	b5c00 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b592e:	2d1f      	cmp	r5, #31
   b5930:	f200 8151 	bhi.w	b5bd6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b5934:	2d0a      	cmp	r5, #10
   b5936:	f200 8160 	bhi.w	b5bfa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b593a:	2d08      	cmp	r5, #8
   b593c:	f240 8156 	bls.w	b5bec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b5940:	2b00      	cmp	r3, #0
   b5942:	f040 8162 	bne.w	b5c0a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b5946:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b594a:	6005      	str	r5, [r0, #0]
   b594c:	e0a5      	b.n	b5a9a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b594e:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b5952:	d037      	beq.n	b59c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b5954:	d82e      	bhi.n	b59b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b5956:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b595a:	d033      	beq.n	b59c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b595c:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b5960:	d1db      	bne.n	b591a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b5962:	2b00      	cmp	r3, #0
   b5964:	d0d1      	beq.n	b590a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b5966:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b596a:	6845      	ldr	r5, [r0, #4]
   b596c:	3d01      	subs	r5, #1
   b596e:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b5972:	2d00      	cmp	r5, #0
   b5974:	db55      	blt.n	b5a22 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b5976:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b597a:	3701      	adds	r7, #1
   b597c:	d04d      	beq.n	b5a1a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b597e:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b5982:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b5986:	d148      	bne.n	b5a1a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b5988:	f898 b000 	ldrb.w	fp, [r8]
   b598c:	45cb      	cmp	fp, r9
   b598e:	d14b      	bne.n	b5a28 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b5990:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b5994:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b5998:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b599c:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b59a0:	f8de 7004 	ldr.w	r7, [lr, #4]
   b59a4:	3701      	adds	r7, #1
   b59a6:	d042      	beq.n	b5a2e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b59a8:	f8de 7008 	ldr.w	r7, [lr, #8]
   b59ac:	3701      	adds	r7, #1
   b59ae:	d13e      	bne.n	b5a2e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b59b0:	6085      	str	r5, [r0, #8]
				break;
   b59b2:	e7aa      	b.n	b590a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b59b4:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b59b8:	d1af      	bne.n	b591a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b59ba:	2b00      	cmp	r3, #0
   b59bc:	d0a5      	beq.n	b590a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b59be:	f04f 0901 	mov.w	r9, #1
   b59c2:	e7d2      	b.n	b596a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b59c4:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b59c6:	2b00      	cmp	r3, #0
   b59c8:	d09f      	beq.n	b590a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b59ca:	6845      	ldr	r5, [r0, #4]
   b59cc:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b59ce:	42af      	cmp	r7, r5
   b59d0:	d94a      	bls.n	b5a68 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b59d2:	f105 0e01 	add.w	lr, r5, #1
   b59d6:	f8c0 e004 	str.w	lr, [r0, #4]
   b59da:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b59de:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b59e2:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b59e6:	2500      	movs	r5, #0
   b59e8:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b59ec:	6885      	ldr	r5, [r0, #8]
   b59ee:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b59f0:	bf1f      	itttt	ne
   b59f2:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b59f6:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b59fa:	3501      	addne	r5, #1
   b59fc:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b5a00:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b5a04:	bf0c      	ite	eq
   b5a06:	2501      	moveq	r5, #1
   b5a08:	2502      	movne	r5, #2
   b5a0a:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b5a0e:	6805      	ldr	r5, [r0, #0]
   b5a10:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b5a14:	6845      	ldr	r5, [r0, #4]
   b5a16:	3d01      	subs	r5, #1
   b5a18:	e7ca      	b.n	b59b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b5a1a:	3d01      	subs	r5, #1
   b5a1c:	f1a8 0810 	sub.w	r8, r8, #16
   b5a20:	e7a7      	b.n	b5972 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b5a22:	3501      	adds	r5, #1
   b5a24:	f47f af71 	bne.w	b590a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b5a28:	f06f 0401 	mvn.w	r4, #1
   b5a2c:	e01e      	b.n	b5a6c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b5a2e:	3d01      	subs	r5, #1
   b5a30:	1c6f      	adds	r7, r5, #1
   b5a32:	f1ae 0e10 	sub.w	lr, lr, #16
   b5a36:	d1b3      	bne.n	b59a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b5a38:	e767      	b.n	b590a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b5a3a:	f10e 0901 	add.w	r9, lr, #1
   b5a3e:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5a42:	f8d0 8000 	ldr.w	r8, [r0]
   b5a46:	4542      	cmp	r2, r8
   b5a48:	f240 8093 	bls.w	b5b72 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b5a4c:	f811 5008 	ldrb.w	r5, [r1, r8]
   b5a50:	2d00      	cmp	r5, #0
   b5a52:	f000 808e 	beq.w	b5b72 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b5a56:	2d22      	cmp	r5, #34	; 0x22
   b5a58:	d130      	bne.n	b5abc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b5a5a:	b1f3      	cbz	r3, b5a9a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b5a5c:	6845      	ldr	r5, [r0, #4]
   b5a5e:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b5a60:	42af      	cmp	r7, r5
   b5a62:	d806      	bhi.n	b5a72 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b5a64:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b5a68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b5a6c:	4620      	mov	r0, r4
   b5a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b5a72:	f105 0e01 	add.w	lr, r5, #1
   b5a76:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b5a7a:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b5a7e:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b5a82:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b5a86:	2700      	movs	r7, #0
   b5a88:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b5a8a:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b5a8e:	f04f 0a03 	mov.w	sl, #3
   b5a92:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b5a96:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b5a9a:	6885      	ldr	r5, [r0, #8]
   b5a9c:	1c6f      	adds	r7, r5, #1
				count++;
   b5a9e:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b5aa2:	f43f af32 	beq.w	b590a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b5aa6:	2b00      	cmp	r3, #0
   b5aa8:	f43f af2f 	beq.w	b590a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b5aac:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b5ab0:	f8de 500c 	ldr.w	r5, [lr, #12]
   b5ab4:	3501      	adds	r5, #1
   b5ab6:	f8ce 500c 	str.w	r5, [lr, #12]
   b5aba:	e726      	b.n	b590a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b5abc:	2d5c      	cmp	r5, #92	; 0x5c
   b5abe:	d111      	bne.n	b5ae4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b5ac0:	f108 0501 	add.w	r5, r8, #1
   b5ac4:	42aa      	cmp	r2, r5
   b5ac6:	d90d      	bls.n	b5ae4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b5ac8:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b5aca:	5d4d      	ldrb	r5, [r1, r5]
   b5acc:	2d75      	cmp	r5, #117	; 0x75
   b5ace:	d82b      	bhi.n	b5b28 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b5ad0:	2d6d      	cmp	r5, #109	; 0x6d
   b5ad2:	d80b      	bhi.n	b5aec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b5ad4:	2d66      	cmp	r5, #102	; 0x66
   b5ad6:	d827      	bhi.n	b5b28 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b5ad8:	2d5b      	cmp	r5, #91	; 0x5b
   b5ada:	d81d      	bhi.n	b5b18 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b5adc:	2d22      	cmp	r5, #34	; 0x22
   b5ade:	d001      	beq.n	b5ae4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b5ae0:	2d2f      	cmp	r5, #47	; 0x2f
   b5ae2:	d121      	bne.n	b5b28 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5ae4:	6805      	ldr	r5, [r0, #0]
   b5ae6:	3501      	adds	r5, #1
   b5ae8:	6005      	str	r5, [r0, #0]
   b5aea:	e7aa      	b.n	b5a42 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b5aec:	3d6e      	subs	r5, #110	; 0x6e
   b5aee:	2d07      	cmp	r5, #7
   b5af0:	d81a      	bhi.n	b5b28 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b5af2:	a701      	add	r7, pc, #4	; (adr r7, b5af8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b5af4:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b5af8:	000b5ae5 	.word	0x000b5ae5
   b5afc:	000b5b29 	.word	0x000b5b29
   b5b00:	000b5b29 	.word	0x000b5b29
   b5b04:	000b5b29 	.word	0x000b5b29
   b5b08:	000b5ae5 	.word	0x000b5ae5
   b5b0c:	000b5b29 	.word	0x000b5b29
   b5b10:	000b5ae5 	.word	0x000b5ae5
   b5b14:	000b5b2f 	.word	0x000b5b2f
   b5b18:	3d5c      	subs	r5, #92	; 0x5c
   b5b1a:	b2ed      	uxtb	r5, r5
   b5b1c:	fa0c f505 	lsl.w	r5, ip, r5
   b5b20:	f240 4741 	movw	r7, #1089	; 0x441
   b5b24:	423d      	tst	r5, r7
   b5b26:	d1dd      	bne.n	b5ae4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b5b28:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b5b2c:	e77c      	b.n	b5a28 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b5b2e:	f108 0502 	add.w	r5, r8, #2
   b5b32:	6005      	str	r5, [r0, #0]
   b5b34:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b5b38:	f8d0 8000 	ldr.w	r8, [r0]
   b5b3c:	4542      	cmp	r2, r8
   b5b3e:	d803      	bhi.n	b5b48 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b5b40:	6805      	ldr	r5, [r0, #0]
   b5b42:	3d01      	subs	r5, #1
   b5b44:	6005      	str	r5, [r0, #0]
					break;
   b5b46:	e7cd      	b.n	b5ae4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b5b48:	f811 5008 	ldrb.w	r5, [r1, r8]
   b5b4c:	2d00      	cmp	r5, #0
   b5b4e:	d0f7      	beq.n	b5b40 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b5b50:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b5b54:	f1bb 0f09 	cmp.w	fp, #9
   b5b58:	d904      	bls.n	b5b64 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b5b5a:	f025 0520 	bic.w	r5, r5, #32
   b5b5e:	3d41      	subs	r5, #65	; 0x41
   b5b60:	2d05      	cmp	r5, #5
   b5b62:	d8e1      	bhi.n	b5b28 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b5b64:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b5b68:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b5b6c:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b5b6e:	d1e3      	bne.n	b5b38 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b5b70:	e7e6      	b.n	b5b40 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b5b72:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b5b76:	f06f 0402 	mvn.w	r4, #2
   b5b7a:	e777      	b.n	b5a6c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b5b7c:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b5b80:	2b00      	cmp	r3, #0
   b5b82:	f43f aec2 	beq.w	b590a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b5b86:	6885      	ldr	r5, [r0, #8]
   b5b88:	1c6f      	adds	r7, r5, #1
   b5b8a:	f43f aebe 	beq.w	b590a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b5b8e:	012d      	lsls	r5, r5, #4
   b5b90:	5d5d      	ldrb	r5, [r3, r5]
   b5b92:	3d01      	subs	r5, #1
   b5b94:	2d01      	cmp	r5, #1
   b5b96:	f67f aeb8 	bls.w	b590a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b5b9a:	6845      	ldr	r5, [r0, #4]
   b5b9c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b5ba0:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b5ba4:	f1b8 0f00 	cmp.w	r8, #0
   b5ba8:	f6ff aeaf 	blt.w	b590a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b5bac:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b5bb0:	3d01      	subs	r5, #1
   b5bb2:	2d01      	cmp	r5, #1
   b5bb4:	d80a      	bhi.n	b5bcc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b5bb6:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b5bba:	3501      	adds	r5, #1
   b5bbc:	d006      	beq.n	b5bcc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b5bbe:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b5bc2:	3501      	adds	r5, #1
   b5bc4:	d102      	bne.n	b5bcc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b5bc6:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b5bca:	e69e      	b.n	b590a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b5bcc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b5bd0:	f1ae 0e10 	sub.w	lr, lr, #16
   b5bd4:	e7e6      	b.n	b5ba4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b5bd6:	f1a5 0920 	sub.w	r9, r5, #32
   b5bda:	4f24      	ldr	r7, [pc, #144]	; (b5c6c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b5bdc:	fa5f f989 	uxtb.w	r9, r9
   b5be0:	fa0c f909 	lsl.w	r9, ip, r9
   b5be4:	ea19 0f07 	tst.w	r9, r7
   b5be8:	f47f aeaa 	bne.w	b5940 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b5bec:	3d20      	subs	r5, #32
   b5bee:	2d5e      	cmp	r5, #94	; 0x5e
   b5bf0:	d89a      	bhi.n	b5b28 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5bf2:	f108 0501 	add.w	r5, r8, #1
   b5bf6:	6005      	str	r5, [r0, #0]
   b5bf8:	e68f      	b.n	b591a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b5bfa:	2d0d      	cmp	r5, #13
   b5bfc:	d1f6      	bne.n	b5bec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b5bfe:	e69f      	b.n	b5940 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b5c00:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b5c04:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b5c08:	e7f8      	b.n	b5bfc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b5c0a:	6845      	ldr	r5, [r0, #4]
   b5c0c:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b5c0e:	42af      	cmp	r7, r5
   b5c10:	f67f af28 	bls.w	b5a64 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b5c14:	f105 0801 	add.w	r8, r5, #1
   b5c18:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b5c1c:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b5c20:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b5c24:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b5c28:	2700      	movs	r7, #0
   b5c2a:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b5c2c:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b5c30:	f04f 0a04 	mov.w	sl, #4
   b5c34:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b5c38:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b5c3c:	6805      	ldr	r5, [r0, #0]
   b5c3e:	3d01      	subs	r5, #1
   b5c40:	e683      	b.n	b594a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b5c42:	2b00      	cmp	r3, #0
   b5c44:	f43f af12 	beq.w	b5a6c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b5c48:	6842      	ldr	r2, [r0, #4]
   b5c4a:	1e51      	subs	r1, r2, #1
   b5c4c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b5c50:	2900      	cmp	r1, #0
   b5c52:	f6ff af0b 	blt.w	b5a6c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b5c56:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b5c5a:	3201      	adds	r2, #1
   b5c5c:	d003      	beq.n	b5c66 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b5c5e:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b5c62:	3201      	adds	r2, #1
   b5c64:	d087      	beq.n	b5b76 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b5c66:	3901      	subs	r1, #1
   b5c68:	3b10      	subs	r3, #16
   b5c6a:	e7f1      	b.n	b5c50 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b5c6c:	04001001 	.word	0x04001001

000b5c70 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b5c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b5c72:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b5c74:	4604      	mov	r4, r0
	if (offset == 0) {
   b5c76:	b912      	cbnz	r2, b5c7e <_ZN10JsonParser5parseEv+0xe>
		return false;
   b5c78:	2000      	movs	r0, #0
}
   b5c7a:	b003      	add	sp, #12
   b5c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b5c7e:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b5c80:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b5c84:	b1ab      	cbz	r3, b5cb2 <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b5c86:	2100      	movs	r1, #0
	parser->toknext = 0;
   b5c88:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b5c8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5c90:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5c92:	69c1      	ldr	r1, [r0, #28]
   b5c94:	9100      	str	r1, [sp, #0]
   b5c96:	6841      	ldr	r1, [r0, #4]
   b5c98:	4630      	mov	r0, r6
   b5c9a:	f7ff fe0d 	bl	b58b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b5c9e:	1c43      	adds	r3, r0, #1
   b5ca0:	d128      	bne.n	b5cf4 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b5ca2:	7c25      	ldrb	r5, [r4, #16]
   b5ca4:	2d00      	cmp	r5, #0
   b5ca6:	d1e7      	bne.n	b5c78 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b5ca8:	6960      	ldr	r0, [r4, #20]
   b5caa:	f000 fc19 	bl	b64e0 <free>
			tokens = 0;
   b5cae:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b5cb0:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b5cb2:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b5cb4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b5cb8:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b5cbc:	68e2      	ldr	r2, [r4, #12]
   b5cbe:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b5cc0:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b5cc2:	9500      	str	r5, [sp, #0]
   b5cc4:	462b      	mov	r3, r5
   b5cc6:	4630      	mov	r0, r6
   b5cc8:	f7ff fdf6 	bl	b58b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b5ccc:	2800      	cmp	r0, #0
   b5cce:	dbd3      	blt.n	b5c78 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b5cd0:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b5cd2:	d017      	beq.n	b5d04 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b5cd4:	0100      	lsls	r0, r0, #4
   b5cd6:	f000 fbfb 	bl	b64d0 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5cda:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b5cdc:	6160      	str	r0, [r4, #20]
   b5cde:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5ce0:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b5ce2:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5ce6:	68e2      	ldr	r2, [r4, #12]
   b5ce8:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b5cea:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5cec:	4630      	mov	r0, r6
   b5cee:	f7ff fde3 	bl	b58b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b5cf2:	e001      	b.n	b5cf8 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b5cf4:	2800      	cmp	r0, #0
   b5cf6:	dbbf      	blt.n	b5c78 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b5cf8:	6963      	ldr	r3, [r4, #20]
   b5cfa:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b5cfe:	61a0      	str	r0, [r4, #24]
	return true;
   b5d00:	2001      	movs	r0, #1
   b5d02:	e7ba      	b.n	b5c7a <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b5d04:	6963      	ldr	r3, [r4, #20]
   b5d06:	61a3      	str	r3, [r4, #24]
   b5d08:	e7fa      	b.n	b5d00 <_ZN10JsonParser5parseEv+0x90>

000b5d0a <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b5d0a:	b510      	push	{r4, lr}
   b5d0c:	4604      	mov	r4, r0
   b5d0e:	f001 fb03 	bl	b7318 <_ZN9TCPClientC1Ev>
{

}
   b5d12:	4620      	mov	r0, r4
   b5d14:	bd10      	pop	{r4, pc}
	...

000b5d18 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b5d18:	b538      	push	{r3, r4, r5, lr}
   b5d1a:	4604      	mov	r4, r0
   b5d1c:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b5d1e:	f000 fe27 	bl	b6970 <_ZN5Print5printEPKc>
    client.print(": ");
   b5d22:	4905      	ldr	r1, [pc, #20]	; (b5d38 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b5d24:	4620      	mov	r0, r4
   b5d26:	f000 fe23 	bl	b6970 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b5d2a:	4629      	mov	r1, r5
   b5d2c:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b5d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b5d32:	f000 be30 	b.w	b6996 <_ZN5Print7printlnEPKc>
   b5d36:	bf00      	nop
   b5d38:	000b7ee2 	.word	0x000b7ee2

000b5d3c <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b5d3c:	b538      	push	{r3, r4, r5, lr}
   b5d3e:	4605      	mov	r5, r0
   b5d40:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b5d42:	f000 fe15 	bl	b6970 <_ZN5Print5printEPKc>
    client.print(": ");
   b5d46:	490b      	ldr	r1, [pc, #44]	; (b5d74 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b5d48:	4628      	mov	r0, r5
   b5d4a:	f000 fe11 	bl	b6970 <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b5d4e:	2c00      	cmp	r4, #0
   b5d50:	da0d      	bge.n	b5d6e <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b5d52:	212d      	movs	r1, #45	; 0x2d
   b5d54:	4628      	mov	r0, r5
   b5d56:	f000 fe0f 	bl	b6978 <_ZN5Print5printEc>
            val = -n;
   b5d5a:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b5d5c:	4628      	mov	r0, r5
   b5d5e:	220a      	movs	r2, #10
   b5d60:	f000 fe23 	bl	b69aa <_ZN5Print11printNumberEmh>
        n += println();
   b5d64:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b5d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5d6a:	f000 be08 	b.w	b697e <_ZN5Print7printlnEv>
            val = n;
   b5d6e:	4621      	mov	r1, r4
   b5d70:	e7f4      	b.n	b5d5c <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b5d72:	bf00      	nop
   b5d74:	000b7ee2 	.word	0x000b7ee2

000b5d78 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b5d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5d7c:	460e      	mov	r6, r1
   b5d7e:	b091      	sub	sp, #68	; 0x44
   b5d80:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b5d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5d86:	6013      	str	r3, [r2, #0]
{
   b5d88:	4604      	mov	r4, r0
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5d8a:	2100      	movs	r1, #0
   b5d8c:	4630      	mov	r0, r6
   b5d8e:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b5d92:	4617      	mov	r7, r2
   b5d94:	f000 ffaa 	bl	b6cec <_ZNK6String6equalsEPKc>
   b5d98:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b5d9c:	4603      	mov	r3, r0
   b5d9e:	b998      	cbnz	r0, b5dc8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b5da0:	f1be 0f00 	cmp.w	lr, #0
   b5da4:	bf14      	ite	ne
   b5da6:	4672      	movne	r2, lr
   b5da8:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b5daa:	6831      	ldr	r1, [r6, #0]
   b5dac:	b292      	uxth	r2, r2
   b5dae:	4620      	mov	r0, r4
   b5db0:	f001 f8b2 	bl	b6f18 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b5db4:	1e05      	subs	r5, r0, #0
   b5db6:	bf18      	it	ne
   b5db8:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b5dba:	b9c5      	cbnz	r5, b5dee <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b5dbc:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b5dbe:	b011      	add	sp, #68	; 0x44
   b5dc0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b5dc4:	f001 ba5e 	b.w	b7284 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b5dc8:	4b75      	ldr	r3, [pc, #468]	; (b5fa0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x228>)
   b5dca:	930a      	str	r3, [sp, #40]	; 0x28
   b5dcc:	f106 0c14 	add.w	ip, r6, #20
   b5dd0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5dd4:	ad0b      	add	r5, sp, #44	; 0x2c
   b5dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5dd8:	f8dc 3000 	ldr.w	r3, [ip]
   b5ddc:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b5dde:	fa1f f28e 	uxth.w	r2, lr
   b5de2:	2300      	movs	r3, #0
   b5de4:	a90a      	add	r1, sp, #40	; 0x28
   b5de6:	4620      	mov	r0, r4
   b5de8:	f001 f976 	bl	b70d8 <_ZN9TCPClient7connectE9IPAddresstm>
   b5dec:	e7e2      	b.n	b5db4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b5dee:	4649      	mov	r1, r9
   b5df0:	4620      	mov	r0, r4
   b5df2:	f000 fdbd 	bl	b6970 <_ZN5Print5printEPKc>
    client.print(" ");
   b5df6:	496b      	ldr	r1, [pc, #428]	; (b5fa4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b5df8:	4620      	mov	r0, r4
   b5dfa:	f000 fdb9 	bl	b6970 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b5dfe:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b5e00:	4620      	mov	r0, r4
   b5e02:	f000 fdb5 	bl	b6970 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b5e06:	4968      	ldr	r1, [pc, #416]	; (b5fa8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b5e08:	4620      	mov	r0, r4
   b5e0a:	f000 fdb1 	bl	b6970 <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b5e0e:	4967      	ldr	r1, [pc, #412]	; (b5fac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b5e10:	4a67      	ldr	r2, [pc, #412]	; (b5fb0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b5e12:	4620      	mov	r0, r4
   b5e14:	f7ff ff80 	bl	b5d18 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5e18:	2100      	movs	r1, #0
   b5e1a:	4630      	mov	r0, r6
   b5e1c:	f000 ff66 	bl	b6cec <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b5e20:	b920      	cbnz	r0, b5e2c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b5e22:	6832      	ldr	r2, [r6, #0]
   b5e24:	4963      	ldr	r1, [pc, #396]	; (b5fb4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b5e26:	4620      	mov	r0, r4
   b5e28:	f7ff ff76 	bl	b5d18 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b5e2c:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b5e30:	2100      	movs	r1, #0
   b5e32:	4650      	mov	r0, sl
   b5e34:	f000 ff5a 	bl	b6cec <_ZNK6String6equalsEPKc>
   b5e38:	b928      	cbnz	r0, b5e46 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b5e3a:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b5e3c:	495e      	ldr	r1, [pc, #376]	; (b5fb8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b5e3e:	4620      	mov	r0, r4
   b5e40:	f7ff ff7c 	bl	b5d3c <_ZN10HttpClient10sendHeaderEPKci>
   b5e44:	e006      	b.n	b5e54 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b5e46:	495d      	ldr	r1, [pc, #372]	; (b5fbc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b5e48:	4648      	mov	r0, r9
   b5e4a:	f001 feb9 	bl	b7bc0 <strcmp>
   b5e4e:	4602      	mov	r2, r0
   b5e50:	2800      	cmp	r0, #0
   b5e52:	d0f3      	beq.n	b5e3c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b5e54:	f1b8 0f00 	cmp.w	r8, #0
   b5e58:	d00e      	beq.n	b5e78 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b5e5a:	f8d8 1000 	ldr.w	r1, [r8]
   b5e5e:	b159      	cbz	r1, b5e78 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b5e60:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b5e64:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b5e66:	b122      	cbz	r2, b5e72 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b5e68:	f7ff ff56 	bl	b5d18 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b5e6c:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b5e70:	e7f3      	b.n	b5e5a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b5e72:	f000 fd90 	bl	b6996 <_ZN5Print7printlnEPKc>
}
   b5e76:	e7f9      	b.n	b5e6c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b5e78:	4620      	mov	r0, r4
   b5e7a:	f000 fd80 	bl	b697e <_ZN5Print7printlnEv>
    client.flush();
   b5e7e:	4620      	mov	r0, r4
   b5e80:	f000 ffce 	bl	b6e20 <_ZN9TCPClient5flushEv>
   b5e84:	2100      	movs	r1, #0
   b5e86:	4650      	mov	r0, sl
   b5e88:	f000 ff30 	bl	b6cec <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b5e8c:	b918      	cbnz	r0, b5e96 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b5e8e:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b5e90:	4620      	mov	r0, r4
   b5e92:	f000 fd80 	bl	b6996 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b5e96:	f104 0a1c 	add.w	sl, r4, #28
   b5e9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b5e9e:	2100      	movs	r1, #0
   b5ea0:	4650      	mov	r0, sl
   b5ea2:	f001 fe57 	bl	b7b54 <memset>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5ea6:	f000 f8af 	bl	b6008 <HAL_Timer_Get_Milli_Seconds>
   b5eaa:	9001      	str	r0, [sp, #4]
   b5eac:	f000 f8ac 	bl	b6008 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b5eb0:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b5eb4:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b5eb6:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b5eba:	4620      	mov	r0, r4
   b5ebc:	f001 f988 	bl	b71d0 <_ZN9TCPClient9availableEv>
   b5ec0:	b1d8      	cbz	r0, b5efa <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x182>
            char c = client.read();
   b5ec2:	4620      	mov	r0, r4
   b5ec4:	f000 ff92 	bl	b6dec <_ZN9TCPClient4readEv>
   b5ec8:	4681      	mov	r9, r0
   b5eca:	f000 f89d 	bl	b6008 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b5ece:	f240 33fe 	movw	r3, #1022	; 0x3fe
   b5ed2:	429e      	cmp	r6, r3
   b5ed4:	9001      	str	r0, [sp, #4]
   b5ed6:	d804      	bhi.n	b5ee2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b5ed8:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b5eda:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b5ede:	3601      	adds	r6, #1
        while (client.available()) {
   b5ee0:	e7eb      	b.n	b5eba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b5ee2:	f240 33ff 	movw	r3, #1023	; 0x3ff
   b5ee6:	429e      	cmp	r6, r3
   b5ee8:	d1f9      	bne.n	b5ede <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b5eea:	2300      	movs	r3, #0
   b5eec:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   b5ef0:	4620      	mov	r0, r4
   b5ef2:	f001 f9c7 	bl	b7284 <_ZN9TCPClient4stopEv>
                error = true;
   b5ef6:	46a8      	mov	r8, r5
   b5ef8:	e7f1      	b.n	b5ede <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b5efa:	19a3      	adds	r3, r4, r6
   b5efc:	7718      	strb	r0, [r3, #28]
   b5efe:	f000 f883 	bl	b6008 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b5f02:	9b01      	ldr	r3, [sp, #4]
   b5f04:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b5f08:	f1b8 0f00 	cmp.w	r8, #0
   b5f0c:	d104      	bne.n	b5f18 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a0>
   b5f0e:	45d9      	cmp	r9, fp
   b5f10:	d802      	bhi.n	b5f18 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a0>
            delay(200);
   b5f12:	20c8      	movs	r0, #200	; 0xc8
   b5f14:	f000 fb14 	bl	b6540 <delay>
    } while (client.connected() && !timeout && !error);
   b5f18:	4620      	mov	r0, r4
   b5f1a:	f001 f87b 	bl	b7014 <_ZN9TCPClient9connectedEv>
   b5f1e:	b120      	cbz	r0, b5f2a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b2>
   b5f20:	45d9      	cmp	r9, fp
   b5f22:	d802      	bhi.n	b5f2a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b2>
   b5f24:	f1b8 0f00 	cmp.w	r8, #0
   b5f28:	d0c7      	beq.n	b5eba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b5f2a:	4620      	mov	r0, r4
   b5f2c:	f001 f9aa 	bl	b7284 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b5f30:	4651      	mov	r1, sl
   b5f32:	a802      	add	r0, sp, #8
   b5f34:	f000 fe99 	bl	b6c6a <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b5f38:	230c      	movs	r3, #12
   b5f3a:	2209      	movs	r2, #9
   b5f3c:	a902      	add	r1, sp, #8
   b5f3e:	a806      	add	r0, sp, #24
   b5f40:	f000 fef8 	bl	b6d34 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b5f44:	491e      	ldr	r1, [pc, #120]	; (b5fc0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b5f46:	a80a      	add	r0, sp, #40	; 0x28
   b5f48:	f000 fe8f 	bl	b6c6a <_ZN6StringC1EPK19__FlashStringHelper>
   b5f4c:	a90a      	add	r1, sp, #40	; 0x28
   b5f4e:	a802      	add	r0, sp, #8
   b5f50:	f000 feed 	bl	b6d2e <_ZNK6String7indexOfERKS_>
   b5f54:	4604      	mov	r4, r0
   b5f56:	a80a      	add	r0, sp, #40	; 0x28
   b5f58:	f000 fe3c 	bl	b6bd4 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b5f5c:	1c63      	adds	r3, r4, #1
   b5f5e:	d108      	bne.n	b5f72 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fa>
    String statusCode = raw_response.substring(9,12);
   b5f60:	a806      	add	r0, sp, #24
   b5f62:	f000 fe37 	bl	b6bd4 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b5f66:	a802      	add	r0, sp, #8
   b5f68:	f000 fe34 	bl	b6bd4 <_ZN6StringD1Ev>
}
   b5f6c:	b011      	add	sp, #68	; 0x44
   b5f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b5f72:	1d3d      	adds	r5, r7, #4
   b5f74:	4913      	ldr	r1, [pc, #76]	; (b5fc4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b5f76:	4628      	mov	r0, r5
   b5f78:	f000 fe8b 	bl	b6c92 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b5f7c:	1d22      	adds	r2, r4, #4
   b5f7e:	a902      	add	r1, sp, #8
   b5f80:	a80a      	add	r0, sp, #40	; 0x28
   b5f82:	f000 fef7 	bl	b6d74 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b5f86:	a90a      	add	r1, sp, #40	; 0x28
   b5f88:	4628      	mov	r0, r5
   b5f8a:	f000 feab 	bl	b6ce4 <_ZN6String6concatERKS_>
   b5f8e:	a80a      	add	r0, sp, #40	; 0x28
   b5f90:	f000 fe20 	bl	b6bd4 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b5f94:	9806      	ldr	r0, [sp, #24]
   b5f96:	f001 fdcb 	bl	b7b30 <atoi>
   b5f9a:	6038      	str	r0, [r7, #0]
   b5f9c:	e7e0      	b.n	b5f60 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1e8>
   b5f9e:	bf00      	nop
   b5fa0:	000b8548 	.word	0x000b8548
   b5fa4:	000b7ee3 	.word	0x000b7ee3
   b5fa8:	000b8498 	.word	0x000b8498
   b5fac:	000b84aa 	.word	0x000b84aa
   b5fb0:	000b84a4 	.word	0x000b84a4
   b5fb4:	000b84b5 	.word	0x000b84b5
   b5fb8:	000b84ba 	.word	0x000b84ba
   b5fbc:	000b84c9 	.word	0x000b84c9
   b5fc0:	000b84ce 	.word	0x000b84ce
   b5fc4:	000b7e31 	.word	0x000b7e31

000b5fc8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5fc8:	b508      	push	{r3, lr}
   b5fca:	4b02      	ldr	r3, [pc, #8]	; (b5fd4 <os_mutex_recursive_create+0xc>)
   b5fcc:	681b      	ldr	r3, [r3, #0]
   b5fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5fd0:	9301      	str	r3, [sp, #4]
   b5fd2:	bd08      	pop	{r3, pc}
   b5fd4:	00030248 	.word	0x00030248

000b5fd8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5fd8:	b508      	push	{r3, lr}
   b5fda:	4b02      	ldr	r3, [pc, #8]	; (b5fe4 <HAL_RNG_GetRandomNumber+0xc>)
   b5fdc:	681b      	ldr	r3, [r3, #0]
   b5fde:	685b      	ldr	r3, [r3, #4]
   b5fe0:	9301      	str	r3, [sp, #4]
   b5fe2:	bd08      	pop	{r3, pc}
   b5fe4:	00030218 	.word	0x00030218

000b5fe8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5fe8:	b508      	push	{r3, lr}
   b5fea:	4b02      	ldr	r3, [pc, #8]	; (b5ff4 <HAL_Delay_Microseconds+0xc>)
   b5fec:	681b      	ldr	r3, [r3, #0]
   b5fee:	68db      	ldr	r3, [r3, #12]
   b5ff0:	9301      	str	r3, [sp, #4]
   b5ff2:	bd08      	pop	{r3, pc}
   b5ff4:	00030218 	.word	0x00030218

000b5ff8 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b5ff8:	b508      	push	{r3, lr}
   b5ffa:	4b02      	ldr	r3, [pc, #8]	; (b6004 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b5ffc:	681b      	ldr	r3, [r3, #0]
   b5ffe:	691b      	ldr	r3, [r3, #16]
   b6000:	9301      	str	r3, [sp, #4]
   b6002:	bd08      	pop	{r3, pc}
   b6004:	00030218 	.word	0x00030218

000b6008 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6008:	b508      	push	{r3, lr}
   b600a:	4b02      	ldr	r3, [pc, #8]	; (b6014 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b600c:	681b      	ldr	r3, [r3, #0]
   b600e:	695b      	ldr	r3, [r3, #20]
   b6010:	9301      	str	r3, [sp, #4]
   b6012:	bd08      	pop	{r3, pc}
   b6014:	00030218 	.word	0x00030218

000b6018 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b6018:	b508      	push	{r3, lr}
   b601a:	4b02      	ldr	r3, [pc, #8]	; (b6024 <hal_timer_millis+0xc>)
   b601c:	681b      	ldr	r3, [r3, #0]
   b601e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b6020:	9301      	str	r3, [sp, #4]
   b6022:	bd08      	pop	{r3, pc}
   b6024:	00030218 	.word	0x00030218

000b6028 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b6028:	b508      	push	{r3, lr}
   b602a:	4b02      	ldr	r3, [pc, #8]	; (b6034 <HAL_Pin_Map+0xc>)
   b602c:	681b      	ldr	r3, [r3, #0]
   b602e:	681b      	ldr	r3, [r3, #0]
   b6030:	9301      	str	r3, [sp, #4]
   b6032:	bd08      	pop	{r3, pc}
   b6034:	0003022c 	.word	0x0003022c

000b6038 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b6038:	b508      	push	{r3, lr}
   b603a:	4b02      	ldr	r3, [pc, #8]	; (b6044 <HAL_Validate_Pin_Function+0xc>)
   b603c:	681b      	ldr	r3, [r3, #0]
   b603e:	685b      	ldr	r3, [r3, #4]
   b6040:	9301      	str	r3, [sp, #4]
   b6042:	bd08      	pop	{r3, pc}
   b6044:	0003022c 	.word	0x0003022c

000b6048 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6048:	b508      	push	{r3, lr}
   b604a:	4b02      	ldr	r3, [pc, #8]	; (b6054 <HAL_Pin_Mode+0xc>)
   b604c:	681b      	ldr	r3, [r3, #0]
   b604e:	689b      	ldr	r3, [r3, #8]
   b6050:	9301      	str	r3, [sp, #4]
   b6052:	bd08      	pop	{r3, pc}
   b6054:	0003022c 	.word	0x0003022c

000b6058 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6058:	b508      	push	{r3, lr}
   b605a:	4b02      	ldr	r3, [pc, #8]	; (b6064 <HAL_Get_Pin_Mode+0xc>)
   b605c:	681b      	ldr	r3, [r3, #0]
   b605e:	68db      	ldr	r3, [r3, #12]
   b6060:	9301      	str	r3, [sp, #4]
   b6062:	bd08      	pop	{r3, pc}
   b6064:	0003022c 	.word	0x0003022c

000b6068 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6068:	b508      	push	{r3, lr}
   b606a:	4b02      	ldr	r3, [pc, #8]	; (b6074 <HAL_GPIO_Write+0xc>)
   b606c:	681b      	ldr	r3, [r3, #0]
   b606e:	691b      	ldr	r3, [r3, #16]
   b6070:	9301      	str	r3, [sp, #4]
   b6072:	bd08      	pop	{r3, pc}
   b6074:	0003022c 	.word	0x0003022c

000b6078 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6078:	b508      	push	{r3, lr}
   b607a:	4b02      	ldr	r3, [pc, #8]	; (b6084 <hal_adc_read+0xc>)
   b607c:	681b      	ldr	r3, [r3, #0]
   b607e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6080:	9301      	str	r3, [sp, #4]
   b6082:	bd08      	pop	{r3, pc}
   b6084:	0003022c 	.word	0x0003022c

000b6088 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6088:	b508      	push	{r3, lr}
   b608a:	4b02      	ldr	r3, [pc, #8]	; (b6094 <hal_i2c_begin+0xc>)
   b608c:	681b      	ldr	r3, [r3, #0]
   b608e:	68db      	ldr	r3, [r3, #12]
   b6090:	9301      	str	r3, [sp, #4]
   b6092:	bd08      	pop	{r3, pc}
   b6094:	00030228 	.word	0x00030228

000b6098 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6098:	b508      	push	{r3, lr}
   b609a:	4b02      	ldr	r3, [pc, #8]	; (b60a4 <hal_i2c_begin_transmission+0xc>)
   b609c:	681b      	ldr	r3, [r3, #0]
   b609e:	699b      	ldr	r3, [r3, #24]
   b60a0:	9301      	str	r3, [sp, #4]
   b60a2:	bd08      	pop	{r3, pc}
   b60a4:	00030228 	.word	0x00030228

000b60a8 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b60a8:	b508      	push	{r3, lr}
   b60aa:	4b02      	ldr	r3, [pc, #8]	; (b60b4 <hal_i2c_end_transmission+0xc>)
   b60ac:	681b      	ldr	r3, [r3, #0]
   b60ae:	69db      	ldr	r3, [r3, #28]
   b60b0:	9301      	str	r3, [sp, #4]
   b60b2:	bd08      	pop	{r3, pc}
   b60b4:	00030228 	.word	0x00030228

000b60b8 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b60b8:	b508      	push	{r3, lr}
   b60ba:	4b02      	ldr	r3, [pc, #8]	; (b60c4 <hal_i2c_write+0xc>)
   b60bc:	681b      	ldr	r3, [r3, #0]
   b60be:	6a1b      	ldr	r3, [r3, #32]
   b60c0:	9301      	str	r3, [sp, #4]
   b60c2:	bd08      	pop	{r3, pc}
   b60c4:	00030228 	.word	0x00030228

000b60c8 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b60c8:	b508      	push	{r3, lr}
   b60ca:	4b02      	ldr	r3, [pc, #8]	; (b60d4 <hal_i2c_available+0xc>)
   b60cc:	681b      	ldr	r3, [r3, #0]
   b60ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b60d0:	9301      	str	r3, [sp, #4]
   b60d2:	bd08      	pop	{r3, pc}
   b60d4:	00030228 	.word	0x00030228

000b60d8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b60d8:	b508      	push	{r3, lr}
   b60da:	4b02      	ldr	r3, [pc, #8]	; (b60e4 <hal_i2c_read+0xc>)
   b60dc:	681b      	ldr	r3, [r3, #0]
   b60de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b60e0:	9301      	str	r3, [sp, #4]
   b60e2:	bd08      	pop	{r3, pc}
   b60e4:	00030228 	.word	0x00030228

000b60e8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b60e8:	b508      	push	{r3, lr}
   b60ea:	4b02      	ldr	r3, [pc, #8]	; (b60f4 <hal_i2c_peek+0xc>)
   b60ec:	681b      	ldr	r3, [r3, #0]
   b60ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b60f0:	9301      	str	r3, [sp, #4]
   b60f2:	bd08      	pop	{r3, pc}
   b60f4:	00030228 	.word	0x00030228

000b60f8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b60f8:	b508      	push	{r3, lr}
   b60fa:	4b02      	ldr	r3, [pc, #8]	; (b6104 <hal_i2c_flush+0xc>)
   b60fc:	681b      	ldr	r3, [r3, #0]
   b60fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6100:	9301      	str	r3, [sp, #4]
   b6102:	bd08      	pop	{r3, pc}
   b6104:	00030228 	.word	0x00030228

000b6108 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6108:	b508      	push	{r3, lr}
   b610a:	4b02      	ldr	r3, [pc, #8]	; (b6114 <hal_i2c_is_enabled+0xc>)
   b610c:	681b      	ldr	r3, [r3, #0]
   b610e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6110:	9301      	str	r3, [sp, #4]
   b6112:	bd08      	pop	{r3, pc}
   b6114:	00030228 	.word	0x00030228

000b6118 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6118:	b508      	push	{r3, lr}
   b611a:	4b02      	ldr	r3, [pc, #8]	; (b6124 <hal_i2c_init+0xc>)
   b611c:	681b      	ldr	r3, [r3, #0]
   b611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6120:	9301      	str	r3, [sp, #4]
   b6122:	bd08      	pop	{r3, pc}
   b6124:	00030228 	.word	0x00030228

000b6128 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6128:	b508      	push	{r3, lr}
   b612a:	4b02      	ldr	r3, [pc, #8]	; (b6134 <if_index_to_name+0xc>)
   b612c:	681b      	ldr	r3, [r3, #0]
   b612e:	695b      	ldr	r3, [r3, #20]
   b6130:	9301      	str	r3, [sp, #4]
   b6132:	bd08      	pop	{r3, pc}
   b6134:	0003026c 	.word	0x0003026c

000b6138 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6138:	b508      	push	{r3, lr}
   b613a:	4b02      	ldr	r3, [pc, #8]	; (b6144 <inet_inet_ntop+0xc>)
   b613c:	681b      	ldr	r3, [r3, #0]
   b613e:	695b      	ldr	r3, [r3, #20]
   b6140:	9301      	str	r3, [sp, #4]
   b6142:	bd08      	pop	{r3, pc}
   b6144:	00030264 	.word	0x00030264

000b6148 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6148:	b508      	push	{r3, lr}
   b614a:	4b02      	ldr	r3, [pc, #8]	; (b6154 <inet_htonl+0xc>)
   b614c:	681b      	ldr	r3, [r3, #0]
   b614e:	6a1b      	ldr	r3, [r3, #32]
   b6150:	9301      	str	r3, [sp, #4]
   b6152:	bd08      	pop	{r3, pc}
   b6154:	00030264 	.word	0x00030264

000b6158 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6158:	b508      	push	{r3, lr}
   b615a:	4b02      	ldr	r3, [pc, #8]	; (b6164 <inet_htons+0xc>)
   b615c:	681b      	ldr	r3, [r3, #0]
   b615e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6160:	9301      	str	r3, [sp, #4]
   b6162:	bd08      	pop	{r3, pc}
   b6164:	00030264 	.word	0x00030264

000b6168 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6168:	b508      	push	{r3, lr}
   b616a:	4b02      	ldr	r3, [pc, #8]	; (b6174 <netdb_freeaddrinfo+0xc>)
   b616c:	681b      	ldr	r3, [r3, #0]
   b616e:	689b      	ldr	r3, [r3, #8]
   b6170:	9301      	str	r3, [sp, #4]
   b6172:	bd08      	pop	{r3, pc}
   b6174:	00030268 	.word	0x00030268

000b6178 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6178:	b508      	push	{r3, lr}
   b617a:	4b02      	ldr	r3, [pc, #8]	; (b6184 <netdb_getaddrinfo+0xc>)
   b617c:	681b      	ldr	r3, [r3, #0]
   b617e:	68db      	ldr	r3, [r3, #12]
   b6180:	9301      	str	r3, [sp, #4]
   b6182:	bd08      	pop	{r3, pc}
   b6184:	00030268 	.word	0x00030268

000b6188 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6188:	b508      	push	{r3, lr}
   b618a:	4b02      	ldr	r3, [pc, #8]	; (b6194 <sock_setsockopt+0xc>)
   b618c:	681b      	ldr	r3, [r3, #0]
   b618e:	699b      	ldr	r3, [r3, #24]
   b6190:	9301      	str	r3, [sp, #4]
   b6192:	bd08      	pop	{r3, pc}
   b6194:	00030238 	.word	0x00030238

000b6198 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6198:	b508      	push	{r3, lr}
   b619a:	4b02      	ldr	r3, [pc, #8]	; (b61a4 <sock_close+0xc>)
   b619c:	681b      	ldr	r3, [r3, #0]
   b619e:	69db      	ldr	r3, [r3, #28]
   b61a0:	9301      	str	r3, [sp, #4]
   b61a2:	bd08      	pop	{r3, pc}
   b61a4:	00030238 	.word	0x00030238

000b61a8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b61a8:	b508      	push	{r3, lr}
   b61aa:	4b02      	ldr	r3, [pc, #8]	; (b61b4 <sock_connect+0xc>)
   b61ac:	681b      	ldr	r3, [r3, #0]
   b61ae:	6a1b      	ldr	r3, [r3, #32]
   b61b0:	9301      	str	r3, [sp, #4]
   b61b2:	bd08      	pop	{r3, pc}
   b61b4:	00030238 	.word	0x00030238

000b61b8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b61b8:	b508      	push	{r3, lr}
   b61ba:	4b02      	ldr	r3, [pc, #8]	; (b61c4 <sock_recv+0xc>)
   b61bc:	681b      	ldr	r3, [r3, #0]
   b61be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b61c0:	9301      	str	r3, [sp, #4]
   b61c2:	bd08      	pop	{r3, pc}
   b61c4:	00030238 	.word	0x00030238

000b61c8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b61c8:	b508      	push	{r3, lr}
   b61ca:	4b02      	ldr	r3, [pc, #8]	; (b61d4 <sock_send+0xc>)
   b61cc:	681b      	ldr	r3, [r3, #0]
   b61ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b61d0:	9301      	str	r3, [sp, #4]
   b61d2:	bd08      	pop	{r3, pc}
   b61d4:	00030238 	.word	0x00030238

000b61d8 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b61d8:	b508      	push	{r3, lr}
   b61da:	4b02      	ldr	r3, [pc, #8]	; (b61e4 <sock_socket+0xc>)
   b61dc:	681b      	ldr	r3, [r3, #0]
   b61de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b61e0:	9301      	str	r3, [sp, #4]
   b61e2:	bd08      	pop	{r3, pc}
   b61e4:	00030238 	.word	0x00030238

000b61e8 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b61e8:	b508      	push	{r3, lr}
   b61ea:	4b02      	ldr	r3, [pc, #8]	; (b61f4 <hal_spi_begin+0xc>)
   b61ec:	681b      	ldr	r3, [r3, #0]
   b61ee:	681b      	ldr	r3, [r3, #0]
   b61f0:	9301      	str	r3, [sp, #4]
   b61f2:	bd08      	pop	{r3, pc}
   b61f4:	00030230 	.word	0x00030230

000b61f8 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b61f8:	b508      	push	{r3, lr}
   b61fa:	4b02      	ldr	r3, [pc, #8]	; (b6204 <hal_spi_set_bit_order+0xc>)
   b61fc:	681b      	ldr	r3, [r3, #0]
   b61fe:	689b      	ldr	r3, [r3, #8]
   b6200:	9301      	str	r3, [sp, #4]
   b6202:	bd08      	pop	{r3, pc}
   b6204:	00030230 	.word	0x00030230

000b6208 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b6208:	b508      	push	{r3, lr}
   b620a:	4b02      	ldr	r3, [pc, #8]	; (b6214 <hal_spi_set_data_mode+0xc>)
   b620c:	681b      	ldr	r3, [r3, #0]
   b620e:	68db      	ldr	r3, [r3, #12]
   b6210:	9301      	str	r3, [sp, #4]
   b6212:	bd08      	pop	{r3, pc}
   b6214:	00030230 	.word	0x00030230

000b6218 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b6218:	b508      	push	{r3, lr}
   b621a:	4b02      	ldr	r3, [pc, #8]	; (b6224 <hal_spi_set_clock_divider+0xc>)
   b621c:	681b      	ldr	r3, [r3, #0]
   b621e:	691b      	ldr	r3, [r3, #16]
   b6220:	9301      	str	r3, [sp, #4]
   b6222:	bd08      	pop	{r3, pc}
   b6224:	00030230 	.word	0x00030230

000b6228 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6228:	b508      	push	{r3, lr}
   b622a:	4b02      	ldr	r3, [pc, #8]	; (b6234 <hal_spi_transfer+0xc>)
   b622c:	681b      	ldr	r3, [r3, #0]
   b622e:	695b      	ldr	r3, [r3, #20]
   b6230:	9301      	str	r3, [sp, #4]
   b6232:	bd08      	pop	{r3, pc}
   b6234:	00030230 	.word	0x00030230

000b6238 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6238:	b508      	push	{r3, lr}
   b623a:	4b02      	ldr	r3, [pc, #8]	; (b6244 <hal_spi_init+0xc>)
   b623c:	681b      	ldr	r3, [r3, #0]
   b623e:	69db      	ldr	r3, [r3, #28]
   b6240:	9301      	str	r3, [sp, #4]
   b6242:	bd08      	pop	{r3, pc}
   b6244:	00030230 	.word	0x00030230

000b6248 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6248:	b508      	push	{r3, lr}
   b624a:	4b02      	ldr	r3, [pc, #8]	; (b6254 <hal_spi_is_enabled+0xc>)
   b624c:	681b      	ldr	r3, [r3, #0]
   b624e:	6a1b      	ldr	r3, [r3, #32]
   b6250:	9301      	str	r3, [sp, #4]
   b6252:	bd08      	pop	{r3, pc}
   b6254:	00030230 	.word	0x00030230

000b6258 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6258:	b508      	push	{r3, lr}
   b625a:	4b02      	ldr	r3, [pc, #8]	; (b6264 <hal_spi_info+0xc>)
   b625c:	681b      	ldr	r3, [r3, #0]
   b625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6260:	9301      	str	r3, [sp, #4]
   b6262:	bd08      	pop	{r3, pc}
   b6264:	00030230 	.word	0x00030230

000b6268 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6268:	b508      	push	{r3, lr}
   b626a:	4b02      	ldr	r3, [pc, #8]	; (b6274 <hal_spi_acquire+0xc>)
   b626c:	681b      	ldr	r3, [r3, #0]
   b626e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6270:	9301      	str	r3, [sp, #4]
   b6272:	bd08      	pop	{r3, pc}
   b6274:	00030230 	.word	0x00030230

000b6278 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6278:	b508      	push	{r3, lr}
   b627a:	4b02      	ldr	r3, [pc, #8]	; (b6284 <hal_spi_release+0xc>)
   b627c:	681b      	ldr	r3, [r3, #0]
   b627e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6280:	9301      	str	r3, [sp, #4]
   b6282:	bd08      	pop	{r3, pc}
   b6284:	00030230 	.word	0x00030230

000b6288 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6288:	b508      	push	{r3, lr}
   b628a:	4b02      	ldr	r3, [pc, #8]	; (b6294 <hal_usart_write+0xc>)
   b628c:	681b      	ldr	r3, [r3, #0]
   b628e:	68db      	ldr	r3, [r3, #12]
   b6290:	9301      	str	r3, [sp, #4]
   b6292:	bd08      	pop	{r3, pc}
   b6294:	0003023c 	.word	0x0003023c

000b6298 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6298:	b508      	push	{r3, lr}
   b629a:	4b02      	ldr	r3, [pc, #8]	; (b62a4 <hal_usart_available+0xc>)
   b629c:	681b      	ldr	r3, [r3, #0]
   b629e:	691b      	ldr	r3, [r3, #16]
   b62a0:	9301      	str	r3, [sp, #4]
   b62a2:	bd08      	pop	{r3, pc}
   b62a4:	0003023c 	.word	0x0003023c

000b62a8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b62a8:	b508      	push	{r3, lr}
   b62aa:	4b02      	ldr	r3, [pc, #8]	; (b62b4 <hal_usart_read+0xc>)
   b62ac:	681b      	ldr	r3, [r3, #0]
   b62ae:	695b      	ldr	r3, [r3, #20]
   b62b0:	9301      	str	r3, [sp, #4]
   b62b2:	bd08      	pop	{r3, pc}
   b62b4:	0003023c 	.word	0x0003023c

000b62b8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b62b8:	b508      	push	{r3, lr}
   b62ba:	4b02      	ldr	r3, [pc, #8]	; (b62c4 <hal_usart_peek+0xc>)
   b62bc:	681b      	ldr	r3, [r3, #0]
   b62be:	699b      	ldr	r3, [r3, #24]
   b62c0:	9301      	str	r3, [sp, #4]
   b62c2:	bd08      	pop	{r3, pc}
   b62c4:	0003023c 	.word	0x0003023c

000b62c8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b62c8:	b508      	push	{r3, lr}
   b62ca:	4b02      	ldr	r3, [pc, #8]	; (b62d4 <hal_usart_flush+0xc>)
   b62cc:	681b      	ldr	r3, [r3, #0]
   b62ce:	69db      	ldr	r3, [r3, #28]
   b62d0:	9301      	str	r3, [sp, #4]
   b62d2:	bd08      	pop	{r3, pc}
   b62d4:	0003023c 	.word	0x0003023c

000b62d8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b62d8:	b508      	push	{r3, lr}
   b62da:	4b02      	ldr	r3, [pc, #8]	; (b62e4 <hal_usart_is_enabled+0xc>)
   b62dc:	681b      	ldr	r3, [r3, #0]
   b62de:	6a1b      	ldr	r3, [r3, #32]
   b62e0:	9301      	str	r3, [sp, #4]
   b62e2:	bd08      	pop	{r3, pc}
   b62e4:	0003023c 	.word	0x0003023c

000b62e8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b62e8:	b508      	push	{r3, lr}
   b62ea:	4b02      	ldr	r3, [pc, #8]	; (b62f4 <hal_usart_available_data_for_write+0xc>)
   b62ec:	681b      	ldr	r3, [r3, #0]
   b62ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b62f0:	9301      	str	r3, [sp, #4]
   b62f2:	bd08      	pop	{r3, pc}
   b62f4:	0003023c 	.word	0x0003023c

000b62f8 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b62f8:	b508      	push	{r3, lr}
   b62fa:	4b02      	ldr	r3, [pc, #8]	; (b6304 <hal_usart_init_ex+0xc>)
   b62fc:	681b      	ldr	r3, [r3, #0]
   b62fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6300:	9301      	str	r3, [sp, #4]
   b6302:	bd08      	pop	{r3, pc}
   b6304:	0003023c 	.word	0x0003023c

000b6308 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6308:	b508      	push	{r3, lr}
   b630a:	4b02      	ldr	r3, [pc, #8]	; (b6314 <HAL_USB_USART_Init+0xc>)
   b630c:	681b      	ldr	r3, [r3, #0]
   b630e:	681b      	ldr	r3, [r3, #0]
   b6310:	9301      	str	r3, [sp, #4]
   b6312:	bd08      	pop	{r3, pc}
   b6314:	0003024c 	.word	0x0003024c

000b6318 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6318:	b508      	push	{r3, lr}
   b631a:	4b02      	ldr	r3, [pc, #8]	; (b6324 <HAL_USB_USART_Begin+0xc>)
   b631c:	681b      	ldr	r3, [r3, #0]
   b631e:	685b      	ldr	r3, [r3, #4]
   b6320:	9301      	str	r3, [sp, #4]
   b6322:	bd08      	pop	{r3, pc}
   b6324:	0003024c 	.word	0x0003024c

000b6328 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6328:	b508      	push	{r3, lr}
   b632a:	4b02      	ldr	r3, [pc, #8]	; (b6334 <HAL_USB_USART_Available_Data+0xc>)
   b632c:	681b      	ldr	r3, [r3, #0]
   b632e:	691b      	ldr	r3, [r3, #16]
   b6330:	9301      	str	r3, [sp, #4]
   b6332:	bd08      	pop	{r3, pc}
   b6334:	0003024c 	.word	0x0003024c

000b6338 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6338:	b508      	push	{r3, lr}
   b633a:	4b02      	ldr	r3, [pc, #8]	; (b6344 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b633c:	681b      	ldr	r3, [r3, #0]
   b633e:	695b      	ldr	r3, [r3, #20]
   b6340:	9301      	str	r3, [sp, #4]
   b6342:	bd08      	pop	{r3, pc}
   b6344:	0003024c 	.word	0x0003024c

000b6348 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6348:	b508      	push	{r3, lr}
   b634a:	4b02      	ldr	r3, [pc, #8]	; (b6354 <HAL_USB_USART_Receive_Data+0xc>)
   b634c:	681b      	ldr	r3, [r3, #0]
   b634e:	699b      	ldr	r3, [r3, #24]
   b6350:	9301      	str	r3, [sp, #4]
   b6352:	bd08      	pop	{r3, pc}
   b6354:	0003024c 	.word	0x0003024c

000b6358 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6358:	b508      	push	{r3, lr}
   b635a:	4b02      	ldr	r3, [pc, #8]	; (b6364 <HAL_USB_USART_Send_Data+0xc>)
   b635c:	681b      	ldr	r3, [r3, #0]
   b635e:	69db      	ldr	r3, [r3, #28]
   b6360:	9301      	str	r3, [sp, #4]
   b6362:	bd08      	pop	{r3, pc}
   b6364:	0003024c 	.word	0x0003024c

000b6368 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6368:	b508      	push	{r3, lr}
   b636a:	4b02      	ldr	r3, [pc, #8]	; (b6374 <HAL_USB_USART_Flush_Data+0xc>)
   b636c:	681b      	ldr	r3, [r3, #0]
   b636e:	6a1b      	ldr	r3, [r3, #32]
   b6370:	9301      	str	r3, [sp, #4]
   b6372:	bd08      	pop	{r3, pc}
   b6374:	0003024c 	.word	0x0003024c

000b6378 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b6378:	b508      	push	{r3, lr}
   b637a:	4b02      	ldr	r3, [pc, #8]	; (b6384 <HAL_USB_USART_Is_Connected+0xc>)
   b637c:	681b      	ldr	r3, [r3, #0]
   b637e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6380:	9301      	str	r3, [sp, #4]
   b6382:	bd08      	pop	{r3, pc}
   b6384:	0003024c 	.word	0x0003024c

000b6388 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6388:	b508      	push	{r3, lr}
   b638a:	4b02      	ldr	r3, [pc, #8]	; (b6394 <panic_+0xc>)
   b638c:	681b      	ldr	r3, [r3, #0]
   b638e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6390:	9301      	str	r3, [sp, #4]
   b6392:	bd08      	pop	{r3, pc}
   b6394:	00030260 	.word	0x00030260

000b6398 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6398:	b508      	push	{r3, lr}
   b639a:	4b02      	ldr	r3, [pc, #8]	; (b63a4 <log_message+0xc>)
   b639c:	681b      	ldr	r3, [r3, #0]
   b639e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b63a0:	9301      	str	r3, [sp, #4]
   b63a2:	bd08      	pop	{r3, pc}
   b63a4:	00030260 	.word	0x00030260

000b63a8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b63a8:	b508      	push	{r3, lr}
   b63aa:	4b02      	ldr	r3, [pc, #8]	; (b63b4 <set_system_mode+0xc>)
   b63ac:	681b      	ldr	r3, [r3, #0]
   b63ae:	685b      	ldr	r3, [r3, #4]
   b63b0:	9301      	str	r3, [sp, #4]
   b63b2:	bd08      	pop	{r3, pc}
   b63b4:	00030220 	.word	0x00030220

000b63b8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b63b8:	b508      	push	{r3, lr}
   b63ba:	4b02      	ldr	r3, [pc, #8]	; (b63c4 <system_delay_ms+0xc>)
   b63bc:	681b      	ldr	r3, [r3, #0]
   b63be:	695b      	ldr	r3, [r3, #20]
   b63c0:	9301      	str	r3, [sp, #4]
   b63c2:	bd08      	pop	{r3, pc}
   b63c4:	00030220 	.word	0x00030220

000b63c8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b63c8:	b508      	push	{r3, lr}
   b63ca:	4b03      	ldr	r3, [pc, #12]	; (b63d8 <system_ctrl_set_app_request_handler+0x10>)
   b63cc:	681b      	ldr	r3, [r3, #0]
   b63ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b63d2:	9301      	str	r3, [sp, #4]
   b63d4:	bd08      	pop	{r3, pc}
   b63d6:	0000      	.short	0x0000
   b63d8:	00030220 	.word	0x00030220

000b63dc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b63dc:	b508      	push	{r3, lr}
   b63de:	4b03      	ldr	r3, [pc, #12]	; (b63ec <system_ctrl_set_result+0x10>)
   b63e0:	681b      	ldr	r3, [r3, #0]
   b63e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b63e6:	9301      	str	r3, [sp, #4]
   b63e8:	bd08      	pop	{r3, pc}
   b63ea:	0000      	.short	0x0000
   b63ec:	00030220 	.word	0x00030220

000b63f0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b63f0:	b508      	push	{r3, lr}
   b63f2:	4b02      	ldr	r3, [pc, #8]	; (b63fc <spark_process+0xc>)
   b63f4:	681b      	ldr	r3, [r3, #0]
   b63f6:	689b      	ldr	r3, [r3, #8]
   b63f8:	9301      	str	r3, [sp, #4]
   b63fa:	bd08      	pop	{r3, pc}
   b63fc:	00030244 	.word	0x00030244

000b6400 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6400:	b508      	push	{r3, lr}
   b6402:	4b02      	ldr	r3, [pc, #8]	; (b640c <spark_set_random_seed_from_cloud_handler+0xc>)
   b6404:	681b      	ldr	r3, [r3, #0]
   b6406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6408:	9301      	str	r3, [sp, #4]
   b640a:	bd08      	pop	{r3, pc}
   b640c:	00030244 	.word	0x00030244

000b6410 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6410:	b508      	push	{r3, lr}
   b6412:	4b02      	ldr	r3, [pc, #8]	; (b641c <network_connect+0xc>)
   b6414:	681b      	ldr	r3, [r3, #0]
   b6416:	685b      	ldr	r3, [r3, #4]
   b6418:	9301      	str	r3, [sp, #4]
   b641a:	bd08      	pop	{r3, pc}
   b641c:	00030240 	.word	0x00030240

000b6420 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6420:	b508      	push	{r3, lr}
   b6422:	4b02      	ldr	r3, [pc, #8]	; (b642c <network_connecting+0xc>)
   b6424:	681b      	ldr	r3, [r3, #0]
   b6426:	689b      	ldr	r3, [r3, #8]
   b6428:	9301      	str	r3, [sp, #4]
   b642a:	bd08      	pop	{r3, pc}
   b642c:	00030240 	.word	0x00030240

000b6430 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6430:	b508      	push	{r3, lr}
   b6432:	4b02      	ldr	r3, [pc, #8]	; (b643c <network_disconnect+0xc>)
   b6434:	681b      	ldr	r3, [r3, #0]
   b6436:	68db      	ldr	r3, [r3, #12]
   b6438:	9301      	str	r3, [sp, #4]
   b643a:	bd08      	pop	{r3, pc}
   b643c:	00030240 	.word	0x00030240

000b6440 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6440:	b508      	push	{r3, lr}
   b6442:	4b02      	ldr	r3, [pc, #8]	; (b644c <network_ready+0xc>)
   b6444:	681b      	ldr	r3, [r3, #0]
   b6446:	691b      	ldr	r3, [r3, #16]
   b6448:	9301      	str	r3, [sp, #4]
   b644a:	bd08      	pop	{r3, pc}
   b644c:	00030240 	.word	0x00030240

000b6450 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6450:	b508      	push	{r3, lr}
   b6452:	4b02      	ldr	r3, [pc, #8]	; (b645c <network_on+0xc>)
   b6454:	681b      	ldr	r3, [r3, #0]
   b6456:	695b      	ldr	r3, [r3, #20]
   b6458:	9301      	str	r3, [sp, #4]
   b645a:	bd08      	pop	{r3, pc}
   b645c:	00030240 	.word	0x00030240

000b6460 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6460:	b508      	push	{r3, lr}
   b6462:	4b02      	ldr	r3, [pc, #8]	; (b646c <network_off+0xc>)
   b6464:	681b      	ldr	r3, [r3, #0]
   b6466:	699b      	ldr	r3, [r3, #24]
   b6468:	9301      	str	r3, [sp, #4]
   b646a:	bd08      	pop	{r3, pc}
   b646c:	00030240 	.word	0x00030240

000b6470 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6470:	b508      	push	{r3, lr}
   b6472:	4b02      	ldr	r3, [pc, #8]	; (b647c <network_listen+0xc>)
   b6474:	681b      	ldr	r3, [r3, #0]
   b6476:	69db      	ldr	r3, [r3, #28]
   b6478:	9301      	str	r3, [sp, #4]
   b647a:	bd08      	pop	{r3, pc}
   b647c:	00030240 	.word	0x00030240

000b6480 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6480:	b508      	push	{r3, lr}
   b6482:	4b02      	ldr	r3, [pc, #8]	; (b648c <network_listening+0xc>)
   b6484:	681b      	ldr	r3, [r3, #0]
   b6486:	6a1b      	ldr	r3, [r3, #32]
   b6488:	9301      	str	r3, [sp, #4]
   b648a:	bd08      	pop	{r3, pc}
   b648c:	00030240 	.word	0x00030240

000b6490 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6490:	b508      	push	{r3, lr}
   b6492:	4b02      	ldr	r3, [pc, #8]	; (b649c <network_set_listen_timeout+0xc>)
   b6494:	681b      	ldr	r3, [r3, #0]
   b6496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6498:	9301      	str	r3, [sp, #4]
   b649a:	bd08      	pop	{r3, pc}
   b649c:	00030240 	.word	0x00030240

000b64a0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b64a0:	b508      	push	{r3, lr}
   b64a2:	4b02      	ldr	r3, [pc, #8]	; (b64ac <network_get_listen_timeout+0xc>)
   b64a4:	681b      	ldr	r3, [r3, #0]
   b64a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b64a8:	9301      	str	r3, [sp, #4]
   b64aa:	bd08      	pop	{r3, pc}
   b64ac:	00030240 	.word	0x00030240

000b64b0 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b64b0:	b508      	push	{r3, lr}
   b64b2:	4b02      	ldr	r3, [pc, #8]	; (b64bc <network_is_on+0xc>)
   b64b4:	681b      	ldr	r3, [r3, #0]
   b64b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b64b8:	9301      	str	r3, [sp, #4]
   b64ba:	bd08      	pop	{r3, pc}
   b64bc:	00030240 	.word	0x00030240

000b64c0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b64c0:	b508      	push	{r3, lr}
   b64c2:	4b02      	ldr	r3, [pc, #8]	; (b64cc <network_is_off+0xc>)
   b64c4:	681b      	ldr	r3, [r3, #0]
   b64c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b64c8:	9301      	str	r3, [sp, #4]
   b64ca:	bd08      	pop	{r3, pc}
   b64cc:	00030240 	.word	0x00030240

000b64d0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b64d0:	b508      	push	{r3, lr}
   b64d2:	4b02      	ldr	r3, [pc, #8]	; (b64dc <malloc+0xc>)
   b64d4:	681b      	ldr	r3, [r3, #0]
   b64d6:	681b      	ldr	r3, [r3, #0]
   b64d8:	9301      	str	r3, [sp, #4]
   b64da:	bd08      	pop	{r3, pc}
   b64dc:	0003021c 	.word	0x0003021c

000b64e0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b64e0:	b508      	push	{r3, lr}
   b64e2:	4b02      	ldr	r3, [pc, #8]	; (b64ec <free+0xc>)
   b64e4:	681b      	ldr	r3, [r3, #0]
   b64e6:	685b      	ldr	r3, [r3, #4]
   b64e8:	9301      	str	r3, [sp, #4]
   b64ea:	bd08      	pop	{r3, pc}
   b64ec:	0003021c 	.word	0x0003021c

000b64f0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b64f0:	b508      	push	{r3, lr}
   b64f2:	4b02      	ldr	r3, [pc, #8]	; (b64fc <realloc+0xc>)
   b64f4:	681b      	ldr	r3, [r3, #0]
   b64f6:	689b      	ldr	r3, [r3, #8]
   b64f8:	9301      	str	r3, [sp, #4]
   b64fa:	bd08      	pop	{r3, pc}
   b64fc:	0003021c 	.word	0x0003021c

000b6500 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6500:	b508      	push	{r3, lr}
   b6502:	4b02      	ldr	r3, [pc, #8]	; (b650c <vsnprintf+0xc>)
   b6504:	681b      	ldr	r3, [r3, #0]
   b6506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6508:	9301      	str	r3, [sp, #4]
   b650a:	bd08      	pop	{r3, pc}
   b650c:	0003021c 	.word	0x0003021c

000b6510 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6510:	b508      	push	{r3, lr}
   b6512:	4b02      	ldr	r3, [pc, #8]	; (b651c <__errno+0xc>)
   b6514:	681b      	ldr	r3, [r3, #0]
   b6516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6518:	9301      	str	r3, [sp, #4]
   b651a:	bd08      	pop	{r3, pc}
   b651c:	0003021c 	.word	0x0003021c

000b6520 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6520:	b508      	push	{r3, lr}
   b6522:	4b02      	ldr	r3, [pc, #8]	; (b652c <__assert_func+0xc>)
   b6524:	681b      	ldr	r3, [r3, #0]
   b6526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6528:	9301      	str	r3, [sp, #4]
   b652a:	bd08      	pop	{r3, pc}
   b652c:	0003021c 	.word	0x0003021c

000b6530 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6530:	b508      	push	{r3, lr}
   b6532:	4b02      	ldr	r3, [pc, #8]	; (b653c <newlib_impure_ptr_callback+0xc>)
   b6534:	681b      	ldr	r3, [r3, #0]
   b6536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6538:	9301      	str	r3, [sp, #4]
   b653a:	bd08      	pop	{r3, pc}
   b653c:	0003021c 	.word	0x0003021c

000b6540 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6540:	2100      	movs	r1, #0
   b6542:	f7ff bf39 	b.w	b63b8 <system_delay_ms>
	...

000b6548 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6548:	4802      	ldr	r0, [pc, #8]	; (b6554 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b654a:	2300      	movs	r3, #0
   b654c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b654e:	f7ff bd3b 	b.w	b5fc8 <os_mutex_recursive_create>
   b6552:	bf00      	nop
   b6554:	2003e6c4 	.word	0x2003e6c4

000b6558 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6558:	2200      	movs	r2, #0
   b655a:	6840      	ldr	r0, [r0, #4]
   b655c:	4611      	mov	r1, r2
   b655e:	f7ff bf8f 	b.w	b6480 <network_listening>

000b6562 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6562:	2200      	movs	r2, #0
   b6564:	6840      	ldr	r0, [r0, #4]
   b6566:	4611      	mov	r1, r2
   b6568:	f7ff bf9a 	b.w	b64a0 <network_get_listen_timeout>

000b656c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b656c:	6840      	ldr	r0, [r0, #4]
   b656e:	2200      	movs	r2, #0
   b6570:	f7ff bf8e 	b.w	b6490 <network_set_listen_timeout>

000b6574 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6574:	6840      	ldr	r0, [r0, #4]
   b6576:	2200      	movs	r2, #0
   b6578:	f081 0101 	eor.w	r1, r1, #1
   b657c:	f7ff bf78 	b.w	b6470 <network_listen>

000b6580 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6580:	2300      	movs	r3, #0
   b6582:	6840      	ldr	r0, [r0, #4]
   b6584:	461a      	mov	r2, r3
   b6586:	4619      	mov	r1, r3
   b6588:	f7ff bf6a 	b.w	b6460 <network_off>

000b658c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b658c:	2300      	movs	r3, #0
   b658e:	6840      	ldr	r0, [r0, #4]
   b6590:	461a      	mov	r2, r3
   b6592:	4619      	mov	r1, r3
   b6594:	f7ff bf5c 	b.w	b6450 <network_on>

000b6598 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6598:	2200      	movs	r2, #0
   b659a:	6840      	ldr	r0, [r0, #4]
   b659c:	4611      	mov	r1, r2
   b659e:	f7ff bf4f 	b.w	b6440 <network_ready>

000b65a2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b65a2:	2200      	movs	r2, #0
   b65a4:	6840      	ldr	r0, [r0, #4]
   b65a6:	4611      	mov	r1, r2
   b65a8:	f7ff bf3a 	b.w	b6420 <network_connecting>

000b65ac <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b65ac:	6840      	ldr	r0, [r0, #4]
   b65ae:	2200      	movs	r2, #0
   b65b0:	2102      	movs	r1, #2
   b65b2:	f7ff bf3d 	b.w	b6430 <network_disconnect>

000b65b6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b65b6:	2300      	movs	r3, #0
   b65b8:	6840      	ldr	r0, [r0, #4]
   b65ba:	461a      	mov	r2, r3
   b65bc:	f7ff bf28 	b.w	b6410 <network_connect>

000b65c0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b65c0:	4b02      	ldr	r3, [pc, #8]	; (b65cc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b65c2:	2203      	movs	r2, #3
   b65c4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b65c6:	4a02      	ldr	r2, [pc, #8]	; (b65d0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b65c8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b65ca:	4770      	bx	lr
   b65cc:	2003e6c8 	.word	0x2003e6c8
   b65d0:	000b84e4 	.word	0x000b84e4

000b65d4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b65d4:	4770      	bx	lr

000b65d6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b65d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b65d8:	4606      	mov	r6, r0
   b65da:	4615      	mov	r5, r2
   b65dc:	460c      	mov	r4, r1
   b65de:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b65e0:	42bc      	cmp	r4, r7
   b65e2:	d006      	beq.n	b65f2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b65e4:	6833      	ldr	r3, [r6, #0]
   b65e6:	f814 1b01 	ldrb.w	r1, [r4], #1
   b65ea:	689b      	ldr	r3, [r3, #8]
   b65ec:	4630      	mov	r0, r6
   b65ee:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b65f0:	e7f6      	b.n	b65e0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b65f2:	4628      	mov	r0, r5
   b65f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b65f6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b65f6:	7c00      	ldrb	r0, [r0, #16]
   b65f8:	2200      	movs	r2, #0
   b65fa:	f7ff bd5d 	b.w	b60b8 <hal_i2c_write>

000b65fe <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b65fe:	7c00      	ldrb	r0, [r0, #16]
   b6600:	2100      	movs	r1, #0
   b6602:	f7ff bd61 	b.w	b60c8 <hal_i2c_available>

000b6606 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6606:	7c00      	ldrb	r0, [r0, #16]
   b6608:	2100      	movs	r1, #0
   b660a:	f7ff bd65 	b.w	b60d8 <hal_i2c_read>

000b660e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b660e:	7c00      	ldrb	r0, [r0, #16]
   b6610:	2100      	movs	r1, #0
   b6612:	f7ff bd69 	b.w	b60e8 <hal_i2c_peek>

000b6616 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6616:	7c00      	ldrb	r0, [r0, #16]
   b6618:	2100      	movs	r1, #0
   b661a:	f7ff bd6d 	b.w	b60f8 <hal_i2c_flush>

000b661e <_ZN7TwoWireD0Ev>:
   b661e:	b510      	push	{r4, lr}
   b6620:	2114      	movs	r1, #20
   b6622:	4604      	mov	r4, r0
   b6624:	f7fd fd39 	bl	b409a <_ZdlPvj>
   b6628:	4620      	mov	r0, r4
   b662a:	bd10      	pop	{r4, pc}

000b662c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b662c:	b538      	push	{r3, r4, r5, lr}
   b662e:	4604      	mov	r4, r0
   b6630:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6636:	2200      	movs	r2, #0
   b6638:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b663c:	4b09      	ldr	r3, [pc, #36]	; (b6664 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b663e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6640:	4608      	mov	r0, r1
   b6642:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6644:	4629      	mov	r1, r5
   b6646:	f7ff fd67 	bl	b6118 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b664a:	30bf      	adds	r0, #191	; 0xbf
   b664c:	d108      	bne.n	b6660 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b664e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6650:	07db      	lsls	r3, r3, #31
   b6652:	d505      	bpl.n	b6660 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6654:	6868      	ldr	r0, [r5, #4]
   b6656:	f7ff ff43 	bl	b64e0 <free>
    free(conf.tx_buffer);
   b665a:	68e8      	ldr	r0, [r5, #12]
   b665c:	f7ff ff40 	bl	b64e0 <free>
}
   b6660:	4620      	mov	r0, r4
   b6662:	bd38      	pop	{r3, r4, r5, pc}
   b6664:	000b8520 	.word	0x000b8520

000b6668 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6668:	2300      	movs	r3, #0
   b666a:	7c00      	ldrb	r0, [r0, #16]
   b666c:	461a      	mov	r2, r3
   b666e:	4619      	mov	r1, r3
   b6670:	f7ff bd0a 	b.w	b6088 <hal_i2c_begin>

000b6674 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6674:	7c00      	ldrb	r0, [r0, #16]
   b6676:	2200      	movs	r2, #0
   b6678:	f7ff bd0e 	b.w	b6098 <hal_i2c_begin_transmission>

000b667c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b667c:	b2c9      	uxtb	r1, r1
   b667e:	f7ff bff9 	b.w	b6674 <_ZN7TwoWire17beginTransmissionEh>

000b6682 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6682:	7c00      	ldrb	r0, [r0, #16]
   b6684:	2200      	movs	r2, #0
   b6686:	f7ff bd0f 	b.w	b60a8 <hal_i2c_end_transmission>

000b668a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b668a:	2101      	movs	r1, #1
   b668c:	f7ff bff9 	b.w	b6682 <_ZN7TwoWire15endTransmissionEh>

000b6690 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6690:	4770      	bx	lr

000b6692 <_ZN9IPAddressD0Ev>:
   b6692:	b510      	push	{r4, lr}
   b6694:	2118      	movs	r1, #24
   b6696:	4604      	mov	r4, r0
   b6698:	f7fd fcff 	bl	b409a <_ZdlPvj>
   b669c:	4620      	mov	r0, r4
   b669e:	bd10      	pop	{r4, pc}

000b66a0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b66a0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b66a2:	7d03      	ldrb	r3, [r0, #20]
   b66a4:	2b06      	cmp	r3, #6
{
   b66a6:	b08d      	sub	sp, #52	; 0x34
   b66a8:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b66aa:	f100 0704 	add.w	r7, r0, #4
   b66ae:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b66b2:	d012      	beq.n	b66da <_ZNK9IPAddress7printToER5Print+0x3a>
   b66b4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b66b8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b66bc:	220a      	movs	r2, #10
   b66be:	4630      	mov	r0, r6
   b66c0:	f000 f973 	bl	b69aa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b66c4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b66c6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b66c8:	d019      	beq.n	b66fe <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b66ca:	2c00      	cmp	r4, #0
   b66cc:	d0f4      	beq.n	b66b8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b66ce:	212e      	movs	r1, #46	; 0x2e
   b66d0:	4630      	mov	r0, r6
   b66d2:	f000 f951 	bl	b6978 <_ZN5Print5printEc>
   b66d6:	4404      	add	r4, r0
   b66d8:	e7ee      	b.n	b66b8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b66da:	232f      	movs	r3, #47	; 0x2f
   b66dc:	466a      	mov	r2, sp
   b66de:	4639      	mov	r1, r7
   b66e0:	200a      	movs	r0, #10
		buf[0] = 0;
   b66e2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b66e6:	f7ff fd27 	bl	b6138 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b66ea:	4668      	mov	r0, sp
   b66ec:	f001 fa7a 	bl	b7be4 <strlen>
   b66f0:	6833      	ldr	r3, [r6, #0]
   b66f2:	4602      	mov	r2, r0
   b66f4:	68db      	ldr	r3, [r3, #12]
   b66f6:	4669      	mov	r1, sp
   b66f8:	4630      	mov	r0, r6
   b66fa:	4798      	blx	r3
   b66fc:	4604      	mov	r4, r0
    }
    return n;
}
   b66fe:	4620      	mov	r0, r4
   b6700:	b00d      	add	sp, #52	; 0x34
   b6702:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6704 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6704:	b510      	push	{r4, lr}
   b6706:	4b05      	ldr	r3, [pc, #20]	; (b671c <_ZN9IPAddressC1Ev+0x18>)
   b6708:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b670a:	2211      	movs	r2, #17
   b670c:	f840 3b04 	str.w	r3, [r0], #4
   b6710:	2100      	movs	r1, #0
   b6712:	f001 fa1f 	bl	b7b54 <memset>
}
   b6716:	4620      	mov	r0, r4
   b6718:	bd10      	pop	{r4, pc}
   b671a:	bf00      	nop
   b671c:	000b8548 	.word	0x000b8548

000b6720 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6720:	4603      	mov	r3, r0
   b6722:	4a07      	ldr	r2, [pc, #28]	; (b6740 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6724:	b510      	push	{r4, lr}
   b6726:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b672a:	f101 0210 	add.w	r2, r1, #16
   b672e:	f851 4b04 	ldr.w	r4, [r1], #4
   b6732:	f843 4b04 	str.w	r4, [r3], #4
   b6736:	4291      	cmp	r1, r2
   b6738:	d1f9      	bne.n	b672e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b673a:	780a      	ldrb	r2, [r1, #0]
   b673c:	701a      	strb	r2, [r3, #0]
}
   b673e:	bd10      	pop	{r4, pc}
   b6740:	000b8548 	.word	0x000b8548

000b6744 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6744:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b6746:	2b04      	cmp	r3, #4
   b6748:	d104      	bne.n	b6754 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b674a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b674c:	3800      	subs	r0, #0
   b674e:	bf18      	it	ne
   b6750:	2001      	movne	r0, #1
   b6752:	4770      	bx	lr
    } else if (version() == 6) {
   b6754:	2b06      	cmp	r3, #6
   b6756:	d107      	bne.n	b6768 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6758:	6843      	ldr	r3, [r0, #4]
   b675a:	b93b      	cbnz	r3, b676c <_ZNK9IPAddresscvbEv+0x28>
   b675c:	6883      	ldr	r3, [r0, #8]
   b675e:	b92b      	cbnz	r3, b676c <_ZNK9IPAddresscvbEv+0x28>
   b6760:	68c3      	ldr	r3, [r0, #12]
   b6762:	b91b      	cbnz	r3, b676c <_ZNK9IPAddresscvbEv+0x28>
   b6764:	6900      	ldr	r0, [r0, #16]
   b6766:	e7f1      	b.n	b674c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b6768:	2000      	movs	r0, #0
   b676a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b676c:	2001      	movs	r0, #1
}
   b676e:	4770      	bx	lr

000b6770 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6770:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6772:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6776:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b677a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b677e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6782:	2304      	movs	r3, #4
   b6784:	6041      	str	r1, [r0, #4]
   b6786:	7503      	strb	r3, [r0, #20]
}
   b6788:	bd10      	pop	{r4, pc}
	...

000b678c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b678c:	b507      	push	{r0, r1, r2, lr}
   b678e:	4b06      	ldr	r3, [pc, #24]	; (b67a8 <_ZN9IPAddressC1EPKh+0x1c>)
   b6790:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6792:	78cb      	ldrb	r3, [r1, #3]
   b6794:	9300      	str	r3, [sp, #0]
   b6796:	788b      	ldrb	r3, [r1, #2]
   b6798:	784a      	ldrb	r2, [r1, #1]
   b679a:	7809      	ldrb	r1, [r1, #0]
   b679c:	f7ff ffe8 	bl	b6770 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b67a0:	b003      	add	sp, #12
   b67a2:	f85d fb04 	ldr.w	pc, [sp], #4
   b67a6:	bf00      	nop
   b67a8:	000b8548 	.word	0x000b8548

000b67ac <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b67ac:	4b01      	ldr	r3, [pc, #4]	; (b67b4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b67ae:	4a02      	ldr	r2, [pc, #8]	; (b67b8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b67b0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b67b2:	4770      	bx	lr
   b67b4:	2003e6d0 	.word	0x2003e6d0
   b67b8:	000b8554 	.word	0x000b8554

000b67bc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b67bc:	2300      	movs	r3, #0
   b67be:	6840      	ldr	r0, [r0, #4]
   b67c0:	461a      	mov	r2, r3
   b67c2:	f7ff be25 	b.w	b6410 <network_connect>

000b67c6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b67c6:	6840      	ldr	r0, [r0, #4]
   b67c8:	2200      	movs	r2, #0
   b67ca:	2102      	movs	r1, #2
   b67cc:	f7ff be30 	b.w	b6430 <network_disconnect>

000b67d0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b67d0:	2200      	movs	r2, #0
   b67d2:	6840      	ldr	r0, [r0, #4]
   b67d4:	4611      	mov	r1, r2
   b67d6:	f7ff be23 	b.w	b6420 <network_connecting>

000b67da <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b67da:	2200      	movs	r2, #0
   b67dc:	6840      	ldr	r0, [r0, #4]
   b67de:	4611      	mov	r1, r2
   b67e0:	f7ff be2e 	b.w	b6440 <network_ready>

000b67e4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b67e4:	2300      	movs	r3, #0
   b67e6:	6840      	ldr	r0, [r0, #4]
   b67e8:	461a      	mov	r2, r3
   b67ea:	4619      	mov	r1, r3
   b67ec:	f7ff be30 	b.w	b6450 <network_on>

000b67f0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b67f0:	2300      	movs	r3, #0
   b67f2:	6840      	ldr	r0, [r0, #4]
   b67f4:	461a      	mov	r2, r3
   b67f6:	4619      	mov	r1, r3
   b67f8:	f7ff be32 	b.w	b6460 <network_off>

000b67fc <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b67fc:	6840      	ldr	r0, [r0, #4]
   b67fe:	2100      	movs	r1, #0
   b6800:	f7ff be56 	b.w	b64b0 <network_is_on>

000b6804 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6804:	6840      	ldr	r0, [r0, #4]
   b6806:	2100      	movs	r1, #0
   b6808:	f7ff be5a 	b.w	b64c0 <network_is_off>

000b680c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b680c:	6840      	ldr	r0, [r0, #4]
   b680e:	2200      	movs	r2, #0
   b6810:	f081 0101 	eor.w	r1, r1, #1
   b6814:	f7ff be2c 	b.w	b6470 <network_listen>

000b6818 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6818:	6840      	ldr	r0, [r0, #4]
   b681a:	2200      	movs	r2, #0
   b681c:	f7ff be38 	b.w	b6490 <network_set_listen_timeout>

000b6820 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6820:	2200      	movs	r2, #0
   b6822:	6840      	ldr	r0, [r0, #4]
   b6824:	4611      	mov	r1, r2
   b6826:	f7ff be3b 	b.w	b64a0 <network_get_listen_timeout>

000b682a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b682a:	2200      	movs	r2, #0
   b682c:	6840      	ldr	r0, [r0, #4]
   b682e:	4611      	mov	r1, r2
   b6830:	f7ff be26 	b.w	b6480 <network_listening>

000b6834 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6838:	b095      	sub	sp, #84	; 0x54
   b683a:	4614      	mov	r4, r2
   b683c:	460d      	mov	r5, r1
   b683e:	4607      	mov	r7, r0
    IPAddress addr;
   b6840:	f7ff ff60 	bl	b6704 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6844:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6846:	221c      	movs	r2, #28
   b6848:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b684a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b684c:	f001 f982 	bl	b7b54 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6850:	2340      	movs	r3, #64	; 0x40
   b6852:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6854:	4620      	mov	r0, r4
   b6856:	466b      	mov	r3, sp
   b6858:	aa0c      	add	r2, sp, #48	; 0x30
   b685a:	2100      	movs	r1, #0
   b685c:	f7ff fc8c 	bl	b6178 <netdb_getaddrinfo>
    if (!r) {
   b6860:	4604      	mov	r4, r0
   b6862:	2800      	cmp	r0, #0
   b6864:	d14b      	bne.n	b68fe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6866:	4602      	mov	r2, r0
   b6868:	2101      	movs	r1, #1
   b686a:	6868      	ldr	r0, [r5, #4]
   b686c:	f7ff fde8 	bl	b6440 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6870:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6872:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6874:	4622      	mov	r2, r4
   b6876:	6868      	ldr	r0, [r5, #4]
   b6878:	f7ff fde2 	bl	b6440 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b687c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b687e:	4681      	mov	r9, r0
        bool ok = false;
   b6880:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6882:	2e00      	cmp	r6, #0
   b6884:	d03b      	beq.n	b68fe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6886:	2900      	cmp	r1, #0
   b6888:	d139      	bne.n	b68fe <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b688a:	6873      	ldr	r3, [r6, #4]
   b688c:	2b02      	cmp	r3, #2
   b688e:	d003      	beq.n	b6898 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6890:	2b0a      	cmp	r3, #10
   b6892:	d011      	beq.n	b68b8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6894:	69f6      	ldr	r6, [r6, #28]
   b6896:	e7f4      	b.n	b6882 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6898:	f1b8 0f00 	cmp.w	r8, #0
   b689c:	d0fa      	beq.n	b6894 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b689e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b68a0:	a806      	add	r0, sp, #24
   b68a2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b68a4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b68a6:	f7ff ff71 	bl	b678c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b68aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b68ac:	1d3c      	adds	r4, r7, #4
   b68ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b68b0:	682b      	ldr	r3, [r5, #0]
   b68b2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b68b4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b68b6:	e7ed      	b.n	b6894 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b68b8:	f1b9 0f00 	cmp.w	r9, #0
   b68bc:	d0ea      	beq.n	b6894 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b68be:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b68c0:	2210      	movs	r2, #16
   b68c2:	a801      	add	r0, sp, #4
   b68c4:	f001 f946 	bl	b7b54 <memset>
                    a.v = 6;
   b68c8:	2306      	movs	r3, #6
   b68ca:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b68ce:	ad01      	add	r5, sp, #4
   b68d0:	f104 0308 	add.w	r3, r4, #8
   b68d4:	3418      	adds	r4, #24
   b68d6:	6818      	ldr	r0, [r3, #0]
   b68d8:	6859      	ldr	r1, [r3, #4]
   b68da:	462a      	mov	r2, r5
   b68dc:	c203      	stmia	r2!, {r0, r1}
   b68de:	3308      	adds	r3, #8
   b68e0:	42a3      	cmp	r3, r4
   b68e2:	4615      	mov	r5, r2
   b68e4:	d1f7      	bne.n	b68d6 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b68e6:	a901      	add	r1, sp, #4
   b68e8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b68ea:	ad07      	add	r5, sp, #28
   b68ec:	f7ff ff18 	bl	b6720 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b68f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b68f2:	1d3c      	adds	r4, r7, #4
   b68f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b68f6:	682b      	ldr	r3, [r5, #0]
   b68f8:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b68fa:	4649      	mov	r1, r9
   b68fc:	e7ca      	b.n	b6894 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b68fe:	9800      	ldr	r0, [sp, #0]
   b6900:	f7ff fc32 	bl	b6168 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6904:	4638      	mov	r0, r7
   b6906:	b015      	add	sp, #84	; 0x54
   b6908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b690c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b690c:	4b02      	ldr	r3, [pc, #8]	; (b6918 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b690e:	4a03      	ldr	r2, [pc, #12]	; (b691c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6910:	601a      	str	r2, [r3, #0]
   b6912:	2200      	movs	r2, #0
   b6914:	605a      	str	r2, [r3, #4]

} // spark
   b6916:	4770      	bx	lr
   b6918:	2003e6d4 	.word	0x2003e6d4
   b691c:	000b8560 	.word	0x000b8560

000b6920 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6922:	4606      	mov	r6, r0
   b6924:	460d      	mov	r5, r1
  size_t n = 0;
   b6926:	188f      	adds	r7, r1, r2
   b6928:	2400      	movs	r4, #0
  while (size--) {
   b692a:	42bd      	cmp	r5, r7
   b692c:	d00c      	beq.n	b6948 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b692e:	6833      	ldr	r3, [r6, #0]
   b6930:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6934:	689b      	ldr	r3, [r3, #8]
   b6936:	4630      	mov	r0, r6
   b6938:	4798      	blx	r3
     if (chunk>=0)
   b693a:	1e03      	subs	r3, r0, #0
   b693c:	db01      	blt.n	b6942 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b693e:	441c      	add	r4, r3
  while (size--) {
   b6940:	e7f3      	b.n	b692a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6942:	2c00      	cmp	r4, #0
   b6944:	bf08      	it	eq
   b6946:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6948:	4620      	mov	r0, r4
   b694a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b694c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b694c:	b513      	push	{r0, r1, r4, lr}
   b694e:	4604      	mov	r4, r0
    }
   b6950:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6952:	b159      	cbz	r1, b696c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6954:	9101      	str	r1, [sp, #4]
   b6956:	f001 f945 	bl	b7be4 <strlen>
   b695a:	6823      	ldr	r3, [r4, #0]
   b695c:	9901      	ldr	r1, [sp, #4]
   b695e:	68db      	ldr	r3, [r3, #12]
   b6960:	4602      	mov	r2, r0
   b6962:	4620      	mov	r0, r4
    }
   b6964:	b002      	add	sp, #8
   b6966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b696a:	4718      	bx	r3
    }
   b696c:	b002      	add	sp, #8
   b696e:	bd10      	pop	{r4, pc}

000b6970 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6970:	b508      	push	{r3, lr}
  return write(str);
   b6972:	f7ff ffeb 	bl	b694c <_ZN5Print5writeEPKc>
}
   b6976:	bd08      	pop	{r3, pc}

000b6978 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6978:	6803      	ldr	r3, [r0, #0]
   b697a:	689b      	ldr	r3, [r3, #8]
   b697c:	4718      	bx	r3

000b697e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b697e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6980:	210d      	movs	r1, #13
{
   b6982:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6984:	f7ff fff8 	bl	b6978 <_ZN5Print5printEc>
  n += print('\n');
   b6988:	210a      	movs	r1, #10
  size_t n = print('\r');
   b698a:	4604      	mov	r4, r0
  n += print('\n');
   b698c:	4628      	mov	r0, r5
   b698e:	f7ff fff3 	bl	b6978 <_ZN5Print5printEc>
  return n;
}
   b6992:	4420      	add	r0, r4
   b6994:	bd38      	pop	{r3, r4, r5, pc}

000b6996 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b6996:	b538      	push	{r3, r4, r5, lr}
   b6998:	4605      	mov	r5, r0
  return write(str);
   b699a:	f7ff ffd7 	bl	b694c <_ZN5Print5writeEPKc>
   b699e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b69a0:	4628      	mov	r0, r5
   b69a2:	f7ff ffec 	bl	b697e <_ZN5Print7printlnEv>
  return n;
}
   b69a6:	4420      	add	r0, r4
   b69a8:	bd38      	pop	{r3, r4, r5, pc}

000b69aa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b69aa:	b530      	push	{r4, r5, lr}
   b69ac:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b69ae:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b69b0:	2a01      	cmp	r2, #1
  *str = '\0';
   b69b2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b69b6:	bf98      	it	ls
   b69b8:	220a      	movls	r2, #10
   b69ba:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b69bc:	460d      	mov	r5, r1
   b69be:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b69c2:	fb01 5312 	mls	r3, r1, r2, r5
   b69c6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b69ca:	2b09      	cmp	r3, #9
   b69cc:	bf94      	ite	ls
   b69ce:	3330      	addls	r3, #48	; 0x30
   b69d0:	3337      	addhi	r3, #55	; 0x37
   b69d2:	b2db      	uxtb	r3, r3
  } while(n);
   b69d4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b69d6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b69da:	d9ef      	bls.n	b69bc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b69dc:	4621      	mov	r1, r4
   b69de:	f7ff ffb5 	bl	b694c <_ZN5Print5writeEPKc>
}
   b69e2:	b00b      	add	sp, #44	; 0x2c
   b69e4:	bd30      	pop	{r4, r5, pc}

000b69e6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b69e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b69ea:	b086      	sub	sp, #24
   b69ec:	af00      	add	r7, sp, #0
   b69ee:	4605      	mov	r5, r0
   b69f0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b69f2:	1d38      	adds	r0, r7, #4
   b69f4:	2114      	movs	r1, #20
{
   b69f6:	4614      	mov	r4, r2
    va_copy(args2, args);
   b69f8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b69fa:	f7ff fd81 	bl	b6500 <vsnprintf>

    if (n<bufsize)
   b69fe:	2813      	cmp	r0, #19
   b6a00:	d80e      	bhi.n	b6a20 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6a02:	1d39      	adds	r1, r7, #4
   b6a04:	4628      	mov	r0, r5
   b6a06:	f7ff ffa1 	bl	b694c <_ZN5Print5writeEPKc>
   b6a0a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6a0c:	b11e      	cbz	r6, b6a16 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6a0e:	4628      	mov	r0, r5
   b6a10:	f7ff ffb5 	bl	b697e <_ZN5Print7printlnEv>
   b6a14:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6a16:	4620      	mov	r0, r4
   b6a18:	3718      	adds	r7, #24
   b6a1a:	46bd      	mov	sp, r7
   b6a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6a20:	f100 0308 	add.w	r3, r0, #8
   b6a24:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6a28:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6a2a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6a2e:	4622      	mov	r2, r4
   b6a30:	1c41      	adds	r1, r0, #1
   b6a32:	683b      	ldr	r3, [r7, #0]
   b6a34:	4668      	mov	r0, sp
   b6a36:	f7ff fd63 	bl	b6500 <vsnprintf>
  return write(str);
   b6a3a:	4669      	mov	r1, sp
   b6a3c:	4628      	mov	r0, r5
   b6a3e:	f7ff ff85 	bl	b694c <_ZN5Print5writeEPKc>
   b6a42:	4604      	mov	r4, r0
   b6a44:	46c5      	mov	sp, r8
   b6a46:	e7e1      	b.n	b6a0c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6a48 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6a48:	4b01      	ldr	r3, [pc, #4]	; (b6a50 <_GLOBAL__sub_I_RGB+0x8>)
   b6a4a:	2200      	movs	r2, #0
   b6a4c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6a4e:	4770      	bx	lr
   b6a50:	2003e6dc 	.word	0x2003e6dc

000b6a54 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6a54:	2100      	movs	r1, #0
   b6a56:	f7ff bc0f 	b.w	b6278 <hal_spi_release>

000b6a5a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6a5a:	2100      	movs	r1, #0
   b6a5c:	f7ff bc04 	b.w	b6268 <hal_spi_acquire>

000b6a60 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6a60:	b510      	push	{r4, lr}
   b6a62:	4604      	mov	r4, r0
   b6a64:	4608      	mov	r0, r1
{
    _spi = spi;
   b6a66:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6a68:	f7ff fbe6 	bl	b6238 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6a6c:	2300      	movs	r3, #0
   b6a6e:	6063      	str	r3, [r4, #4]
}
   b6a70:	4620      	mov	r0, r4
   b6a72:	bd10      	pop	{r4, pc}

000b6a74 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6a74:	b513      	push	{r0, r1, r4, lr}
   b6a76:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6a78:	7800      	ldrb	r0, [r0, #0]
   b6a7a:	f7ff ffee 	bl	b6a5a <_ZN8SPIClass4lockEv.isra.0>
   b6a7e:	b958      	cbnz	r0, b6a98 <_ZN8SPIClass5beginEv+0x24>
   b6a80:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6a82:	9001      	str	r0, [sp, #4]
   b6a84:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6a88:	f7ff fbae 	bl	b61e8 <hal_spi_begin>
        unlock();
   b6a8c:	9801      	ldr	r0, [sp, #4]
    }
}
   b6a8e:	b002      	add	sp, #8
   b6a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6a94:	f7ff bfde 	b.w	b6a54 <_ZN8SPIClass6unlockEv.isra.0>
   b6a98:	b002      	add	sp, #8
   b6a9a:	bd10      	pop	{r4, pc}

000b6a9c <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b6a9c:	b513      	push	{r0, r1, r4, lr}
   b6a9e:	4604      	mov	r4, r0
    if (!lock())
   b6aa0:	7800      	ldrb	r0, [r0, #0]
{
   b6aa2:	9101      	str	r1, [sp, #4]
    if (!lock())
   b6aa4:	f7ff ffd9 	bl	b6a5a <_ZN8SPIClass4lockEv.isra.0>
   b6aa8:	9901      	ldr	r1, [sp, #4]
   b6aaa:	b948      	cbnz	r0, b6ac0 <_ZN8SPIClass11setBitOrderEh+0x24>
   b6aac:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b6aae:	9001      	str	r0, [sp, #4]
   b6ab0:	f7ff fba2 	bl	b61f8 <hal_spi_set_bit_order>
        unlock();
   b6ab4:	9801      	ldr	r0, [sp, #4]
    }
}
   b6ab6:	b002      	add	sp, #8
   b6ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6abc:	f7ff bfca 	b.w	b6a54 <_ZN8SPIClass6unlockEv.isra.0>
   b6ac0:	b002      	add	sp, #8
   b6ac2:	bd10      	pop	{r4, pc}

000b6ac4 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b6ac4:	b513      	push	{r0, r1, r4, lr}
   b6ac6:	4604      	mov	r4, r0
    if (!lock())
   b6ac8:	7800      	ldrb	r0, [r0, #0]
{
   b6aca:	9101      	str	r1, [sp, #4]
    if (!lock())
   b6acc:	f7ff ffc5 	bl	b6a5a <_ZN8SPIClass4lockEv.isra.0>
   b6ad0:	9901      	ldr	r1, [sp, #4]
   b6ad2:	b948      	cbnz	r0, b6ae8 <_ZN8SPIClass11setDataModeEh+0x24>
   b6ad4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b6ad6:	9001      	str	r0, [sp, #4]
   b6ad8:	f7ff fb96 	bl	b6208 <hal_spi_set_data_mode>
        unlock();
   b6adc:	9801      	ldr	r0, [sp, #4]
    }
}
   b6ade:	b002      	add	sp, #8
   b6ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6ae4:	f7ff bfb6 	b.w	b6a54 <_ZN8SPIClass6unlockEv.isra.0>
   b6ae8:	b002      	add	sp, #8
   b6aea:	bd10      	pop	{r4, pc}

000b6aec <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6aec:	0840      	lsrs	r0, r0, #1
{
   b6aee:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6af0:	6018      	str	r0, [r3, #0]
   b6af2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6af4:	6818      	ldr	r0, [r3, #0]
   b6af6:	4288      	cmp	r0, r1
   b6af8:	b2e5      	uxtb	r5, r4
   b6afa:	d906      	bls.n	b6b0a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6afc:	3401      	adds	r4, #1
   b6afe:	2c08      	cmp	r4, #8
   b6b00:	d002      	beq.n	b6b08 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6b02:	0840      	lsrs	r0, r0, #1
   b6b04:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6b06:	e7f5      	b.n	b6af4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6b08:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6b0a:	4b02      	ldr	r3, [pc, #8]	; (b6b14 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6b0c:	5d5b      	ldrb	r3, [r3, r5]
   b6b0e:	7013      	strb	r3, [r2, #0]
}
   b6b10:	bd30      	pop	{r4, r5, pc}
   b6b12:	bf00      	nop
   b6b14:	000b8594 	.word	0x000b8594

000b6b18 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b6b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6b1c:	b088      	sub	sp, #32
    unsigned clock = 0;
   b6b1e:	2300      	movs	r3, #0
{
   b6b20:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b6b22:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b6b24:	9302      	str	r3, [sp, #8]
{
   b6b26:	460e      	mov	r6, r1
   b6b28:	4617      	mov	r7, r2
    if (!lock())
   b6b2a:	f7ff ff96 	bl	b6a5a <_ZN8SPIClass4lockEv.isra.0>
   b6b2e:	4605      	mov	r5, r0
   b6b30:	bb00      	cbnz	r0, b6b74 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b6b32:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6b36:	4601      	mov	r1, r0
   b6b38:	2214      	movs	r2, #20
   b6b3a:	a803      	add	r0, sp, #12
   b6b3c:	f001 f80a 	bl	b7b54 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6b40:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6b42:	462a      	mov	r2, r5
   b6b44:	a903      	add	r1, sp, #12
   b6b46:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b6b48:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b6b4c:	f7ff fb84 	bl	b6258 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b6b50:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b6b52:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b6b56:	ab02      	add	r3, sp, #8
   b6b58:	f10d 0207 	add.w	r2, sp, #7
   b6b5c:	fb07 f106 	mul.w	r1, r7, r6
   b6b60:	f7ff ffc4 	bl	b6aec <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b6b64:	7820      	ldrb	r0, [r4, #0]
   b6b66:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b6b6a:	f7ff fb55 	bl	b6218 <hal_spi_set_clock_divider>
        unlock();
   b6b6e:	7820      	ldrb	r0, [r4, #0]
   b6b70:	f7ff ff70 	bl	b6a54 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b6b74:	9802      	ldr	r0, [sp, #8]
   b6b76:	b008      	add	sp, #32
   b6b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6b7c <_ZN8SPIClass15setClockDividerEh>:
{
   b6b7c:	b538      	push	{r3, r4, r5, lr}
   b6b7e:	4604      	mov	r4, r0
    if (!lock())
   b6b80:	7800      	ldrb	r0, [r0, #0]
{
   b6b82:	460d      	mov	r5, r1
    if (!lock())
   b6b84:	f7ff ff69 	bl	b6a5a <_ZN8SPIClass4lockEv.isra.0>
   b6b88:	4603      	mov	r3, r0
   b6b8a:	b9d0      	cbnz	r0, b6bc2 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b6b8c:	6861      	ldr	r1, [r4, #4]
   b6b8e:	b199      	cbz	r1, b6bb8 <_ZN8SPIClass15setClockDividerEh+0x3c>
   b6b90:	4a0c      	ldr	r2, [pc, #48]	; (b6bc4 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b6b92:	f812 0b01 	ldrb.w	r0, [r2], #1
   b6b96:	4285      	cmp	r5, r0
   b6b98:	d002      	beq.n	b6ba0 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b6b9a:	3301      	adds	r3, #1
   b6b9c:	2b08      	cmp	r3, #8
   b6b9e:	d1f8      	bne.n	b6b92 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b6ba0:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b6ba2:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b6ba4:	2201      	movs	r2, #1
   b6ba6:	40d9      	lsrs	r1, r3
   b6ba8:	4620      	mov	r0, r4
   b6baa:	f7ff ffb5 	bl	b6b18 <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b6bae:	7820      	ldrb	r0, [r4, #0]
}
   b6bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b6bb4:	f7ff bf4e 	b.w	b6a54 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b6bb8:	7820      	ldrb	r0, [r4, #0]
   b6bba:	4629      	mov	r1, r5
   b6bbc:	f7ff fb2c 	bl	b6218 <hal_spi_set_clock_divider>
   b6bc0:	e7f5      	b.n	b6bae <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b6bc2:	bd38      	pop	{r3, r4, r5, pc}
   b6bc4:	000b8594 	.word	0x000b8594

000b6bc8 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b6bc8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6bca:	7800      	ldrb	r0, [r0, #0]
   b6bcc:	f7ff fb2c 	bl	b6228 <hal_spi_transfer>
}
   b6bd0:	b2c0      	uxtb	r0, r0
   b6bd2:	bd08      	pop	{r3, pc}

000b6bd4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6bd4:	b510      	push	{r4, lr}
   b6bd6:	4604      	mov	r4, r0
{
	free(buffer);
   b6bd8:	6800      	ldr	r0, [r0, #0]
   b6bda:	f7ff fc81 	bl	b64e0 <free>
}
   b6bde:	4620      	mov	r0, r4
   b6be0:	bd10      	pop	{r4, pc}

000b6be2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6be2:	b510      	push	{r4, lr}
   b6be4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6be6:	6800      	ldr	r0, [r0, #0]
   b6be8:	b108      	cbz	r0, b6bee <_ZN6String10invalidateEv+0xc>
   b6bea:	f7ff fc79 	bl	b64e0 <free>
	buffer = NULL;
   b6bee:	2300      	movs	r3, #0
	capacity = len = 0;
   b6bf0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6bf4:	6023      	str	r3, [r4, #0]
}
   b6bf6:	bd10      	pop	{r4, pc}

000b6bf8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6bf8:	b538      	push	{r3, r4, r5, lr}
   b6bfa:	4604      	mov	r4, r0
   b6bfc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6bfe:	6800      	ldr	r0, [r0, #0]
   b6c00:	3101      	adds	r1, #1
   b6c02:	f7ff fc75 	bl	b64f0 <realloc>
	if (newbuffer) {
   b6c06:	b110      	cbz	r0, b6c0e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6c08:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6c0c:	2001      	movs	r0, #1
	}
	return 0;
}
   b6c0e:	bd38      	pop	{r3, r4, r5, pc}

000b6c10 <_ZN6String7reserveEj>:
{
   b6c10:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6c12:	6803      	ldr	r3, [r0, #0]
{
   b6c14:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6c16:	b123      	cbz	r3, b6c22 <_ZN6String7reserveEj+0x12>
   b6c18:	6843      	ldr	r3, [r0, #4]
   b6c1a:	428b      	cmp	r3, r1
   b6c1c:	d301      	bcc.n	b6c22 <_ZN6String7reserveEj+0x12>
   b6c1e:	2001      	movs	r0, #1
}
   b6c20:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6c22:	4620      	mov	r0, r4
   b6c24:	f7ff ffe8 	bl	b6bf8 <_ZN6String12changeBufferEj>
   b6c28:	2800      	cmp	r0, #0
   b6c2a:	d0f9      	beq.n	b6c20 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6c2c:	68a3      	ldr	r3, [r4, #8]
   b6c2e:	2b00      	cmp	r3, #0
   b6c30:	d1f5      	bne.n	b6c1e <_ZN6String7reserveEj+0xe>
   b6c32:	6822      	ldr	r2, [r4, #0]
   b6c34:	7013      	strb	r3, [r2, #0]
   b6c36:	e7f2      	b.n	b6c1e <_ZN6String7reserveEj+0xe>

000b6c38 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6c38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6c3a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6c3c:	4611      	mov	r1, r2
   b6c3e:	9201      	str	r2, [sp, #4]
{
   b6c40:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6c42:	f7ff ffe5 	bl	b6c10 <_ZN6String7reserveEj>
   b6c46:	9a01      	ldr	r2, [sp, #4]
   b6c48:	b928      	cbnz	r0, b6c56 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6c4a:	4620      	mov	r0, r4
   b6c4c:	f7ff ffc9 	bl	b6be2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6c50:	4620      	mov	r0, r4
   b6c52:	b003      	add	sp, #12
   b6c54:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6c56:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6c58:	4629      	mov	r1, r5
   b6c5a:	6820      	ldr	r0, [r4, #0]
   b6c5c:	f000 ff6c 	bl	b7b38 <memcpy>
	buffer[len] = 0;
   b6c60:	6822      	ldr	r2, [r4, #0]
   b6c62:	68a3      	ldr	r3, [r4, #8]
   b6c64:	2100      	movs	r1, #0
   b6c66:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6c68:	e7f2      	b.n	b6c50 <_ZN6String4copyEPKcj+0x18>

000b6c6a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6c6a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6c6c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6c6e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6c72:	4604      	mov	r4, r0
	len = 0;
   b6c74:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6c76:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6c78:	b141      	cbz	r1, b6c8c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6c7a:	4608      	mov	r0, r1
   b6c7c:	9101      	str	r1, [sp, #4]
   b6c7e:	f000 ffb1 	bl	b7be4 <strlen>
   b6c82:	9901      	ldr	r1, [sp, #4]
   b6c84:	4602      	mov	r2, r0
   b6c86:	4620      	mov	r0, r4
   b6c88:	f7ff ffd6 	bl	b6c38 <_ZN6String4copyEPKcj>
}
   b6c8c:	4620      	mov	r0, r4
   b6c8e:	b002      	add	sp, #8
   b6c90:	bd10      	pop	{r4, pc}

000b6c92 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6c92:	b513      	push	{r0, r1, r4, lr}
   b6c94:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6c96:	b159      	cbz	r1, b6cb0 <_ZN6StringaSEPKc+0x1e>
   b6c98:	4608      	mov	r0, r1
   b6c9a:	9101      	str	r1, [sp, #4]
   b6c9c:	f000 ffa2 	bl	b7be4 <strlen>
   b6ca0:	9901      	ldr	r1, [sp, #4]
   b6ca2:	4602      	mov	r2, r0
   b6ca4:	4620      	mov	r0, r4
   b6ca6:	f7ff ffc7 	bl	b6c38 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6caa:	4620      	mov	r0, r4
   b6cac:	b002      	add	sp, #8
   b6cae:	bd10      	pop	{r4, pc}
	else invalidate();
   b6cb0:	f7ff ff97 	bl	b6be2 <_ZN6String10invalidateEv>
   b6cb4:	e7f9      	b.n	b6caa <_ZN6StringaSEPKc+0x18>

000b6cb6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b6cb6:	b570      	push	{r4, r5, r6, lr}
   b6cb8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b6cba:	460e      	mov	r6, r1
   b6cbc:	b909      	cbnz	r1, b6cc2 <_ZN6String6concatEPKcj+0xc>
   b6cbe:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b6cc0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b6cc2:	b16a      	cbz	r2, b6ce0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b6cc4:	6884      	ldr	r4, [r0, #8]
   b6cc6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6cc8:	4621      	mov	r1, r4
   b6cca:	f7ff ffa1 	bl	b6c10 <_ZN6String7reserveEj>
   b6cce:	2800      	cmp	r0, #0
   b6cd0:	d0f5      	beq.n	b6cbe <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b6cd2:	6828      	ldr	r0, [r5, #0]
   b6cd4:	68ab      	ldr	r3, [r5, #8]
   b6cd6:	4631      	mov	r1, r6
   b6cd8:	4418      	add	r0, r3
   b6cda:	f000 ff7b 	bl	b7bd4 <strcpy>
	len = newlen;
   b6cde:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b6ce0:	2001      	movs	r0, #1
   b6ce2:	e7ed      	b.n	b6cc0 <_ZN6String6concatEPKcj+0xa>

000b6ce4 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b6ce4:	688a      	ldr	r2, [r1, #8]
   b6ce6:	6809      	ldr	r1, [r1, #0]
   b6ce8:	f7ff bfe5 	b.w	b6cb6 <_ZN6String6concatEPKcj>

000b6cec <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b6cec:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b6cee:	6882      	ldr	r2, [r0, #8]
   b6cf0:	b93a      	cbnz	r2, b6d02 <_ZNK6String6equalsEPKc+0x16>
   b6cf2:	b121      	cbz	r1, b6cfe <_ZNK6String6equalsEPKc+0x12>
   b6cf4:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b6cf6:	fab0 f080 	clz	r0, r0
   b6cfa:	0940      	lsrs	r0, r0, #5
   b6cfc:	e000      	b.n	b6d00 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b6cfe:	2001      	movs	r0, #1
}
   b6d00:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b6d02:	6800      	ldr	r0, [r0, #0]
   b6d04:	b909      	cbnz	r1, b6d0a <_ZNK6String6equalsEPKc+0x1e>
   b6d06:	7800      	ldrb	r0, [r0, #0]
   b6d08:	e7f5      	b.n	b6cf6 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b6d0a:	f000 ff59 	bl	b7bc0 <strcmp>
   b6d0e:	e7f2      	b.n	b6cf6 <_ZNK6String6equalsEPKc+0xa>

000b6d10 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b6d10:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b6d12:	6883      	ldr	r3, [r0, #8]
   b6d14:	4293      	cmp	r3, r2
   b6d16:	d907      	bls.n	b6d28 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b6d18:	6804      	ldr	r4, [r0, #0]
   b6d1a:	6809      	ldr	r1, [r1, #0]
   b6d1c:	18a0      	adds	r0, r4, r2
   b6d1e:	f000 ff69 	bl	b7bf4 <strstr>
	if (found == NULL) return -1;
   b6d22:	b108      	cbz	r0, b6d28 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b6d24:	1b00      	subs	r0, r0, r4
}
   b6d26:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b6d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6d2c:	e7fb      	b.n	b6d26 <_ZNK6String7indexOfERKS_j+0x16>

000b6d2e <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b6d2e:	2200      	movs	r2, #0
   b6d30:	f7ff bfee 	b.w	b6d10 <_ZNK6String7indexOfERKS_j>

000b6d34 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b6d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b6d36:	429a      	cmp	r2, r3
{
   b6d38:	460f      	mov	r7, r1
   b6d3a:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b6d3c:	490c      	ldr	r1, [pc, #48]	; (b6d70 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b6d3e:	bf88      	it	hi
   b6d40:	4613      	movhi	r3, r2
{
   b6d42:	4614      	mov	r4, r2
   b6d44:	4606      	mov	r6, r0
	if (left > right) {
   b6d46:	bf84      	itt	hi
   b6d48:	462c      	movhi	r4, r5
   b6d4a:	461d      	movhi	r5, r3
	String out;
   b6d4c:	f7ff ff8d 	bl	b6c6a <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b6d50:	68bb      	ldr	r3, [r7, #8]
   b6d52:	42a3      	cmp	r3, r4
   b6d54:	d30a      	bcc.n	b6d6c <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b6d56:	6839      	ldr	r1, [r7, #0]
   b6d58:	42ab      	cmp	r3, r5
   b6d5a:	bf94      	ite	ls
   b6d5c:	ebc4 0203 	rsbls	r2, r4, r3
   b6d60:	ebc4 0205 	rsbhi	r2, r4, r5
   b6d64:	4421      	add	r1, r4
   b6d66:	4630      	mov	r0, r6
   b6d68:	f7ff ff66 	bl	b6c38 <_ZN6String4copyEPKcj>
	return out;
}
   b6d6c:	4630      	mov	r0, r6
   b6d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b6d70:	000b7e31 	.word	0x000b7e31

000b6d74 <_ZNK6String9substringEj>:
{
   b6d74:	b510      	push	{r4, lr}
   b6d76:	4604      	mov	r4, r0
	return substring(left, len);
   b6d78:	688b      	ldr	r3, [r1, #8]
   b6d7a:	f7ff ffdb 	bl	b6d34 <_ZNK6String9substringEjj>
}
   b6d7e:	4620      	mov	r0, r4
   b6d80:	bd10      	pop	{r4, pc}
	...

000b6d84 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6d84:	4b05      	ldr	r3, [pc, #20]	; (b6d9c <_GLOBAL__sub_I_System+0x18>)
   b6d86:	2202      	movs	r2, #2
   b6d88:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6d8a:	4b05      	ldr	r3, [pc, #20]	; (b6da0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6d8c:	4a05      	ldr	r2, [pc, #20]	; (b6da4 <_GLOBAL__sub_I_System+0x20>)
   b6d8e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6d90:	2000      	movs	r0, #0
   b6d92:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6d96:	f7ff bb07 	b.w	b63a8 <set_system_mode>
   b6d9a:	bf00      	nop
   b6d9c:	2003e6f8 	.word	0x2003e6f8
   b6da0:	2003e6ec 	.word	0x2003e6ec
   b6da4:	ffff0000 	.word	0xffff0000

000b6da8 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b6da8:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6daa:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b6dac:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6db0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6db2:	2201      	movs	r2, #1
   b6db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6db8:	f10d 0107 	add.w	r1, sp, #7
   b6dbc:	47a0      	blx	r4
}
   b6dbe:	b002      	add	sp, #8
   b6dc0:	bd10      	pop	{r4, pc}

000b6dc2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b6dc2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6dc4:	6803      	ldr	r3, [r0, #0]
   b6dc6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6dcc:	46a4      	mov	ip, r4
}
   b6dce:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6dd2:	4760      	bx	ip

000b6dd4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6dd4:	b513      	push	{r0, r1, r4, lr}
   b6dd6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b6dd8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6dda:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b6dde:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6de0:	f10d 0107 	add.w	r1, sp, #7
   b6de4:	2201      	movs	r2, #1
   b6de6:	47a0      	blx	r4
}
   b6de8:	b002      	add	sp, #8
   b6dea:	bd10      	pop	{r4, pc}

000b6dec <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b6dec:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6dee:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6df0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6df4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6df8:	429a      	cmp	r2, r3
int TCPClient::read() {
   b6dfa:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6dfc:	d008      	beq.n	b6e10 <_ZN9TCPClient4readEv+0x24>
   b6dfe:	6963      	ldr	r3, [r4, #20]
   b6e00:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6e04:	1c51      	adds	r1, r2, #1
   b6e06:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b6e0a:	4413      	add	r3, r2
   b6e0c:	7918      	ldrb	r0, [r3, #4]
}
   b6e0e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6e10:	6803      	ldr	r3, [r0, #0]
   b6e12:	691b      	ldr	r3, [r3, #16]
   b6e14:	4798      	blx	r3
   b6e16:	2800      	cmp	r0, #0
   b6e18:	d1f1      	bne.n	b6dfe <_ZN9TCPClient4readEv+0x12>
   b6e1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6e1e:	e7f6      	b.n	b6e0e <_ZN9TCPClient4readEv+0x22>

000b6e20 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6e20:	4770      	bx	lr

000b6e22 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b6e22:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b6e24:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b6e26:	43c0      	mvns	r0, r0
   b6e28:	0fc0      	lsrs	r0, r0, #31
   b6e2a:	4770      	bx	lr

000b6e2c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6e2c:	4770      	bx	lr
	...

000b6e30 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b6e30:	4b06      	ldr	r3, [pc, #24]	; (b6e4c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b6e32:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6e34:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6e36:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6e3a:	d005      	beq.n	b6e48 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6e3c:	4608      	mov	r0, r1
   b6e3e:	f000 fd5f 	bl	b7900 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b6e42:	2800      	cmp	r0, #0
   b6e44:	bf08      	it	eq
   b6e46:	2400      	moveq	r4, #0
      }
   b6e48:	4620      	mov	r0, r4
   b6e4a:	bd10      	pop	{r4, pc}
   b6e4c:	000b84d4 	.word	0x000b84d4

000b6e50 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6e50:	b510      	push	{r4, lr}
   b6e52:	21ac      	movs	r1, #172	; 0xac
   b6e54:	4604      	mov	r4, r0
   b6e56:	f7fd f920 	bl	b409a <_ZdlPvj>
   b6e5a:	4620      	mov	r0, r4
   b6e5c:	bd10      	pop	{r4, pc}

000b6e5e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b6e5e:	21ac      	movs	r1, #172	; 0xac
   b6e60:	f7fd b91b 	b.w	b409a <_ZdlPvj>

000b6e64 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6e68:	f04f 0800 	mov.w	r8, #0
   b6e6c:	b086      	sub	sp, #24
   b6e6e:	461c      	mov	r4, r3
   b6e70:	f8c0 8004 	str.w	r8, [r0, #4]
   b6e74:	4605      	mov	r5, r0
   b6e76:	460e      	mov	r6, r1
   b6e78:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6e7a:	4641      	mov	r1, r8
   b6e7c:	2210      	movs	r2, #16
   b6e7e:	a802      	add	r0, sp, #8
   b6e80:	f000 fe68 	bl	b7b54 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6e84:	1c63      	adds	r3, r4, #1
   b6e86:	d009      	beq.n	b6e9c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6e88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6e8c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6e90:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6e94:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6e98:	435c      	muls	r4, r3
   b6e9a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6e9c:	6968      	ldr	r0, [r5, #20]
   b6e9e:	2310      	movs	r3, #16
   b6ea0:	9300      	str	r3, [sp, #0]
   b6ea2:	6800      	ldr	r0, [r0, #0]
   b6ea4:	ab02      	add	r3, sp, #8
   b6ea6:	f241 0205 	movw	r2, #4101	; 0x1005
   b6eaa:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6eae:	f7ff f96b 	bl	b6188 <sock_setsockopt>
    if (ret < 0) {
   b6eb2:	2800      	cmp	r0, #0
   b6eb4:	da07      	bge.n	b6ec6 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b6eb6:	f7ff fb2b 	bl	b6510 <__errno>
   b6eba:	6803      	ldr	r3, [r0, #0]
   b6ebc:	606b      	str	r3, [r5, #4]
        return 0;
   b6ebe:	2000      	movs	r0, #0
}
   b6ec0:	b006      	add	sp, #24
   b6ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b6ec6:	6968      	ldr	r0, [r5, #20]
   b6ec8:	2300      	movs	r3, #0
   b6eca:	6800      	ldr	r0, [r0, #0]
   b6ecc:	463a      	mov	r2, r7
   b6ece:	4631      	mov	r1, r6
   b6ed0:	f7ff f97a 	bl	b61c8 <sock_send>
    if (ret < 0) {
   b6ed4:	1e03      	subs	r3, r0, #0
   b6ed6:	dbee      	blt.n	b6eb6 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b6ed8:	4618      	mov	r0, r3
   b6eda:	e7f1      	b.n	b6ec0 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b6edc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b6edc:	b530      	push	{r4, r5, lr}
   b6ede:	b087      	sub	sp, #28
   b6ee0:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b6ee2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b6ee4:	4668      	mov	r0, sp
   b6ee6:	f7ff fc51 	bl	b678c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6eea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6eec:	3404      	adds	r4, #4
   b6eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6ef0:	682b      	ldr	r3, [r5, #0]
   b6ef2:	7023      	strb	r3, [r4, #0]
    }
   b6ef4:	b007      	add	sp, #28
   b6ef6:	bd30      	pop	{r4, r5, pc}

000b6ef8 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b6ef8:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b6efa:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b6efc:	4b05      	ldr	r3, [pc, #20]	; (b6f14 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b6efe:	4604      	mov	r4, r0
   b6f00:	358c      	adds	r5, #140	; 0x8c
   b6f02:	f844 3b04 	str.w	r3, [r4], #4
   b6f06:	4606      	mov	r6, r0
   b6f08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6f0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6f0c:	682b      	ldr	r3, [r5, #0]
   b6f0e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b6f10:	4630      	mov	r0, r6
   b6f12:	bd70      	pop	{r4, r5, r6, pc}
   b6f14:	000b8548 	.word	0x000b8548

000b6f18 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6f18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6f1c:	4698      	mov	r8, r3
    stop();
   b6f1e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6f20:	b093      	sub	sp, #76	; 0x4c
   b6f22:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b6f24:	2400      	movs	r4, #0
    stop();
   b6f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6f28:	4606      	mov	r6, r0
   b6f2a:	4617      	mov	r7, r2
    stop();
   b6f2c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6f2e:	4628      	mov	r0, r5
   b6f30:	466b      	mov	r3, sp
   b6f32:	4622      	mov	r2, r4
   b6f34:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b6f36:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6f38:	f7ff f91e 	bl	b6178 <netdb_getaddrinfo>
   b6f3c:	4605      	mov	r5, r0
   b6f3e:	2800      	cmp	r0, #0
   b6f40:	d163      	bne.n	b700a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b6f42:	9b00      	ldr	r3, [sp, #0]
   b6f44:	2b00      	cmp	r3, #0
   b6f46:	d04b      	beq.n	b6fe0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b6f48:	695b      	ldr	r3, [r3, #20]
   b6f4a:	2b00      	cmp	r3, #0
   b6f4c:	d048      	beq.n	b6fe0 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b6f4e:	a806      	add	r0, sp, #24
   b6f50:	f7ff fbd8 	bl	b6704 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b6f54:	9b00      	ldr	r3, [sp, #0]
   b6f56:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6f58:	7863      	ldrb	r3, [r4, #1]
   b6f5a:	2b02      	cmp	r3, #2
   b6f5c:	d104      	bne.n	b6f68 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b6f5e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b6f60:	a806      	add	r0, sp, #24
   b6f62:	f7ff ffbb 	bl	b6edc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b6f66:	e026      	b.n	b6fb6 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6f68:	2b0a      	cmp	r3, #10
   b6f6a:	d124      	bne.n	b6fb6 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b6f6c:	2211      	movs	r2, #17
   b6f6e:	4629      	mov	r1, r5
   b6f70:	a801      	add	r0, sp, #4
   b6f72:	f000 fdef 	bl	b7b54 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6f76:	68a3      	ldr	r3, [r4, #8]
   b6f78:	2b00      	cmp	r3, #0
   b6f7a:	d038      	beq.n	b6fee <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6f7c:	f104 0308 	add.w	r3, r4, #8
   b6f80:	f10d 0c04 	add.w	ip, sp, #4
   b6f84:	3418      	adds	r4, #24
   b6f86:	6818      	ldr	r0, [r3, #0]
   b6f88:	6859      	ldr	r1, [r3, #4]
   b6f8a:	4662      	mov	r2, ip
   b6f8c:	c203      	stmia	r2!, {r0, r1}
   b6f8e:	3308      	adds	r3, #8
   b6f90:	42a3      	cmp	r3, r4
   b6f92:	4694      	mov	ip, r2
   b6f94:	d1f7      	bne.n	b6f86 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b6f96:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6f98:	a901      	add	r1, sp, #4
   b6f9a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b6f9c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b6fa0:	f7ff fbbe 	bl	b6720 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6fa4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6fa8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6fac:	ac07      	add	r4, sp, #28
   b6fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6fb0:	f8dc 3000 	ldr.w	r3, [ip]
   b6fb4:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b6fb6:	a806      	add	r0, sp, #24
   b6fb8:	f7ff fbc4 	bl	b6744 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b6fbc:	b180      	cbz	r0, b6fe0 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b6fbe:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b6fc0:	ad07      	add	r5, sp, #28
   b6fc2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b6fc6:	4b12      	ldr	r3, [pc, #72]	; (b7010 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b6fc8:	930c      	str	r3, [sp, #48]	; 0x30
   b6fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6fcc:	ac0d      	add	r4, sp, #52	; 0x34
   b6fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6fd0:	682b      	ldr	r3, [r5, #0]
   b6fd2:	7023      	strb	r3, [r4, #0]
   b6fd4:	463a      	mov	r2, r7
   b6fd6:	4643      	mov	r3, r8
   b6fd8:	a90c      	add	r1, sp, #48	; 0x30
   b6fda:	4630      	mov	r0, r6
   b6fdc:	47c8      	blx	r9
   b6fde:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b6fe0:	9800      	ldr	r0, [sp, #0]
   b6fe2:	f7ff f8c1 	bl	b6168 <netdb_freeaddrinfo>
}
   b6fe6:	4628      	mov	r0, r5
   b6fe8:	b013      	add	sp, #76	; 0x4c
   b6fea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6fee:	68e3      	ldr	r3, [r4, #12]
   b6ff0:	2b00      	cmp	r3, #0
   b6ff2:	d1c3      	bne.n	b6f7c <_ZN9TCPClient7connectEPKctm+0x64>
   b6ff4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b6ff8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b6ffc:	f7ff f8a4 	bl	b6148 <inet_htonl>
   b7000:	4581      	cmp	r9, r0
   b7002:	d1bb      	bne.n	b6f7c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b7004:	f104 0114 	add.w	r1, r4, #20
   b7008:	e7aa      	b.n	b6f60 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b700a:	4625      	mov	r5, r4
   b700c:	e7e8      	b.n	b6fe0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b700e:	bf00      	nop
   b7010:	000b8548 	.word	0x000b8548

000b7014 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b7014:	b538      	push	{r3, r4, r5, lr}
   b7016:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7018:	681a      	ldr	r2, [r3, #0]
   b701a:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b701c:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b701e:	da10      	bge.n	b7042 <_ZN9TCPClient9connectedEv+0x2e>
   b7020:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7024:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7028:	429a      	cmp	r2, r3
   b702a:	d10a      	bne.n	b7042 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b702c:	6803      	ldr	r3, [r0, #0]
   b702e:	691b      	ldr	r3, [r3, #16]
   b7030:	4798      	blx	r3
        if (!rv) {
   b7032:	4604      	mov	r4, r0
   b7034:	b928      	cbnz	r0, b7042 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b7036:	682b      	ldr	r3, [r5, #0]
   b7038:	4628      	mov	r0, r5
   b703a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b703c:	4798      	blx	r3
        rv = available();
   b703e:	4620      	mov	r0, r4
}
   b7040:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b7042:	2001      	movs	r0, #1
   b7044:	e7fc      	b.n	b7040 <_ZN9TCPClient9connectedEv+0x2c>

000b7046 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b7046:	b510      	push	{r4, lr}
   b7048:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b704a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b704e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7052:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b7054:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7056:	d005      	beq.n	b7064 <_ZN9TCPClient4peekEv+0x1e>
   b7058:	6963      	ldr	r3, [r4, #20]
   b705a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b705e:	4413      	add	r3, r2
   b7060:	7918      	ldrb	r0, [r3, #4]
}
   b7062:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7064:	6803      	ldr	r3, [r0, #0]
   b7066:	691b      	ldr	r3, [r3, #16]
   b7068:	4798      	blx	r3
   b706a:	2800      	cmp	r0, #0
   b706c:	d1f4      	bne.n	b7058 <_ZN9TCPClient4peekEv+0x12>
   b706e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7072:	e7f6      	b.n	b7062 <_ZN9TCPClient4peekEv+0x1c>

000b7074 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7076:	6943      	ldr	r3, [r0, #20]
   b7078:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b707a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b707e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7082:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7084:	4605      	mov	r5, r0
   b7086:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7088:	d016      	beq.n	b70b8 <_ZN9TCPClient4readEPhj+0x44>
   b708a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b708c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7090:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7094:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b7096:	42bc      	cmp	r4, r7
   b7098:	bf28      	it	cs
   b709a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b709c:	3304      	adds	r3, #4
   b709e:	4622      	mov	r2, r4
   b70a0:	4419      	add	r1, r3
   b70a2:	4630      	mov	r0, r6
   b70a4:	f000 fd48 	bl	b7b38 <memcpy>
   b70a8:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b70aa:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b70ae:	4423      	add	r3, r4
   b70b0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b70b4:	4620      	mov	r0, r4
   b70b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b70b8:	6803      	ldr	r3, [r0, #0]
   b70ba:	691b      	ldr	r3, [r3, #16]
   b70bc:	4798      	blx	r3
   b70be:	2800      	cmp	r0, #0
   b70c0:	d1e3      	bne.n	b708a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b70c2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b70c6:	e7f5      	b.n	b70b4 <_ZN9TCPClient4readEPhj+0x40>

000b70c8 <_ZN9TCPClient12flush_bufferEv>:
   b70c8:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b70ca:	2300      	movs	r3, #0
   b70cc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b70d0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b70d2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b70d6:	4770      	bx	lr

000b70d8 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b70d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b70dc:	461f      	mov	r7, r3
    stop();
   b70de:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b70e0:	460c      	mov	r4, r1
    stop();
   b70e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b70e4:	b08a      	sub	sp, #40	; 0x28
   b70e6:	4605      	mov	r5, r0
   b70e8:	4616      	mov	r6, r2
    stop();
   b70ea:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b70ec:	7d23      	ldrb	r3, [r4, #20]
   b70ee:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b70f2:	2b04      	cmp	r3, #4
   b70f4:	bf0c      	ite	eq
   b70f6:	2002      	moveq	r0, #2
   b70f8:	200a      	movne	r0, #10
   b70fa:	2206      	movs	r2, #6
   b70fc:	2101      	movs	r1, #1
   b70fe:	f7ff f86b 	bl	b61d8 <sock_socket>
   b7102:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7106:	696b      	ldr	r3, [r5, #20]
   b7108:	681b      	ldr	r3, [r3, #0]
   b710a:	2b00      	cmp	r3, #0
   b710c:	da08      	bge.n	b7120 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b710e:	682b      	ldr	r3, [r5, #0]
   b7110:	4628      	mov	r0, r5
   b7112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7114:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b7116:	4798      	blx	r3
}
   b7118:	4620      	mov	r0, r4
   b711a:	b00a      	add	sp, #40	; 0x28
   b711c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7120:	4628      	mov	r0, r5
   b7122:	f7ff ffd1 	bl	b70c8 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b7126:	b1b7      	cbz	r7, b7156 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7128:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b712a:	a903      	add	r1, sp, #12
   b712c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b712e:	9303      	str	r3, [sp, #12]
   b7130:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7134:	f7fe fff8 	bl	b6128 <if_index_to_name>
   b7138:	2800      	cmp	r0, #0
   b713a:	d1e8      	bne.n	b710e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b713c:	6968      	ldr	r0, [r5, #20]
   b713e:	2306      	movs	r3, #6
   b7140:	9300      	str	r3, [sp, #0]
   b7142:	6800      	ldr	r0, [r0, #0]
   b7144:	ab03      	add	r3, sp, #12
   b7146:	f241 020b 	movw	r2, #4107	; 0x100b
   b714a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b714e:	f7ff f81b 	bl	b6188 <sock_setsockopt>
   b7152:	2800      	cmp	r0, #0
   b7154:	d1db      	bne.n	b710e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b7156:	221c      	movs	r2, #28
   b7158:	2100      	movs	r1, #0
   b715a:	a803      	add	r0, sp, #12
   b715c:	f000 fcfa 	bl	b7b54 <memset>
    if (ip.version() == 4) {
   b7160:	7d23      	ldrb	r3, [r4, #20]
   b7162:	2b04      	cmp	r3, #4
   b7164:	d11d      	bne.n	b71a2 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b7166:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b716a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b716c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7170:	f7fe fff2 	bl	b6158 <inet_htons>
   b7174:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7178:	6860      	ldr	r0, [r4, #4]
   b717a:	f7fe ffe5 	bl	b6148 <inet_htonl>
   b717e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7180:	696b      	ldr	r3, [r5, #20]
   b7182:	221c      	movs	r2, #28
   b7184:	6818      	ldr	r0, [r3, #0]
   b7186:	a903      	add	r1, sp, #12
   b7188:	f7ff f80e 	bl	b61a8 <sock_connect>
   b718c:	2800      	cmp	r0, #0
   b718e:	d1be      	bne.n	b710e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7190:	3404      	adds	r4, #4
   b7192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7194:	696d      	ldr	r5, [r5, #20]
   b7196:	358c      	adds	r5, #140	; 0x8c
   b7198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b719a:	6823      	ldr	r3, [r4, #0]
   b719c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b719e:	2401      	movs	r4, #1
   b71a0:	e7ba      	b.n	b7118 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b71a2:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b71a6:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b71a8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b71ac:	f7fe ffd4 	bl	b6158 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b71b0:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b71b2:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b71b6:	1d23      	adds	r3, r4, #4
   b71b8:	f104 0714 	add.w	r7, r4, #20
   b71bc:	6818      	ldr	r0, [r3, #0]
   b71be:	6859      	ldr	r1, [r3, #4]
   b71c0:	4632      	mov	r2, r6
   b71c2:	c203      	stmia	r2!, {r0, r1}
   b71c4:	3308      	adds	r3, #8
   b71c6:	42bb      	cmp	r3, r7
   b71c8:	4616      	mov	r6, r2
   b71ca:	d1f7      	bne.n	b71bc <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b71cc:	e7d8      	b.n	b7180 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b71d0 <_ZN9TCPClient9availableEv>:
{
   b71d0:	b530      	push	{r4, r5, lr}
   b71d2:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b71d4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b71d8:	b08b      	sub	sp, #44	; 0x2c
   b71da:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b71dc:	b12b      	cbz	r3, b71ea <_ZN9TCPClient9availableEv+0x1a>
   b71de:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b71e2:	429a      	cmp	r2, r3
   b71e4:	d101      	bne.n	b71ea <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b71e6:	f7ff ff6f 	bl	b70c8 <_ZN9TCPClient12flush_bufferEv>
   b71ea:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b71ec:	6808      	ldr	r0, [r1, #0]
   b71ee:	2800      	cmp	r0, #0
   b71f0:	db18      	blt.n	b7224 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b71f2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b71f6:	2d7f      	cmp	r5, #127	; 0x7f
   b71f8:	d814      	bhi.n	b7224 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b71fa:	3104      	adds	r1, #4
   b71fc:	2308      	movs	r3, #8
   b71fe:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b7202:	4429      	add	r1, r5
   b7204:	f7fe ffd8 	bl	b61b8 <sock_recv>
            if (ret > 0) {
   b7208:	2800      	cmp	r0, #0
   b720a:	dd13      	ble.n	b7234 <_ZN9TCPClient9availableEv+0x64>
   b720c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b720e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7212:	b90a      	cbnz	r2, b7218 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7214:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7218:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b721a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b721e:	4410      	add	r0, r2
   b7220:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7224:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7226:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b722a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b722e:	1ac0      	subs	r0, r0, r3
   b7230:	b00b      	add	sp, #44	; 0x2c
   b7232:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7234:	f7ff f96c 	bl	b6510 <__errno>
   b7238:	6803      	ldr	r3, [r0, #0]
   b723a:	2b0b      	cmp	r3, #11
   b723c:	d0f2      	beq.n	b7224 <_ZN9TCPClient9availableEv+0x54>
   b723e:	f7ff f967 	bl	b6510 <__errno>
   b7242:	6803      	ldr	r3, [r0, #0]
   b7244:	2b0b      	cmp	r3, #11
   b7246:	d0ed      	beq.n	b7224 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7248:	2320      	movs	r3, #32
   b724a:	2500      	movs	r5, #0
   b724c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7250:	f7ff f95e 	bl	b6510 <__errno>
   b7254:	6803      	ldr	r3, [r0, #0]
   b7256:	9301      	str	r3, [sp, #4]
   b7258:	4b08      	ldr	r3, [pc, #32]	; (b727c <_ZN9TCPClient9availableEv+0xac>)
   b725a:	4909      	ldr	r1, [pc, #36]	; (b7280 <_ZN9TCPClient9availableEv+0xb0>)
   b725c:	9300      	str	r3, [sp, #0]
   b725e:	aa02      	add	r2, sp, #8
   b7260:	462b      	mov	r3, r5
   b7262:	2032      	movs	r0, #50	; 0x32
   b7264:	f7ff f898 	bl	b6398 <log_message>
                    sock_close(d_->sock);
   b7268:	6963      	ldr	r3, [r4, #20]
   b726a:	6818      	ldr	r0, [r3, #0]
   b726c:	f7fe ff94 	bl	b6198 <sock_close>
   b7270:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7272:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7276:	601a      	str	r2, [r3, #0]
   b7278:	e7d4      	b.n	b7224 <_ZN9TCPClient9availableEv+0x54>
   b727a:	bf00      	nop
   b727c:	000b85a3 	.word	0x000b85a3
   b7280:	000b859c 	.word	0x000b859c

000b7284 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7284:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7286:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7288:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b728a:	6818      	ldr	r0, [r3, #0]
   b728c:	2800      	cmp	r0, #0
   b728e:	db01      	blt.n	b7294 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7290:	f7fe ff82 	bl	b6198 <sock_close>
   b7294:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7296:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b729a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b729c:	6960      	ldr	r0, [r4, #20]
   b729e:	2211      	movs	r2, #17
   b72a0:	2100      	movs	r1, #0
   b72a2:	308c      	adds	r0, #140	; 0x8c
   b72a4:	f000 fc56 	bl	b7b54 <memset>
    flush_buffer();
   b72a8:	4620      	mov	r0, r4
}
   b72aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b72ae:	f7ff bf0b 	b.w	b70c8 <_ZN9TCPClient12flush_bufferEv>

000b72b2 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b72b2:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b72b4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b72b6:	4604      	mov	r4, r0
          total(0) {
   b72b8:	6001      	str	r1, [r0, #0]
   b72ba:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b72be:	3088      	adds	r0, #136	; 0x88
   b72c0:	f7ff fa20 	bl	b6704 <_ZN9IPAddressC1Ev>
}
   b72c4:	4620      	mov	r0, r4
   b72c6:	bd10      	pop	{r4, pc}

000b72c8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b72c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b72ca:	2300      	movs	r3, #0
   b72cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b72d0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b72d4:	4a0e      	ldr	r2, [pc, #56]	; (b7310 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b72d6:	6103      	str	r3, [r0, #16]
   b72d8:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b72da:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b72dc:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b72de:	20ac      	movs	r0, #172	; 0xac
   b72e0:	9101      	str	r1, [sp, #4]
   b72e2:	f7fc fed6 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b72e6:	1e05      	subs	r5, r0, #0
   b72e8:	f105 060c 	add.w	r6, r5, #12
   b72ec:	d008      	beq.n	b7300 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b72ee:	2301      	movs	r3, #1
   b72f0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b72f4:	4b07      	ldr	r3, [pc, #28]	; (b7314 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b72f6:	9901      	ldr	r1, [sp, #4]
   b72f8:	602b      	str	r3, [r5, #0]
   b72fa:	4630      	mov	r0, r6
   b72fc:	f7ff ffd9 	bl	b72b2 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7300:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b7302:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b7306:	f7ff fedf 	bl	b70c8 <_ZN9TCPClient12flush_bufferEv>
}
   b730a:	b002      	add	sp, #8
   b730c:	bd70      	pop	{r4, r5, r6, pc}
   b730e:	bf00      	nop
   b7310:	000b85d8 	.word	0x000b85d8
   b7314:	000b85bc 	.word	0x000b85bc

000b7318 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7318:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b731a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b731e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7320:	f7ff ffd2 	bl	b72c8 <_ZN9TCPClientC1Ei>
}
   b7324:	4620      	mov	r0, r4
   b7326:	bd10      	pop	{r4, pc}

000b7328 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7328:	b510      	push	{r4, lr}
   b732a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b732c:	6800      	ldr	r0, [r0, #0]
   b732e:	2800      	cmp	r0, #0
   b7330:	db01      	blt.n	b7336 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b7332:	f7fe ff31 	bl	b6198 <sock_close>
    }
}
   b7336:	4620      	mov	r0, r4
   b7338:	bd10      	pop	{r4, pc}

000b733a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b733a:	300c      	adds	r0, #12
   b733c:	f7ff bff4 	b.w	b7328 <_ZN9TCPClient4DataD1Ev>

000b7340 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7340:	4b02      	ldr	r3, [pc, #8]	; (b734c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7342:	681a      	ldr	r2, [r3, #0]
   b7344:	4b02      	ldr	r3, [pc, #8]	; (b7350 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7346:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7348:	4770      	bx	lr
   b734a:	bf00      	nop
   b734c:	2003de18 	.word	0x2003de18
   b7350:	2003e6fc 	.word	0x2003e6fc

000b7354 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7354:	4770      	bx	lr

000b7356 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7356:	7441      	strb	r1, [r0, #17]
}
   b7358:	4770      	bx	lr

000b735a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b735a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b735c:	7c00      	ldrb	r0, [r0, #16]
   b735e:	f7fe ffc3 	bl	b62e8 <hal_usart_available_data_for_write>
}
   b7362:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7366:	bd08      	pop	{r3, pc}

000b7368 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7368:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b736a:	7c00      	ldrb	r0, [r0, #16]
   b736c:	f7fe ff94 	bl	b6298 <hal_usart_available>
}
   b7370:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7374:	bd08      	pop	{r3, pc}

000b7376 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7376:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7378:	7c00      	ldrb	r0, [r0, #16]
   b737a:	f7fe ff9d 	bl	b62b8 <hal_usart_peek>
}
   b737e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7382:	bd08      	pop	{r3, pc}

000b7384 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7384:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7386:	7c00      	ldrb	r0, [r0, #16]
   b7388:	f7fe ff8e 	bl	b62a8 <hal_usart_read>
}
   b738c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7390:	bd08      	pop	{r3, pc}

000b7392 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7392:	7c00      	ldrb	r0, [r0, #16]
   b7394:	f7fe bf98 	b.w	b62c8 <hal_usart_flush>

000b7398 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7398:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b739a:	7c45      	ldrb	r5, [r0, #17]
{
   b739c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b739e:	b12d      	cbz	r5, b73ac <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b73a0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b73a2:	b003      	add	sp, #12
   b73a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b73a8:	f7fe bf6e 	b.w	b6288 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b73ac:	7c00      	ldrb	r0, [r0, #16]
   b73ae:	9101      	str	r1, [sp, #4]
   b73b0:	f7fe ff9a 	bl	b62e8 <hal_usart_available_data_for_write>
   b73b4:	2800      	cmp	r0, #0
   b73b6:	9901      	ldr	r1, [sp, #4]
   b73b8:	dcf2      	bgt.n	b73a0 <_ZN11USARTSerial5writeEh+0x8>
}
   b73ba:	4628      	mov	r0, r5
   b73bc:	b003      	add	sp, #12
   b73be:	bd30      	pop	{r4, r5, pc}

000b73c0 <_ZN11USARTSerialD0Ev>:
   b73c0:	b510      	push	{r4, lr}
   b73c2:	2114      	movs	r1, #20
   b73c4:	4604      	mov	r4, r0
   b73c6:	f7fc fe68 	bl	b409a <_ZdlPvj>
   b73ca:	4620      	mov	r0, r4
   b73cc:	bd10      	pop	{r4, pc}
	...

000b73d0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b73d0:	b510      	push	{r4, lr}
   b73d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b73d6:	4604      	mov	r4, r0
   b73d8:	4608      	mov	r0, r1
   b73da:	4611      	mov	r1, r2
   b73dc:	2200      	movs	r2, #0
   b73de:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b73e2:	4b04      	ldr	r3, [pc, #16]	; (b73f4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b73e4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b73e6:	2301      	movs	r3, #1
  _serial = serial;
   b73e8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b73ea:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b73ec:	f7fe ff84 	bl	b62f8 <hal_usart_init_ex>
}
   b73f0:	4620      	mov	r0, r4
   b73f2:	bd10      	pop	{r4, pc}
   b73f4:	000b8640 	.word	0x000b8640

000b73f8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b73f8:	7441      	strb	r1, [r0, #17]
}
   b73fa:	4770      	bx	lr

000b73fc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b73fc:	4770      	bx	lr

000b73fe <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b73fe:	4770      	bx	lr

000b7400 <_ZN9USBSerial4readEv>:
{
   b7400:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7402:	2100      	movs	r1, #0
   b7404:	7c00      	ldrb	r0, [r0, #16]
   b7406:	f7fe ff9f 	bl	b6348 <HAL_USB_USART_Receive_Data>
}
   b740a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b740e:	bd08      	pop	{r3, pc}

000b7410 <_ZN9USBSerial4peekEv>:
{
   b7410:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7412:	2101      	movs	r1, #1
   b7414:	7c00      	ldrb	r0, [r0, #16]
   b7416:	f7fe ff97 	bl	b6348 <HAL_USB_USART_Receive_Data>
}
   b741a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b741e:	bd08      	pop	{r3, pc}

000b7420 <_ZN9USBSerial17availableForWriteEv>:
{
   b7420:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7422:	7c00      	ldrb	r0, [r0, #16]
   b7424:	f7fe ff88 	bl	b6338 <HAL_USB_USART_Available_Data_For_Write>
}
   b7428:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b742c:	bd08      	pop	{r3, pc}

000b742e <_ZN9USBSerial9availableEv>:
{
   b742e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7430:	7c00      	ldrb	r0, [r0, #16]
   b7432:	f7fe ff79 	bl	b6328 <HAL_USB_USART_Available_Data>
}
   b7436:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b743a:	bd08      	pop	{r3, pc}

000b743c <_ZN9USBSerial5writeEh>:
{
   b743c:	b513      	push	{r0, r1, r4, lr}
   b743e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7440:	7c00      	ldrb	r0, [r0, #16]
{
   b7442:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7444:	f7fe ff78 	bl	b6338 <HAL_USB_USART_Available_Data_For_Write>
   b7448:	2800      	cmp	r0, #0
   b744a:	9901      	ldr	r1, [sp, #4]
   b744c:	dc01      	bgt.n	b7452 <_ZN9USBSerial5writeEh+0x16>
   b744e:	7c60      	ldrb	r0, [r4, #17]
   b7450:	b120      	cbz	r0, b745c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7452:	7c20      	ldrb	r0, [r4, #16]
   b7454:	f7fe ff80 	bl	b6358 <HAL_USB_USART_Send_Data>
   b7458:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b745c:	b002      	add	sp, #8
   b745e:	bd10      	pop	{r4, pc}

000b7460 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7460:	7c00      	ldrb	r0, [r0, #16]
   b7462:	f7fe bf81 	b.w	b6368 <HAL_USB_USART_Flush_Data>

000b7466 <_ZN9USBSerialD0Ev>:
   b7466:	b510      	push	{r4, lr}
   b7468:	2114      	movs	r1, #20
   b746a:	4604      	mov	r4, r0
   b746c:	f7fc fe15 	bl	b409a <_ZdlPvj>
   b7470:	4620      	mov	r0, r4
   b7472:	bd10      	pop	{r4, pc}

000b7474 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7474:	b510      	push	{r4, lr}
   b7476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b747a:	4604      	mov	r4, r0
   b747c:	4608      	mov	r0, r1
   b747e:	2100      	movs	r1, #0
   b7480:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7484:	4b04      	ldr	r3, [pc, #16]	; (b7498 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7486:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7488:	2301      	movs	r3, #1
  _serial = serial;
   b748a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b748c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b748e:	4611      	mov	r1, r2
   b7490:	f7fe ff3a 	bl	b6308 <HAL_USB_USART_Init>
}
   b7494:	4620      	mov	r0, r4
   b7496:	bd10      	pop	{r4, pc}
   b7498:	000b8670 	.word	0x000b8670

000b749c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b749c:	7c00      	ldrb	r0, [r0, #16]
   b749e:	2200      	movs	r2, #0
   b74a0:	f7fe bf3a 	b.w	b6318 <HAL_USB_USART_Begin>

000b74a4 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b74a4:	7c00      	ldrb	r0, [r0, #16]
   b74a6:	f7fe bf67 	b.w	b6378 <HAL_USB_USART_Is_Connected>

000b74aa <_Z19acquireSerialBufferv>:
{
   b74aa:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b74ac:	2214      	movs	r2, #20
{
   b74ae:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b74b0:	2100      	movs	r1, #0
   b74b2:	f000 fb4f 	bl	b7b54 <memset>
}
   b74b6:	4620      	mov	r0, r4
   b74b8:	bd10      	pop	{r4, pc}
	...

000b74bc <_Z16_fetch_usbserialv>:
{
   b74bc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b74be:	4c0f      	ldr	r4, [pc, #60]	; (b74fc <_Z16_fetch_usbserialv+0x40>)
{
   b74c0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b74c2:	a803      	add	r0, sp, #12
   b74c4:	f7ff fff1 	bl	b74aa <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b74c8:	7821      	ldrb	r1, [r4, #0]
   b74ca:	f3bf 8f5b 	dmb	ish
   b74ce:	f011 0101 	ands.w	r1, r1, #1
   b74d2:	d10f      	bne.n	b74f4 <_Z16_fetch_usbserialv+0x38>
   b74d4:	4620      	mov	r0, r4
   b74d6:	9101      	str	r1, [sp, #4]
   b74d8:	f7fc fdee 	bl	b40b8 <__cxa_guard_acquire>
   b74dc:	9901      	ldr	r1, [sp, #4]
   b74de:	b148      	cbz	r0, b74f4 <_Z16_fetch_usbserialv+0x38>
   b74e0:	aa03      	add	r2, sp, #12
   b74e2:	4807      	ldr	r0, [pc, #28]	; (b7500 <_Z16_fetch_usbserialv+0x44>)
   b74e4:	f7ff ffc6 	bl	b7474 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b74e8:	4620      	mov	r0, r4
   b74ea:	f7fc fdea 	bl	b40c2 <__cxa_guard_release>
   b74ee:	4805      	ldr	r0, [pc, #20]	; (b7504 <_Z16_fetch_usbserialv+0x48>)
   b74f0:	f000 fb18 	bl	b7b24 <atexit>
	return _usbserial;
}
   b74f4:	4802      	ldr	r0, [pc, #8]	; (b7500 <_Z16_fetch_usbserialv+0x44>)
   b74f6:	b008      	add	sp, #32
   b74f8:	bd10      	pop	{r4, pc}
   b74fa:	bf00      	nop
   b74fc:	2003e700 	.word	0x2003e700
   b7500:	2003e704 	.word	0x2003e704
   b7504:	000b73fd 	.word	0x000b73fd

000b7508 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7508:	2200      	movs	r2, #0
   b750a:	6840      	ldr	r0, [r0, #4]
   b750c:	4611      	mov	r1, r2
   b750e:	f7fe bf97 	b.w	b6440 <network_ready>

000b7512 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7512:	2200      	movs	r2, #0
   b7514:	6840      	ldr	r0, [r0, #4]
   b7516:	4611      	mov	r1, r2
   b7518:	f7fe bfb2 	b.w	b6480 <network_listening>

000b751c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b751c:	2200      	movs	r2, #0
   b751e:	6840      	ldr	r0, [r0, #4]
   b7520:	4611      	mov	r1, r2
   b7522:	f7fe bfbd 	b.w	b64a0 <network_get_listen_timeout>

000b7526 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7526:	6840      	ldr	r0, [r0, #4]
   b7528:	2200      	movs	r2, #0
   b752a:	f7fe bfb1 	b.w	b6490 <network_set_listen_timeout>

000b752e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b752e:	6840      	ldr	r0, [r0, #4]
   b7530:	2200      	movs	r2, #0
   b7532:	f081 0101 	eor.w	r1, r1, #1
   b7536:	f7fe bf9b 	b.w	b6470 <network_listen>

000b753a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b753a:	2300      	movs	r3, #0
   b753c:	6840      	ldr	r0, [r0, #4]
   b753e:	461a      	mov	r2, r3
   b7540:	4619      	mov	r1, r3
   b7542:	f7fe bf8d 	b.w	b6460 <network_off>

000b7546 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7546:	2300      	movs	r3, #0
   b7548:	6840      	ldr	r0, [r0, #4]
   b754a:	461a      	mov	r2, r3
   b754c:	4619      	mov	r1, r3
   b754e:	f7fe bf7f 	b.w	b6450 <network_on>

000b7552 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7552:	2200      	movs	r2, #0
   b7554:	6840      	ldr	r0, [r0, #4]
   b7556:	4611      	mov	r1, r2
   b7558:	f7fe bf62 	b.w	b6420 <network_connecting>

000b755c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b755c:	6840      	ldr	r0, [r0, #4]
   b755e:	2200      	movs	r2, #0
   b7560:	2102      	movs	r1, #2
   b7562:	f7fe bf65 	b.w	b6430 <network_disconnect>

000b7566 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7566:	2300      	movs	r3, #0
   b7568:	6840      	ldr	r0, [r0, #4]
   b756a:	461a      	mov	r2, r3
   b756c:	f7fe bf50 	b.w	b6410 <network_connect>

000b7570 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7570:	4b02      	ldr	r3, [pc, #8]	; (b757c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7572:	2204      	movs	r2, #4
   b7574:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7576:	4a02      	ldr	r2, [pc, #8]	; (b7580 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7578:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b757a:	4770      	bx	lr
   b757c:	2003e718 	.word	0x2003e718
   b7580:	000b86a0 	.word	0x000b86a0

000b7584 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7584:	4b01      	ldr	r3, [pc, #4]	; (b758c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7586:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7588:	4770      	bx	lr
   b758a:	bf00      	nop
   b758c:	2003de1c 	.word	0x2003de1c

000b7590 <serialEventRun>:
{
   b7590:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7592:	4b0b      	ldr	r3, [pc, #44]	; (b75c0 <serialEventRun+0x30>)
   b7594:	b143      	cbz	r3, b75a8 <serialEventRun+0x18>
   b7596:	f7ff ff91 	bl	b74bc <_Z16_fetch_usbserialv>
   b759a:	6803      	ldr	r3, [r0, #0]
   b759c:	691b      	ldr	r3, [r3, #16]
   b759e:	4798      	blx	r3
   b75a0:	2800      	cmp	r0, #0
   b75a2:	dd01      	ble.n	b75a8 <serialEventRun+0x18>
        serialEvent();
   b75a4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b75a8:	4b06      	ldr	r3, [pc, #24]	; (b75c4 <serialEventRun+0x34>)
   b75aa:	b143      	cbz	r3, b75be <serialEventRun+0x2e>
   b75ac:	f000 f982 	bl	b78b4 <_Z22__fetch_global_Serial1v>
   b75b0:	6803      	ldr	r3, [r0, #0]
   b75b2:	691b      	ldr	r3, [r3, #16]
   b75b4:	4798      	blx	r3
   b75b6:	2800      	cmp	r0, #0
   b75b8:	dd01      	ble.n	b75be <serialEventRun+0x2e>
        serialEvent1();
   b75ba:	f3af 8000 	nop.w
}
   b75be:	bd08      	pop	{r3, pc}
	...

000b75c8 <_post_loop>:
{
   b75c8:	b508      	push	{r3, lr}
	serialEventRun();
   b75ca:	f7ff ffe1 	bl	b7590 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b75ce:	f7fe fd1b 	bl	b6008 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b75d2:	4b01      	ldr	r3, [pc, #4]	; (b75d8 <_post_loop+0x10>)
   b75d4:	6018      	str	r0, [r3, #0]
}
   b75d6:	bd08      	pop	{r3, pc}
   b75d8:	2003e728 	.word	0x2003e728

000b75dc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b75dc:	4805      	ldr	r0, [pc, #20]	; (b75f4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b75de:	4a06      	ldr	r2, [pc, #24]	; (b75f8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b75e0:	4906      	ldr	r1, [pc, #24]	; (b75fc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b75e2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b75e4:	1a12      	subs	r2, r2, r0
   b75e6:	f000 faa7 	bl	b7b38 <memcpy>
    __backup_sram_signature = signature;
   b75ea:	4b05      	ldr	r3, [pc, #20]	; (b7600 <_Z33system_initialize_user_backup_ramv+0x24>)
   b75ec:	4a05      	ldr	r2, [pc, #20]	; (b7604 <_Z33system_initialize_user_backup_ramv+0x28>)
   b75ee:	601a      	str	r2, [r3, #0]
}
   b75f0:	bd08      	pop	{r3, pc}
   b75f2:	bf00      	nop
   b75f4:	2003f400 	.word	0x2003f400
   b75f8:	2003f404 	.word	0x2003f404
   b75fc:	000b8994 	.word	0x000b8994
   b7600:	2003f400 	.word	0x2003f400
   b7604:	9a271c1e 	.word	0x9a271c1e

000b7608 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7608:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b760a:	2300      	movs	r3, #0
   b760c:	9300      	str	r3, [sp, #0]
   b760e:	461a      	mov	r2, r3
   b7610:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7614:	f7fe fee2 	bl	b63dc <system_ctrl_set_result>
}
   b7618:	b003      	add	sp, #12
   b761a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7620 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7620:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7622:	8843      	ldrh	r3, [r0, #2]
   b7624:	2b0a      	cmp	r3, #10
   b7626:	d008      	beq.n	b763a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7628:	2b50      	cmp	r3, #80	; 0x50
   b762a:	d10b      	bne.n	b7644 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b762c:	4b09      	ldr	r3, [pc, #36]	; (b7654 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b762e:	681b      	ldr	r3, [r3, #0]
   b7630:	b14b      	cbz	r3, b7646 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7632:	b003      	add	sp, #12
   b7634:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7638:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b763a:	f7ff ffe5 	bl	b7608 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b763e:	b003      	add	sp, #12
   b7640:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7644:	2300      	movs	r3, #0
   b7646:	9300      	str	r3, [sp, #0]
   b7648:	461a      	mov	r2, r3
   b764a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b764e:	f7fe fec5 	bl	b63dc <system_ctrl_set_result>
}
   b7652:	e7f4      	b.n	b763e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7654:	2003e724 	.word	0x2003e724

000b7658 <module_user_init_hook>:
{
   b7658:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b765a:	4812      	ldr	r0, [pc, #72]	; (b76a4 <module_user_init_hook+0x4c>)
   b765c:	2100      	movs	r1, #0
   b765e:	f7fe ff67 	bl	b6530 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7662:	4b11      	ldr	r3, [pc, #68]	; (b76a8 <module_user_init_hook+0x50>)
   b7664:	681a      	ldr	r2, [r3, #0]
   b7666:	4b11      	ldr	r3, [pc, #68]	; (b76ac <module_user_init_hook+0x54>)
   b7668:	429a      	cmp	r2, r3
   b766a:	4b11      	ldr	r3, [pc, #68]	; (b76b0 <module_user_init_hook+0x58>)
   b766c:	bf0c      	ite	eq
   b766e:	2201      	moveq	r2, #1
   b7670:	2200      	movne	r2, #0
   b7672:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7674:	d001      	beq.n	b767a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7676:	f7ff ffb1 	bl	b75dc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b767a:	f7fe fcad 	bl	b5fd8 <HAL_RNG_GetRandomNumber>
   b767e:	4604      	mov	r4, r0
    srand(seed);
   b7680:	f000 fa70 	bl	b7b64 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7684:	4b0b      	ldr	r3, [pc, #44]	; (b76b4 <module_user_init_hook+0x5c>)
   b7686:	b113      	cbz	r3, b768e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7688:	4620      	mov	r0, r4
   b768a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b768e:	2100      	movs	r1, #0
   b7690:	4808      	ldr	r0, [pc, #32]	; (b76b4 <module_user_init_hook+0x5c>)
   b7692:	f7fe feb5 	bl	b6400 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b769a:	4807      	ldr	r0, [pc, #28]	; (b76b8 <module_user_init_hook+0x60>)
   b769c:	2100      	movs	r1, #0
   b769e:	f7fe be93 	b.w	b63c8 <system_ctrl_set_app_request_handler>
   b76a2:	bf00      	nop
   b76a4:	000b7585 	.word	0x000b7585
   b76a8:	2003f400 	.word	0x2003f400
   b76ac:	9a271c1e 	.word	0x9a271c1e
   b76b0:	2003e720 	.word	0x2003e720
   b76b4:	00000000 	.word	0x00000000
   b76b8:	000b7621 	.word	0x000b7621

000b76bc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b76bc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b76be:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b76c0:	d902      	bls.n	b76c8 <pinAvailable+0xc>
    return false;
   b76c2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b76c4:	b002      	add	sp, #8
   b76c6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b76c8:	f1a0 030b 	sub.w	r3, r0, #11
   b76cc:	2b02      	cmp	r3, #2
   b76ce:	d81a      	bhi.n	b7706 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b76d0:	4c17      	ldr	r4, [pc, #92]	; (b7730 <pinAvailable+0x74>)
   b76d2:	7821      	ldrb	r1, [r4, #0]
   b76d4:	f3bf 8f5b 	dmb	ish
   b76d8:	f011 0101 	ands.w	r1, r1, #1
   b76dc:	d10b      	bne.n	b76f6 <pinAvailable+0x3a>
   b76de:	4620      	mov	r0, r4
   b76e0:	9101      	str	r1, [sp, #4]
   b76e2:	f7fc fce9 	bl	b40b8 <__cxa_guard_acquire>
   b76e6:	9901      	ldr	r1, [sp, #4]
   b76e8:	b128      	cbz	r0, b76f6 <pinAvailable+0x3a>
   b76ea:	4812      	ldr	r0, [pc, #72]	; (b7734 <pinAvailable+0x78>)
   b76ec:	f7ff f9b8 	bl	b6a60 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b76f0:	4620      	mov	r0, r4
   b76f2:	f7fc fce6 	bl	b40c2 <__cxa_guard_release>
   b76f6:	4b0f      	ldr	r3, [pc, #60]	; (b7734 <pinAvailable+0x78>)
   b76f8:	7818      	ldrb	r0, [r3, #0]
   b76fa:	f7fe fda5 	bl	b6248 <hal_spi_is_enabled>
   b76fe:	2800      	cmp	r0, #0
   b7700:	d1df      	bne.n	b76c2 <pinAvailable+0x6>
  return true; // 'pin' is available
   b7702:	2001      	movs	r0, #1
   b7704:	e7de      	b.n	b76c4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7706:	2801      	cmp	r0, #1
   b7708:	d809      	bhi.n	b771e <pinAvailable+0x62>
   b770a:	f000 f893 	bl	b7834 <_Z19__fetch_global_Wirev>
   b770e:	2100      	movs	r1, #0
   b7710:	7c00      	ldrb	r0, [r0, #16]
   b7712:	f7fe fcf9 	bl	b6108 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7716:	f080 0001 	eor.w	r0, r0, #1
   b771a:	b2c0      	uxtb	r0, r0
   b771c:	e7d2      	b.n	b76c4 <pinAvailable+0x8>
   b771e:	3809      	subs	r0, #9
   b7720:	2801      	cmp	r0, #1
   b7722:	d8ee      	bhi.n	b7702 <pinAvailable+0x46>
   b7724:	f000 f8c6 	bl	b78b4 <_Z22__fetch_global_Serial1v>
   b7728:	7c00      	ldrb	r0, [r0, #16]
   b772a:	f7fe fdd5 	bl	b62d8 <hal_usart_is_enabled>
   b772e:	e7f2      	b.n	b7716 <pinAvailable+0x5a>
   b7730:	2003e6b8 	.word	0x2003e6b8
   b7734:	2003e6bc 	.word	0x2003e6bc

000b7738 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7738:	2823      	cmp	r0, #35	; 0x23
{
   b773a:	b538      	push	{r3, r4, r5, lr}
   b773c:	4604      	mov	r4, r0
   b773e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7740:	d80a      	bhi.n	b7758 <pinMode+0x20>
   b7742:	29ff      	cmp	r1, #255	; 0xff
   b7744:	d008      	beq.n	b7758 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7746:	f7ff ffb9 	bl	b76bc <pinAvailable>
   b774a:	b128      	cbz	r0, b7758 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b774c:	4629      	mov	r1, r5
   b774e:	4620      	mov	r0, r4
}
   b7750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7754:	f7fe bc78 	b.w	b6048 <HAL_Pin_Mode>
}
   b7758:	bd38      	pop	{r3, r4, r5, pc}

000b775a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b775a:	b538      	push	{r3, r4, r5, lr}
   b775c:	4604      	mov	r4, r0
   b775e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7760:	f7fe fc7a 	bl	b6058 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7764:	28ff      	cmp	r0, #255	; 0xff
   b7766:	d010      	beq.n	b778a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7768:	2806      	cmp	r0, #6
   b776a:	d804      	bhi.n	b7776 <digitalWrite+0x1c>
   b776c:	234d      	movs	r3, #77	; 0x4d
   b776e:	fa23 f000 	lsr.w	r0, r3, r0
   b7772:	07c3      	lsls	r3, r0, #31
   b7774:	d409      	bmi.n	b778a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7776:	4620      	mov	r0, r4
   b7778:	f7ff ffa0 	bl	b76bc <pinAvailable>
   b777c:	b128      	cbz	r0, b778a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b777e:	4629      	mov	r1, r5
   b7780:	4620      	mov	r0, r4
}
   b7782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b7786:	f7fe bc6f 	b.w	b6068 <HAL_GPIO_Write>
}
   b778a:	bd38      	pop	{r3, r4, r5, pc}

000b778c <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b778c:	280d      	cmp	r0, #13
{
   b778e:	b510      	push	{r4, lr}
   b7790:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b7792:	bf9c      	itt	ls
   b7794:	340e      	addls	r4, #14
   b7796:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b7798:	4620      	mov	r0, r4
   b779a:	f7ff ff8f 	bl	b76bc <pinAvailable>
   b779e:	b150      	cbz	r0, b77b6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b77a0:	2103      	movs	r1, #3
   b77a2:	4620      	mov	r0, r4
   b77a4:	f7fe fc48 	bl	b6038 <HAL_Validate_Pin_Function>
   b77a8:	2803      	cmp	r0, #3
   b77aa:	d104      	bne.n	b77b6 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b77ac:	4620      	mov	r0, r4
}
   b77ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b77b2:	f7fe bc61 	b.w	b6078 <hal_adc_read>
}
   b77b6:	2000      	movs	r0, #0
   b77b8:	bd10      	pop	{r4, pc}

000b77ba <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b77ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b77be:	4690      	mov	r8, r2
   b77c0:	461f      	mov	r7, r3
   b77c2:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b77c4:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b77c6:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b77c8:	f1c4 0107 	rsb	r1, r4, #7
   b77cc:	f1b8 0f00 	cmp.w	r8, #0
   b77d0:	d112      	bne.n	b77f8 <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b77d2:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b77d6:	f001 0101 	and.w	r1, r1, #1
   b77da:	4630      	mov	r0, r6
   b77dc:	f7ff ffbd 	bl	b775a <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b77e0:	2101      	movs	r1, #1
   b77e2:	4628      	mov	r0, r5
   b77e4:	f7ff ffb9 	bl	b775a <digitalWrite>
    digitalWrite(clockPin, LOW);
   b77e8:	2100      	movs	r1, #0
   b77ea:	4628      	mov	r0, r5
   b77ec:	f7ff ffb5 	bl	b775a <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b77f0:	3c01      	subs	r4, #1
   b77f2:	d2e9      	bcs.n	b77c8 <shiftOut+0xe>
  }
}
   b77f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b77f8:	fa47 f104 	asr.w	r1, r7, r4
   b77fc:	e7eb      	b.n	b77d6 <shiftOut+0x1c>

000b77fe <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b77fe:	4770      	bx	lr

000b7800 <_Z17acquireWireBufferv>:
{
   b7800:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7802:	4b0a      	ldr	r3, [pc, #40]	; (b782c <_Z17acquireWireBufferv+0x2c>)
   b7804:	6003      	str	r3, [r0, #0]
   b7806:	2301      	movs	r3, #1
{
   b7808:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b780a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b780c:	4908      	ldr	r1, [pc, #32]	; (b7830 <_Z17acquireWireBufferv+0x30>)
   b780e:	2020      	movs	r0, #32
   b7810:	f000 f874 	bl	b78fc <_ZnajRKSt9nothrow_t>
	};
   b7814:	2520      	movs	r5, #32
   b7816:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7818:	4905      	ldr	r1, [pc, #20]	; (b7830 <_Z17acquireWireBufferv+0x30>)
	};
   b781a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b781c:	4628      	mov	r0, r5
   b781e:	f000 f86d 	bl	b78fc <_ZnajRKSt9nothrow_t>
	};
   b7822:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7826:	4620      	mov	r0, r4
   b7828:	bd38      	pop	{r3, r4, r5, pc}
   b782a:	bf00      	nop
   b782c:	00010018 	.word	0x00010018
   b7830:	000b86d4 	.word	0x000b86d4

000b7834 <_Z19__fetch_global_Wirev>:
{
   b7834:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7836:	4d0e      	ldr	r5, [pc, #56]	; (b7870 <_Z19__fetch_global_Wirev+0x3c>)
   b7838:	7829      	ldrb	r1, [r5, #0]
   b783a:	f3bf 8f5b 	dmb	ish
   b783e:	f011 0401 	ands.w	r4, r1, #1
{
   b7842:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7844:	d111      	bne.n	b786a <_Z19__fetch_global_Wirev+0x36>
   b7846:	4628      	mov	r0, r5
   b7848:	f7fc fc36 	bl	b40b8 <__cxa_guard_acquire>
   b784c:	b168      	cbz	r0, b786a <_Z19__fetch_global_Wirev+0x36>
   b784e:	4668      	mov	r0, sp
   b7850:	f7ff ffd6 	bl	b7800 <_Z17acquireWireBufferv>
   b7854:	466a      	mov	r2, sp
   b7856:	4621      	mov	r1, r4
   b7858:	4806      	ldr	r0, [pc, #24]	; (b7874 <_Z19__fetch_global_Wirev+0x40>)
   b785a:	f7fe fee7 	bl	b662c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b785e:	4628      	mov	r0, r5
   b7860:	f7fc fc2f 	bl	b40c2 <__cxa_guard_release>
   b7864:	4804      	ldr	r0, [pc, #16]	; (b7878 <_Z19__fetch_global_Wirev+0x44>)
   b7866:	f000 f95d 	bl	b7b24 <atexit>
	return wire;
}
   b786a:	4802      	ldr	r0, [pc, #8]	; (b7874 <_Z19__fetch_global_Wirev+0x40>)
   b786c:	b007      	add	sp, #28
   b786e:	bd30      	pop	{r4, r5, pc}
   b7870:	2003e72c 	.word	0x2003e72c
   b7874:	2003e730 	.word	0x2003e730
   b7878:	000b77ff 	.word	0x000b77ff

000b787c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b787c:	4770      	bx	lr
	...

000b7880 <_Z20acquireSerial1Bufferv>:
{
   b7880:	b538      	push	{r3, r4, r5, lr}
   b7882:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7884:	2514      	movs	r5, #20
   b7886:	462a      	mov	r2, r5
   b7888:	2100      	movs	r1, #0
   b788a:	f000 f963 	bl	b7b54 <memset>
   b788e:	8025      	strh	r5, [r4, #0]
   b7890:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7892:	4907      	ldr	r1, [pc, #28]	; (b78b0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7894:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7896:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7898:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b789a:	f000 f82f 	bl	b78fc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b789e:	4904      	ldr	r1, [pc, #16]	; (b78b0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b78a0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b78a2:	4628      	mov	r0, r5
   b78a4:	f000 f82a 	bl	b78fc <_ZnajRKSt9nothrow_t>
    };
   b78a8:	60e0      	str	r0, [r4, #12]
}
   b78aa:	4620      	mov	r0, r4
   b78ac:	bd38      	pop	{r3, r4, r5, pc}
   b78ae:	bf00      	nop
   b78b0:	000b86d4 	.word	0x000b86d4

000b78b4 <_Z22__fetch_global_Serial1v>:
{
   b78b4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b78b6:	4d0e      	ldr	r5, [pc, #56]	; (b78f0 <_Z22__fetch_global_Serial1v+0x3c>)
   b78b8:	7829      	ldrb	r1, [r5, #0]
   b78ba:	f3bf 8f5b 	dmb	ish
   b78be:	f011 0401 	ands.w	r4, r1, #1
{
   b78c2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b78c4:	d111      	bne.n	b78ea <_Z22__fetch_global_Serial1v+0x36>
   b78c6:	4628      	mov	r0, r5
   b78c8:	f7fc fbf6 	bl	b40b8 <__cxa_guard_acquire>
   b78cc:	b168      	cbz	r0, b78ea <_Z22__fetch_global_Serial1v+0x36>
   b78ce:	a801      	add	r0, sp, #4
   b78d0:	f7ff ffd6 	bl	b7880 <_Z20acquireSerial1Bufferv>
   b78d4:	aa01      	add	r2, sp, #4
   b78d6:	4621      	mov	r1, r4
   b78d8:	4806      	ldr	r0, [pc, #24]	; (b78f4 <_Z22__fetch_global_Serial1v+0x40>)
   b78da:	f7ff fd79 	bl	b73d0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b78de:	4628      	mov	r0, r5
   b78e0:	f7fc fbef 	bl	b40c2 <__cxa_guard_release>
   b78e4:	4804      	ldr	r0, [pc, #16]	; (b78f8 <_Z22__fetch_global_Serial1v+0x44>)
   b78e6:	f000 f91d 	bl	b7b24 <atexit>
    return serial1;
}
   b78ea:	4802      	ldr	r0, [pc, #8]	; (b78f4 <_Z22__fetch_global_Serial1v+0x40>)
   b78ec:	b007      	add	sp, #28
   b78ee:	bd30      	pop	{r4, r5, pc}
   b78f0:	2003e744 	.word	0x2003e744
   b78f4:	2003e748 	.word	0x2003e748
   b78f8:	000b787d 	.word	0x000b787d

000b78fc <_ZnajRKSt9nothrow_t>:
   b78fc:	f7fc bbcb 	b.w	b4096 <_Znaj>

000b7900 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7900:	4901      	ldr	r1, [pc, #4]	; (b7908 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7902:	f000 b8f9 	b.w	b7af8 <_ZNKSt9type_infoeqERKS_>
   b7906:	bf00      	nop
   b7908:	000b86f0 	.word	0x000b86f0

000b790c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b790c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b790e:	2400      	movs	r4, #0
   b7910:	2310      	movs	r3, #16
   b7912:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7916:	6803      	ldr	r3, [r0, #0]
   b7918:	4615      	mov	r5, r2
   b791a:	699e      	ldr	r6, [r3, #24]
   b791c:	6812      	ldr	r2, [r2, #0]
   b791e:	466b      	mov	r3, sp
   b7920:	e9cd 4400 	strd	r4, r4, [sp]
   b7924:	47b0      	blx	r6
   b7926:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b792a:	f003 0306 	and.w	r3, r3, #6
   b792e:	2b06      	cmp	r3, #6
   b7930:	bf03      	ittte	eq
   b7932:	9b00      	ldreq	r3, [sp, #0]
   b7934:	602b      	streq	r3, [r5, #0]
   b7936:	2001      	moveq	r0, #1
   b7938:	4620      	movne	r0, r4
   b793a:	b004      	add	sp, #16
   b793c:	bd70      	pop	{r4, r5, r6, pc}

000b793e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b793e:	9800      	ldr	r0, [sp, #0]
   b7940:	4290      	cmp	r0, r2
   b7942:	bf14      	ite	ne
   b7944:	2001      	movne	r0, #1
   b7946:	2006      	moveq	r0, #6
   b7948:	4770      	bx	lr
	...

000b794c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b794c:	b510      	push	{r4, lr}
   b794e:	4b03      	ldr	r3, [pc, #12]	; (b795c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7950:	6003      	str	r3, [r0, #0]
   b7952:	4604      	mov	r4, r0
   b7954:	f000 f8cd 	bl	b7af2 <_ZNSt9type_infoD1Ev>
   b7958:	4620      	mov	r0, r4
   b795a:	bd10      	pop	{r4, pc}
   b795c:	000b8730 	.word	0x000b8730

000b7960 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7960:	b510      	push	{r4, lr}
   b7962:	4604      	mov	r4, r0
   b7964:	f7ff fff2 	bl	b794c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7968:	4620      	mov	r0, r4
   b796a:	2108      	movs	r1, #8
   b796c:	f7fc fb95 	bl	b409a <_ZdlPvj>
   b7970:	4620      	mov	r0, r4
   b7972:	bd10      	pop	{r4, pc}

000b7974 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7978:	461f      	mov	r7, r3
   b797a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b797e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7982:	4598      	cmp	r8, r3
   b7984:	4606      	mov	r6, r0
   b7986:	4615      	mov	r5, r2
   b7988:	d107      	bne.n	b799a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b798a:	9907      	ldr	r1, [sp, #28]
   b798c:	f000 f8b4 	bl	b7af8 <_ZNKSt9type_infoeqERKS_>
   b7990:	b118      	cbz	r0, b799a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7992:	7165      	strb	r5, [r4, #5]
   b7994:	2000      	movs	r0, #0
   b7996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b799a:	4639      	mov	r1, r7
   b799c:	4630      	mov	r0, r6
   b799e:	f000 f8ab 	bl	b7af8 <_ZNKSt9type_infoeqERKS_>
   b79a2:	2800      	cmp	r0, #0
   b79a4:	d0f6      	beq.n	b7994 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b79a6:	2301      	movs	r3, #1
   b79a8:	f8c4 8000 	str.w	r8, [r4]
   b79ac:	7125      	strb	r5, [r4, #4]
   b79ae:	71a3      	strb	r3, [r4, #6]
   b79b0:	e7f0      	b.n	b7994 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b79b2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b79b2:	b538      	push	{r3, r4, r5, lr}
   b79b4:	4615      	mov	r5, r2
   b79b6:	461c      	mov	r4, r3
   b79b8:	f000 f89e 	bl	b7af8 <_ZNKSt9type_infoeqERKS_>
   b79bc:	b120      	cbz	r0, b79c8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b79be:	2308      	movs	r3, #8
   b79c0:	60e3      	str	r3, [r4, #12]
   b79c2:	2306      	movs	r3, #6
   b79c4:	6025      	str	r5, [r4, #0]
   b79c6:	7123      	strb	r3, [r4, #4]
   b79c8:	bd38      	pop	{r3, r4, r5, pc}

000b79ca <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b79ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b79cc:	4605      	mov	r5, r0
   b79ce:	460c      	mov	r4, r1
   b79d0:	9201      	str	r2, [sp, #4]
   b79d2:	461e      	mov	r6, r3
   b79d4:	f000 f890 	bl	b7af8 <_ZNKSt9type_infoeqERKS_>
   b79d8:	b950      	cbnz	r0, b79f0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b79da:	2e03      	cmp	r6, #3
   b79dc:	d808      	bhi.n	b79f0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b79de:	6823      	ldr	r3, [r4, #0]
   b79e0:	9a01      	ldr	r2, [sp, #4]
   b79e2:	695b      	ldr	r3, [r3, #20]
   b79e4:	4629      	mov	r1, r5
   b79e6:	4620      	mov	r0, r4
   b79e8:	b002      	add	sp, #8
   b79ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b79ee:	4718      	bx	r3
   b79f0:	b002      	add	sp, #8
   b79f2:	bd70      	pop	{r4, r5, r6, pc}

000b79f4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b79f4:	b510      	push	{r4, lr}
   b79f6:	4b03      	ldr	r3, [pc, #12]	; (b7a04 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b79f8:	6003      	str	r3, [r0, #0]
   b79fa:	4604      	mov	r4, r0
   b79fc:	f7ff ffa6 	bl	b794c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7a00:	4620      	mov	r0, r4
   b7a02:	bd10      	pop	{r4, pc}
   b7a04:	000b8790 	.word	0x000b8790

000b7a08 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7a08:	b510      	push	{r4, lr}
   b7a0a:	4604      	mov	r4, r0
   b7a0c:	f7ff fff2 	bl	b79f4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7a10:	4620      	mov	r0, r4
   b7a12:	210c      	movs	r1, #12
   b7a14:	f7fc fb41 	bl	b409a <_ZdlPvj>
   b7a18:	4620      	mov	r0, r4
   b7a1a:	bd10      	pop	{r4, pc}

000b7a1c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7a1e:	9f08      	ldr	r7, [sp, #32]
   b7a20:	4297      	cmp	r7, r2
   b7a22:	4605      	mov	r5, r0
   b7a24:	460e      	mov	r6, r1
   b7a26:	4614      	mov	r4, r2
   b7a28:	d00a      	beq.n	b7a40 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7a2a:	68a8      	ldr	r0, [r5, #8]
   b7a2c:	6802      	ldr	r2, [r0, #0]
   b7a2e:	9708      	str	r7, [sp, #32]
   b7a30:	6a15      	ldr	r5, [r2, #32]
   b7a32:	4631      	mov	r1, r6
   b7a34:	4622      	mov	r2, r4
   b7a36:	46ac      	mov	ip, r5
   b7a38:	b003      	add	sp, #12
   b7a3a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7a3e:	4760      	bx	ip
   b7a40:	4619      	mov	r1, r3
   b7a42:	9301      	str	r3, [sp, #4]
   b7a44:	f000 f858 	bl	b7af8 <_ZNKSt9type_infoeqERKS_>
   b7a48:	9b01      	ldr	r3, [sp, #4]
   b7a4a:	2800      	cmp	r0, #0
   b7a4c:	d0ed      	beq.n	b7a2a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7a4e:	2006      	movs	r0, #6
   b7a50:	b003      	add	sp, #12
   b7a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7a54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7a54:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7a58:	460d      	mov	r5, r1
   b7a5a:	4619      	mov	r1, r3
   b7a5c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7a60:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7a64:	4681      	mov	r9, r0
   b7a66:	4617      	mov	r7, r2
   b7a68:	4698      	mov	r8, r3
   b7a6a:	f000 f845 	bl	b7af8 <_ZNKSt9type_infoeqERKS_>
   b7a6e:	b190      	cbz	r0, b7a96 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7a70:	2d00      	cmp	r5, #0
   b7a72:	6034      	str	r4, [r6, #0]
   b7a74:	7137      	strb	r7, [r6, #4]
   b7a76:	db09      	blt.n	b7a8c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7a78:	1961      	adds	r1, r4, r5
   b7a7a:	458a      	cmp	sl, r1
   b7a7c:	bf0c      	ite	eq
   b7a7e:	2106      	moveq	r1, #6
   b7a80:	2101      	movne	r1, #1
   b7a82:	71b1      	strb	r1, [r6, #6]
   b7a84:	2000      	movs	r0, #0
   b7a86:	b001      	add	sp, #4
   b7a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7a8c:	3502      	adds	r5, #2
   b7a8e:	d1f9      	bne.n	b7a84 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7a90:	2301      	movs	r3, #1
   b7a92:	71b3      	strb	r3, [r6, #6]
   b7a94:	e7f6      	b.n	b7a84 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7a96:	4554      	cmp	r4, sl
   b7a98:	d106      	bne.n	b7aa8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7a9a:	4659      	mov	r1, fp
   b7a9c:	4648      	mov	r0, r9
   b7a9e:	f000 f82b 	bl	b7af8 <_ZNKSt9type_infoeqERKS_>
   b7aa2:	b108      	cbz	r0, b7aa8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7aa4:	7177      	strb	r7, [r6, #5]
   b7aa6:	e7ed      	b.n	b7a84 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7aa8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7aac:	6803      	ldr	r3, [r0, #0]
   b7aae:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7ab2:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7ab6:	69dc      	ldr	r4, [r3, #28]
   b7ab8:	463a      	mov	r2, r7
   b7aba:	4643      	mov	r3, r8
   b7abc:	4629      	mov	r1, r5
   b7abe:	46a4      	mov	ip, r4
   b7ac0:	b001      	add	sp, #4
   b7ac2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7ac6:	4760      	bx	ip

000b7ac8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7acc:	4607      	mov	r7, r0
   b7ace:	460c      	mov	r4, r1
   b7ad0:	4615      	mov	r5, r2
   b7ad2:	461e      	mov	r6, r3
   b7ad4:	f7ff ff6d 	bl	b79b2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7ad8:	b948      	cbnz	r0, b7aee <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7ada:	68b8      	ldr	r0, [r7, #8]
   b7adc:	6803      	ldr	r3, [r0, #0]
   b7ade:	699f      	ldr	r7, [r3, #24]
   b7ae0:	462a      	mov	r2, r5
   b7ae2:	4633      	mov	r3, r6
   b7ae4:	4621      	mov	r1, r4
   b7ae6:	46bc      	mov	ip, r7
   b7ae8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7aec:	4760      	bx	ip
   b7aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7af2 <_ZNSt9type_infoD1Ev>:
   b7af2:	4770      	bx	lr

000b7af4 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7af4:	2000      	movs	r0, #0
   b7af6:	4770      	bx	lr

000b7af8 <_ZNKSt9type_infoeqERKS_>:
   b7af8:	4281      	cmp	r1, r0
   b7afa:	b508      	push	{r3, lr}
   b7afc:	d00e      	beq.n	b7b1c <_ZNKSt9type_infoeqERKS_+0x24>
   b7afe:	6840      	ldr	r0, [r0, #4]
   b7b00:	7803      	ldrb	r3, [r0, #0]
   b7b02:	2b2a      	cmp	r3, #42	; 0x2a
   b7b04:	d00c      	beq.n	b7b20 <_ZNKSt9type_infoeqERKS_+0x28>
   b7b06:	6849      	ldr	r1, [r1, #4]
   b7b08:	780b      	ldrb	r3, [r1, #0]
   b7b0a:	2b2a      	cmp	r3, #42	; 0x2a
   b7b0c:	bf08      	it	eq
   b7b0e:	3101      	addeq	r1, #1
   b7b10:	f000 f856 	bl	b7bc0 <strcmp>
   b7b14:	fab0 f080 	clz	r0, r0
   b7b18:	0940      	lsrs	r0, r0, #5
   b7b1a:	bd08      	pop	{r3, pc}
   b7b1c:	2001      	movs	r0, #1
   b7b1e:	e7fc      	b.n	b7b1a <_ZNKSt9type_infoeqERKS_+0x22>
   b7b20:	2000      	movs	r0, #0
   b7b22:	e7fa      	b.n	b7b1a <_ZNKSt9type_infoeqERKS_+0x22>

000b7b24 <atexit>:
   b7b24:	2300      	movs	r3, #0
   b7b26:	4601      	mov	r1, r0
   b7b28:	461a      	mov	r2, r3
   b7b2a:	4618      	mov	r0, r3
   b7b2c:	f000 b904 	b.w	b7d38 <__register_exitproc>

000b7b30 <atoi>:
   b7b30:	220a      	movs	r2, #10
   b7b32:	2100      	movs	r1, #0
   b7b34:	f000 b8f6 	b.w	b7d24 <strtol>

000b7b38 <memcpy>:
   b7b38:	440a      	add	r2, r1
   b7b3a:	4291      	cmp	r1, r2
   b7b3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7b40:	d100      	bne.n	b7b44 <memcpy+0xc>
   b7b42:	4770      	bx	lr
   b7b44:	b510      	push	{r4, lr}
   b7b46:	f811 4b01 	ldrb.w	r4, [r1], #1
   b7b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7b4e:	4291      	cmp	r1, r2
   b7b50:	d1f9      	bne.n	b7b46 <memcpy+0xe>
   b7b52:	bd10      	pop	{r4, pc}

000b7b54 <memset>:
   b7b54:	4402      	add	r2, r0
   b7b56:	4603      	mov	r3, r0
   b7b58:	4293      	cmp	r3, r2
   b7b5a:	d100      	bne.n	b7b5e <memset+0xa>
   b7b5c:	4770      	bx	lr
   b7b5e:	f803 1b01 	strb.w	r1, [r3], #1
   b7b62:	e7f9      	b.n	b7b58 <memset+0x4>

000b7b64 <srand>:
   b7b64:	b538      	push	{r3, r4, r5, lr}
   b7b66:	4b10      	ldr	r3, [pc, #64]	; (b7ba8 <srand+0x44>)
   b7b68:	681d      	ldr	r5, [r3, #0]
   b7b6a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7b6c:	4604      	mov	r4, r0
   b7b6e:	b9b3      	cbnz	r3, b7b9e <srand+0x3a>
   b7b70:	2018      	movs	r0, #24
   b7b72:	f7fe fcad 	bl	b64d0 <malloc>
   b7b76:	4602      	mov	r2, r0
   b7b78:	63a8      	str	r0, [r5, #56]	; 0x38
   b7b7a:	b920      	cbnz	r0, b7b86 <srand+0x22>
   b7b7c:	4b0b      	ldr	r3, [pc, #44]	; (b7bac <srand+0x48>)
   b7b7e:	480c      	ldr	r0, [pc, #48]	; (b7bb0 <srand+0x4c>)
   b7b80:	2142      	movs	r1, #66	; 0x42
   b7b82:	f7fe fccd 	bl	b6520 <__assert_func>
   b7b86:	490b      	ldr	r1, [pc, #44]	; (b7bb4 <srand+0x50>)
   b7b88:	4b0b      	ldr	r3, [pc, #44]	; (b7bb8 <srand+0x54>)
   b7b8a:	e9c0 1300 	strd	r1, r3, [r0]
   b7b8e:	4b0b      	ldr	r3, [pc, #44]	; (b7bbc <srand+0x58>)
   b7b90:	6083      	str	r3, [r0, #8]
   b7b92:	230b      	movs	r3, #11
   b7b94:	8183      	strh	r3, [r0, #12]
   b7b96:	2100      	movs	r1, #0
   b7b98:	2001      	movs	r0, #1
   b7b9a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7b9e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7ba0:	2200      	movs	r2, #0
   b7ba2:	611c      	str	r4, [r3, #16]
   b7ba4:	615a      	str	r2, [r3, #20]
   b7ba6:	bd38      	pop	{r3, r4, r5, pc}
   b7ba8:	2003de1c 	.word	0x2003de1c
   b7bac:	000b87c9 	.word	0x000b87c9
   b7bb0:	000b87e0 	.word	0x000b87e0
   b7bb4:	abcd330e 	.word	0xabcd330e
   b7bb8:	e66d1234 	.word	0xe66d1234
   b7bbc:	0005deec 	.word	0x0005deec

000b7bc0 <strcmp>:
   b7bc0:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7bc4:	f811 3b01 	ldrb.w	r3, [r1], #1
   b7bc8:	2a01      	cmp	r2, #1
   b7bca:	bf28      	it	cs
   b7bcc:	429a      	cmpcs	r2, r3
   b7bce:	d0f7      	beq.n	b7bc0 <strcmp>
   b7bd0:	1ad0      	subs	r0, r2, r3
   b7bd2:	4770      	bx	lr

000b7bd4 <strcpy>:
   b7bd4:	4603      	mov	r3, r0
   b7bd6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7bda:	f803 2b01 	strb.w	r2, [r3], #1
   b7bde:	2a00      	cmp	r2, #0
   b7be0:	d1f9      	bne.n	b7bd6 <strcpy+0x2>
   b7be2:	4770      	bx	lr

000b7be4 <strlen>:
   b7be4:	4603      	mov	r3, r0
   b7be6:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7bea:	2a00      	cmp	r2, #0
   b7bec:	d1fb      	bne.n	b7be6 <strlen+0x2>
   b7bee:	1a18      	subs	r0, r3, r0
   b7bf0:	3801      	subs	r0, #1
   b7bf2:	4770      	bx	lr

000b7bf4 <strstr>:
   b7bf4:	780a      	ldrb	r2, [r1, #0]
   b7bf6:	b570      	push	{r4, r5, r6, lr}
   b7bf8:	b96a      	cbnz	r2, b7c16 <strstr+0x22>
   b7bfa:	bd70      	pop	{r4, r5, r6, pc}
   b7bfc:	429a      	cmp	r2, r3
   b7bfe:	d109      	bne.n	b7c14 <strstr+0x20>
   b7c00:	460c      	mov	r4, r1
   b7c02:	4605      	mov	r5, r0
   b7c04:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   b7c08:	2b00      	cmp	r3, #0
   b7c0a:	d0f6      	beq.n	b7bfa <strstr+0x6>
   b7c0c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   b7c10:	429e      	cmp	r6, r3
   b7c12:	d0f7      	beq.n	b7c04 <strstr+0x10>
   b7c14:	3001      	adds	r0, #1
   b7c16:	7803      	ldrb	r3, [r0, #0]
   b7c18:	2b00      	cmp	r3, #0
   b7c1a:	d1ef      	bne.n	b7bfc <strstr+0x8>
   b7c1c:	4618      	mov	r0, r3
   b7c1e:	e7ec      	b.n	b7bfa <strstr+0x6>

000b7c20 <_strtol_l.constprop.0>:
   b7c20:	2b01      	cmp	r3, #1
   b7c22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7c26:	d001      	beq.n	b7c2c <_strtol_l.constprop.0+0xc>
   b7c28:	2b24      	cmp	r3, #36	; 0x24
   b7c2a:	d906      	bls.n	b7c3a <_strtol_l.constprop.0+0x1a>
   b7c2c:	f7fe fc70 	bl	b6510 <__errno>
   b7c30:	2316      	movs	r3, #22
   b7c32:	6003      	str	r3, [r0, #0]
   b7c34:	2000      	movs	r0, #0
   b7c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7c3a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b7d20 <_strtol_l.constprop.0+0x100>
   b7c3e:	460d      	mov	r5, r1
   b7c40:	462e      	mov	r6, r5
   b7c42:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7c46:	f814 700c 	ldrb.w	r7, [r4, ip]
   b7c4a:	f017 0708 	ands.w	r7, r7, #8
   b7c4e:	d1f7      	bne.n	b7c40 <_strtol_l.constprop.0+0x20>
   b7c50:	2c2d      	cmp	r4, #45	; 0x2d
   b7c52:	d132      	bne.n	b7cba <_strtol_l.constprop.0+0x9a>
   b7c54:	782c      	ldrb	r4, [r5, #0]
   b7c56:	2701      	movs	r7, #1
   b7c58:	1cb5      	adds	r5, r6, #2
   b7c5a:	2b00      	cmp	r3, #0
   b7c5c:	d05b      	beq.n	b7d16 <_strtol_l.constprop.0+0xf6>
   b7c5e:	2b10      	cmp	r3, #16
   b7c60:	d109      	bne.n	b7c76 <_strtol_l.constprop.0+0x56>
   b7c62:	2c30      	cmp	r4, #48	; 0x30
   b7c64:	d107      	bne.n	b7c76 <_strtol_l.constprop.0+0x56>
   b7c66:	782c      	ldrb	r4, [r5, #0]
   b7c68:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b7c6c:	2c58      	cmp	r4, #88	; 0x58
   b7c6e:	d14d      	bne.n	b7d0c <_strtol_l.constprop.0+0xec>
   b7c70:	786c      	ldrb	r4, [r5, #1]
   b7c72:	2310      	movs	r3, #16
   b7c74:	3502      	adds	r5, #2
   b7c76:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b7c7a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7c7e:	f04f 0c00 	mov.w	ip, #0
   b7c82:	fbb8 f9f3 	udiv	r9, r8, r3
   b7c86:	4666      	mov	r6, ip
   b7c88:	fb03 8a19 	mls	sl, r3, r9, r8
   b7c8c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b7c90:	f1be 0f09 	cmp.w	lr, #9
   b7c94:	d816      	bhi.n	b7cc4 <_strtol_l.constprop.0+0xa4>
   b7c96:	4674      	mov	r4, lr
   b7c98:	42a3      	cmp	r3, r4
   b7c9a:	dd24      	ble.n	b7ce6 <_strtol_l.constprop.0+0xc6>
   b7c9c:	f1bc 0f00 	cmp.w	ip, #0
   b7ca0:	db1e      	blt.n	b7ce0 <_strtol_l.constprop.0+0xc0>
   b7ca2:	45b1      	cmp	r9, r6
   b7ca4:	d31c      	bcc.n	b7ce0 <_strtol_l.constprop.0+0xc0>
   b7ca6:	d101      	bne.n	b7cac <_strtol_l.constprop.0+0x8c>
   b7ca8:	45a2      	cmp	sl, r4
   b7caa:	db19      	blt.n	b7ce0 <_strtol_l.constprop.0+0xc0>
   b7cac:	fb06 4603 	mla	r6, r6, r3, r4
   b7cb0:	f04f 0c01 	mov.w	ip, #1
   b7cb4:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7cb8:	e7e8      	b.n	b7c8c <_strtol_l.constprop.0+0x6c>
   b7cba:	2c2b      	cmp	r4, #43	; 0x2b
   b7cbc:	bf04      	itt	eq
   b7cbe:	782c      	ldrbeq	r4, [r5, #0]
   b7cc0:	1cb5      	addeq	r5, r6, #2
   b7cc2:	e7ca      	b.n	b7c5a <_strtol_l.constprop.0+0x3a>
   b7cc4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b7cc8:	f1be 0f19 	cmp.w	lr, #25
   b7ccc:	d801      	bhi.n	b7cd2 <_strtol_l.constprop.0+0xb2>
   b7cce:	3c37      	subs	r4, #55	; 0x37
   b7cd0:	e7e2      	b.n	b7c98 <_strtol_l.constprop.0+0x78>
   b7cd2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b7cd6:	f1be 0f19 	cmp.w	lr, #25
   b7cda:	d804      	bhi.n	b7ce6 <_strtol_l.constprop.0+0xc6>
   b7cdc:	3c57      	subs	r4, #87	; 0x57
   b7cde:	e7db      	b.n	b7c98 <_strtol_l.constprop.0+0x78>
   b7ce0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b7ce4:	e7e6      	b.n	b7cb4 <_strtol_l.constprop.0+0x94>
   b7ce6:	f1bc 0f00 	cmp.w	ip, #0
   b7cea:	da05      	bge.n	b7cf8 <_strtol_l.constprop.0+0xd8>
   b7cec:	2322      	movs	r3, #34	; 0x22
   b7cee:	6003      	str	r3, [r0, #0]
   b7cf0:	4646      	mov	r6, r8
   b7cf2:	b942      	cbnz	r2, b7d06 <_strtol_l.constprop.0+0xe6>
   b7cf4:	4630      	mov	r0, r6
   b7cf6:	e79e      	b.n	b7c36 <_strtol_l.constprop.0+0x16>
   b7cf8:	b107      	cbz	r7, b7cfc <_strtol_l.constprop.0+0xdc>
   b7cfa:	4276      	negs	r6, r6
   b7cfc:	2a00      	cmp	r2, #0
   b7cfe:	d0f9      	beq.n	b7cf4 <_strtol_l.constprop.0+0xd4>
   b7d00:	f1bc 0f00 	cmp.w	ip, #0
   b7d04:	d000      	beq.n	b7d08 <_strtol_l.constprop.0+0xe8>
   b7d06:	1e69      	subs	r1, r5, #1
   b7d08:	6011      	str	r1, [r2, #0]
   b7d0a:	e7f3      	b.n	b7cf4 <_strtol_l.constprop.0+0xd4>
   b7d0c:	2430      	movs	r4, #48	; 0x30
   b7d0e:	2b00      	cmp	r3, #0
   b7d10:	d1b1      	bne.n	b7c76 <_strtol_l.constprop.0+0x56>
   b7d12:	2308      	movs	r3, #8
   b7d14:	e7af      	b.n	b7c76 <_strtol_l.constprop.0+0x56>
   b7d16:	2c30      	cmp	r4, #48	; 0x30
   b7d18:	d0a5      	beq.n	b7c66 <_strtol_l.constprop.0+0x46>
   b7d1a:	230a      	movs	r3, #10
   b7d1c:	e7ab      	b.n	b7c76 <_strtol_l.constprop.0+0x56>
   b7d1e:	bf00      	nop
   b7d20:	000b883a 	.word	0x000b883a

000b7d24 <strtol>:
   b7d24:	4613      	mov	r3, r2
   b7d26:	460a      	mov	r2, r1
   b7d28:	4601      	mov	r1, r0
   b7d2a:	4802      	ldr	r0, [pc, #8]	; (b7d34 <strtol+0x10>)
   b7d2c:	6800      	ldr	r0, [r0, #0]
   b7d2e:	f7ff bf77 	b.w	b7c20 <_strtol_l.constprop.0>
   b7d32:	bf00      	nop
   b7d34:	2003de1c 	.word	0x2003de1c

000b7d38 <__register_exitproc>:
   b7d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7d3c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7df8 <__register_exitproc+0xc0>
   b7d40:	4606      	mov	r6, r0
   b7d42:	f8d8 0000 	ldr.w	r0, [r8]
   b7d46:	461f      	mov	r7, r3
   b7d48:	460d      	mov	r5, r1
   b7d4a:	4691      	mov	r9, r2
   b7d4c:	f000 f856 	bl	b7dfc <__retarget_lock_acquire_recursive>
   b7d50:	4b25      	ldr	r3, [pc, #148]	; (b7de8 <__register_exitproc+0xb0>)
   b7d52:	681c      	ldr	r4, [r3, #0]
   b7d54:	b934      	cbnz	r4, b7d64 <__register_exitproc+0x2c>
   b7d56:	4c25      	ldr	r4, [pc, #148]	; (b7dec <__register_exitproc+0xb4>)
   b7d58:	601c      	str	r4, [r3, #0]
   b7d5a:	4b25      	ldr	r3, [pc, #148]	; (b7df0 <__register_exitproc+0xb8>)
   b7d5c:	b113      	cbz	r3, b7d64 <__register_exitproc+0x2c>
   b7d5e:	681b      	ldr	r3, [r3, #0]
   b7d60:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7d64:	6863      	ldr	r3, [r4, #4]
   b7d66:	2b1f      	cmp	r3, #31
   b7d68:	dd07      	ble.n	b7d7a <__register_exitproc+0x42>
   b7d6a:	f8d8 0000 	ldr.w	r0, [r8]
   b7d6e:	f000 f847 	bl	b7e00 <__retarget_lock_release_recursive>
   b7d72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7d7a:	b34e      	cbz	r6, b7dd0 <__register_exitproc+0x98>
   b7d7c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7d80:	b988      	cbnz	r0, b7da6 <__register_exitproc+0x6e>
   b7d82:	4b1c      	ldr	r3, [pc, #112]	; (b7df4 <__register_exitproc+0xbc>)
   b7d84:	b923      	cbnz	r3, b7d90 <__register_exitproc+0x58>
   b7d86:	f8d8 0000 	ldr.w	r0, [r8]
   b7d8a:	f000 f838 	bl	b7dfe <__retarget_lock_release>
   b7d8e:	e7f0      	b.n	b7d72 <__register_exitproc+0x3a>
   b7d90:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7d94:	f7fe fb9c 	bl	b64d0 <malloc>
   b7d98:	2800      	cmp	r0, #0
   b7d9a:	d0f4      	beq.n	b7d86 <__register_exitproc+0x4e>
   b7d9c:	2300      	movs	r3, #0
   b7d9e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7da2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7da6:	6863      	ldr	r3, [r4, #4]
   b7da8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7dac:	2201      	movs	r2, #1
   b7dae:	409a      	lsls	r2, r3
   b7db0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7db4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7db8:	4313      	orrs	r3, r2
   b7dba:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7dbe:	2e02      	cmp	r6, #2
   b7dc0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7dc4:	bf02      	ittt	eq
   b7dc6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7dca:	4313      	orreq	r3, r2
   b7dcc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7dd0:	6863      	ldr	r3, [r4, #4]
   b7dd2:	f8d8 0000 	ldr.w	r0, [r8]
   b7dd6:	1c5a      	adds	r2, r3, #1
   b7dd8:	3302      	adds	r3, #2
   b7dda:	6062      	str	r2, [r4, #4]
   b7ddc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7de0:	f000 f80e 	bl	b7e00 <__retarget_lock_release_recursive>
   b7de4:	2000      	movs	r0, #0
   b7de6:	e7c6      	b.n	b7d76 <__register_exitproc+0x3e>
   b7de8:	2003e7e8 	.word	0x2003e7e8
   b7dec:	2003e75c 	.word	0x2003e75c
   b7df0:	00000000 	.word	0x00000000
   b7df4:	000b64d1 	.word	0x000b64d1
   b7df8:	2003de80 	.word	0x2003de80

000b7dfc <__retarget_lock_acquire_recursive>:
   b7dfc:	4770      	bx	lr

000b7dfe <__retarget_lock_release>:
   b7dfe:	4770      	bx	lr

000b7e00 <__retarget_lock_release_recursive>:
   b7e00:	4770      	bx	lr

000b7e02 <link_code_end>:
	...

000b7e04 <dynalib_user>:
   b7e04:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b7e14:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b7e24:	7620 7269 7574 6c61 2e00 0a00 000a 6966      virtual......fi
   b7e34:	7372 2074 6572 6461 6920 2073 6925 4c00     rst read is %i.L
   b7e44:	7665 6c65 3020 200a 6156 756c 2065 6925     evel 0. Value %i
   b7e54:	000a 6c67 6575 6562 636e 2e68 7562 6262     ..gluebench.bubb
   b7e64:	656c 7061 7370 692e 006f 762f 7265 6973     leapps.io./versi
   b7e74:	6e6f 742d 7365 2f74 7061 2f69 2e31 2f31     on-test/api/1.1/
   b7e84:	6677 672f 7465 614d 6e69 6554 706d 4700     wf/getMainTemp.G
   b7e94:	5445 4100 7070 696c 6163 6974 6e6f 093e     ET.Application>.
   b7ea4:	6552 7073 6e6f 6573 7320 6174 7574 3a73     Response status:
   b7eb4:	0020 7041 6c70 6369 7461 6f69 3e6e 4809      .Application>.H
   b7ec4:	5454 2050 6552 7073 6e6f 6573 4220 646f     TTP Response Bod
   b7ed4:	3a79 0020 5448 5054 6520 7272 726f 203a     y: .HTTP error: 
   b7ee4:	0000 0000                                   ....

000b7ee8 <_ZTV16JsonParserStaticILj512ELj16EE>:
	...
   b7ef0:	40c9 000b 40dd 000b                         .@...@..

000b7ef8 <CSWTCH.88>:
   b7ef8:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   b7f08:	0050 0000                                   P...

000b7f0c <_ZL4font>:
   b7f0c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b7f1c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b7f2c:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b7f3c:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b7f4c:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b7f5c:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b7f6c:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b7f7c:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b7f8c:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b7f9c:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b7fac:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b7fbc:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b7fcc:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b7fdc:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b7fec:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b7ffc:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b800c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b801c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b802c:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b803c:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b804c:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b805c:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b806c:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b807c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b808c:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b809c:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b80ac:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b80bc:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b80cc:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b80dc:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b80ec:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b80fc:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b810c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b811c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b812c:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b813c:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b814c:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b815c:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b816c:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b817c:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b818c:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b819c:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b81ac:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b81bc:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b81cc:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b81dc:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b81ec:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b81fc:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b820c:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b821c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b822c:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b823c:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b824c:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b825c:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b826c:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b827c:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b828c:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b829c:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b82ac:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b82bc:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b82cc:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b82dc:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b82ec:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b82fc:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b830c:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b831c:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b832c:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b833c:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b834c:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b835c:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b836c:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b837c:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b838c:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b839c:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b83ac:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b83bc:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b83cc:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b83dc:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b83ec:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b83fc:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000b8408 <_ZTV12Adafruit_GFX>:
	...
   b8418:	5159 000b 6921 000b 40a1 000b 4e71 000b     YQ..!i...@..qN..
   b8428:	4f97 000b 4fb3 000b 4f2f 000b 4fcd 000b     .O...O../O...O..
   b8438:	5003 000b 501f 000b                         .P...P..

000b8440 <_ZTV16Adafruit_SSD1306>:
	...
   b8448:	54b1 000b 5541 000b 5159 000b 6921 000b     .T..AU..YQ..!i..
   b8458:	54b5 000b 4e71 000b 533d 000b 51cd 000b     .T..qN..=S...Q..
   b8468:	4f2f 000b 4fcd 000b 5003 000b 501f 000b     /O...O...P...P..

000b8478 <_ZTV10JsonBuffer>:
	...
   b8480:	581d 000b 5839 000b                         .X..9X..

000b8488 <_ZTV10JsonParser>:
	...
   b8490:	584d 000b 5871 000b 4820 5454 2f50 2e31     MX..qX.. HTTP/1.
   b84a0:	0d30 000a 6c63 736f 0065 6f43 6e6e 6365     0...close.Connec
   b84b0:	6974 6e6f 4800 534f 0054 6f43 746e 6e65     tion.HOST.Conten
   b84c0:	2d74 654c 676e 6874 5000 534f 0054 0a0d     t-Length.POST...
   b84d0:	0a0d 0000                                   ....

000b84d4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b84dc <_ZTVN5spark13EthernetClassE>:
	...
   b84e4:	65b7 000b 65ad 000b 65a3 000b 6599 000b     .e...e...e...e..
   b84f4:	658d 000b 6581 000b 67fd 000b 6805 000b     .e...e...g...h..
   b8504:	6575 000b 656d 000b 6563 000b 6559 000b     ue..me..ce..Ye..
   b8514:	6835 000b                                   5h..

000b8518 <_ZTV7TwoWire>:
	...
   b8520:	65d5 000b 661f 000b 65f7 000b 65d7 000b     .e...f...e...e..
   b8530:	65ff 000b 6607 000b 660f 000b 6617 000b     .e...f...f...f..

000b8540 <_ZTV9IPAddress>:
	...
   b8548:	66a1 000b 6691 000b 6693 000b 7061 0070     .f...f...f..app.

000b8558 <_ZTVN5spark12NetworkClassE>:
	...
   b8560:	67bd 000b 67c7 000b 67d1 000b 67db 000b     .g...g...g...g..
   b8570:	67e5 000b 67f1 000b 67fd 000b 6805 000b     .g...g...g...h..
   b8580:	680d 000b 6819 000b 6821 000b 682b 000b     .h...h..!h..+h..
   b8590:	6835 000b                                   5h..

000b8594 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b8594:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   b85a4:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000b85b4 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b85bc:	6e2d 000b 6e51 000b 733b 000b 6e5f 000b     -n..Qn..;s.._n..
   b85cc:	6e31 000b                                   1n..

000b85d0 <_ZTV9TCPClient>:
	...
   b85d8:	4111 000b 4145 000b 6da9 000b 6dc3 000b     .A..EA...m...m..
   b85e8:	71d1 000b 6ded 000b 7047 000b 6e21 000b     .q...m..Gp..!n..
   b85f8:	70d9 000b 6f19 000b 7075 000b 7285 000b     .p...o..up...r..
   b8608:	7015 000b 6e23 000b 6dd5 000b 6e65 000b     .p..#n...m..en..
   b8618:	6ef9 000b 5925 252d 2d6d 6425 2554 3a48     .n..%Y-%m-%dT%H:
   b8628:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b8638 <_ZTV11USARTSerial>:
	...
   b8640:	7355 000b 73c1 000b 7399 000b 6921 000b     Us...s...s..!i..
   b8650:	7369 000b 7385 000b 7377 000b 7393 000b     is...s..ws...s..
   b8660:	7357 000b 735b 000b                         Ws..[s..

000b8668 <_ZTV9USBSerial>:
	...
   b8670:	73ff 000b 7467 000b 743d 000b 6921 000b     .s..gt..=t..!i..
   b8680:	742f 000b 7401 000b 7411 000b 7461 000b     /t...t...t..at..
   b8690:	7421 000b 73f9 000b                         !t...s..

000b8698 <_ZTVN5spark9WiFiClassE>:
	...
   b86a0:	7567 000b 755d 000b 7553 000b 7509 000b     gu..]u..Su...u..
   b86b0:	7547 000b 753b 000b 67fd 000b 6805 000b     Gu..;u...g...h..
   b86c0:	752f 000b 7527 000b 751d 000b 7513 000b     /u..'u...u...u..
   b86d0:	6835 000b                                   5h..

000b86d4 <_ZSt7nothrow>:
	...

000b86d5 <_ZTSSt19_Sp_make_shared_tag>:
   b86d5:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b86e5:	6572 5f64 6174 0067 0000                     red_tag....

000b86f0 <_ZTISt19_Sp_make_shared_tag>:
   b86f0:	8730 000b 86d5 000b                         0.......

000b86f8 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b86f8:	8790 000b 8704 000b 87b4 000b               ............

000b8704 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b8704:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b8714:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b8724:	0045 0000                                   E...

000b8728 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b8728:	0000 0000 86f8 000b 794d 000b 7961 000b     ........My..ay..
   b8738:	7af5 000b 7af5 000b 79cb 000b 790d 000b     .z...z...y...y..
   b8748:	79b3 000b 7975 000b 793f 000b               .y..uy..?y..

000b8754 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b8754:	8790 000b 8760 000b 86f8 000b               ....`.......

000b8760 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b8760:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b8770:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b8780:	666e 456f 0000 0000                         nfoE....

000b8788 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b8788:	0000 0000 8754 000b 79f5 000b 7a09 000b     ....T....y...z..
   b8798:	7af5 000b 7af5 000b 79cb 000b 790d 000b     .z...z...y...y..
   b87a8:	7ac9 000b 7a55 000b 7a1d 000b               .z..Uz...z..

000b87b4 <_ZTISt9type_info>:
   b87b4:	8730 000b 87bc 000b                         0.......

000b87bc <_ZTSSt9type_info>:
   b87bc:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b87cc:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b87dc:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b87ec:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b87fc:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b880c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b881c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b882c:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b8839 <_ctype_>:
   b8839:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b8849:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b8859:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b8869:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b8879:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b8889:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b8899:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b88a9:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b88b9:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b893a <link_const_variable_data_end>:
	...

000b893c <link_constructors_location>:
   b893c:	000b48cd 	.word	0x000b48cd
   b8940:	000b4e61 	.word	0x000b4e61
   b8944:	000b6549 	.word	0x000b6549
   b8948:	000b65c1 	.word	0x000b65c1
   b894c:	000b67ad 	.word	0x000b67ad
   b8950:	000b690d 	.word	0x000b690d
   b8954:	000b6a49 	.word	0x000b6a49
   b8958:	000b6d85 	.word	0x000b6d85
   b895c:	000b7341 	.word	0x000b7341
   b8960:	000b7571 	.word	0x000b7571

000b8964 <link_constructors_end>:
	...
