
/Users/kdneeley/Documents/IoT/capstone/prototype_solarPoweredParkBench/target/4.0.2/argon/prototype_solarPoweredParkBench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000040b4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b80d0  000b80d0  000080d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b80f4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000484  2003e1cc  000b80f8  0001e1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001a0  2003e650  2003e650  0002e650  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b857c  000b857c  0002857c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b85a4  000b85a4  000285a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0012105d  00000000  00000000  000285a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00013c67  00000000  00000000  00149605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003d0fd  00000000  00000000  0015d26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002e90  00000000  00000000  0019a369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a3e8  00000000  00000000  0019d1f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039cf9  00000000  00000000  001a75e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00043357  00000000  00000000  001e12da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00132b11  00000000  00000000  00224631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008394  00000000  00000000  00357144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 f8e5 	bl	b71fc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 f907 	bl	b724c <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e1cc 	.word	0x2003e1cc
   b4048:	000b80f8 	.word	0x000b80f8
   b404c:	2003e650 	.word	0x2003e650
   b4050:	2003e650 	.word	0x2003e650
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 ff71 	bl	b6f44 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b80a8 	.word	0x000b80a8
   b407c:	000b80d0 	.word	0x000b80d0

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b83c 	b.w	b40fc <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f94f 	bl	b4328 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 bf11 	b.w	b6eb4 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 bfcd 	b.w	b6030 <malloc>

000b4096 <_Znaj>:
   b4096:	f001 bfcb 	b.w	b6030 <malloc>

000b409a <_ZdaPv>:
   b409a:	f001 bfd1 	b.w	b6040 <free>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f001 bfcf 	b.w	b6040 <free>
	...

000b40a4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f001 ff02 	bl	b5eb4 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b5ba5 	.word	0x000b5ba5
   b40b8:	000b73a8 	.word	0x000b73a8

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40cc:	b40e      	push	{r1, r2, r3}
   b40ce:	b503      	push	{r0, r1, lr}
   b40d0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40d2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40d8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40da:	f002 fc16 	bl	b690a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40de:	b002      	add	sp, #8
   b40e0:	f85d eb04 	ldr.w	lr, [sp], #4
   b40e4:	b003      	add	sp, #12
   b40e6:	4770      	bx	lr

000b40e8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
   b40e8:	680b      	ldr	r3, [r1, #0]
   b40ea:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b40ec:	684b      	ldr	r3, [r1, #4]
   b40ee:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b40f0:	b113      	cbz	r3, b40f8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b40f2:	685a      	ldr	r2, [r3, #4]
   b40f4:	3201      	adds	r2, #1
   b40f6:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b40f8:	4770      	bx	lr
	...

000b40fc <setup>:
uint32_t Wheel(byte WheelPos);


SYSTEM_MODE(AUTOMATIC);

void setup() {
   b40fc:	b570      	push	{r4, r5, r6, lr}
   b40fe:	b08a      	sub	sp, #40	; 0x28
    Serial.begin(9600);
   b4100:	f002 fe52 	bl	b6da8 <_Z16_fetch_usbserialv>
   b4104:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4108:	f002 fe3e 	bl	b6d88 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b410c:	2000      	movs	r0, #0
   b410e:	f001 fd61 	bl	b5bd4 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4112:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b4116:	4604      	mov	r4, r0
   b4118:	2000      	movs	r0, #0
   b411a:	f001 fd5b 	bl	b5bd4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b411e:	1b00      	subs	r0, r0, r4
   b4120:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4124:	42a8      	cmp	r0, r5
   b4126:	f171 0300 	sbcs.w	r3, r1, #0
   b412a:	d207      	bcs.n	b413c <setup+0x40>
    waitFor(Serial.isConnected, 15000);
   b412c:	f002 fe3c 	bl	b6da8 <_Z16_fetch_usbserialv>
   b4130:	f002 fe2e 	bl	b6d90 <_ZN9USBSerial11isConnectedEv>
   b4134:	b910      	cbnz	r0, b413c <setup+0x40>
            spark_process();
   b4136:	f001 fefb 	bl	b5f30 <spark_process>
        while (_while() && !_condition()) {
   b413a:	e7ed      	b.n	b4118 <setup+0x1c>
   b413c:	f002 fe34 	bl	b6da8 <_Z16_fetch_usbserialv>
   b4140:	f002 fe26 	bl	b6d90 <_ZN9USBSerial11isConnectedEv>
        return spark_deviceID();
   b4144:	a806      	add	r0, sp, #24
   b4146:	f001 fefb 	bl	b5f40 <spark_deviceID>
    String subscriptionName = String::format("%s/%s/", System.deviceID().c_str(), EVENT_NAME);
   b414a:	4b3a      	ldr	r3, [pc, #232]	; (b4234 <setup+0x138>)
   b414c:	9a06      	ldr	r2, [sp, #24]
   b414e:	681b      	ldr	r3, [r3, #0]
   b4150:	4939      	ldr	r1, [pc, #228]	; (b4238 <setup+0x13c>)
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4152:	4d3a      	ldr	r5, [pc, #232]	; (b423c <setup+0x140>)

    //Connect to Internet but not Particle Cloud
    WiFi.on();
    WiFi.connect();
    while(WiFi.connecting()) {
        Serial.printf(".");
   b4154:	4e3a      	ldr	r6, [pc, #232]	; (b4240 <setup+0x144>)
    String subscriptionName = String::format("%s/%s/", System.deviceID().c_str(), EVENT_NAME);
   b4156:	a802      	add	r0, sp, #8
   b4158:	f002 fd2e 	bl	b6bb8 <_ZN6String6formatEPKcz>
   b415c:	a806      	add	r0, sp, #24
   b415e:	f002 fccb 	bl	b6af8 <_ZN6StringD1Ev>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b4162:	2300      	movs	r3, #0
   b4164:	461a      	mov	r2, r3
   b4166:	e9cd 3300 	strd	r3, r3, [sp]
   b416a:	4936      	ldr	r1, [pc, #216]	; (b4244 <setup+0x148>)
   b416c:	9802      	ldr	r0, [sp, #8]
   b416e:	f001 feef 	bl	b5f50 <spark_subscribe>
    Serial.printf("Subscribing to %s\n", subscriptionName.c_str());
   b4172:	f002 fe19 	bl	b6da8 <_Z16_fetch_usbserialv>
   b4176:	9a02      	ldr	r2, [sp, #8]
   b4178:	4933      	ldr	r1, [pc, #204]	; (b4248 <setup+0x14c>)
   b417a:	f7ff ffa7 	bl	b40cc <_ZN5Print6printfEPKcz>
    pixel.begin();
   b417e:	4833      	ldr	r0, [pc, #204]	; (b424c <setup+0x150>)
   b4180:	f000 fcf3 	bl	b4b6a <_ZN17Adafruit_NeoPixel5beginEv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4184:	2300      	movs	r3, #0
   b4186:	461a      	mov	r2, r3
   b4188:	4619      	mov	r1, r3
   b418a:	6868      	ldr	r0, [r5, #4]
   b418c:	f001 ff10 	bl	b5fb0 <network_on>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   b4190:	2300      	movs	r3, #0
   b4192:	6868      	ldr	r0, [r5, #4]
   b4194:	461a      	mov	r2, r3
   b4196:	4619      	mov	r1, r3
   b4198:	f001 feea 	bl	b5f70 <network_connect>
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   b419c:	2200      	movs	r2, #0
   b419e:	6868      	ldr	r0, [r5, #4]
   b41a0:	4611      	mov	r1, r2
   b41a2:	f001 feed 	bl	b5f80 <network_connecting>
    while(WiFi.connecting()) {
   b41a6:	4604      	mov	r4, r0
   b41a8:	b128      	cbz	r0, b41b6 <setup+0xba>
        Serial.printf(".");
   b41aa:	f002 fdfd 	bl	b6da8 <_Z16_fetch_usbserialv>
   b41ae:	4631      	mov	r1, r6
   b41b0:	f7ff ff8c 	bl	b40cc <_ZN5Print6printfEPKcz>
    while(WiFi.connecting()) {
   b41b4:	e7f2      	b.n	b419c <setup+0xa0>
    }
    Serial.printf("\n\n");
   b41b6:	f002 fdf7 	bl	b6da8 <_Z16_fetch_usbserialv>
   b41ba:	4925      	ldr	r1, [pc, #148]	; (b4250 <setup+0x154>)
   b41bc:	f7ff ff86 	bl	b40cc <_ZN5Print6printfEPKcz>


    //initialize Sound Input
   // Define our pin modes
    pinMode(STROBE, OUTPUT);
   b41c0:	2101      	movs	r1, #1
   b41c2:	2010      	movs	r0, #16
   b41c4:	f002 ff2e 	bl	b7024 <pinMode>
    pinMode(RESETPIN, OUTPUT);
   b41c8:	2101      	movs	r1, #1
   b41ca:	2011      	movs	r0, #17
   b41cc:	f002 ff2a 	bl	b7024 <pinMode>
    pinMode(OUT, INPUT);
   b41d0:	4621      	mov	r1, r4
   b41d2:	200f      	movs	r0, #15
   b41d4:	f002 ff26 	bl	b7024 <pinMode>
 
// Initialize the Sound Sensor Pins
    digitalWrite(RESETPIN, LOW);
   b41d8:	4621      	mov	r1, r4
   b41da:	2011      	movs	r0, #17
   b41dc:	f002 ff33 	bl	b7046 <digitalWrite>
    digitalWrite(STROBE, LOW);
   b41e0:	4621      	mov	r1, r4
   b41e2:	2010      	movs	r0, #16
   b41e4:	f002 ff2f 	bl	b7046 <digitalWrite>
    delay(1);
   b41e8:	2001      	movs	r0, #1
   b41ea:	f001 ff51 	bl	b6090 <delay>
 
  // Reset MSGEQ7 
    digitalWrite(RESETPIN, HIGH);
   b41ee:	2101      	movs	r1, #1
   b41f0:	2011      	movs	r0, #17
   b41f2:	f002 ff28 	bl	b7046 <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b41f6:	4620      	mov	r0, r4
   b41f8:	f001 fcd4 	bl	b5ba4 <HAL_Delay_Microseconds>
    delayMicroseconds(.1);
    digitalWrite(RESETPIN, LOW);
   b41fc:	4621      	mov	r1, r4
   b41fe:	2011      	movs	r0, #17
   b4200:	f002 ff21 	bl	b7046 <digitalWrite>
    digitalWrite(STROBE, HIGH); 
   b4204:	2101      	movs	r1, #1
   b4206:	2010      	movs	r0, #16
   b4208:	f002 ff1d 	bl	b7046 <digitalWrite>
   b420c:	2048      	movs	r0, #72	; 0x48
   b420e:	f001 fcc9 	bl	b5ba4 <HAL_Delay_Microseconds>
    delayMicroseconds(72);

//Initialize the OLED
    myDisplay.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4212:	223c      	movs	r2, #60	; 0x3c
   b4214:	2102      	movs	r1, #2
   b4216:	480f      	ldr	r0, [pc, #60]	; (b4254 <setup+0x158>)
   b4218:	f001 fbdc 	bl	b59d4 <_ZN16Adafruit_SSD13065beginEhh>
    myDisplay.clearDisplay();
   b421c:	480d      	ldr	r0, [pc, #52]	; (b4254 <setup+0x158>)
   b421e:	f001 faf1 	bl	b5804 <_ZN16Adafruit_SSD130612clearDisplayEv>

//Initialize the IR Distance Sensor
    pinMode(MOTIONSENSOR, INPUT);
   b4222:	4621      	mov	r1, r4
   b4224:	2012      	movs	r0, #18
   b4226:	f002 fefd 	bl	b7024 <pinMode>
    String subscriptionName = String::format("%s/%s/", System.deviceID().c_str(), EVENT_NAME);
   b422a:	a802      	add	r0, sp, #8
   b422c:	f002 fc64 	bl	b6af8 <_ZN6StringD1Ev>
}
   b4230:	b00a      	add	sp, #40	; 0x28
   b4232:	bd70      	pop	{r4, r5, r6, pc}
   b4234:	2003e1cc 	.word	0x2003e1cc
   b4238:	000b73bd 	.word	0x000b73bd
   b423c:	2003e718 	.word	0x2003e718
   b4240:	000b73d7 	.word	0x000b73d7
   b4244:	000b4975 	.word	0x000b4975
   b4248:	000b73c4 	.word	0x000b73c4
   b424c:	2003e684 	.word	0x2003e684
   b4250:	000b73d9 	.word	0x000b73d9
   b4254:	2003e660 	.word	0x2003e660

000b4258 <_Z5Wheelh>:
    pixel.show();
    delay(holdOn);
  }
}
uint32_t Wheel(byte WheelPos) {
  if(WheelPos < 85) {
   b4258:	2854      	cmp	r0, #84	; 0x54
   b425a:	d809      	bhi.n	b4270 <_Z5Wheelh+0x18>
   return pixel.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
   b425c:	eba0 0180 	sub.w	r1, r0, r0, lsl #2
   b4260:	3901      	subs	r1, #1
   b4262:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   b4266:	2200      	movs	r2, #0
   b4268:	b2c9      	uxtb	r1, r1
  } else if(WheelPos < 170) {
   WheelPos -= 85;
   return pixel.Color(255 - WheelPos * 3, 0, WheelPos * 3);
   b426a:	b2c0      	uxtb	r0, r0
  } else {
   WheelPos -= 170;
   return pixel.Color(0, WheelPos * 3, 255 - WheelPos * 3);
   b426c:	f000 bea5 	b.w	b4fba <_ZN17Adafruit_NeoPixel5ColorEhhh>
  } else if(WheelPos < 170) {
   b4270:	28a9      	cmp	r0, #169	; 0xa9
   b4272:	d809      	bhi.n	b4288 <_Z5Wheelh+0x30>
   WheelPos -= 85;
   b4274:	3855      	subs	r0, #85	; 0x55
   b4276:	b2c0      	uxtb	r0, r0
   return pixel.Color(255 - WheelPos * 3, 0, WheelPos * 3);
   b4278:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   b427c:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
   b4280:	3801      	subs	r0, #1
   b4282:	b2d2      	uxtb	r2, r2
   b4284:	2100      	movs	r1, #0
   b4286:	e7f0      	b.n	b426a <_Z5Wheelh+0x12>
   WheelPos -= 170;
   b4288:	3056      	adds	r0, #86	; 0x56
   b428a:	b2c1      	uxtb	r1, r0
   return pixel.Color(0, WheelPos * 3, 255 - WheelPos * 3);
   b428c:	eba1 0281 	sub.w	r2, r1, r1, lsl #2
   b4290:	3a01      	subs	r2, #1
   b4292:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   b4296:	b2d2      	uxtb	r2, r2
   b4298:	b2c9      	uxtb	r1, r1
   b429a:	2000      	movs	r0, #0
   b429c:	e7e6      	b.n	b426c <_Z5Wheelh+0x14>
	...

000b42a0 <_Z7rainBowh>:
void rainBow(uint8_t holdOn) {
   b42a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for(i=0; i<pixel.numPixels(); i++) {
   b42a4:	4f11      	ldr	r7, [pc, #68]	; (b42ec <_Z7rainBowh+0x4c>)
void rainBow(uint8_t holdOn) {
   b42a6:	4606      	mov	r6, r0
  for(j=0; j<256; j++) {
   b42a8:	2400      	movs	r4, #0
   b42aa:	2500      	movs	r5, #0
    for(i=0; i<pixel.numPixels(); i++) {
   b42ac:	480f      	ldr	r0, [pc, #60]	; (b42ec <_Z7rainBowh+0x4c>)
   b42ae:	f000 fe89 	bl	b4fc4 <_ZNK17Adafruit_NeoPixel9numPixelsEv>
   b42b2:	fa1f f885 	uxth.w	r8, r5
   b42b6:	4540      	cmp	r0, r8
   b42b8:	d90a      	bls.n	b42d0 <_Z7rainBowh+0x30>
      pixel.setPixelColor(i, Wheel((i+j) & 255));
   b42ba:	1928      	adds	r0, r5, r4
   b42bc:	b2c0      	uxtb	r0, r0
   b42be:	f7ff ffcb 	bl	b4258 <_Z5Wheelh>
   b42c2:	4641      	mov	r1, r8
   b42c4:	4602      	mov	r2, r0
   b42c6:	4638      	mov	r0, r7
   b42c8:	f000 fe34 	bl	b4f34 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
    for(i=0; i<pixel.numPixels(); i++) {
   b42cc:	3501      	adds	r5, #1
   b42ce:	e7ed      	b.n	b42ac <_Z7rainBowh+0xc>
    pixel.show();
   b42d0:	4638      	mov	r0, r7
  for(j=0; j<256; j++) {
   b42d2:	3401      	adds	r4, #1
    pixel.show();
   b42d4:	f000 fc82 	bl	b4bdc <_ZN17Adafruit_NeoPixel4showEv>
  for(j=0; j<256; j++) {
   b42d8:	b2a4      	uxth	r4, r4
    delay(holdOn);
   b42da:	4630      	mov	r0, r6
   b42dc:	f001 fed8 	bl	b6090 <delay>
  for(j=0; j<256; j++) {
   b42e0:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   b42e4:	d1e1      	bne.n	b42aa <_Z7rainBowh+0xa>
}
   b42e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b42ea:	bf00      	nop
   b42ec:	2003e684 	.word	0x2003e684

000b42f0 <_Z9pixelFilliiii>:
        myDisplay.display();
    }
}

//NEOPIXEL FUNCTIONS
int pixelFill(int startPixel, int endPixel, int brightness, int hexColor) {
   b42f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b42f2:	4604      	mov	r4, r0
   b42f4:	460d      	mov	r5, r1
            // pixel.clear();
            // pixel.show();
            pixel.setBrightness(brightness);
   b42f6:	480b      	ldr	r0, [pc, #44]	; (b4324 <_Z9pixelFilliiii+0x34>)
            for(int i = startPixel; i < endPixel; i++) {
                pixel.setPixelColor(i, hexColor);
   b42f8:	4f0a      	ldr	r7, [pc, #40]	; (b4324 <_Z9pixelFilliiii+0x34>)
            pixel.setBrightness(brightness);
   b42fa:	b2d1      	uxtb	r1, r2
int pixelFill(int startPixel, int endPixel, int brightness, int hexColor) {
   b42fc:	461e      	mov	r6, r3
            pixel.setBrightness(brightness);
   b42fe:	f000 fe63 	bl	b4fc8 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
            for(int i = startPixel; i < endPixel; i++) {
   b4302:	42ac      	cmp	r4, r5
   b4304:	da06      	bge.n	b4314 <_Z9pixelFilliiii+0x24>
                pixel.setPixelColor(i, hexColor);
   b4306:	b2a1      	uxth	r1, r4
   b4308:	4632      	mov	r2, r6
   b430a:	4638      	mov	r0, r7
   b430c:	f000 fe12 	bl	b4f34 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
            for(int i = startPixel; i < endPixel; i++) {
   b4310:	3401      	adds	r4, #1
   b4312:	e7f6      	b.n	b4302 <_Z9pixelFilliiii+0x12>
            }
            pixel.show();
   b4314:	4803      	ldr	r0, [pc, #12]	; (b4324 <_Z9pixelFilliiii+0x34>)
   b4316:	f000 fc61 	bl	b4bdc <_ZN17Adafruit_NeoPixel4showEv>
            delay(100);
   b431a:	2064      	movs	r0, #100	; 0x64
   b431c:	f001 feb8 	bl	b6090 <delay>
            // pixel.clear();
            // pixel.show();

            return(endPixel);
}
   b4320:	4628      	mov	r0, r5
   b4322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4324:	2003e684 	.word	0x2003e684

000b4328 <loop>:
void loop() {
   b4328:	b5f0      	push	{r4, r5, r6, r7, lr}
    distance = analogRead(MOTIONSENSOR); //Get Distance to determine if the program will run given a presence
   b432a:	2012      	movs	r0, #18
void loop() {
   b432c:	b085      	sub	sp, #20
    distance = analogRead(MOTIONSENSOR); //Get Distance to determine if the program will run given a presence
   b432e:	f002 fea3 	bl	b7078 <analogRead>
   b4332:	4dc9      	ldr	r5, [pc, #804]	; (b4658 <loop+0x330>)
    if(distance > distanceThreshold) { //if a presence is sensed run the program
   b4334:	4ec9      	ldr	r6, [pc, #804]	; (b465c <loop+0x334>)
    distance = analogRead(MOTIONSENSOR); //Get Distance to determine if the program will run given a presence
   b4336:	6028      	str	r0, [r5, #0]
    Serial.printf("Distance Read is %i\n", distance);
   b4338:	f002 fd36 	bl	b6da8 <_Z16_fetch_usbserialv>
   b433c:	682a      	ldr	r2, [r5, #0]
   b433e:	49c8      	ldr	r1, [pc, #800]	; (b4660 <loop+0x338>)
   b4340:	f7ff fec4 	bl	b40cc <_ZN5Print6printfEPKcz>
    if(distance > distanceThreshold) { //if a presence is sensed run the program
   b4344:	682a      	ldr	r2, [r5, #0]
   b4346:	6833      	ldr	r3, [r6, #0]
   b4348:	429a      	cmp	r2, r3
   b434a:	f340 82d4 	ble.w	b48f6 <loop+0x5ce>
        pixelFill(0, 16, 255, fullyellow);
   b434e:	4bc5      	ldr	r3, [pc, #788]	; (b4664 <loop+0x33c>)
        soundLevel[0] = analogRead(OUT);
   b4350:	4cc5      	ldr	r4, [pc, #788]	; (b4668 <loop+0x340>)
        pixelFill(0, 16, 255, fullyellow);
   b4352:	22ff      	movs	r2, #255	; 0xff
   b4354:	2110      	movs	r1, #16
   b4356:	2000      	movs	r0, #0
   b4358:	f7ff ffca 	bl	b42f0 <_Z9pixelFilliiii>
        pixel.show();
   b435c:	48c3      	ldr	r0, [pc, #780]	; (b466c <loop+0x344>)
   b435e:	f000 fc3d 	bl	b4bdc <_ZN17Adafruit_NeoPixel4showEv>
        myDisplay.clearDisplay();
   b4362:	48c3      	ldr	r0, [pc, #780]	; (b4670 <loop+0x348>)
   b4364:	f001 fa4e 	bl	b5804 <_ZN16Adafruit_SSD130612clearDisplayEv>
        myDisplay.display();
   b4368:	48c1      	ldr	r0, [pc, #772]	; (b4670 <loop+0x348>)
   b436a:	f001 fac3 	bl	b58f4 <_ZN16Adafruit_SSD13067displayEv>
        myDisplay.setRotation(2);
   b436e:	48c0      	ldr	r0, [pc, #768]	; (b4670 <loop+0x348>)
   b4370:	2102      	movs	r1, #2
   b4372:	f001 f85a 	bl	b542a <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor (1,1);
   b4376:	2201      	movs	r2, #1
   b4378:	4611      	mov	r1, r2
   b437a:	48bd      	ldr	r0, [pc, #756]	; (b4670 <loop+0x348>)
   b437c:	f001 f848 	bl	b5410 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.setTextSize(2);
   b4380:	48bb      	ldr	r0, [pc, #748]	; (b4670 <loop+0x348>)
   b4382:	2102      	movs	r1, #2
   b4384:	f001 f847 	bl	b5416 <_ZN12Adafruit_GFX11setTextSizeEh>
        myDisplay.setTextColor(WHITE);
   b4388:	48b9      	ldr	r0, [pc, #740]	; (b4670 <loop+0x348>)
   b438a:	2101      	movs	r1, #1
   b438c:	f001 f848 	bl	b5420 <_ZN12Adafruit_GFX12setTextColorEt>
        myDisplay.printf("04/19/2023\n05:02P 68F\nLOW: 52F  HIGH: 72F\n");
   b4390:	49b8      	ldr	r1, [pc, #736]	; (b4674 <loop+0x34c>)
   b4392:	48b7      	ldr	r0, [pc, #732]	; (b4670 <loop+0x348>)
   b4394:	f7ff fe9a 	bl	b40cc <_ZN5Print6printfEPKcz>
        myDisplay.display();
   b4398:	48b5      	ldr	r0, [pc, #724]	; (b4670 <loop+0x348>)
   b439a:	f001 faab 	bl	b58f4 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b439e:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b43a2:	f001 fe75 	bl	b6090 <delay>
        myDisplay.clearDisplay();
   b43a6:	48b2      	ldr	r0, [pc, #712]	; (b4670 <loop+0x348>)
   b43a8:	f001 fa2c 	bl	b5804 <_ZN16Adafruit_SSD130612clearDisplayEv>
        myDisplay.display();
   b43ac:	48b0      	ldr	r0, [pc, #704]	; (b4670 <loop+0x348>)
   b43ae:	f001 faa1 	bl	b58f4 <_ZN16Adafruit_SSD13067displayEv>
        myDisplay.setRotation(2);
   b43b2:	48af      	ldr	r0, [pc, #700]	; (b4670 <loop+0x348>)
   b43b4:	2102      	movs	r1, #2
   b43b6:	f001 f838 	bl	b542a <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor (1,1);
   b43ba:	2201      	movs	r2, #1
   b43bc:	4611      	mov	r1, r2
   b43be:	48ac      	ldr	r0, [pc, #688]	; (b4670 <loop+0x348>)
   b43c0:	f001 f826 	bl	b5410 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.setTextSize(1);
   b43c4:	48aa      	ldr	r0, [pc, #680]	; (b4670 <loop+0x348>)
   b43c6:	2101      	movs	r1, #1
   b43c8:	f001 f825 	bl	b5416 <_ZN12Adafruit_GFX11setTextSizeEh>
        myDisplay.setTextColor(WHITE);
   b43cc:	48a8      	ldr	r0, [pc, #672]	; (b4670 <loop+0x348>)
   b43ce:	2101      	movs	r1, #1
   b43d0:	f001 f826 	bl	b5420 <_ZN12Adafruit_GFX12setTextColorEt>
        myDisplay.printf("ETA\n05:45P : Redline\n06:45 : #66\n06:00P Rail Runner\n");
   b43d4:	49a8      	ldr	r1, [pc, #672]	; (b4678 <loop+0x350>)
   b43d6:	48a6      	ldr	r0, [pc, #664]	; (b4670 <loop+0x348>)
   b43d8:	f7ff fe78 	bl	b40cc <_ZN5Print6printfEPKcz>
        myDisplay.display();
   b43dc:	48a4      	ldr	r0, [pc, #656]	; (b4670 <loop+0x348>)
   b43de:	f001 fa89 	bl	b58f4 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b43e2:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b43e6:	f001 fe53 	bl	b6090 <delay>
        myDisplay.clearDisplay();
   b43ea:	48a1      	ldr	r0, [pc, #644]	; (b4670 <loop+0x348>)
   b43ec:	f001 fa0a 	bl	b5804 <_ZN16Adafruit_SSD130612clearDisplayEv>
        myDisplay.display();
   b43f0:	489f      	ldr	r0, [pc, #636]	; (b4670 <loop+0x348>)
   b43f2:	f001 fa7f 	bl	b58f4 <_ZN16Adafruit_SSD13067displayEv>
        myDisplay.setRotation(2);
   b43f6:	489e      	ldr	r0, [pc, #632]	; (b4670 <loop+0x348>)
   b43f8:	2102      	movs	r1, #2
   b43fa:	f001 f816 	bl	b542a <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.drawBitmap(0, 0, QRcode, 128, 64, WHITE);;
   b43fe:	2701      	movs	r7, #1
   b4400:	2340      	movs	r3, #64	; 0x40
   b4402:	2200      	movs	r2, #0
   b4404:	e9cd 3701 	strd	r3, r7, [sp, #4]
   b4408:	2380      	movs	r3, #128	; 0x80
   b440a:	4611      	mov	r1, r2
   b440c:	4898      	ldr	r0, [pc, #608]	; (b4670 <loop+0x348>)
   b440e:	9300      	str	r3, [sp, #0]
   b4410:	4b9a      	ldr	r3, [pc, #616]	; (b467c <loop+0x354>)
   b4412:	f000 fef9 	bl	b5208 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
        myDisplay.display();
   b4416:	4896      	ldr	r0, [pc, #600]	; (b4670 <loop+0x348>)
   b4418:	f001 fa6c 	bl	b58f4 <_ZN16Adafruit_SSD13067displayEv>
        delay(3000);
   b441c:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4420:	f001 fe36 	bl	b6090 <delay>
        digitalWrite(STROBE, LOW);
   b4424:	2100      	movs	r1, #0
   b4426:	2010      	movs	r0, #16
   b4428:	f002 fe0d 	bl	b7046 <digitalWrite>
   b442c:	2048      	movs	r0, #72	; 0x48
   b442e:	f001 fbb9 	bl	b5ba4 <HAL_Delay_Microseconds>
        soundLevel[0] = analogRead(OUT);
   b4432:	200f      	movs	r0, #15
   b4434:	f002 fe20 	bl	b7078 <analogRead>
   b4438:	6020      	str	r0, [r4, #0]
        Serial.printf("Level 0\n Value %i\n", soundLevel[0]);
   b443a:	f002 fcb5 	bl	b6da8 <_Z16_fetch_usbserialv>
   b443e:	6822      	ldr	r2, [r4, #0]
   b4440:	498f      	ldr	r1, [pc, #572]	; (b4680 <loop+0x358>)
   b4442:	f7ff fe43 	bl	b40cc <_ZN5Print6printfEPKcz>
        digitalWrite(STROBE, HIGH);
   b4446:	4639      	mov	r1, r7
   b4448:	2010      	movs	r0, #16
   b444a:	f002 fdfc 	bl	b7046 <digitalWrite>
   b444e:	2048      	movs	r0, #72	; 0x48
   b4450:	f001 fba8 	bl	b5ba4 <HAL_Delay_Microseconds>
        if(soundLevel[0] < 400) {
   b4454:	6823      	ldr	r3, [r4, #0]
   b4456:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b445a:	da06      	bge.n	b446a <loop+0x142>
            pixelFill(0, 2, 50, fullred);
   b445c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   b4460:	2232      	movs	r2, #50	; 0x32
   b4462:	2102      	movs	r1, #2
   b4464:	2000      	movs	r0, #0
   b4466:	f7ff ff43 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[0] >= 400 && soundLevel[0] < 1000) {
   b446a:	6823      	ldr	r3, [r4, #0]
   b446c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
   b4470:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b4474:	d206      	bcs.n	b4484 <loop+0x15c>
            pixelFill(0, 2, 100, fullred);
   b4476:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   b447a:	2264      	movs	r2, #100	; 0x64
   b447c:	2102      	movs	r1, #2
   b447e:	2000      	movs	r0, #0
   b4480:	f7ff ff36 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[0] >= 1000 && soundLevel[0] < 2000) {
   b4484:	6823      	ldr	r3, [r4, #0]
   b4486:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   b448a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b448e:	d206      	bcs.n	b449e <loop+0x176>
            pixelFill(0, 2, 150, fullred);
   b4490:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   b4494:	2296      	movs	r2, #150	; 0x96
   b4496:	2102      	movs	r1, #2
   b4498:	2000      	movs	r0, #0
   b449a:	f7ff ff29 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[0] >= 2000 && soundLevel[0] < 3000) {
   b449e:	6823      	ldr	r3, [r4, #0]
   b44a0:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
   b44a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b44a8:	d206      	bcs.n	b44b8 <loop+0x190>
            pixelFill(0, 2, 200, fullred);
   b44aa:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   b44ae:	22c8      	movs	r2, #200	; 0xc8
   b44b0:	2102      	movs	r1, #2
   b44b2:	2000      	movs	r0, #0
   b44b4:	f7ff ff1c 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[0] >= 3000) {
   b44b8:	6822      	ldr	r2, [r4, #0]
   b44ba:	f640 33b7 	movw	r3, #2999	; 0xbb7
   b44be:	429a      	cmp	r2, r3
   b44c0:	dd06      	ble.n	b44d0 <loop+0x1a8>
            pixelFill(0, 2, 255, fullred);
   b44c2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   b44c6:	22ff      	movs	r2, #255	; 0xff
   b44c8:	2102      	movs	r1, #2
   b44ca:	2000      	movs	r0, #0
   b44cc:	f7ff ff10 	bl	b42f0 <_Z9pixelFilliiii>
        digitalWrite(STROBE, LOW);
   b44d0:	2100      	movs	r1, #0
   b44d2:	2010      	movs	r0, #16
   b44d4:	f002 fdb7 	bl	b7046 <digitalWrite>
   b44d8:	2048      	movs	r0, #72	; 0x48
   b44da:	f001 fb63 	bl	b5ba4 <HAL_Delay_Microseconds>
        soundLevel[1] = analogRead(OUT);
   b44de:	200f      	movs	r0, #15
   b44e0:	f002 fdca 	bl	b7078 <analogRead>
   b44e4:	6060      	str	r0, [r4, #4]
        Serial.printf("Level 1\n Value %i\n", soundLevel[1]);
   b44e6:	f002 fc5f 	bl	b6da8 <_Z16_fetch_usbserialv>
   b44ea:	6862      	ldr	r2, [r4, #4]
   b44ec:	4965      	ldr	r1, [pc, #404]	; (b4684 <loop+0x35c>)
   b44ee:	f7ff fded 	bl	b40cc <_ZN5Print6printfEPKcz>
        digitalWrite(STROBE, HIGH);
   b44f2:	2101      	movs	r1, #1
   b44f4:	2010      	movs	r0, #16
   b44f6:	f002 fda6 	bl	b7046 <digitalWrite>
   b44fa:	2048      	movs	r0, #72	; 0x48
   b44fc:	f001 fb52 	bl	b5ba4 <HAL_Delay_Microseconds>
        if(soundLevel[1] < 400) {
   b4500:	6863      	ldr	r3, [r4, #4]
   b4502:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b4506:	da06      	bge.n	b4516 <loop+0x1ee>
            pixelFill(3, 5, 50, fullmagenta);
   b4508:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
   b450c:	2232      	movs	r2, #50	; 0x32
   b450e:	2105      	movs	r1, #5
   b4510:	2003      	movs	r0, #3
   b4512:	f7ff feed 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[1] >= 400 && soundLevel[1] < 1000) {
   b4516:	6863      	ldr	r3, [r4, #4]
   b4518:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
   b451c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b4520:	d206      	bcs.n	b4530 <loop+0x208>
            pixelFill(3, 5, 100, fullmagenta);
   b4522:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
   b4526:	2264      	movs	r2, #100	; 0x64
   b4528:	2105      	movs	r1, #5
   b452a:	2003      	movs	r0, #3
   b452c:	f7ff fee0 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[1] >= 1000 && soundLevel[1] < 2000) {
   b4530:	6863      	ldr	r3, [r4, #4]
   b4532:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   b4536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b453a:	d206      	bcs.n	b454a <loop+0x222>
            pixelFill(3, 5, 150, fullmagenta);
   b453c:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
   b4540:	2296      	movs	r2, #150	; 0x96
   b4542:	2105      	movs	r1, #5
   b4544:	2003      	movs	r0, #3
   b4546:	f7ff fed3 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[1] >= 2000 && soundLevel[1] < 3000) {
   b454a:	6863      	ldr	r3, [r4, #4]
   b454c:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
   b4550:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b4554:	d206      	bcs.n	b4564 <loop+0x23c>
            pixelFill(3, 5, 200, fullmagenta);
   b4556:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
   b455a:	22c8      	movs	r2, #200	; 0xc8
   b455c:	2105      	movs	r1, #5
   b455e:	2003      	movs	r0, #3
   b4560:	f7ff fec6 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[1] >= 3000) {
   b4564:	6862      	ldr	r2, [r4, #4]
   b4566:	f640 33b7 	movw	r3, #2999	; 0xbb7
   b456a:	429a      	cmp	r2, r3
   b456c:	dd06      	ble.n	b457c <loop+0x254>
            pixelFill(3, 5, 255, fullmagenta);
   b456e:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
   b4572:	22ff      	movs	r2, #255	; 0xff
   b4574:	2105      	movs	r1, #5
   b4576:	2003      	movs	r0, #3
   b4578:	f7ff feba 	bl	b42f0 <_Z9pixelFilliiii>
        digitalWrite(STROBE, LOW);
   b457c:	2100      	movs	r1, #0
   b457e:	2010      	movs	r0, #16
   b4580:	f002 fd61 	bl	b7046 <digitalWrite>
   b4584:	2048      	movs	r0, #72	; 0x48
   b4586:	f001 fb0d 	bl	b5ba4 <HAL_Delay_Microseconds>
        soundLevel[2] = analogRead(OUT);
   b458a:	200f      	movs	r0, #15
   b458c:	f002 fd74 	bl	b7078 <analogRead>
   b4590:	60a0      	str	r0, [r4, #8]
        Serial.printf("Level 2\n Value %i\n", soundLevel[2]);
   b4592:	f002 fc09 	bl	b6da8 <_Z16_fetch_usbserialv>
   b4596:	68a2      	ldr	r2, [r4, #8]
   b4598:	493b      	ldr	r1, [pc, #236]	; (b4688 <loop+0x360>)
   b459a:	f7ff fd97 	bl	b40cc <_ZN5Print6printfEPKcz>
        digitalWrite(STROBE, HIGH);
   b459e:	2101      	movs	r1, #1
   b45a0:	2010      	movs	r0, #16
   b45a2:	f002 fd50 	bl	b7046 <digitalWrite>
   b45a6:	2048      	movs	r0, #72	; 0x48
   b45a8:	f001 fafc 	bl	b5ba4 <HAL_Delay_Microseconds>
        if(soundLevel[2] < 400) {
   b45ac:	68a3      	ldr	r3, [r4, #8]
   b45ae:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b45b2:	da05      	bge.n	b45c0 <loop+0x298>
            pixelFill(6, 8, 50, purple);
   b45b4:	4b35      	ldr	r3, [pc, #212]	; (b468c <loop+0x364>)
   b45b6:	2232      	movs	r2, #50	; 0x32
   b45b8:	2108      	movs	r1, #8
   b45ba:	2006      	movs	r0, #6
   b45bc:	f7ff fe98 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[2] >= 400 && soundLevel[2] < 1000) {
   b45c0:	68a3      	ldr	r3, [r4, #8]
   b45c2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
   b45c6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b45ca:	d205      	bcs.n	b45d8 <loop+0x2b0>
            pixelFill(6, 8, 100, purple);
   b45cc:	4b2f      	ldr	r3, [pc, #188]	; (b468c <loop+0x364>)
   b45ce:	2264      	movs	r2, #100	; 0x64
   b45d0:	2108      	movs	r1, #8
   b45d2:	2006      	movs	r0, #6
   b45d4:	f7ff fe8c 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[2] >= 1000 && soundLevel[2] < 2000) {
   b45d8:	68a3      	ldr	r3, [r4, #8]
   b45da:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   b45de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b45e2:	d205      	bcs.n	b45f0 <loop+0x2c8>
            pixelFill(6, 8, 150, purple);
   b45e4:	4b29      	ldr	r3, [pc, #164]	; (b468c <loop+0x364>)
   b45e6:	2296      	movs	r2, #150	; 0x96
   b45e8:	2108      	movs	r1, #8
   b45ea:	2006      	movs	r0, #6
   b45ec:	f7ff fe80 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[2] >= 2000 && soundLevel[2] < 3000) {
   b45f0:	68a3      	ldr	r3, [r4, #8]
   b45f2:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
   b45f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b45fa:	d205      	bcs.n	b4608 <loop+0x2e0>
            pixelFill(6, 8, 200, purple);
   b45fc:	4b23      	ldr	r3, [pc, #140]	; (b468c <loop+0x364>)
   b45fe:	22c8      	movs	r2, #200	; 0xc8
   b4600:	2108      	movs	r1, #8
   b4602:	2006      	movs	r0, #6
   b4604:	f7ff fe74 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[2] >= 3000) {
   b4608:	68a2      	ldr	r2, [r4, #8]
   b460a:	f640 33b7 	movw	r3, #2999	; 0xbb7
   b460e:	429a      	cmp	r2, r3
   b4610:	dd05      	ble.n	b461e <loop+0x2f6>
            pixelFill(6, 8, 255, purple);
   b4612:	4b1e      	ldr	r3, [pc, #120]	; (b468c <loop+0x364>)
   b4614:	22ff      	movs	r2, #255	; 0xff
   b4616:	2108      	movs	r1, #8
   b4618:	2006      	movs	r0, #6
   b461a:	f7ff fe69 	bl	b42f0 <_Z9pixelFilliiii>
        digitalWrite(STROBE, LOW);
   b461e:	2100      	movs	r1, #0
   b4620:	2010      	movs	r0, #16
   b4622:	f002 fd10 	bl	b7046 <digitalWrite>
   b4626:	2048      	movs	r0, #72	; 0x48
   b4628:	f001 fabc 	bl	b5ba4 <HAL_Delay_Microseconds>
        soundLevel[3] = analogRead(OUT);
   b462c:	200f      	movs	r0, #15
   b462e:	f002 fd23 	bl	b7078 <analogRead>
   b4632:	60e0      	str	r0, [r4, #12]
        Serial.printf("Level 3\n Value %i\n", soundLevel[3]);
   b4634:	f002 fbb8 	bl	b6da8 <_Z16_fetch_usbserialv>
   b4638:	68e2      	ldr	r2, [r4, #12]
   b463a:	4915      	ldr	r1, [pc, #84]	; (b4690 <loop+0x368>)
   b463c:	f7ff fd46 	bl	b40cc <_ZN5Print6printfEPKcz>
        digitalWrite(STROBE, HIGH);
   b4640:	2101      	movs	r1, #1
   b4642:	2010      	movs	r0, #16
   b4644:	f002 fcff 	bl	b7046 <digitalWrite>
   b4648:	2048      	movs	r0, #72	; 0x48
   b464a:	f001 faab 	bl	b5ba4 <HAL_Delay_Microseconds>
        if(soundLevel[3] < 400) {
   b464e:	68e3      	ldr	r3, [r4, #12]
   b4650:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b4654:	da24      	bge.n	b46a0 <loop+0x378>
   b4656:	e01d      	b.n	b4694 <loop+0x36c>
   b4658:	2003e65c 	.word	0x2003e65c
   b465c:	2003e1d0 	.word	0x2003e1d0
   b4660:	000b73dc 	.word	0x000b73dc
   b4664:	00ffff00 	.word	0x00ffff00
   b4668:	2003e698 	.word	0x2003e698
   b466c:	2003e684 	.word	0x2003e684
   b4670:	2003e660 	.word	0x2003e660
   b4674:	000b73f1 	.word	0x000b73f1
   b4678:	000b741c 	.word	0x000b741c
   b467c:	000b751e 	.word	0x000b751e
   b4680:	000b7451 	.word	0x000b7451
   b4684:	000b7464 	.word	0x000b7464
   b4688:	000b7477 	.word	0x000b7477
   b468c:	007700ff 	.word	0x007700ff
   b4690:	000b748a 	.word	0x000b748a
            pixelFill(9, 11, 50, fullblue);
   b4694:	23ff      	movs	r3, #255	; 0xff
   b4696:	2232      	movs	r2, #50	; 0x32
   b4698:	210b      	movs	r1, #11
   b469a:	2009      	movs	r0, #9
   b469c:	f7ff fe28 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[3] >= 400 && soundLevel[3] < 1000) {
   b46a0:	68e3      	ldr	r3, [r4, #12]
   b46a2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
   b46a6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b46aa:	d205      	bcs.n	b46b8 <loop+0x390>
            pixelFill(9, 11, 100, fullblue);
   b46ac:	23ff      	movs	r3, #255	; 0xff
   b46ae:	2264      	movs	r2, #100	; 0x64
   b46b0:	210b      	movs	r1, #11
   b46b2:	2009      	movs	r0, #9
   b46b4:	f7ff fe1c 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[3] >= 1000 && soundLevel[3] < 2000) {
   b46b8:	68e3      	ldr	r3, [r4, #12]
   b46ba:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   b46be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b46c2:	d205      	bcs.n	b46d0 <loop+0x3a8>
            pixelFill(9, 11, 150, fullblue);
   b46c4:	23ff      	movs	r3, #255	; 0xff
   b46c6:	2296      	movs	r2, #150	; 0x96
   b46c8:	210b      	movs	r1, #11
   b46ca:	2009      	movs	r0, #9
   b46cc:	f7ff fe10 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[3] >= 2000 && soundLevel[3] < 3000) {
   b46d0:	68e3      	ldr	r3, [r4, #12]
   b46d2:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
   b46d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b46da:	d205      	bcs.n	b46e8 <loop+0x3c0>
            pixelFill(9, 11, 200, fullblue);
   b46dc:	23ff      	movs	r3, #255	; 0xff
   b46de:	22c8      	movs	r2, #200	; 0xc8
   b46e0:	210b      	movs	r1, #11
   b46e2:	2009      	movs	r0, #9
   b46e4:	f7ff fe04 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[3] >= 3000) {
   b46e8:	68e2      	ldr	r2, [r4, #12]
   b46ea:	f640 33b7 	movw	r3, #2999	; 0xbb7
   b46ee:	429a      	cmp	r2, r3
   b46f0:	dd05      	ble.n	b46fe <loop+0x3d6>
            pixelFill(9, 11, 255, fullblue);
   b46f2:	23ff      	movs	r3, #255	; 0xff
   b46f4:	461a      	mov	r2, r3
   b46f6:	210b      	movs	r1, #11
   b46f8:	2009      	movs	r0, #9
   b46fa:	f7ff fdf9 	bl	b42f0 <_Z9pixelFilliiii>
        digitalWrite(STROBE, LOW);
   b46fe:	2100      	movs	r1, #0
   b4700:	2010      	movs	r0, #16
   b4702:	f002 fca0 	bl	b7046 <digitalWrite>
   b4706:	2048      	movs	r0, #72	; 0x48
   b4708:	f001 fa4c 	bl	b5ba4 <HAL_Delay_Microseconds>
        soundLevel[4] = analogRead(OUT);
   b470c:	200f      	movs	r0, #15
   b470e:	f002 fcb3 	bl	b7078 <analogRead>
   b4712:	6120      	str	r0, [r4, #16]
        Serial.printf("Level 4\n Value %i\n", soundLevel[4]);
   b4714:	f002 fb48 	bl	b6da8 <_Z16_fetch_usbserialv>
   b4718:	6922      	ldr	r2, [r4, #16]
   b471a:	4983      	ldr	r1, [pc, #524]	; (b4928 <loop+0x600>)
   b471c:	f7ff fcd6 	bl	b40cc <_ZN5Print6printfEPKcz>
        digitalWrite(STROBE, HIGH);
   b4720:	2101      	movs	r1, #1
   b4722:	2010      	movs	r0, #16
   b4724:	f002 fc8f 	bl	b7046 <digitalWrite>
   b4728:	2048      	movs	r0, #72	; 0x48
   b472a:	f001 fa3b 	bl	b5ba4 <HAL_Delay_Microseconds>
        if(soundLevel[4] < 400) {
   b472e:	6923      	ldr	r3, [r4, #16]
   b4730:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b4734:	da06      	bge.n	b4744 <loop+0x41c>
            pixelFill(12, 13, 50, fullgreen);
   b4736:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b473a:	2232      	movs	r2, #50	; 0x32
   b473c:	210d      	movs	r1, #13
   b473e:	200c      	movs	r0, #12
   b4740:	f7ff fdd6 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[4] >= 400 && soundLevel[4] < 1000) {
   b4744:	6923      	ldr	r3, [r4, #16]
   b4746:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
   b474a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b474e:	d206      	bcs.n	b475e <loop+0x436>
            pixelFill(12, 13, 100, fullgreen);
   b4750:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b4754:	2264      	movs	r2, #100	; 0x64
   b4756:	210d      	movs	r1, #13
   b4758:	200c      	movs	r0, #12
   b475a:	f7ff fdc9 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[4] >= 1000 && soundLevel[4] < 2000) {
   b475e:	6923      	ldr	r3, [r4, #16]
   b4760:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   b4764:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b4768:	d206      	bcs.n	b4778 <loop+0x450>
            pixelFill(12, 13, 150, fullgreen);
   b476a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b476e:	2296      	movs	r2, #150	; 0x96
   b4770:	210d      	movs	r1, #13
   b4772:	200c      	movs	r0, #12
   b4774:	f7ff fdbc 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[4] >= 2000 && soundLevel[4] < 3000) {
   b4778:	6923      	ldr	r3, [r4, #16]
   b477a:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
   b477e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b4782:	d206      	bcs.n	b4792 <loop+0x46a>
            pixelFill(12, 13, 200, fullgreen);
   b4784:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b4788:	22c8      	movs	r2, #200	; 0xc8
   b478a:	210d      	movs	r1, #13
   b478c:	200c      	movs	r0, #12
   b478e:	f7ff fdaf 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[4] >= 3000) {
   b4792:	6922      	ldr	r2, [r4, #16]
   b4794:	f640 33b7 	movw	r3, #2999	; 0xbb7
   b4798:	429a      	cmp	r2, r3
   b479a:	dd06      	ble.n	b47aa <loop+0x482>
            pixelFill(12, 13, 255, fullgreen);
   b479c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b47a0:	22ff      	movs	r2, #255	; 0xff
   b47a2:	210d      	movs	r1, #13
   b47a4:	200c      	movs	r0, #12
   b47a6:	f7ff fda3 	bl	b42f0 <_Z9pixelFilliiii>
        digitalWrite(STROBE, LOW);
   b47aa:	2100      	movs	r1, #0
   b47ac:	2010      	movs	r0, #16
   b47ae:	f002 fc4a 	bl	b7046 <digitalWrite>
   b47b2:	2048      	movs	r0, #72	; 0x48
   b47b4:	f001 f9f6 	bl	b5ba4 <HAL_Delay_Microseconds>
        soundLevel[5] = analogRead(OUT);
   b47b8:	200f      	movs	r0, #15
   b47ba:	f002 fc5d 	bl	b7078 <analogRead>
   b47be:	6160      	str	r0, [r4, #20]
        Serial.printf("Level 5\n Value %i\n", soundLevel[5]);
   b47c0:	f002 faf2 	bl	b6da8 <_Z16_fetch_usbserialv>
   b47c4:	6962      	ldr	r2, [r4, #20]
   b47c6:	4959      	ldr	r1, [pc, #356]	; (b492c <loop+0x604>)
   b47c8:	f7ff fc80 	bl	b40cc <_ZN5Print6printfEPKcz>
        digitalWrite(STROBE, HIGH);
   b47cc:	2101      	movs	r1, #1
   b47ce:	2010      	movs	r0, #16
   b47d0:	f002 fc39 	bl	b7046 <digitalWrite>
   b47d4:	2048      	movs	r0, #72	; 0x48
   b47d6:	f001 f9e5 	bl	b5ba4 <HAL_Delay_Microseconds>
        if(soundLevel[4] < 400) {
   b47da:	6923      	ldr	r3, [r4, #16]
   b47dc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b47e0:	da05      	bge.n	b47ee <loop+0x4c6>
            pixelFill(14, 15, 50, fullyellow);
   b47e2:	4b53      	ldr	r3, [pc, #332]	; (b4930 <loop+0x608>)
   b47e4:	2232      	movs	r2, #50	; 0x32
   b47e6:	210f      	movs	r1, #15
   b47e8:	200e      	movs	r0, #14
   b47ea:	f7ff fd81 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[5] >= 400 && soundLevel[5] < 1000) {
   b47ee:	6963      	ldr	r3, [r4, #20]
   b47f0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
   b47f4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b47f8:	d205      	bcs.n	b4806 <loop+0x4de>
            pixelFill(14, 15, 100, fullyellow);
   b47fa:	4b4d      	ldr	r3, [pc, #308]	; (b4930 <loop+0x608>)
   b47fc:	2264      	movs	r2, #100	; 0x64
   b47fe:	210f      	movs	r1, #15
   b4800:	200e      	movs	r0, #14
   b4802:	f7ff fd75 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[5] >= 1000 && soundLevel[5] < 2000) {
   b4806:	6963      	ldr	r3, [r4, #20]
   b4808:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   b480c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b4810:	d205      	bcs.n	b481e <loop+0x4f6>
            pixelFill(14, 15, 150, fullyellow);
   b4812:	4b47      	ldr	r3, [pc, #284]	; (b4930 <loop+0x608>)
   b4814:	2296      	movs	r2, #150	; 0x96
   b4816:	210f      	movs	r1, #15
   b4818:	200e      	movs	r0, #14
   b481a:	f7ff fd69 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[5] >= 2000 && soundLevel[5] < 3000) {
   b481e:	6963      	ldr	r3, [r4, #20]
   b4820:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
   b4824:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b4828:	d205      	bcs.n	b4836 <loop+0x50e>
            pixelFill(14, 15, 200, fullyellow);
   b482a:	4b41      	ldr	r3, [pc, #260]	; (b4930 <loop+0x608>)
   b482c:	22c8      	movs	r2, #200	; 0xc8
   b482e:	210f      	movs	r1, #15
   b4830:	200e      	movs	r0, #14
   b4832:	f7ff fd5d 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[5] >= 3000) {
   b4836:	6962      	ldr	r2, [r4, #20]
   b4838:	f640 33b7 	movw	r3, #2999	; 0xbb7
   b483c:	429a      	cmp	r2, r3
   b483e:	dd05      	ble.n	b484c <loop+0x524>
            pixelFill(14, 15, 255, fullyellow);
   b4840:	4b3b      	ldr	r3, [pc, #236]	; (b4930 <loop+0x608>)
   b4842:	22ff      	movs	r2, #255	; 0xff
   b4844:	210f      	movs	r1, #15
   b4846:	200e      	movs	r0, #14
   b4848:	f7ff fd52 	bl	b42f0 <_Z9pixelFilliiii>
        digitalWrite(STROBE, LOW);
   b484c:	2100      	movs	r1, #0
   b484e:	2010      	movs	r0, #16
   b4850:	f002 fbf9 	bl	b7046 <digitalWrite>
   b4854:	2048      	movs	r0, #72	; 0x48
   b4856:	f001 f9a5 	bl	b5ba4 <HAL_Delay_Microseconds>
        soundLevel[6] = analogRead(OUT);
   b485a:	200f      	movs	r0, #15
   b485c:	f002 fc0c 	bl	b7078 <analogRead>
   b4860:	61a0      	str	r0, [r4, #24]
        Serial.printf("Level 6\n Value %i\n", soundLevel[6]);
   b4862:	f002 faa1 	bl	b6da8 <_Z16_fetch_usbserialv>
   b4866:	69a2      	ldr	r2, [r4, #24]
   b4868:	4932      	ldr	r1, [pc, #200]	; (b4934 <loop+0x60c>)
   b486a:	f7ff fc2f 	bl	b40cc <_ZN5Print6printfEPKcz>
        digitalWrite(STROBE, HIGH);
   b486e:	2101      	movs	r1, #1
   b4870:	2010      	movs	r0, #16
   b4872:	f002 fbe8 	bl	b7046 <digitalWrite>
   b4876:	2048      	movs	r0, #72	; 0x48
   b4878:	f001 f994 	bl	b5ba4 <HAL_Delay_Microseconds>
        if(soundLevel[6] < 400) {
   b487c:	69a3      	ldr	r3, [r4, #24]
   b487e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b4882:	da05      	bge.n	b4890 <loop+0x568>
            pixelFill(14, 15, 50, orange);
   b4884:	4b2c      	ldr	r3, [pc, #176]	; (b4938 <loop+0x610>)
   b4886:	2232      	movs	r2, #50	; 0x32
   b4888:	210f      	movs	r1, #15
   b488a:	200e      	movs	r0, #14
   b488c:	f7ff fd30 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[6] >= 400 && soundLevel[6] < 1000) {
   b4890:	4c2a      	ldr	r4, [pc, #168]	; (b493c <loop+0x614>)
   b4892:	69a3      	ldr	r3, [r4, #24]
   b4894:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
   b4898:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b489c:	d205      	bcs.n	b48aa <loop+0x582>
            pixelFill(16, 16, 100, orange);
   b489e:	2110      	movs	r1, #16
   b48a0:	4b25      	ldr	r3, [pc, #148]	; (b4938 <loop+0x610>)
   b48a2:	2264      	movs	r2, #100	; 0x64
   b48a4:	4608      	mov	r0, r1
   b48a6:	f7ff fd23 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[6] >= 1000 && soundLevel[6] < 2000) {
   b48aa:	69a3      	ldr	r3, [r4, #24]
   b48ac:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   b48b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b48b4:	d205      	bcs.n	b48c2 <loop+0x59a>
            pixelFill(16, 16, 150, orange);
   b48b6:	2110      	movs	r1, #16
   b48b8:	4b1f      	ldr	r3, [pc, #124]	; (b4938 <loop+0x610>)
   b48ba:	2296      	movs	r2, #150	; 0x96
   b48bc:	4608      	mov	r0, r1
   b48be:	f7ff fd17 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[6] >= 2000 && soundLevel[6] < 3000) {
   b48c2:	69a3      	ldr	r3, [r4, #24]
   b48c4:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
   b48c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b48cc:	d205      	bcs.n	b48da <loop+0x5b2>
            pixelFill(16, 16, 200, orange);
   b48ce:	2110      	movs	r1, #16
   b48d0:	4b19      	ldr	r3, [pc, #100]	; (b4938 <loop+0x610>)
   b48d2:	22c8      	movs	r2, #200	; 0xc8
   b48d4:	4608      	mov	r0, r1
   b48d6:	f7ff fd0b 	bl	b42f0 <_Z9pixelFilliiii>
        if(soundLevel[6] >= 3000) {
   b48da:	69a2      	ldr	r2, [r4, #24]
   b48dc:	f640 33b7 	movw	r3, #2999	; 0xbb7
   b48e0:	429a      	cmp	r2, r3
   b48e2:	dd05      	ble.n	b48f0 <loop+0x5c8>
            pixelFill(16, 16, 255, orange);
   b48e4:	2110      	movs	r1, #16
   b48e6:	4b14      	ldr	r3, [pc, #80]	; (b4938 <loop+0x610>)
   b48e8:	22ff      	movs	r2, #255	; 0xff
   b48ea:	4608      	mov	r0, r1
   b48ec:	f7ff fd00 	bl	b42f0 <_Z9pixelFilliiii>
        rainBow(20);
   b48f0:	2014      	movs	r0, #20
   b48f2:	f7ff fcd5 	bl	b42a0 <_Z7rainBowh>
    if(distance < distanceThreshold) {
   b48f6:	682a      	ldr	r2, [r5, #0]
   b48f8:	6833      	ldr	r3, [r6, #0]
   b48fa:	429a      	cmp	r2, r3
   b48fc:	da12      	bge.n	b4924 <loop+0x5fc>
            distance = analogRead(MOTIONSENSOR);
   b48fe:	2012      	movs	r0, #18
   b4900:	f002 fbba 	bl	b7078 <analogRead>
   b4904:	6028      	str	r0, [r5, #0]
            myDisplay.clearDisplay();
   b4906:	480e      	ldr	r0, [pc, #56]	; (b4940 <loop+0x618>)
   b4908:	f000 ff7c 	bl	b5804 <_ZN16Adafruit_SSD130612clearDisplayEv>
            myDisplay.display();
   b490c:	480c      	ldr	r0, [pc, #48]	; (b4940 <loop+0x618>)
   b490e:	f000 fff1 	bl	b58f4 <_ZN16Adafruit_SSD13067displayEv>
            pixel.clear();
   b4912:	480c      	ldr	r0, [pc, #48]	; (b4944 <loop+0x61c>)
   b4914:	f000 fb7f 	bl	b5016 <_ZN17Adafruit_NeoPixel5clearEv>
            pixel.show();
   b4918:	480a      	ldr	r0, [pc, #40]	; (b4944 <loop+0x61c>)
}
   b491a:	b005      	add	sp, #20
   b491c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            pixel.show();
   b4920:	f000 b95c 	b.w	b4bdc <_ZN17Adafruit_NeoPixel4showEv>
}
   b4924:	b005      	add	sp, #20
   b4926:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4928:	000b749d 	.word	0x000b749d
   b492c:	000b74b0 	.word	0x000b74b0
   b4930:	00ffff00 	.word	0x00ffff00
   b4934:	000b74c3 	.word	0x000b74c3
   b4938:	00ff7700 	.word	0x00ff7700
   b493c:	2003e698 	.word	0x2003e698
   b4940:	2003e660 	.word	0x2003e660
   b4944:	2003e684 	.word	0x2003e684

000b4948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b4948:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b494a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b494c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b494e:	b17c      	cbz	r4, b4970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4950:	6863      	ldr	r3, [r4, #4]
   b4952:	3b01      	subs	r3, #1
   b4954:	6063      	str	r3, [r4, #4]
   b4956:	b95b      	cbnz	r3, b4970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4958:	6823      	ldr	r3, [r4, #0]
   b495a:	4620      	mov	r0, r4
   b495c:	689b      	ldr	r3, [r3, #8]
   b495e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4960:	68a3      	ldr	r3, [r4, #8]
   b4962:	3b01      	subs	r3, #1
   b4964:	60a3      	str	r3, [r4, #8]
   b4966:	b91b      	cbnz	r3, b4970 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4968:	6823      	ldr	r3, [r4, #0]
   b496a:	4620      	mov	r0, r4
   b496c:	68db      	ldr	r3, [r3, #12]
   b496e:	4798      	blx	r3
      }
   b4970:	4628      	mov	r0, r5
   b4972:	bd38      	pop	{r3, r4, r5, pc}

000b4974 <_Z19subscriptionHandlerPKcS0_>:
void subscriptionHandler(const char *event, const char *data) {
   b4974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4978:	b099      	sub	sp, #100	; 0x64
inline bool spark::JSONValue::isValid() const {
    return type() != JSON_TYPE_INVALID;
}

inline spark::JSONValue spark::JSONValue::parseCopy(const char *json) {
    return parseCopy(json, strlen(json));
   b497a:	4608      	mov	r0, r1
   b497c:	9101      	str	r1, [sp, #4]
   b497e:	f002 fc9b 	bl	b72b8 <strlen>
   b4982:	9901      	ldr	r1, [sp, #4]
        Serial.printf("key=%s value=%s\n", (const char*) iter.name(), (const char*)
   b4984:	f8df 8168 	ldr.w	r8, [pc, #360]	; b4af0 <_Z19subscriptionHandlerPKcS0_+0x17c>
        myDisplay.printf("%s %s\n", (const char*) iter.name(), (const char*) iter.value().toString());
   b4988:	4e57      	ldr	r6, [pc, #348]	; (b4ae8 <_Z19subscriptionHandlerPKcS0_+0x174>)
   b498a:	4602      	mov	r2, r0
   b498c:	a804      	add	r0, sp, #16
   b498e:	f001 fe57 	bl	b6640 <_ZN5spark9JSONValue9parseCopyEPKcj>
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
   b4992:	9c06      	ldr	r4, [sp, #24]
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b4994:	a904      	add	r1, sp, #16
   b4996:	a80e      	add	r0, sp, #56	; 0x38
   b4998:	f7ff fba6 	bl	b40e8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
   b499c:	4621      	mov	r1, r4
   b499e:	aa0e      	add	r2, sp, #56	; 0x38
   b49a0:	a812      	add	r0, sp, #72	; 0x48
   b49a2:	f001 fe0d 	bl	b65c0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b49a6:	a80f      	add	r0, sp, #60	; 0x3c
   b49a8:	f7ff ffce 	bl	b4948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        myDisplay.clearDisplay();
   b49ac:	4c4f      	ldr	r4, [pc, #316]	; (b4aec <_Z19subscriptionHandlerPKcS0_+0x178>)
    while(iter.next()){
   b49ae:	a812      	add	r0, sp, #72	; 0x48
   b49b0:	f001 fe1e 	bl	b65f0 <_ZN5spark18JSONObjectIterator4nextEv>
   b49b4:	2800      	cmp	r0, #0
   b49b6:	f000 808e 	beq.w	b4ad6 <_Z19subscriptionHandlerPKcS0_+0x162>
        Serial.printf("key=%s value=%s\n", (const char*) iter.name(), (const char*)
   b49ba:	f002 f9f5 	bl	b6da8 <_Z16_fetch_usbserialv>
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
   b49be:	9f15      	ldr	r7, [sp, #84]	; 0x54
   b49c0:	4605      	mov	r5, r0
   b49c2:	a912      	add	r1, sp, #72	; 0x48
   b49c4:	a80e      	add	r0, sp, #56	; 0x38
   b49c6:	f7ff fb8f 	bl	b40e8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
   b49ca:	aa0e      	add	r2, sp, #56	; 0x38
   b49cc:	4639      	mov	r1, r7
   b49ce:	a80a      	add	r0, sp, #40	; 0x28
   b49d0:	f001 fdd2 	bl	b6578 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b49d4:	a80f      	add	r0, sp, #60	; 0x3c
   b49d6:	f7ff ffb7 	bl	b4948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
    return JSONValue(v_, d_);
   b49da:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    return s_;
   b49de:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   b49e0:	a912      	add	r1, sp, #72	; 0x48
   b49e2:	a80e      	add	r0, sp, #56	; 0x38
   b49e4:	f7ff fb80 	bl	b40e8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b49e8:	aa0e      	add	r2, sp, #56	; 0x38
   b49ea:	4649      	mov	r1, r9
   b49ec:	a807      	add	r0, sp, #28
   b49ee:	f001 fcce 	bl	b638e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b49f2:	a80f      	add	r0, sp, #60	; 0x3c
   b49f4:	f7ff ffa8 	bl	b4948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return JSONString(t_, d_);
   b49f8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   b49fc:	a907      	add	r1, sp, #28
   b49fe:	a802      	add	r0, sp, #8
   b4a00:	f7ff fb72 	bl	b40e8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
   b4a04:	aa02      	add	r2, sp, #8
   b4a06:	4649      	mov	r1, r9
   b4a08:	a80e      	add	r0, sp, #56	; 0x38
   b4a0a:	f001 fdb5 	bl	b6578 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b4a0e:	a803      	add	r0, sp, #12
   b4a10:	f7ff ff9a 	bl	b4948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4a14:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b4a16:	463a      	mov	r2, r7
   b4a18:	4641      	mov	r1, r8
   b4a1a:	4628      	mov	r0, r5
   b4a1c:	f7ff fb56 	bl	b40cc <_ZN5Print6printfEPKcz>
   b4a20:	a80f      	add	r0, sp, #60	; 0x3c
   b4a22:	f7ff ff91 	bl	b4948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4a26:	a808      	add	r0, sp, #32
   b4a28:	f7ff ff8e 	bl	b4948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4a2c:	a80b      	add	r0, sp, #44	; 0x2c
   b4a2e:	f7ff ff8b 	bl	b4948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        myDisplay.clearDisplay();
   b4a32:	4620      	mov	r0, r4
   b4a34:	f000 fee6 	bl	b5804 <_ZN16Adafruit_SSD130612clearDisplayEv>
        myDisplay.display();
   b4a38:	4620      	mov	r0, r4
   b4a3a:	f000 ff5b 	bl	b58f4 <_ZN16Adafruit_SSD13067displayEv>
        myDisplay.setRotation(2);
   b4a3e:	4620      	mov	r0, r4
   b4a40:	2102      	movs	r1, #2
   b4a42:	f000 fcf2 	bl	b542a <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor (1,1);
   b4a46:	2201      	movs	r2, #1
   b4a48:	4611      	mov	r1, r2
   b4a4a:	4620      	mov	r0, r4
   b4a4c:	f000 fce0 	bl	b5410 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.setTextSize(2);
   b4a50:	4620      	mov	r0, r4
   b4a52:	2102      	movs	r1, #2
   b4a54:	f000 fcdf 	bl	b5416 <_ZN12Adafruit_GFX11setTextSizeEh>
        myDisplay.setTextColor(WHITE);
   b4a58:	4620      	mov	r0, r4
   b4a5a:	2101      	movs	r1, #1
   b4a5c:	f000 fce0 	bl	b5420 <_ZN12Adafruit_GFX12setTextColorEt>
    return JSONString(k_, d_);
   b4a60:	9d15      	ldr	r5, [sp, #84]	; 0x54
   b4a62:	a912      	add	r1, sp, #72	; 0x48
   b4a64:	a80e      	add	r0, sp, #56	; 0x38
   b4a66:	f7ff fb3f 	bl	b40e8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
   b4a6a:	aa0e      	add	r2, sp, #56	; 0x38
   b4a6c:	4629      	mov	r1, r5
   b4a6e:	a80a      	add	r0, sp, #40	; 0x28
   b4a70:	f001 fd82 	bl	b6578 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b4a74:	a80f      	add	r0, sp, #60	; 0x3c
   b4a76:	f7ff ff67 	bl	b4948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return JSONValue(v_, d_);
   b4a7a:	9f16      	ldr	r7, [sp, #88]	; 0x58
    return s_;
   b4a7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   b4a7e:	a912      	add	r1, sp, #72	; 0x48
   b4a80:	a80e      	add	r0, sp, #56	; 0x38
   b4a82:	f7ff fb31 	bl	b40e8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b4a86:	aa0e      	add	r2, sp, #56	; 0x38
   b4a88:	4639      	mov	r1, r7
   b4a8a:	a807      	add	r0, sp, #28
   b4a8c:	f001 fc7f 	bl	b638e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b4a90:	a80f      	add	r0, sp, #60	; 0x3c
   b4a92:	f7ff ff59 	bl	b4948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return JSONString(t_, d_);
   b4a96:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b4a98:	a907      	add	r1, sp, #28
   b4a9a:	a802      	add	r0, sp, #8
   b4a9c:	f7ff fb24 	bl	b40e8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
   b4aa0:	aa02      	add	r2, sp, #8
   b4aa2:	4639      	mov	r1, r7
   b4aa4:	a80e      	add	r0, sp, #56	; 0x38
   b4aa6:	f001 fd67 	bl	b6578 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b4aaa:	a803      	add	r0, sp, #12
   b4aac:	f7ff ff4c 	bl	b4948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        myDisplay.printf("%s %s\n", (const char*) iter.name(), (const char*) iter.value().toString());
   b4ab0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b4ab2:	462a      	mov	r2, r5
   b4ab4:	4631      	mov	r1, r6
   b4ab6:	4620      	mov	r0, r4
   b4ab8:	f7ff fb08 	bl	b40cc <_ZN5Print6printfEPKcz>
   b4abc:	a80f      	add	r0, sp, #60	; 0x3c
   b4abe:	f7ff ff43 	bl	b4948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4ac2:	a808      	add	r0, sp, #32
   b4ac4:	f7ff ff40 	bl	b4948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4ac8:	a80b      	add	r0, sp, #44	; 0x2c
   b4aca:	f7ff ff3d 	bl	b4948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        myDisplay.display();
   b4ace:	4620      	mov	r0, r4
   b4ad0:	f000 ff10 	bl	b58f4 <_ZN16Adafruit_SSD13067displayEv>
    while(iter.next()){
   b4ad4:	e76b      	b.n	b49ae <_Z19subscriptionHandlerPKcS0_+0x3a>
   b4ad6:	a813      	add	r0, sp, #76	; 0x4c
   b4ad8:	f7ff ff36 	bl	b4948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4adc:	a805      	add	r0, sp, #20
   b4ade:	f7ff ff33 	bl	b4948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4ae2:	b019      	add	sp, #100	; 0x64
   b4ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4ae8:	000b74e7 	.word	0x000b74e7
   b4aec:	2003e660 	.word	0x2003e660
   b4af0:	000b74d6 	.word	0x000b74d6

000b4af4 <_GLOBAL__sub_I_getWeather>:
}
   b4af4:	b508      	push	{r3, lr}
Adafruit_NeoPixel pixel(PIXELCOUNT, PIXELPIN, WS2812B);
   b4af6:	2208      	movs	r2, #8
   b4af8:	2302      	movs	r3, #2
   b4afa:	2110      	movs	r1, #16
   b4afc:	4809      	ldr	r0, [pc, #36]	; (b4b24 <_GLOBAL__sub_I_getWeather+0x30>)
   b4afe:	f000 f85b 	bl	b4bb8 <_ZN17Adafruit_NeoPixelC1Ethh>
Adafruit_SSD1306 myDisplay(OLED_RESET);
   b4b02:	4809      	ldr	r0, [pc, #36]	; (b4b28 <_GLOBAL__sub_I_getWeather+0x34>)
   b4b04:	2104      	movs	r1, #4
   b4b06:	f000 fe67 	bl	b57d8 <_ZN16Adafruit_SSD1306C1Ea>
              error_(SYSTEM_ERROR_NONE) {
   b4b0a:	4b08      	ldr	r3, [pc, #32]	; (b4b2c <_GLOBAL__sub_I_getWeather+0x38>)
   b4b0c:	2200      	movs	r2, #0
   b4b0e:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b4b12:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4b16:	609a      	str	r2, [r3, #8]
}
   b4b18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        set_system_mode(mode);
   b4b1c:	2001      	movs	r0, #1
   b4b1e:	f001 b9e3 	b.w	b5ee8 <set_system_mode>
   b4b22:	bf00      	nop
   b4b24:	2003e684 	.word	0x2003e684
   b4b28:	2003e660 	.word	0x2003e660
   b4b2c:	2003e650 	.word	0x2003e650

000b4b30 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b4b30:	b538      	push	{r3, r4, r5, lr}
   b4b32:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b4b34:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b4b36:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b4b38:	b108      	cbz	r0, b4b3e <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b4b3a:	f001 fa81 	bl	b6040 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b4b3e:	79a3      	ldrb	r3, [r4, #6]
   b4b40:	2b06      	cmp	r3, #6
   b4b42:	bf0c      	ite	eq
   b4b44:	2004      	moveq	r0, #4
   b4b46:	2003      	movne	r0, #3
   b4b48:	fb10 f005 	smulbb	r0, r0, r5
   b4b4c:	b280      	uxth	r0, r0
   b4b4e:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b4b50:	f001 fa6e 	bl	b6030 <malloc>
   b4b54:	60e0      	str	r0, [r4, #12]
   b4b56:	b128      	cbz	r0, b4b64 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b4b58:	88a2      	ldrh	r2, [r4, #4]
   b4b5a:	2100      	movs	r1, #0
   b4b5c:	f002 fb76 	bl	b724c <memset>
    numLEDs = n;
   b4b60:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b4b62:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b4b64:	80a0      	strh	r0, [r4, #4]
   b4b66:	8060      	strh	r0, [r4, #2]
}
   b4b68:	e7fb      	b.n	b4b62 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b4b6a <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b4b6a:	b510      	push	{r4, lr}
   b4b6c:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b4b6e:	2101      	movs	r1, #1
   b4b70:	79c0      	ldrb	r0, [r0, #7]
   b4b72:	f002 fa57 	bl	b7024 <pinMode>
  digitalWrite(pin, LOW);
   b4b76:	79e0      	ldrb	r0, [r4, #7]
   b4b78:	2100      	movs	r1, #0
   b4b7a:	f002 fa64 	bl	b7046 <digitalWrite>
  begun = true;
   b4b7e:	2301      	movs	r3, #1
   b4b80:	7023      	strb	r3, [r4, #0]
}
   b4b82:	bd10      	pop	{r4, pc}

000b4b84 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b4b86:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4b88:	4605      	mov	r5, r0
   b4b8a:	460c      	mov	r4, r1
    if (begun) {
   b4b8c:	b11b      	cbz	r3, b4b96 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b4b8e:	79c0      	ldrb	r0, [r0, #7]
   b4b90:	2100      	movs	r1, #0
   b4b92:	f002 fa47 	bl	b7024 <pinMode>
    }
    pin = p;
    if (begun) {
   b4b96:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b4b98:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b4b9a:	b15b      	cbz	r3, b4bb4 <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b4b9c:	b2a0      	uxth	r0, r4
   b4b9e:	2101      	movs	r1, #1
   b4ba0:	9001      	str	r0, [sp, #4]
   b4ba2:	f002 fa3f 	bl	b7024 <pinMode>
        digitalWrite(p, LOW);
   b4ba6:	9801      	ldr	r0, [sp, #4]
   b4ba8:	2100      	movs	r1, #0
    }
}
   b4baa:	b003      	add	sp, #12
   b4bac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b4bb0:	f002 ba49 	b.w	b7046 <digitalWrite>
}
   b4bb4:	b003      	add	sp, #12
   b4bb6:	bd30      	pop	{r4, r5, pc}

000b4bb8 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4bb8:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4bba:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4bbc:	4604      	mov	r4, r0
   b4bbe:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4bc0:	7183      	strb	r3, [r0, #6]
   b4bc2:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b4bc6:	7005      	strb	r5, [r0, #0]
   b4bc8:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b4bca:	f7ff ffb1 	bl	b4b30 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b4bce:	4620      	mov	r0, r4
   b4bd0:	4631      	mov	r1, r6
   b4bd2:	f7ff ffd7 	bl	b4b84 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b4bd6:	4620      	mov	r0, r4
   b4bd8:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4bdc <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b4bdc:	68c3      	ldr	r3, [r0, #12]
   b4bde:	2b00      	cmp	r3, #0
   b4be0:	f000 81a4 	beq.w	b4f2c <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b4be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4be8:	7983      	ldrb	r3, [r0, #6]
   b4bea:	3b02      	subs	r3, #2
   b4bec:	b2db      	uxtb	r3, r3
   b4bee:	2b04      	cmp	r3, #4
   b4bf0:	bf9c      	itt	ls
   b4bf2:	4abf      	ldrls	r2, [pc, #764]	; (b4ef0 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b4bf4:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b4bf8:	b085      	sub	sp, #20
   b4bfa:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b4bfc:	bf88      	it	hi
   b4bfe:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4c00:	f000 ffd8 	bl	b5bb4 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b4c04:	692b      	ldr	r3, [r5, #16]
   b4c06:	1ac0      	subs	r0, r0, r3
   b4c08:	42a0      	cmp	r0, r4
   b4c0a:	d3f9      	bcc.n	b4c00 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b4c0c:	4cb9      	ldr	r4, [pc, #740]	; (b4ef4 <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4c0e:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b4c10:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c14:	b91b      	cbnz	r3, b4c1e <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c16:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4c1a:	2b00      	cmp	r3, #0
   b4c1c:	db7e      	blt.n	b4d1c <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b4c1e:	4cb6      	ldr	r4, [pc, #728]	; (b4ef8 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b4c20:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c24:	b923      	cbnz	r3, b4c30 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c26:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4c2a:	2b00      	cmp	r3, #0
   b4c2c:	f2c0 816e 	blt.w	b4f0c <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b4c30:	4cb2      	ldr	r4, [pc, #712]	; (b4efc <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b4c32:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c36:	2b00      	cmp	r3, #0
   b4c38:	f000 8144 	beq.w	b4ec4 <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4c3c:	79eb      	ldrb	r3, [r5, #7]
   b4c3e:	4ab0      	ldr	r2, [pc, #704]	; (b4f00 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4c40:	4cb0      	ldr	r4, [pc, #704]	; (b4f04 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4c42:	6812      	ldr	r2, [r2, #0]
   b4c44:	0119      	lsls	r1, r3, #4
   b4c46:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b4c4a:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b4c4c:	49ae      	ldr	r1, [pc, #696]	; (b4f08 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4c4e:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b4c50:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b4c54:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b4c58:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4c5c:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4c5e:	f003 031f 	and.w	r3, r3, #31
   b4c62:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b4c66:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4c68:	433a      	orrs	r2, r7
   b4c6a:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b4c6c:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b4c6e:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b4c72:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4c76:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b4c78:	2900      	cmp	r1, #0
   b4c7a:	d044      	beq.n	b4d06 <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b4c7c:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b4c80:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b4c82:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b4c86:	f818 cb01 	ldrb.w	ip, [r8], #1
   b4c8a:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4c8c:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b4c8e:	6863      	ldr	r3, [r4, #4]
   b4c90:	1a9b      	subs	r3, r3, r2
   b4c92:	2b46      	cmp	r3, #70	; 0x46
   b4c94:	d9fb      	bls.n	b4c8e <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b4c96:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b4c98:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b4c9c:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b4ca0:	ea43 0307 	orr.w	r3, r3, r7
   b4ca4:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b4ca8:	d02f      	beq.n	b4d0a <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b4caa:	6863      	ldr	r3, [r4, #4]
   b4cac:	1a9b      	subs	r3, r3, r2
   b4cae:	2b28      	cmp	r3, #40	; 0x28
   b4cb0:	d9fb      	bls.n	b4caa <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b4cb2:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4cb6:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4cb8:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4cbc:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4cc0:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4cc4:	d1e3      	bne.n	b4c8e <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b4cc6:	88ab      	ldrh	r3, [r5, #4]
   b4cc8:	f10e 0e01 	add.w	lr, lr, #1
   b4ccc:	fa1f fe8e 	uxth.w	lr, lr
   b4cd0:	4573      	cmp	r3, lr
   b4cd2:	d8d8      	bhi.n	b4c86 <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b4cd4:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b4cd8:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b4cdc:	6863      	ldr	r3, [r4, #4]
   b4cde:	1a9b      	subs	r3, r3, r2
   b4ce0:	2b46      	cmp	r3, #70	; 0x46
   b4ce2:	d9fb      	bls.n	b4cdc <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b4ce4:	6863      	ldr	r3, [r4, #4]
   b4ce6:	eba3 0909 	sub.w	r9, r3, r9
   b4cea:	4589      	cmp	r9, r1
   b4cec:	f0c0 80e4 	bcc.w	b4eb8 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4cf0:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4cf4:	f000 ff56 	bl	b5ba4 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b4cf8:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b4cfa:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b4cfe:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b4d02:	2900      	cmp	r1, #0
   b4d04:	d1ba      	bne.n	b4c7c <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b4d06:	460a      	mov	r2, r1
   b4d08:	e7e8      	b.n	b4cdc <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b4d0a:	6863      	ldr	r3, [r4, #4]
   b4d0c:	1a9b      	subs	r3, r3, r2
   b4d0e:	2b11      	cmp	r3, #17
   b4d10:	d8cf      	bhi.n	b4cb2 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b4d12:	6863      	ldr	r3, [r4, #4]
   b4d14:	1a9b      	subs	r3, r3, r2
   b4d16:	2b11      	cmp	r3, #17
   b4d18:	d9f7      	bls.n	b4d0a <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b4d1a:	e7ca      	b.n	b4cb2 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d1c:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d20:	2b00      	cmp	r3, #0
   b4d22:	f6bf af7c 	bge.w	b4c1e <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d26:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d2a:	2b00      	cmp	r3, #0
   b4d2c:	f6bf af77 	bge.w	b4c1e <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4d30:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d34:	2b00      	cmp	r3, #0
   b4d36:	f6bf af72 	bge.w	b4c1e <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4d3a:	0136      	lsls	r6, r6, #4
   b4d3c:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b4d3e:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4d40:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b4d42:	f001 f975 	bl	b6030 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b4d46:	2800      	cmp	r0, #0
   b4d48:	f43f af78 	beq.w	b4c3c <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b4d4c:	88ab      	ldrh	r3, [r5, #4]
   b4d4e:	2b00      	cmp	r3, #0
   b4d50:	f000 80ed 	beq.w	b4f2e <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b4d54:	68ea      	ldr	r2, [r5, #12]
   b4d56:	3b01      	subs	r3, #1
   b4d58:	fa12 f783 	uxtah	r7, r2, r3
   b4d5c:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    uint16_t pos = 0; // bit position
   b4d60:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4d62:	f248 0206 	movw	r2, #32774	; 0x8006
   b4d66:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b4d6a:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4d6e:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b4d72:	bf0c      	ite	eq
   b4d74:	4693      	moveq	fp, r2
   b4d76:	468b      	movne	fp, r1
   b4d78:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b4d7c:	bf0c      	ite	eq
   b4d7e:	4616      	moveq	r6, r2
   b4d80:	460e      	movne	r6, r1
   b4d82:	f01c 0f20 	tst.w	ip, #32
   b4d86:	bf0c      	ite	eq
   b4d88:	4690      	moveq	r8, r2
   b4d8a:	4688      	movne	r8, r1
        pos++;
   b4d8c:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4d90:	f8cd 8008 	str.w	r8, [sp, #8]
   b4d94:	9601      	str	r6, [sp, #4]
        pos++;
   b4d96:	f103 0802 	add.w	r8, r3, #2
   b4d9a:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4d9e:	9e01      	ldr	r6, [sp, #4]
   b4da0:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b4da4:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4da8:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b4dac:	9e02      	ldr	r6, [sp, #8]
   b4dae:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b4db2:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4db6:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b4dba:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4dbe:	bf0c      	ite	eq
   b4dc0:	4693      	moveq	fp, r2
   b4dc2:	468b      	movne	fp, r1
   b4dc4:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4dc8:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4dcc:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b4dd0:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4dd4:	bf0c      	ite	eq
   b4dd6:	4693      	moveq	fp, r2
   b4dd8:	468b      	movne	fp, r1
   b4dda:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4dde:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4de2:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b4de6:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4dea:	bf0c      	ite	eq
   b4dec:	4693      	moveq	fp, r2
   b4dee:	468b      	movne	fp, r1
   b4df0:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4df4:	f103 0a08 	add.w	sl, r3, #8
   b4df8:	f103 0806 	add.w	r8, r3, #6
   b4dfc:	3307      	adds	r3, #7
   b4dfe:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4e00:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b4e04:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4e08:	bf0c      	ite	eq
   b4e0a:	4693      	moveq	fp, r2
   b4e0c:	468b      	movne	fp, r1
        pos++;
   b4e0e:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4e12:	f01c 0f01 	tst.w	ip, #1
   b4e16:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b4e1a:	bf15      	itete	ne
   b4e1c:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b4e20:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b4e24:	fa1f f38a 	uxthne.w	r3, sl
   b4e28:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b4e2c:	4577      	cmp	r7, lr
   b4e2e:	d19c      	bne.n	b4d6a <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4e30:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4e32:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4e34:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4e36:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4e38:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4e3a:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4e3c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b4e40:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4e42:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4e44:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4e46:	4b2e      	ldr	r3, [pc, #184]	; (b4f00 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4e48:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4e4a:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4e4c:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4e4e:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4e50:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b4e54:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4e58:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b4e5c:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b4e60:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b4e64:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4e68:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b4e6c:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b4e70:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4e74:	79eb      	ldrb	r3, [r5, #7]
   b4e76:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b4e7a:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b4e7c:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4e7e:	5cfe      	ldrb	r6, [r7, r3]
   b4e80:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b4e84:	f003 031f 	and.w	r3, r3, #31
   b4e88:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b4e8c:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b4e90:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b4e94:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b4e98:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b4e9a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b4e9e:	2b00      	cmp	r3, #0
   b4ea0:	d0fb      	beq.n	b4e9a <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b4ea2:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pwm->EVENTS_SEQEND[0] = 0;
   b4ea8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b4eac:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4eb0:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b4eb4:	f001 f8c4 	bl	b6040 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4eb8:	f000 fe7c 	bl	b5bb4 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b4ebc:	6128      	str	r0, [r5, #16]
}
   b4ebe:	b005      	add	sp, #20
   b4ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4ec4:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4ec8:	2b00      	cmp	r3, #0
   b4eca:	f6bf aeb7 	bge.w	b4c3c <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4ece:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4ed2:	2b00      	cmp	r3, #0
   b4ed4:	f6bf aeb2 	bge.w	b4c3c <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4ed8:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4edc:	2b00      	cmp	r3, #0
   b4ede:	f6bf aead 	bge.w	b4c3c <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4ee2:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4ee6:	2b00      	cmp	r3, #0
   b4ee8:	f6bf aea8 	bge.w	b4c3c <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b4eec:	e725      	b.n	b4d3a <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b4eee:	bf00      	nop
   b4ef0:	000b7920 	.word	0x000b7920
   b4ef4:	4001c000 	.word	0x4001c000
   b4ef8:	40021000 	.word	0x40021000
   b4efc:	40022000 	.word	0x40022000
   b4f00:	2003e6b4 	.word	0x2003e6b4
   b4f04:	e0001000 	.word	0xe0001000
   b4f08:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4f0c:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4f10:	2b00      	cmp	r3, #0
   b4f12:	f6bf ae8d 	bge.w	b4c30 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4f16:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4f1a:	2b00      	cmp	r3, #0
   b4f1c:	f6bf ae88 	bge.w	b4c30 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4f20:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4f24:	2b00      	cmp	r3, #0
   b4f26:	f6bf ae83 	bge.w	b4c30 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b4f2a:	e706      	b.n	b4d3a <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b4f2c:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b4f2e:	2304      	movs	r3, #4
   b4f30:	2102      	movs	r1, #2
   b4f32:	e783      	b.n	b4e3c <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b4f34 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   b4f34:	8843      	ldrh	r3, [r0, #2]
   b4f36:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   b4f38:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   b4f3a:	d92d      	bls.n	b4f98 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   b4f3c:	7a06      	ldrb	r6, [r0, #8]
   b4f3e:	f3c2 4307 	ubfx	r3, r2, #16, #8
   b4f42:	f3c2 2407 	ubfx	r4, r2, #8, #8
   b4f46:	b2d5      	uxtb	r5, r2
   b4f48:	b13e      	cbz	r6, b4f5a <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   b4f4a:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
   b4f4c:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
   b4f4e:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
   b4f50:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   b4f54:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   b4f58:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b4f5a:	f890 c006 	ldrb.w	ip, [r0, #6]
   b4f5e:	68c7      	ldr	r7, [r0, #12]
   b4f60:	f1bc 0f06 	cmp.w	ip, #6
   b4f64:	bf0c      	ite	eq
   b4f66:	2604      	moveq	r6, #4
   b4f68:	2603      	movne	r6, #3
   b4f6a:	434e      	muls	r6, r1
   b4f6c:	f1ac 0c02 	sub.w	ip, ip, #2
   b4f70:	19b9      	adds	r1, r7, r6
    switch(type) {
   b4f72:	f1bc 0f06 	cmp.w	ip, #6
   b4f76:	d81d      	bhi.n	b4fb4 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   b4f78:	e8df f00c 	tbb	[pc, ip]
   b4f7c:	04081c04 	.word	0x04081c04
   b4f80:	040f      	.short	0x040f
   b4f82:	04          	.byte	0x04
   b4f83:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b4f84:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
   b4f86:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b4f88:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
   b4f8a:	e005      	b.n	b4f98 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
   b4f8c:	2bfe      	cmp	r3, #254	; 0xfe
   b4f8e:	bf28      	it	cs
   b4f90:	23fe      	movcs	r3, #254	; 0xfe
   b4f92:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
   b4f94:	704d      	strb	r5, [r1, #1]
          *p = g;
   b4f96:	708c      	strb	r4, [r1, #2]
}
   b4f98:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b4f9a:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b4f9c:	704c      	strb	r4, [r1, #1]
          *p++ = b;
   b4f9e:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4fa0:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   b4fa2:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4fa4:	b913      	cbnz	r3, b4fac <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   b4fa6:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4fa8:	70ca      	strb	r2, [r1, #3]
        } break;
   b4faa:	e7f5      	b.n	b4f98 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4fac:	435a      	muls	r2, r3
   b4fae:	f3c2 2207 	ubfx	r2, r2, #8, #8
   b4fb2:	e7f9      	b.n	b4fa8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   b4fb4:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b4fb6:	704c      	strb	r4, [r1, #1]
   b4fb8:	e7e6      	b.n	b4f88 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

000b4fba <_ZN17Adafruit_NeoPixel5ColorEhhh>:
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Adafruit_NeoPixel::Color(uint8_t r, uint8_t g, uint8_t b) {
  return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
   b4fba:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
}
   b4fbe:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
   b4fc2:	4770      	bx	lr

000b4fc4 <_ZNK17Adafruit_NeoPixel9numPixelsEv>:
  return pixels;
}

uint16_t Adafruit_NeoPixel::numPixels(void) const {
  return numLEDs;
}
   b4fc4:	8840      	ldrh	r0, [r0, #2]
   b4fc6:	4770      	bx	lr

000b4fc8 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   b4fc8:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
   b4fca:	1c4a      	adds	r2, r1, #1
   b4fcc:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   b4fce:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   b4fd0:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
   b4fd2:	d01f      	beq.n	b5014 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4c>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   b4fd4:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b4fd6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
   b4fda:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b4fdc:	d00c      	beq.n	b4ff8 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   b4fde:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   b4fe0:	bf1f      	itttt	ne
   b4fe2:	0211      	lslne	r1, r2, #8
   b4fe4:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
   b4fe8:	fbb1 f3f3 	udivne	r3, r1, r3
   b4fec:	b29b      	uxthne	r3, r3
    else if(b == 255) scale = 65535 / oldBrightness;
   b4fee:	bf04      	itt	eq
   b4ff0:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   b4ff4:	fbb1 f3f3 	udiveq	r3, r1, r3
            *ptr           = pixels,
   b4ff8:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
   b4ffa:	8886      	ldrh	r6, [r0, #4]
   b4ffc:	1b29      	subs	r1, r5, r4
   b4ffe:	b289      	uxth	r1, r1
   b5000:	428e      	cmp	r6, r1
   b5002:	d906      	bls.n	b5012 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
   b5004:	7829      	ldrb	r1, [r5, #0]
   b5006:	4359      	muls	r1, r3
   b5008:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b500c:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
   b5010:	e7f3      	b.n	b4ffa <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
   b5012:	7202      	strb	r2, [r0, #8]
  }
}
   b5014:	bd70      	pop	{r4, r5, r6, pc}

000b5016 <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   b5016:	8882      	ldrh	r2, [r0, #4]
   b5018:	68c0      	ldr	r0, [r0, #12]
   b501a:	2100      	movs	r1, #0
   b501c:	f002 b916 	b.w	b724c <memset>

000b5020 <_GLOBAL__sub_I_PIN_MAP2>:
}
   b5020:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b5022:	f000 fddf 	bl	b5be4 <HAL_Pin_Map>
   b5026:	4b01      	ldr	r3, [pc, #4]	; (b502c <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b5028:	6018      	str	r0, [r3, #0]
}
   b502a:	bd08      	pop	{r3, pc}
   b502c:	2003e6b4 	.word	0x2003e6b4

000b5030 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b5030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5034:	b085      	sub	sp, #20
   b5036:	461f      	mov	r7, r3
   b5038:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b503c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5040:	eba8 0902 	sub.w	r9, r8, r2
   b5044:	eba7 0a01 	sub.w	sl, r7, r1
   b5048:	f1b9 0f00 	cmp.w	r9, #0
   b504c:	bfb8      	it	lt
   b504e:	f1c9 0900 	rsblt	r9, r9, #0
   b5052:	f1ba 0f00 	cmp.w	sl, #0
   b5056:	bfb8      	it	lt
   b5058:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b505c:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b505e:	4683      	mov	fp, r0
   b5060:	460c      	mov	r4, r1
   b5062:	4615      	mov	r5, r2
  if (steep) {
   b5064:	dd04      	ble.n	b5070 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b5066:	463a      	mov	r2, r7
    swap(x0, y0);
   b5068:	462c      	mov	r4, r5
    swap(x1, y1);
   b506a:	4647      	mov	r7, r8
    swap(x0, y0);
   b506c:	460d      	mov	r5, r1
    swap(x1, y1);
   b506e:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b5070:	42bc      	cmp	r4, r7
   b5072:	dd05      	ble.n	b5080 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b5074:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b5076:	4645      	mov	r5, r8
   b5078:	4690      	mov	r8, r2
  if (x0 > x1) {
   b507a:	4622      	mov	r2, r4
   b507c:	463c      	mov	r4, r7
   b507e:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b5080:	1b3e      	subs	r6, r7, r4
   b5082:	b2b2      	uxth	r2, r6
   b5084:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b5086:	eba8 0205 	sub.w	r2, r8, r5
   b508a:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b508e:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b5092:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b5096:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b509a:	4545      	cmp	r5, r8
   b509c:	bfb4      	ite	lt
   b509e:	2201      	movlt	r2, #1
   b50a0:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
   b50a4:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b50a6:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b50a8:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b50aa:	42bc      	cmp	r4, r7
   b50ac:	dc1c      	bgt.n	b50e8 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b50ae:	f8db 2000 	ldr.w	r2, [fp]
   b50b2:	9303      	str	r3, [sp, #12]
    if (steep) {
   b50b4:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b50b6:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b50ba:	bfc7      	ittee	gt
   b50bc:	4629      	movgt	r1, r5
   b50be:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b50c0:	462a      	movle	r2, r5
   b50c2:	4621      	movle	r1, r4
   b50c4:	4658      	mov	r0, fp
   b50c6:	47c0      	blx	r8
    }
    err -= dy;
   b50c8:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b50ca:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b50cc:	1ab6      	subs	r6, r6, r2
   b50ce:	b2b1      	uxth	r1, r6
   b50d0:	b236      	sxth	r6, r6
    if (err < 0) {
   b50d2:	2e00      	cmp	r6, #0
   b50d4:	da05      	bge.n	b50e2 <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b50d6:	9a02      	ldr	r2, [sp, #8]
   b50d8:	4415      	add	r5, r2
      err += dx;
   b50da:	9a00      	ldr	r2, [sp, #0]
   b50dc:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b50de:	b22d      	sxth	r5, r5
      err += dx;
   b50e0:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b50e2:	3401      	adds	r4, #1
   b50e4:	b224      	sxth	r4, r4
   b50e6:	e7e0      	b.n	b50aa <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b50e8:	b005      	add	sp, #20
   b50ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b50ee <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b50ee:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b50f2:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b50f6:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b50f8:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b50fc:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b5100:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b5102:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b5104:	4616      	mov	r6, r2
   b5106:	468a      	mov	sl, r1
   b5108:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b510a:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b510c:	6823      	ldr	r3, [r4, #0]
   b510e:	f8cd 8000 	str.w	r8, [sp]
   b5112:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b5116:	4432      	add	r2, r6
   b5118:	69df      	ldr	r7, [r3, #28]
   b511a:	4651      	mov	r1, sl
   b511c:	462b      	mov	r3, r5
   b511e:	4620      	mov	r0, r4
   b5120:	b212      	sxth	r2, r2
   b5122:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b5124:	6823      	ldr	r3, [r4, #0]
   b5126:	f8cd 8000 	str.w	r8, [sp]
   b512a:	699f      	ldr	r7, [r3, #24]
   b512c:	4632      	mov	r2, r6
   b512e:	464b      	mov	r3, r9
   b5130:	4651      	mov	r1, sl
   b5132:	4620      	mov	r0, r4
   b5134:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b5136:	1e6b      	subs	r3, r5, #1
   b5138:	eb03 010a 	add.w	r1, r3, sl
   b513c:	6823      	ldr	r3, [r4, #0]
   b513e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b5142:	699d      	ldr	r5, [r3, #24]
   b5144:	4632      	mov	r2, r6
   b5146:	464b      	mov	r3, r9
   b5148:	b209      	sxth	r1, r1
   b514a:	4620      	mov	r0, r4
   b514c:	46ac      	mov	ip, r5
}
   b514e:	b002      	add	sp, #8
   b5150:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b5154:	4760      	bx	ip

000b5156 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b5156:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b5158:	3b01      	subs	r3, #1
   b515a:	4413      	add	r3, r2
   b515c:	6804      	ldr	r4, [r0, #0]
   b515e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b5162:	9501      	str	r5, [sp, #4]
   b5164:	b21b      	sxth	r3, r3
   b5166:	9300      	str	r3, [sp, #0]
   b5168:	6964      	ldr	r4, [r4, #20]
   b516a:	460b      	mov	r3, r1
   b516c:	47a0      	blx	r4
}
   b516e:	b003      	add	sp, #12
   b5170:	bd30      	pop	{r4, r5, pc}

000b5172 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b5172:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b5174:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b5178:	6804      	ldr	r4, [r0, #0]
   b517a:	e9cd 2500 	strd	r2, r5, [sp]
   b517e:	3b01      	subs	r3, #1
   b5180:	440b      	add	r3, r1
   b5182:	6964      	ldr	r4, [r4, #20]
   b5184:	b21b      	sxth	r3, r3
   b5186:	47a0      	blx	r4
}
   b5188:	b003      	add	sp, #12
   b518a:	bd30      	pop	{r4, r5, pc}

000b518c <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b518c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5190:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5194:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5198:	4605      	mov	r5, r0
   b519a:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b519c:	460c      	mov	r4, r1
   b519e:	18ce      	adds	r6, r1, r3
   b51a0:	42b4      	cmp	r4, r6
   b51a2:	da0b      	bge.n	b51bc <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b51a4:	682b      	ldr	r3, [r5, #0]
   b51a6:	f8cd 8000 	str.w	r8, [sp]
   b51aa:	699f      	ldr	r7, [r3, #24]
   b51ac:	4621      	mov	r1, r4
   b51ae:	464b      	mov	r3, r9
   b51b0:	4652      	mov	r2, sl
   b51b2:	4628      	mov	r0, r5
   b51b4:	3401      	adds	r4, #1
   b51b6:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b51b8:	b224      	sxth	r4, r4
   b51ba:	e7f1      	b.n	b51a0 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b51bc:	b002      	add	sp, #8
   b51be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b51c2 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b51c2:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b51c4:	6802      	ldr	r2, [r0, #0]
   b51c6:	9101      	str	r1, [sp, #4]
   b51c8:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b51cc:	9100      	str	r1, [sp, #0]
   b51ce:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b51d0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b51d4:	2200      	movs	r2, #0
   b51d6:	4611      	mov	r1, r2
   b51d8:	47a0      	blx	r4
}
   b51da:	b002      	add	sp, #8
   b51dc:	bd10      	pop	{r4, pc}

000b51de <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b51de:	4770      	bx	lr

000b51e0 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b51e0:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b51e2:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b51e4:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b51e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    Print() : write_error(0) {}
   b51ea:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b51ec:	4d05      	ldr	r5, [pc, #20]	; (b5204 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b51ee:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b51f0:	2201      	movs	r2, #1
   b51f2:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b51f4:	6005      	str	r5, [r0, #0]
   b51f6:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b51f8:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b51fa:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b51fc:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b51fe:	7682      	strb	r2, [r0, #26]
}
   b5200:	bd30      	pop	{r4, r5, pc}
   b5202:	bf00      	nop
   b5204:	000b7e38 	.word	0x000b7e38

000b5208 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
			      uint16_t color) {
   b5208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b520c:	b089      	sub	sp, #36	; 0x24
   b520e:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b5212:	f9bd 7048 	ldrsh.w	r7, [sp, #72]	; 0x48
   b5216:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
   b521a:	9305      	str	r3, [sp, #20]
  int16_t i, j, byteWidth = (w + 7) / 8;
   b521c:	1dfa      	adds	r2, r7, #7
			      uint16_t color) {
   b521e:	e9cd 0101 	strd	r0, r1, [sp, #4]
  int16_t i, j, byteWidth = (w + 7) / 8;
   b5222:	bf48      	it	mi
   b5224:	f107 020e 	addmi.w	r2, r7, #14
   b5228:	2400      	movs	r4, #0
			      uint16_t color) {
   b522a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
  int16_t i, j, byteWidth = (w + 7) / 8;
   b522e:	ea4f 0be2 	mov.w	fp, r2, asr #3
   b5232:	4625      	mov	r5, r4
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b5234:	f04f 0980 	mov.w	r9, #128	; 0x80
  for(j=0; j<h; j++) {
   b5238:	9905      	ldr	r1, [sp, #20]
   b523a:	b22a      	sxth	r2, r5
   b523c:	4291      	cmp	r1, r2
   b523e:	dd2a      	ble.n	b5296 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8e>
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b5240:	9a04      	ldr	r2, [sp, #16]
   b5242:	eb02 0a04 	add.w	sl, r2, r4
	drawPixel(x+i, y+j, color);
   b5246:	9a03      	ldr	r2, [sp, #12]
   b5248:	442a      	add	r2, r5
   b524a:	f04f 0800 	mov.w	r8, #0
   b524e:	b212      	sxth	r2, r2
   b5250:	fa0f f088 	sxth.w	r0, r8
    for(i=0; i<w; i++ ) {
   b5254:	4287      	cmp	r7, r0
   b5256:	fa1f f188 	uxth.w	r1, r8
   b525a:	dd19      	ble.n	b5290 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x88>
      if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   b525c:	10c0      	asrs	r0, r0, #3
   b525e:	f81a c000 	ldrb.w	ip, [sl, r0]
   b5262:	f001 0007 	and.w	r0, r1, #7
   b5266:	fa49 f000 	asr.w	r0, r9, r0
   b526a:	ea1c 0f00 	tst.w	ip, r0
   b526e:	d00c      	beq.n	b528a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x82>
	drawPixel(x+i, y+j, color);
   b5270:	9802      	ldr	r0, [sp, #8]
   b5272:	4401      	add	r1, r0
   b5274:	9801      	ldr	r0, [sp, #4]
   b5276:	6800      	ldr	r0, [r0, #0]
   b5278:	6900      	ldr	r0, [r0, #16]
   b527a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b527e:	4606      	mov	r6, r0
   b5280:	b209      	sxth	r1, r1
   b5282:	9801      	ldr	r0, [sp, #4]
   b5284:	47b0      	blx	r6
   b5286:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    for(i=0; i<w; i++ ) {
   b528a:	f108 0801 	add.w	r8, r8, #1
   b528e:	e7df      	b.n	b5250 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x48>
  for(j=0; j<h; j++) {
   b5290:	3501      	adds	r5, #1
   b5292:	445c      	add	r4, fp
   b5294:	e7d0      	b.n	b5238 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x30>
}
   b5296:	b009      	add	sp, #36	; 0x24
   b5298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b529c <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b529c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b52a0:	ed2d 8b02 	vpush	{d8}
   b52a4:	b08d      	sub	sp, #52	; 0x34
   b52a6:	4607      	mov	r7, r0
   b52a8:	9104      	str	r1, [sp, #16]
   b52aa:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b52ae:	9105      	str	r1, [sp, #20]
   b52b0:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b52b4:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b52b6:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b52ba:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b52bc:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b52c0:	4281      	cmp	r1, r0
   b52c2:	dd52      	ble.n	b536a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b52c4:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b52c8:	4291      	cmp	r1, r2
   b52ca:	dd4e      	ble.n	b536a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b52cc:	2106      	movs	r1, #6
   b52ce:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b52d2:	2c00      	cmp	r4, #0
   b52d4:	dd49      	ble.n	b536a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b52d6:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b52da:	2c00      	cmp	r4, #0
   b52dc:	dd45      	ble.n	b536a <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b52de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b52e2:	930b      	str	r3, [sp, #44]	; 0x2c
   b52e4:	b293      	uxth	r3, r2
   b52e6:	9307      	str	r3, [sp, #28]
   b52e8:	3308      	adds	r3, #8
   b52ea:	b29b      	uxth	r3, r3
   b52ec:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b52ee:	2400      	movs	r4, #0
   b52f0:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b52f2:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b52f4:	bf1c      	itt	ne
   b52f6:	4b2c      	ldrne	r3, [pc, #176]	; (b53a8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b52f8:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b52fa:	9e07      	ldr	r6, [sp, #28]
   b52fc:	bf16      	itet	ne
   b52fe:	191b      	addne	r3, r3, r4
      line = 0x0;
   b5300:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b5302:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b5304:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5306:	9a04      	ldr	r2, [sp, #16]
   b5308:	b2ab      	uxth	r3, r5
   b530a:	930a      	str	r3, [sp, #40]	; 0x28
   b530c:	fb04 f305 	mul.w	r3, r4, r5
   b5310:	fa13 f382 	uxtah	r3, r3, r2
   b5314:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b5316:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b531a:	ee08 3a10 	vmov	s16, r3
   b531e:	46b0      	mov	r8, r6
   b5320:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b5324:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b5328:	9b03      	ldr	r3, [sp, #12]
   b532a:	07db      	lsls	r3, r3, #31
   b532c:	d52f      	bpl.n	b538e <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b532e:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5330:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5332:	d11f      	bne.n	b5374 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b5334:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5338:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b533a:	b232      	sxth	r2, r6
   b533c:	4651      	mov	r1, sl
   b533e:	4638      	mov	r0, r7
   b5340:	47d8      	blx	fp
      line >>= 1;
   b5342:	9b03      	ldr	r3, [sp, #12]
   b5344:	085b      	lsrs	r3, r3, #1
   b5346:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b5348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b534a:	3601      	adds	r6, #1
   b534c:	4498      	add	r8, r3
   b534e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5350:	b2b6      	uxth	r6, r6
   b5352:	42b3      	cmp	r3, r6
   b5354:	fa1f f888 	uxth.w	r8, r8
   b5358:	d1e6      	bne.n	b5328 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b535a:	9b08      	ldr	r3, [sp, #32]
   b535c:	3b01      	subs	r3, #1
   b535e:	3401      	adds	r4, #1
   b5360:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5364:	b264      	sxtb	r4, r4
   b5366:	9308      	str	r3, [sp, #32]
   b5368:	d1c3      	bne.n	b52f2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b536a:	b00d      	add	sp, #52	; 0x34
   b536c:	ecbd 8b02 	vpop	{d8}
   b5370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b5374:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5376:	e9cd 9200 	strd	r9, r2, [sp]
   b537a:	ee18 1a10 	vmov	r1, s16
   b537e:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b5382:	fa0f f288 	sxth.w	r2, r8
   b5386:	464b      	mov	r3, r9
   b5388:	4638      	mov	r0, r7
   b538a:	47d8      	blx	fp
   b538c:	e7d9      	b.n	b5342 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b538e:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b5392:	4293      	cmp	r3, r2
   b5394:	d0d5      	beq.n	b5342 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b5396:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5398:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b539a:	d103      	bne.n	b53a4 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b539c:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b53a0:	9b06      	ldr	r3, [sp, #24]
   b53a2:	e7ca      	b.n	b533a <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b53a4:	9a06      	ldr	r2, [sp, #24]
   b53a6:	e7e6      	b.n	b5376 <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b53a8:	000b7934 	.word	0x000b7934

000b53ac <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b53ac:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b53ae:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b53b0:	b085      	sub	sp, #20
   b53b2:	4604      	mov	r4, r0
  if (c == '\n') {
   b53b4:	d107      	bne.n	b53c6 <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b53b6:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b53b8:	8a63      	ldrh	r3, [r4, #18]
   b53ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b53be:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b53c0:	2300      	movs	r3, #0
   b53c2:	8223      	strh	r3, [r4, #16]
   b53c4:	e021      	b.n	b540a <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b53c6:	290d      	cmp	r1, #13
   b53c8:	d01f      	beq.n	b540a <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b53ca:	7e03      	ldrb	r3, [r0, #24]
   b53cc:	9302      	str	r3, [sp, #8]
   b53ce:	8ac3      	ldrh	r3, [r0, #22]
   b53d0:	9301      	str	r3, [sp, #4]
   b53d2:	8a83      	ldrh	r3, [r0, #20]
   b53d4:	9300      	str	r3, [sp, #0]
   b53d6:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b53da:	460b      	mov	r3, r1
   b53dc:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b53e0:	f7ff ff5c 	bl	b529c <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b53e4:	7e20      	ldrb	r0, [r4, #24]
   b53e6:	8a23      	ldrh	r3, [r4, #16]
   b53e8:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b53ec:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b53f0:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b53f2:	b21b      	sxth	r3, r3
   b53f4:	4602      	mov	r2, r0
   b53f6:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b53f8:	b139      	cbz	r1, b540a <_ZN12Adafruit_GFX5writeEh+0x5e>
   b53fa:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b53fe:	f06f 0505 	mvn.w	r5, #5
   b5402:	fb05 1100 	mla	r1, r5, r0, r1
   b5406:	428b      	cmp	r3, r1
   b5408:	dcd6      	bgt.n	b53b8 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b540a:	2001      	movs	r0, #1
   b540c:	b005      	add	sp, #20
   b540e:	bd30      	pop	{r4, r5, pc}

000b5410 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b5410:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b5412:	8242      	strh	r2, [r0, #18]
}
   b5414:	4770      	bx	lr

000b5416 <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b5416:	2901      	cmp	r1, #1
   b5418:	bf38      	it	cc
   b541a:	2101      	movcc	r1, #1
   b541c:	7601      	strb	r1, [r0, #24]
}
   b541e:	4770      	bx	lr

000b5420 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b5420:	82c1      	strh	r1, [r0, #22]
   b5422:	8281      	strh	r1, [r0, #20]
}
   b5424:	4770      	bx	lr

000b5426 <_ZN12Adafruit_GFX11getRotationEv>:
}
   b5426:	7e40      	ldrb	r0, [r0, #25]
   b5428:	4770      	bx	lr

000b542a <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   b542a:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
   b542e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
   b5432:	7643      	strb	r3, [r0, #25]
  switch(rotation) {
   b5434:	07c9      	lsls	r1, r1, #31
    _width  = WIDTH;
   b5436:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b543a:	bf59      	ittee	pl
   b543c:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   b543e:	81c2      	strhpl	r2, [r0, #14]
    _width  = HEIGHT;
   b5440:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   b5442:	81c3      	strhmi	r3, [r0, #14]
}
   b5444:	4770      	bx	lr

000b5446 <_ZN12Adafruit_GFX5widthEv>:
}
   b5446:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b544a:	4770      	bx	lr

000b544c <_ZN12Adafruit_GFX6heightEv>:
}
   b544c:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b5450:	4770      	bx	lr
	...

000b5454 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5454:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b5456:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5458:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b545c:	2d02      	cmp	r5, #2
   b545e:	d069      	beq.n	b5534 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b5460:	2d03      	cmp	r5, #3
   b5462:	f000 8099 	beq.w	b5598 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b5466:	2d01      	cmp	r5, #1
   b5468:	d16c      	bne.n	b5544 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b546a:	8905      	ldrh	r5, [r0, #8]
   b546c:	43d2      	mvns	r2, r2
   b546e:	442a      	add	r2, r5
   b5470:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b5472:	2a00      	cmp	r2, #0
   b5474:	db5d      	blt.n	b5532 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5476:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b547a:	4295      	cmp	r5, r2
   b547c:	dd59      	ble.n	b5532 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b547e:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b5480:	bfbe      	ittt	lt
   b5482:	185b      	addlt	r3, r3, r1
   b5484:	b21b      	sxthlt	r3, r3
    __y = 0;
   b5486:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b5488:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b548c:	18cd      	adds	r5, r1, r3
   b548e:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b5490:	bfc4      	itt	gt
   b5492:	1a43      	subgt	r3, r0, r1
   b5494:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b5496:	2b00      	cmp	r3, #0
   b5498:	dd4b      	ble.n	b5532 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b549a:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b549e:	f8df c120 	ldr.w	ip, [pc, #288]	; b55c0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b54a2:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b54a6:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b54aa:	b2db      	uxtb	r3, r3
  pBuf += x;
   b54ac:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b54b0:	d01a      	beq.n	b54e8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b54b2:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b54b6:	4e40      	ldr	r6, [pc, #256]	; (b55b8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b54b8:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b54ba:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b54bc:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b54be:	bf3f      	itttt	cc
   b54c0:	eba5 0e03 	subcc.w	lr, r5, r3
   b54c4:	26ff      	movcc	r6, #255	; 0xff
   b54c6:	fa46 f60e 	asrcc.w	r6, r6, lr
   b54ca:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b54cc:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b54d0:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b54d2:	bf0c      	ite	eq
   b54d4:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b54d6:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b54d8:	42ab      	cmp	r3, r5
   b54da:	f80c 6002 	strb.w	r6, [ip, r2]
   b54de:	d328      	bcc.n	b5532 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b54e0:	3908      	subs	r1, #8
   b54e2:	440b      	add	r3, r1
   b54e4:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b54e6:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b54e8:	2b07      	cmp	r3, #7
   b54ea:	d919      	bls.n	b5520 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b54ec:	2c01      	cmp	r4, #1
   b54ee:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b54f2:	bf18      	it	ne
   b54f4:	2500      	movne	r5, #0
   b54f6:	b2ed      	uxtb	r5, r5
   b54f8:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b54fc:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b54fe:	3a08      	subs	r2, #8
   b5500:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b5502:	2a07      	cmp	r2, #7
      *pBuf = val;
   b5504:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b5508:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b550c:	d8f7      	bhi.n	b54fe <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b550e:	f1a3 0208 	sub.w	r2, r3, #8
   b5512:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b5516:	3201      	adds	r2, #1
   b5518:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b551c:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b5520:	b13b      	cbz	r3, b5532 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b5522:	4a26      	ldr	r2, [pc, #152]	; (b55bc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b5524:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b5526:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b5528:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b552a:	bf0c      	ite	eq
   b552c:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b552e:	4393      	bicne	r3, r2
   b5530:	7003      	strb	r3, [r0, #0]
}
   b5532:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b5534:	8945      	ldrh	r5, [r0, #10]
   b5536:	43d2      	mvns	r2, r2
   b5538:	442a      	add	r2, r5
      x -= (w-1);
   b553a:	18cd      	adds	r5, r1, r3
   b553c:	8901      	ldrh	r1, [r0, #8]
   b553e:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b5540:	b212      	sxth	r2, r2
      x -= (w-1);
   b5542:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b5544:	2a00      	cmp	r2, #0
   b5546:	dbf4      	blt.n	b5532 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5548:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b554c:	4295      	cmp	r5, r2
   b554e:	ddf0      	ble.n	b5532 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b5550:	2900      	cmp	r1, #0
    w += x;
   b5552:	bfbe      	ittt	lt
   b5554:	185b      	addlt	r3, r3, r1
   b5556:	b21b      	sxthlt	r3, r3
    x = 0;
   b5558:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b555a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b555e:	18ce      	adds	r6, r1, r3
   b5560:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b5562:	bfc4      	itt	gt
   b5564:	1a6b      	subgt	r3, r5, r1
   b5566:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b5568:	2b00      	cmp	r3, #0
   b556a:	dde2      	ble.n	b5532 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b556c:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b556e:	2580      	movs	r5, #128	; 0x80
   b5570:	fb10 1105 	smlabb	r1, r0, r5, r1
   b5574:	4812      	ldr	r0, [pc, #72]	; (b55c0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b5576:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b5578:	f002 0007 	and.w	r0, r2, #7
   b557c:	2201      	movs	r2, #1
   b557e:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b5580:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b5582:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b5584:	440b      	add	r3, r1
   b5586:	d10c      	bne.n	b55a2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b5588:	428b      	cmp	r3, r1
   b558a:	d0d2      	beq.n	b5532 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b558c:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5590:	4310      	orrs	r0, r2
   b5592:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5596:	e7f7      	b.n	b5588 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b5598:	18cd      	adds	r5, r1, r3
   b559a:	8941      	ldrh	r1, [r0, #10]
   b559c:	1b49      	subs	r1, r1, r5
   b559e:	b209      	sxth	r1, r1
      break;
   b55a0:	e767      	b.n	b5472 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b55a2:	43d2      	mvns	r2, r2
   b55a4:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b55a6:	428b      	cmp	r3, r1
   b55a8:	d0c3      	beq.n	b5532 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b55aa:	f811 0b01 	ldrb.w	r0, [r1], #1
   b55ae:	4010      	ands	r0, r2
   b55b0:	f801 0c01 	strb.w	r0, [r1, #-1]
   b55b4:	e7f7      	b.n	b55a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b55b6:	bf00      	nop
   b55b8:	2003e1dc 	.word	0x2003e1dc
   b55bc:	2003e1d4 	.word	0x2003e1d4
   b55c0:	2003e1e4 	.word	0x2003e1e4

000b55c4 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b55c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b55c6:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b55c8:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b55cc:	2d02      	cmp	r5, #2
   b55ce:	d034      	beq.n	b563a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b55d0:	2d03      	cmp	r5, #3
   b55d2:	f000 809b 	beq.w	b570c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b55d6:	2d01      	cmp	r5, #1
   b55d8:	d137      	bne.n	b564a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b55da:	18d5      	adds	r5, r2, r3
   b55dc:	8902      	ldrh	r2, [r0, #8]
   b55de:	1b52      	subs	r2, r2, r5
   b55e0:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b55e2:	2900      	cmp	r1, #0
   b55e4:	f2c0 8091 	blt.w	b570a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b55e8:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b55ec:	428d      	cmp	r5, r1
   b55ee:	f340 808c 	ble.w	b570a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b55f2:	2a00      	cmp	r2, #0
    w += x;
   b55f4:	bfbe      	ittt	lt
   b55f6:	189b      	addlt	r3, r3, r2
   b55f8:	b21b      	sxthlt	r3, r3
    x = 0;
   b55fa:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b55fc:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b5600:	18d6      	adds	r6, r2, r3
   b5602:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b5604:	bfc4      	itt	gt
   b5606:	1aab      	subgt	r3, r5, r2
   b5608:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b560a:	2b00      	cmp	r3, #0
   b560c:	dd7d      	ble.n	b570a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b560e:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b5610:	2580      	movs	r5, #128	; 0x80
   b5612:	fb10 2205 	smlabb	r2, r0, r5, r2
   b5616:	4845      	ldr	r0, [pc, #276]	; (b572c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b5618:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b561a:	f001 0007 	and.w	r0, r1, #7
   b561e:	2101      	movs	r1, #1
   b5620:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b5622:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b5624:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b5626:	4413      	add	r3, r2
   b5628:	d175      	bne.n	b5716 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b562a:	429a      	cmp	r2, r3
   b562c:	d06d      	beq.n	b570a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b562e:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5632:	4308      	orrs	r0, r1
   b5634:	f802 0c01 	strb.w	r0, [r2, #-1]
   b5638:	e7f7      	b.n	b562a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b563a:	8905      	ldrh	r5, [r0, #8]
   b563c:	43c9      	mvns	r1, r1
   b563e:	4429      	add	r1, r5
      y -= (h-1);
   b5640:	18d5      	adds	r5, r2, r3
   b5642:	8942      	ldrh	r2, [r0, #10]
   b5644:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b5646:	b209      	sxth	r1, r1
      y -= (h-1);
   b5648:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b564a:	2900      	cmp	r1, #0
   b564c:	db5d      	blt.n	b570a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b564e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b5652:	428d      	cmp	r5, r1
   b5654:	dd59      	ble.n	b570a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b5656:	2a00      	cmp	r2, #0
    __h += __y;
   b5658:	bfbe      	ittt	lt
   b565a:	189b      	addlt	r3, r3, r2
   b565c:	b21b      	sxthlt	r3, r3
    __y = 0;
   b565e:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b5660:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b5664:	18d5      	adds	r5, r2, r3
   b5666:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b5668:	bfc4      	itt	gt
   b566a:	1a83      	subgt	r3, r0, r2
   b566c:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b566e:	2b00      	cmp	r3, #0
   b5670:	dd4b      	ble.n	b570a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b5672:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b5676:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b572c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b567a:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b567e:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b5682:	b2db      	uxtb	r3, r3
  pBuf += x;
   b5684:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b5688:	d01a      	beq.n	b56c0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b568a:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b568e:	4e28      	ldr	r6, [pc, #160]	; (b5730 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b5690:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b5692:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b5694:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b5696:	bf3f      	itttt	cc
   b5698:	eba5 0e03 	subcc.w	lr, r5, r3
   b569c:	26ff      	movcc	r6, #255	; 0xff
   b569e:	fa46 f60e 	asrcc.w	r6, r6, lr
   b56a2:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b56a4:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b56a8:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b56aa:	bf0c      	ite	eq
   b56ac:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b56ae:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b56b0:	42ab      	cmp	r3, r5
   b56b2:	f80c 6001 	strb.w	r6, [ip, r1]
   b56b6:	d328      	bcc.n	b570a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b56b8:	3a08      	subs	r2, #8
   b56ba:	4413      	add	r3, r2
   b56bc:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b56be:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b56c0:	2b07      	cmp	r3, #7
   b56c2:	d919      	bls.n	b56f8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b56c4:	2c01      	cmp	r4, #1
   b56c6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b56ca:	bf18      	it	ne
   b56cc:	2500      	movne	r5, #0
   b56ce:	b2ed      	uxtb	r5, r5
   b56d0:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b56d4:	461a      	mov	r2, r3
      h -= 8;
   b56d6:	3a08      	subs	r2, #8
   b56d8:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b56da:	2a07      	cmp	r2, #7
      *pBuf = val;
   b56dc:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b56e0:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b56e4:	d8f7      	bhi.n	b56d6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b56e6:	f1a3 0208 	sub.w	r2, r3, #8
   b56ea:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b56ee:	3201      	adds	r2, #1
   b56f0:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b56f4:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b56f8:	b13b      	cbz	r3, b570a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b56fa:	4a0e      	ldr	r2, [pc, #56]	; (b5734 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b56fc:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b56fe:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b5700:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5702:	bf0c      	ite	eq
   b5704:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b5706:	4393      	bicne	r3, r2
   b5708:	7003      	strb	r3, [r0, #0]
}
   b570a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b570c:	8945      	ldrh	r5, [r0, #10]
   b570e:	43c9      	mvns	r1, r1
   b5710:	4429      	add	r1, r5
   b5712:	b209      	sxth	r1, r1
      break;
   b5714:	e765      	b.n	b55e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b5716:	43c9      	mvns	r1, r1
   b5718:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b571a:	429a      	cmp	r2, r3
   b571c:	d0f5      	beq.n	b570a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b571e:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5722:	4008      	ands	r0, r1
   b5724:	f802 0c01 	strb.w	r0, [r2, #-1]
   b5728:	e7f7      	b.n	b571a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b572a:	bf00      	nop
   b572c:	2003e1e4 	.word	0x2003e1e4
   b5730:	2003e1dc 	.word	0x2003e1dc
   b5734:	2003e1d4 	.word	0x2003e1d4

000b5738 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b5738:	4770      	bx	lr
	...

000b573c <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b573e:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5740:	4606      	mov	r6, r0
   b5742:	4614      	mov	r4, r2
   b5744:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b5746:	db2d      	blt.n	b57a4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5748:	f7ff fe7d 	bl	b5446 <_ZN12Adafruit_GFX5widthEv>
   b574c:	42a8      	cmp	r0, r5
   b574e:	dd29      	ble.n	b57a4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5750:	2c00      	cmp	r4, #0
   b5752:	db27      	blt.n	b57a4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5754:	4630      	mov	r0, r6
   b5756:	f7ff fe79 	bl	b544c <_ZN12Adafruit_GFX6heightEv>
   b575a:	42a0      	cmp	r0, r4
   b575c:	dd22      	ble.n	b57a4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b575e:	4630      	mov	r0, r6
   b5760:	f7ff fe61 	bl	b5426 <_ZN12Adafruit_GFX11getRotationEv>
   b5764:	2802      	cmp	r0, #2
   b5766:	d01e      	beq.n	b57a6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b5768:	2803      	cmp	r0, #3
   b576a:	d025      	beq.n	b57b8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b576c:	2801      	cmp	r0, #1
   b576e:	d104      	bne.n	b577a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b5770:	8933      	ldrh	r3, [r6, #8]
   b5772:	43e2      	mvns	r2, r4
   b5774:	441a      	add	r2, r3
    break;
   b5776:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b5778:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b577a:	2c00      	cmp	r4, #0
   b577c:	4622      	mov	r2, r4
   b577e:	bfb8      	it	lt
   b5780:	1de2      	addlt	r2, r4, #7
   b5782:	10d2      	asrs	r2, r2, #3
   b5784:	2180      	movs	r1, #128	; 0x80
   b5786:	fb12 5501 	smlabb	r5, r2, r1, r5
   b578a:	490e      	ldr	r1, [pc, #56]	; (b57c4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b578c:	2201      	movs	r2, #1
   b578e:	f004 0407 	and.w	r4, r4, #7
   b5792:	574b      	ldrsb	r3, [r1, r5]
   b5794:	fa02 f404 	lsl.w	r4, r2, r4
   b5798:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b579a:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b579c:	bf0c      	ite	eq
   b579e:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b57a0:	43a3      	bicne	r3, r4
   b57a2:	554b      	strb	r3, [r1, r5]
}
   b57a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b57a6:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b57a8:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b57aa:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b57ac:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b57ae:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b57b0:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b57b2:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b57b4:	b224      	sxth	r4, r4
    break;
   b57b6:	e7e0      	b.n	b577a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b57b8:	8973      	ldrh	r3, [r6, #10]
   b57ba:	3b01      	subs	r3, #1
   b57bc:	1b5b      	subs	r3, r3, r5
    break;
   b57be:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b57c0:	b21c      	sxth	r4, r3
    break;
   b57c2:	e7da      	b.n	b577a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b57c4:	2003e1e4 	.word	0x2003e1e4

000b57c8 <_ZN16Adafruit_SSD1306D0Ev>:
   b57c8:	b510      	push	{r4, lr}
   b57ca:	2124      	movs	r1, #36	; 0x24
   b57cc:	4604      	mov	r4, r0
   b57ce:	f7fe fc66 	bl	b409e <_ZdlPvj>
   b57d2:	4620      	mov	r0, r4
   b57d4:	bd10      	pop	{r4, pc}
	...

000b57d8 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b57d8:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b57da:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b57dc:	4604      	mov	r4, r0
   b57de:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b57e0:	2180      	movs	r1, #128	; 0x80
   b57e2:	f7ff fcfd 	bl	b51e0 <_ZN12Adafruit_GFXC1Ess>
   b57e6:	4b06      	ldr	r3, [pc, #24]	; (b5800 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b57e8:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b57ea:	23ff      	movs	r3, #255	; 0xff
   b57ec:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b57f0:	7763      	strb	r3, [r4, #29]
   b57f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b57f6:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b57f8:	f884 5020 	strb.w	r5, [r4, #32]
}
   b57fc:	4620      	mov	r0, r4
   b57fe:	bd38      	pop	{r3, r4, r5, pc}
   b5800:	000b7e70 	.word	0x000b7e70

000b5804 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b5804:	4802      	ldr	r0, [pc, #8]	; (b5810 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b5806:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b580a:	2100      	movs	r1, #0
   b580c:	f001 bd1e 	b.w	b724c <memset>
   b5810:	2003e1e4 	.word	0x2003e1e4

000b5814 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b5814:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b5816:	4c0b      	ldr	r4, [pc, #44]	; (b5844 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b5818:	7821      	ldrb	r1, [r4, #0]
   b581a:	f3bf 8f5b 	dmb	ish
   b581e:	f011 0101 	ands.w	r1, r1, #1
   b5822:	d10b      	bne.n	b583c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5824:	4620      	mov	r0, r4
   b5826:	9101      	str	r1, [sp, #4]
   b5828:	f7fe fc48 	bl	b40bc <__cxa_guard_acquire>
   b582c:	9901      	ldr	r1, [sp, #4]
   b582e:	b128      	cbz	r0, b583c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5830:	4805      	ldr	r0, [pc, #20]	; (b5848 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5832:	f001 f8a7 	bl	b6984 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b5836:	4620      	mov	r0, r4
   b5838:	f7fe fc45 	bl	b40c6 <__cxa_guard_release>
        return instance;
    }
   b583c:	4802      	ldr	r0, [pc, #8]	; (b5848 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b583e:	b002      	add	sp, #8
   b5840:	bd10      	pop	{r4, pc}
   b5842:	bf00      	nop
   b5844:	2003e6b8 	.word	0x2003e6b8
   b5848:	2003e6bc 	.word	0x2003e6bc

000b584c <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b584c:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b584e:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b5852:	b143      	cbz	r3, b5866 <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b5854:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b5856:	f7ff ffdd 	bl	b5814 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b585a:	9901      	ldr	r1, [sp, #4]
}
   b585c:	b003      	add	sp, #12
   b585e:	f85d eb04 	ldr.w	lr, [sp], #4
   b5862:	f001 b943 	b.w	b6aec <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b5866:	460b      	mov	r3, r1
   b5868:	7f81      	ldrb	r1, [r0, #30]
   b586a:	7f40      	ldrb	r0, [r0, #29]
   b586c:	2201      	movs	r2, #1
}
   b586e:	b003      	add	sp, #12
   b5870:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b5874:	f001 bc17 	b.w	b70a6 <shiftOut>

000b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b5878:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b587a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b587e:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b5880:	4604      	mov	r4, r0
   b5882:	460d      	mov	r5, r1
  if (sid != -1)
   b5884:	d01d      	beq.n	b58c2 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b5886:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b588a:	2101      	movs	r1, #1
   b588c:	b280      	uxth	r0, r0
   b588e:	f001 fbda 	bl	b7046 <digitalWrite>
    digitalWrite(dc, LOW);
   b5892:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5896:	2100      	movs	r1, #0
   b5898:	b280      	uxth	r0, r0
   b589a:	f001 fbd4 	bl	b7046 <digitalWrite>
    digitalWrite(cs, LOW);
   b589e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b58a2:	2100      	movs	r1, #0
   b58a4:	b280      	uxth	r0, r0
   b58a6:	f001 fbce 	bl	b7046 <digitalWrite>
    fastSPIwrite(c);
   b58aa:	4629      	mov	r1, r5
   b58ac:	4620      	mov	r0, r4
   b58ae:	f7ff ffcd 	bl	b584c <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b58b2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b58b6:	2101      	movs	r1, #1
}
   b58b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b58bc:	b280      	uxth	r0, r0
   b58be:	f001 bbc2 	b.w	b7046 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b58c2:	f001 fc2d 	bl	b7120 <_Z19__fetch_global_Wirev>
   b58c6:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b58ca:	f000 fc93 	bl	b61f4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b58ce:	f001 fc27 	bl	b7120 <_Z19__fetch_global_Wirev>
   b58d2:	6803      	ldr	r3, [r0, #0]
   b58d4:	2100      	movs	r1, #0
   b58d6:	689b      	ldr	r3, [r3, #8]
   b58d8:	4798      	blx	r3
    Wire.write(c);
   b58da:	f001 fc21 	bl	b7120 <_Z19__fetch_global_Wirev>
   b58de:	6803      	ldr	r3, [r0, #0]
   b58e0:	4629      	mov	r1, r5
   b58e2:	689b      	ldr	r3, [r3, #8]
   b58e4:	4798      	blx	r3
    Wire.endTransmission();
   b58e6:	f001 fc1b 	bl	b7120 <_Z19__fetch_global_Wirev>
}
   b58ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b58ee:	f000 bc88 	b.w	b6202 <_ZN7TwoWire15endTransmissionEv>
	...

000b58f4 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b58f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b58f6:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b58f8:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b58fa:	f7ff ffbd 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b58fe:	2100      	movs	r1, #0
   b5900:	4620      	mov	r0, r4
   b5902:	f7ff ffb9 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b5906:	217f      	movs	r1, #127	; 0x7f
   b5908:	4620      	mov	r0, r4
   b590a:	f7ff ffb5 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b590e:	2122      	movs	r1, #34	; 0x22
   b5910:	4620      	mov	r0, r4
   b5912:	f7ff ffb1 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b5916:	2100      	movs	r1, #0
   b5918:	4620      	mov	r0, r4
   b591a:	f7ff ffad 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b591e:	2107      	movs	r1, #7
   b5920:	4620      	mov	r0, r4
   b5922:	f7ff ffa9 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b5926:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b592a:	4f29      	ldr	r7, [pc, #164]	; (b59d0 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b592c:	3301      	adds	r3, #1
   b592e:	d02a      	beq.n	b5986 <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b5930:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5934:	2101      	movs	r1, #1
   b5936:	b280      	uxth	r0, r0
   b5938:	f001 fb85 	bl	b7046 <digitalWrite>
    digitalWrite(dc, HIGH);
   b593c:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5940:	2101      	movs	r1, #1
   b5942:	b280      	uxth	r0, r0
   b5944:	f001 fb7f 	bl	b7046 <digitalWrite>
    digitalWrite(cs, LOW);
   b5948:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b594c:	2100      	movs	r1, #0
   b594e:	b280      	uxth	r0, r0
   b5950:	f001 fb79 	bl	b7046 <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5954:	2001      	movs	r0, #1
   b5956:	f000 f925 	bl	b5ba4 <HAL_Delay_Microseconds>
   b595a:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b595e:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b5960:	f817 1b01 	ldrb.w	r1, [r7], #1
   b5964:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5966:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b5968:	f7ff ff70 	bl	b584c <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b596c:	2d00      	cmp	r5, #0
   b596e:	d1f6      	bne.n	b595e <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b5970:	2001      	movs	r0, #1
   b5972:	f000 f917 	bl	b5ba4 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b5976:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b597a:	2101      	movs	r1, #1
}
   b597c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b5980:	b280      	uxth	r0, r0
   b5982:	f001 bb60 	b.w	b7046 <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5986:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b5988:	f001 fbca 	bl	b7120 <_Z19__fetch_global_Wirev>
   b598c:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b5990:	f000 fc30 	bl	b61f4 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b5994:	f001 fbc4 	bl	b7120 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5998:	6803      	ldr	r3, [r0, #0]
   b599a:	2140      	movs	r1, #64	; 0x40
   b599c:	689b      	ldr	r3, [r3, #8]
   b599e:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b59a0:	f105 0610 	add.w	r6, r5, #16
   b59a4:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b59a6:	f001 fbbb 	bl	b7120 <_Z19__fetch_global_Wirev>
   b59aa:	6803      	ldr	r3, [r0, #0]
   b59ac:	5d79      	ldrb	r1, [r7, r5]
   b59ae:	689b      	ldr	r3, [r3, #8]
   b59b0:	4798      	blx	r3
		i++;
   b59b2:	1c6b      	adds	r3, r5, #1
   b59b4:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b59b6:	42ae      	cmp	r6, r5
   b59b8:	d1f5      	bne.n	b59a6 <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b59ba:	f001 fbb1 	bl	b7120 <_Z19__fetch_global_Wirev>
   b59be:	f000 fc20 	bl	b6202 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b59c2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b59c6:	d100      	bne.n	b59ca <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b59c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b59ca:	4635      	mov	r5, r6
   b59cc:	e7dc      	b.n	b5988 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b59ce:	bf00      	nop
   b59d0:	2003e1e4 	.word	0x2003e1e4

000b59d4 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b59d4:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b59d6:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b59da:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b59dc:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b59de:	4604      	mov	r4, r0
   b59e0:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b59e2:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b59e4:	f000 80c9 	beq.w	b5b7a <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b59e8:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b59ec:	2101      	movs	r1, #1
   b59ee:	b280      	uxth	r0, r0
   b59f0:	f001 fb18 	bl	b7024 <pinMode>
    pinMode(cs, OUTPUT);
   b59f4:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b59f8:	2101      	movs	r1, #1
   b59fa:	b280      	uxth	r0, r0
   b59fc:	f001 fb12 	bl	b7024 <pinMode>
    if (!hwSPI){
   b5a00:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5a04:	2b00      	cmp	r3, #0
   b5a06:	f000 80a6 	beq.w	b5b56 <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b5a0a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5a0e:	2101      	movs	r1, #1
   b5a10:	b280      	uxth	r0, r0
   b5a12:	f001 fb18 	bl	b7046 <digitalWrite>
        instance().setBitOrder(order);
   b5a16:	f7ff fefd 	bl	b5814 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5a1a:	2101      	movs	r1, #1
   b5a1c:	f000 ffd0 	bl	b69c0 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b5a20:	f7ff fef8 	bl	b5814 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5a24:	2110      	movs	r1, #16
   b5a26:	f001 f83b 	bl	b6aa0 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b5a2a:	f7ff fef3 	bl	b5814 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5a2e:	2100      	movs	r1, #0
   b5a30:	f000 ffda 	bl	b69e8 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b5a34:	f7ff feee 	bl	b5814 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5a38:	f000 ffae 	bl	b6998 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b5a3c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5a40:	2101      	movs	r1, #1
   b5a42:	b280      	uxth	r0, r0
   b5a44:	f001 faee 	bl	b7024 <pinMode>
  digitalWrite(rst, HIGH);
   b5a48:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5a4c:	2101      	movs	r1, #1
   b5a4e:	b280      	uxth	r0, r0
   b5a50:	f001 faf9 	bl	b7046 <digitalWrite>
  delay(1);
   b5a54:	2001      	movs	r0, #1
   b5a56:	f000 fb1b 	bl	b6090 <delay>
  digitalWrite(rst, LOW);
   b5a5a:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5a5e:	2100      	movs	r1, #0
   b5a60:	b280      	uxth	r0, r0
   b5a62:	f001 faf0 	bl	b7046 <digitalWrite>
  delay(10);
   b5a66:	200a      	movs	r0, #10
   b5a68:	f000 fb12 	bl	b6090 <delay>
  digitalWrite(rst, HIGH);
   b5a6c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5a70:	2101      	movs	r1, #1
   b5a72:	b280      	uxth	r0, r0
   b5a74:	f001 fae7 	bl	b7046 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b5a78:	4620      	mov	r0, r4
   b5a7a:	21ae      	movs	r1, #174	; 0xae
   b5a7c:	f7ff fefc 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b5a80:	4620      	mov	r0, r4
   b5a82:	21d5      	movs	r1, #213	; 0xd5
   b5a84:	f7ff fef8 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b5a88:	4620      	mov	r0, r4
   b5a8a:	2180      	movs	r1, #128	; 0x80
   b5a8c:	f7ff fef4 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b5a90:	4620      	mov	r0, r4
   b5a92:	21a8      	movs	r1, #168	; 0xa8
   b5a94:	f7ff fef0 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b5a98:	4620      	mov	r0, r4
   b5a9a:	213f      	movs	r1, #63	; 0x3f
   b5a9c:	f7ff feec 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b5aa0:	4620      	mov	r0, r4
   b5aa2:	21d3      	movs	r1, #211	; 0xd3
   b5aa4:	f7ff fee8 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b5aa8:	4620      	mov	r0, r4
   b5aaa:	2100      	movs	r1, #0
   b5aac:	f7ff fee4 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b5ab0:	4620      	mov	r0, r4
   b5ab2:	2140      	movs	r1, #64	; 0x40
   b5ab4:	f7ff fee0 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b5ab8:	218d      	movs	r1, #141	; 0x8d
   b5aba:	4620      	mov	r0, r4
   b5abc:	f7ff fedc 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5ac0:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b5ac2:	bf0c      	ite	eq
   b5ac4:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b5ac6:	2114      	movne	r1, #20
   b5ac8:	4620      	mov	r0, r4
   b5aca:	f7ff fed5 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b5ace:	4620      	mov	r0, r4
   b5ad0:	2120      	movs	r1, #32
   b5ad2:	f7ff fed1 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b5ad6:	4620      	mov	r0, r4
   b5ad8:	2100      	movs	r1, #0
   b5ada:	f7ff fecd 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b5ade:	4620      	mov	r0, r4
   b5ae0:	21a1      	movs	r1, #161	; 0xa1
   b5ae2:	f7ff fec9 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b5ae6:	4620      	mov	r0, r4
   b5ae8:	21c8      	movs	r1, #200	; 0xc8
   b5aea:	f7ff fec5 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b5aee:	4620      	mov	r0, r4
   b5af0:	21da      	movs	r1, #218	; 0xda
   b5af2:	f7ff fec1 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b5af6:	4620      	mov	r0, r4
   b5af8:	2112      	movs	r1, #18
   b5afa:	f7ff febd 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b5afe:	2181      	movs	r1, #129	; 0x81
   b5b00:	4620      	mov	r0, r4
   b5b02:	f7ff feb9 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5b06:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b5b08:	bf0c      	ite	eq
   b5b0a:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b5b0c:	21cf      	movne	r1, #207	; 0xcf
   b5b0e:	4620      	mov	r0, r4
   b5b10:	f7ff feb2 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b5b14:	21d9      	movs	r1, #217	; 0xd9
   b5b16:	4620      	mov	r0, r4
   b5b18:	f7ff feae 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5b1c:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b5b1e:	bf0c      	ite	eq
   b5b20:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b5b22:	21f1      	movne	r1, #241	; 0xf1
   b5b24:	4620      	mov	r0, r4
   b5b26:	f7ff fea7 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b5b2a:	4620      	mov	r0, r4
   b5b2c:	21db      	movs	r1, #219	; 0xdb
   b5b2e:	f7ff fea3 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b5b32:	4620      	mov	r0, r4
   b5b34:	2140      	movs	r1, #64	; 0x40
   b5b36:	f7ff fe9f 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b5b3a:	4620      	mov	r0, r4
   b5b3c:	21a4      	movs	r1, #164	; 0xa4
   b5b3e:	f7ff fe9b 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b5b42:	4620      	mov	r0, r4
   b5b44:	21a6      	movs	r1, #166	; 0xa6
   b5b46:	f7ff fe97 	bl	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b5b4a:	4620      	mov	r0, r4
   b5b4c:	21af      	movs	r1, #175	; 0xaf
}
   b5b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b5b52:	f7ff be91 	b.w	b5878 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b5b56:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5b5a:	2101      	movs	r1, #1
   b5b5c:	b280      	uxth	r0, r0
   b5b5e:	f001 fa61 	bl	b7024 <pinMode>
    	pinMode(sclk, OUTPUT);
   b5b62:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b5b66:	2101      	movs	r1, #1
   b5b68:	b280      	uxth	r0, r0
   b5b6a:	f001 fa5b 	bl	b7024 <pinMode>
    if (hwSPI){
   b5b6e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5b72:	2b00      	cmp	r3, #0
   b5b74:	f43f af62 	beq.w	b5a3c <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b5b78:	e747      	b.n	b5a0a <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b5b7a:	f001 fad1 	bl	b7120 <_Z19__fetch_global_Wirev>
   b5b7e:	f000 fb2f 	bl	b61e0 <_ZN7TwoWire5beginEv>
   b5b82:	e75b      	b.n	b5a3c <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b5b84 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5b84:	b508      	push	{r3, lr}
   b5b86:	4b02      	ldr	r3, [pc, #8]	; (b5b90 <os_mutex_recursive_create+0xc>)
   b5b88:	681b      	ldr	r3, [r3, #0]
   b5b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5b8c:	9301      	str	r3, [sp, #4]
   b5b8e:	bd08      	pop	{r3, pc}
   b5b90:	00030248 	.word	0x00030248

000b5b94 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5b94:	b508      	push	{r3, lr}
   b5b96:	4b02      	ldr	r3, [pc, #8]	; (b5ba0 <HAL_RNG_GetRandomNumber+0xc>)
   b5b98:	681b      	ldr	r3, [r3, #0]
   b5b9a:	685b      	ldr	r3, [r3, #4]
   b5b9c:	9301      	str	r3, [sp, #4]
   b5b9e:	bd08      	pop	{r3, pc}
   b5ba0:	00030218 	.word	0x00030218

000b5ba4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5ba4:	b508      	push	{r3, lr}
   b5ba6:	4b02      	ldr	r3, [pc, #8]	; (b5bb0 <HAL_Delay_Microseconds+0xc>)
   b5ba8:	681b      	ldr	r3, [r3, #0]
   b5baa:	68db      	ldr	r3, [r3, #12]
   b5bac:	9301      	str	r3, [sp, #4]
   b5bae:	bd08      	pop	{r3, pc}
   b5bb0:	00030218 	.word	0x00030218

000b5bb4 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b5bb4:	b508      	push	{r3, lr}
   b5bb6:	4b02      	ldr	r3, [pc, #8]	; (b5bc0 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b5bb8:	681b      	ldr	r3, [r3, #0]
   b5bba:	691b      	ldr	r3, [r3, #16]
   b5bbc:	9301      	str	r3, [sp, #4]
   b5bbe:	bd08      	pop	{r3, pc}
   b5bc0:	00030218 	.word	0x00030218

000b5bc4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5bc4:	b508      	push	{r3, lr}
   b5bc6:	4b02      	ldr	r3, [pc, #8]	; (b5bd0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5bc8:	681b      	ldr	r3, [r3, #0]
   b5bca:	695b      	ldr	r3, [r3, #20]
   b5bcc:	9301      	str	r3, [sp, #4]
   b5bce:	bd08      	pop	{r3, pc}
   b5bd0:	00030218 	.word	0x00030218

000b5bd4 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b5bd4:	b508      	push	{r3, lr}
   b5bd6:	4b02      	ldr	r3, [pc, #8]	; (b5be0 <hal_timer_millis+0xc>)
   b5bd8:	681b      	ldr	r3, [r3, #0]
   b5bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b5bdc:	9301      	str	r3, [sp, #4]
   b5bde:	bd08      	pop	{r3, pc}
   b5be0:	00030218 	.word	0x00030218

000b5be4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b5be4:	b508      	push	{r3, lr}
   b5be6:	4b02      	ldr	r3, [pc, #8]	; (b5bf0 <HAL_Pin_Map+0xc>)
   b5be8:	681b      	ldr	r3, [r3, #0]
   b5bea:	681b      	ldr	r3, [r3, #0]
   b5bec:	9301      	str	r3, [sp, #4]
   b5bee:	bd08      	pop	{r3, pc}
   b5bf0:	0003022c 	.word	0x0003022c

000b5bf4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b5bf4:	b508      	push	{r3, lr}
   b5bf6:	4b02      	ldr	r3, [pc, #8]	; (b5c00 <HAL_Validate_Pin_Function+0xc>)
   b5bf8:	681b      	ldr	r3, [r3, #0]
   b5bfa:	685b      	ldr	r3, [r3, #4]
   b5bfc:	9301      	str	r3, [sp, #4]
   b5bfe:	bd08      	pop	{r3, pc}
   b5c00:	0003022c 	.word	0x0003022c

000b5c04 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5c04:	b508      	push	{r3, lr}
   b5c06:	4b02      	ldr	r3, [pc, #8]	; (b5c10 <HAL_Pin_Mode+0xc>)
   b5c08:	681b      	ldr	r3, [r3, #0]
   b5c0a:	689b      	ldr	r3, [r3, #8]
   b5c0c:	9301      	str	r3, [sp, #4]
   b5c0e:	bd08      	pop	{r3, pc}
   b5c10:	0003022c 	.word	0x0003022c

000b5c14 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5c14:	b508      	push	{r3, lr}
   b5c16:	4b02      	ldr	r3, [pc, #8]	; (b5c20 <HAL_Get_Pin_Mode+0xc>)
   b5c18:	681b      	ldr	r3, [r3, #0]
   b5c1a:	68db      	ldr	r3, [r3, #12]
   b5c1c:	9301      	str	r3, [sp, #4]
   b5c1e:	bd08      	pop	{r3, pc}
   b5c20:	0003022c 	.word	0x0003022c

000b5c24 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5c24:	b508      	push	{r3, lr}
   b5c26:	4b02      	ldr	r3, [pc, #8]	; (b5c30 <HAL_GPIO_Write+0xc>)
   b5c28:	681b      	ldr	r3, [r3, #0]
   b5c2a:	691b      	ldr	r3, [r3, #16]
   b5c2c:	9301      	str	r3, [sp, #4]
   b5c2e:	bd08      	pop	{r3, pc}
   b5c30:	0003022c 	.word	0x0003022c

000b5c34 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b5c34:	b508      	push	{r3, lr}
   b5c36:	4b02      	ldr	r3, [pc, #8]	; (b5c40 <hal_adc_read+0xc>)
   b5c38:	681b      	ldr	r3, [r3, #0]
   b5c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5c3c:	9301      	str	r3, [sp, #4]
   b5c3e:	bd08      	pop	{r3, pc}
   b5c40:	0003022c 	.word	0x0003022c

000b5c44 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5c44:	b508      	push	{r3, lr}
   b5c46:	4b02      	ldr	r3, [pc, #8]	; (b5c50 <hal_i2c_begin+0xc>)
   b5c48:	681b      	ldr	r3, [r3, #0]
   b5c4a:	68db      	ldr	r3, [r3, #12]
   b5c4c:	9301      	str	r3, [sp, #4]
   b5c4e:	bd08      	pop	{r3, pc}
   b5c50:	00030228 	.word	0x00030228

000b5c54 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5c54:	b508      	push	{r3, lr}
   b5c56:	4b02      	ldr	r3, [pc, #8]	; (b5c60 <hal_i2c_begin_transmission+0xc>)
   b5c58:	681b      	ldr	r3, [r3, #0]
   b5c5a:	699b      	ldr	r3, [r3, #24]
   b5c5c:	9301      	str	r3, [sp, #4]
   b5c5e:	bd08      	pop	{r3, pc}
   b5c60:	00030228 	.word	0x00030228

000b5c64 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5c64:	b508      	push	{r3, lr}
   b5c66:	4b02      	ldr	r3, [pc, #8]	; (b5c70 <hal_i2c_end_transmission+0xc>)
   b5c68:	681b      	ldr	r3, [r3, #0]
   b5c6a:	69db      	ldr	r3, [r3, #28]
   b5c6c:	9301      	str	r3, [sp, #4]
   b5c6e:	bd08      	pop	{r3, pc}
   b5c70:	00030228 	.word	0x00030228

000b5c74 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5c74:	b508      	push	{r3, lr}
   b5c76:	4b02      	ldr	r3, [pc, #8]	; (b5c80 <hal_i2c_write+0xc>)
   b5c78:	681b      	ldr	r3, [r3, #0]
   b5c7a:	6a1b      	ldr	r3, [r3, #32]
   b5c7c:	9301      	str	r3, [sp, #4]
   b5c7e:	bd08      	pop	{r3, pc}
   b5c80:	00030228 	.word	0x00030228

000b5c84 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5c84:	b508      	push	{r3, lr}
   b5c86:	4b02      	ldr	r3, [pc, #8]	; (b5c90 <hal_i2c_available+0xc>)
   b5c88:	681b      	ldr	r3, [r3, #0]
   b5c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5c8c:	9301      	str	r3, [sp, #4]
   b5c8e:	bd08      	pop	{r3, pc}
   b5c90:	00030228 	.word	0x00030228

000b5c94 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5c94:	b508      	push	{r3, lr}
   b5c96:	4b02      	ldr	r3, [pc, #8]	; (b5ca0 <hal_i2c_read+0xc>)
   b5c98:	681b      	ldr	r3, [r3, #0]
   b5c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5c9c:	9301      	str	r3, [sp, #4]
   b5c9e:	bd08      	pop	{r3, pc}
   b5ca0:	00030228 	.word	0x00030228

000b5ca4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5ca4:	b508      	push	{r3, lr}
   b5ca6:	4b02      	ldr	r3, [pc, #8]	; (b5cb0 <hal_i2c_peek+0xc>)
   b5ca8:	681b      	ldr	r3, [r3, #0]
   b5caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5cac:	9301      	str	r3, [sp, #4]
   b5cae:	bd08      	pop	{r3, pc}
   b5cb0:	00030228 	.word	0x00030228

000b5cb4 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5cb4:	b508      	push	{r3, lr}
   b5cb6:	4b02      	ldr	r3, [pc, #8]	; (b5cc0 <hal_i2c_flush+0xc>)
   b5cb8:	681b      	ldr	r3, [r3, #0]
   b5cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5cbc:	9301      	str	r3, [sp, #4]
   b5cbe:	bd08      	pop	{r3, pc}
   b5cc0:	00030228 	.word	0x00030228

000b5cc4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5cc4:	b508      	push	{r3, lr}
   b5cc6:	4b02      	ldr	r3, [pc, #8]	; (b5cd0 <hal_i2c_is_enabled+0xc>)
   b5cc8:	681b      	ldr	r3, [r3, #0]
   b5cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5ccc:	9301      	str	r3, [sp, #4]
   b5cce:	bd08      	pop	{r3, pc}
   b5cd0:	00030228 	.word	0x00030228

000b5cd4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5cd4:	b508      	push	{r3, lr}
   b5cd6:	4b02      	ldr	r3, [pc, #8]	; (b5ce0 <hal_i2c_init+0xc>)
   b5cd8:	681b      	ldr	r3, [r3, #0]
   b5cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5cdc:	9301      	str	r3, [sp, #4]
   b5cde:	bd08      	pop	{r3, pc}
   b5ce0:	00030228 	.word	0x00030228

000b5ce4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b5ce4:	b508      	push	{r3, lr}
   b5ce6:	4b02      	ldr	r3, [pc, #8]	; (b5cf0 <inet_inet_ntop+0xc>)
   b5ce8:	681b      	ldr	r3, [r3, #0]
   b5cea:	695b      	ldr	r3, [r3, #20]
   b5cec:	9301      	str	r3, [sp, #4]
   b5cee:	bd08      	pop	{r3, pc}
   b5cf0:	00030264 	.word	0x00030264

000b5cf4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5cf4:	b508      	push	{r3, lr}
   b5cf6:	4b02      	ldr	r3, [pc, #8]	; (b5d00 <netdb_freeaddrinfo+0xc>)
   b5cf8:	681b      	ldr	r3, [r3, #0]
   b5cfa:	689b      	ldr	r3, [r3, #8]
   b5cfc:	9301      	str	r3, [sp, #4]
   b5cfe:	bd08      	pop	{r3, pc}
   b5d00:	00030268 	.word	0x00030268

000b5d04 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5d04:	b508      	push	{r3, lr}
   b5d06:	4b02      	ldr	r3, [pc, #8]	; (b5d10 <netdb_getaddrinfo+0xc>)
   b5d08:	681b      	ldr	r3, [r3, #0]
   b5d0a:	68db      	ldr	r3, [r3, #12]
   b5d0c:	9301      	str	r3, [sp, #4]
   b5d0e:	bd08      	pop	{r3, pc}
   b5d10:	00030268 	.word	0x00030268

000b5d14 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5d14:	b508      	push	{r3, lr}
   b5d16:	4b02      	ldr	r3, [pc, #8]	; (b5d20 <hal_spi_begin+0xc>)
   b5d18:	681b      	ldr	r3, [r3, #0]
   b5d1a:	681b      	ldr	r3, [r3, #0]
   b5d1c:	9301      	str	r3, [sp, #4]
   b5d1e:	bd08      	pop	{r3, pc}
   b5d20:	00030230 	.word	0x00030230

000b5d24 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b5d24:	b508      	push	{r3, lr}
   b5d26:	4b02      	ldr	r3, [pc, #8]	; (b5d30 <hal_spi_set_bit_order+0xc>)
   b5d28:	681b      	ldr	r3, [r3, #0]
   b5d2a:	689b      	ldr	r3, [r3, #8]
   b5d2c:	9301      	str	r3, [sp, #4]
   b5d2e:	bd08      	pop	{r3, pc}
   b5d30:	00030230 	.word	0x00030230

000b5d34 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b5d34:	b508      	push	{r3, lr}
   b5d36:	4b02      	ldr	r3, [pc, #8]	; (b5d40 <hal_spi_set_data_mode+0xc>)
   b5d38:	681b      	ldr	r3, [r3, #0]
   b5d3a:	68db      	ldr	r3, [r3, #12]
   b5d3c:	9301      	str	r3, [sp, #4]
   b5d3e:	bd08      	pop	{r3, pc}
   b5d40:	00030230 	.word	0x00030230

000b5d44 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b5d44:	b508      	push	{r3, lr}
   b5d46:	4b02      	ldr	r3, [pc, #8]	; (b5d50 <hal_spi_set_clock_divider+0xc>)
   b5d48:	681b      	ldr	r3, [r3, #0]
   b5d4a:	691b      	ldr	r3, [r3, #16]
   b5d4c:	9301      	str	r3, [sp, #4]
   b5d4e:	bd08      	pop	{r3, pc}
   b5d50:	00030230 	.word	0x00030230

000b5d54 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5d54:	b508      	push	{r3, lr}
   b5d56:	4b02      	ldr	r3, [pc, #8]	; (b5d60 <hal_spi_transfer+0xc>)
   b5d58:	681b      	ldr	r3, [r3, #0]
   b5d5a:	695b      	ldr	r3, [r3, #20]
   b5d5c:	9301      	str	r3, [sp, #4]
   b5d5e:	bd08      	pop	{r3, pc}
   b5d60:	00030230 	.word	0x00030230

000b5d64 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5d64:	b508      	push	{r3, lr}
   b5d66:	4b02      	ldr	r3, [pc, #8]	; (b5d70 <hal_spi_init+0xc>)
   b5d68:	681b      	ldr	r3, [r3, #0]
   b5d6a:	69db      	ldr	r3, [r3, #28]
   b5d6c:	9301      	str	r3, [sp, #4]
   b5d6e:	bd08      	pop	{r3, pc}
   b5d70:	00030230 	.word	0x00030230

000b5d74 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5d74:	b508      	push	{r3, lr}
   b5d76:	4b02      	ldr	r3, [pc, #8]	; (b5d80 <hal_spi_is_enabled+0xc>)
   b5d78:	681b      	ldr	r3, [r3, #0]
   b5d7a:	6a1b      	ldr	r3, [r3, #32]
   b5d7c:	9301      	str	r3, [sp, #4]
   b5d7e:	bd08      	pop	{r3, pc}
   b5d80:	00030230 	.word	0x00030230

000b5d84 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5d84:	b508      	push	{r3, lr}
   b5d86:	4b02      	ldr	r3, [pc, #8]	; (b5d90 <hal_spi_info+0xc>)
   b5d88:	681b      	ldr	r3, [r3, #0]
   b5d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5d8c:	9301      	str	r3, [sp, #4]
   b5d8e:	bd08      	pop	{r3, pc}
   b5d90:	00030230 	.word	0x00030230

000b5d94 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5d94:	b508      	push	{r3, lr}
   b5d96:	4b02      	ldr	r3, [pc, #8]	; (b5da0 <hal_spi_acquire+0xc>)
   b5d98:	681b      	ldr	r3, [r3, #0]
   b5d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5d9c:	9301      	str	r3, [sp, #4]
   b5d9e:	bd08      	pop	{r3, pc}
   b5da0:	00030230 	.word	0x00030230

000b5da4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5da4:	b508      	push	{r3, lr}
   b5da6:	4b02      	ldr	r3, [pc, #8]	; (b5db0 <hal_spi_release+0xc>)
   b5da8:	681b      	ldr	r3, [r3, #0]
   b5daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5dac:	9301      	str	r3, [sp, #4]
   b5dae:	bd08      	pop	{r3, pc}
   b5db0:	00030230 	.word	0x00030230

000b5db4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5db4:	b508      	push	{r3, lr}
   b5db6:	4b02      	ldr	r3, [pc, #8]	; (b5dc0 <hal_usart_write+0xc>)
   b5db8:	681b      	ldr	r3, [r3, #0]
   b5dba:	68db      	ldr	r3, [r3, #12]
   b5dbc:	9301      	str	r3, [sp, #4]
   b5dbe:	bd08      	pop	{r3, pc}
   b5dc0:	0003023c 	.word	0x0003023c

000b5dc4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5dc4:	b508      	push	{r3, lr}
   b5dc6:	4b02      	ldr	r3, [pc, #8]	; (b5dd0 <hal_usart_available+0xc>)
   b5dc8:	681b      	ldr	r3, [r3, #0]
   b5dca:	691b      	ldr	r3, [r3, #16]
   b5dcc:	9301      	str	r3, [sp, #4]
   b5dce:	bd08      	pop	{r3, pc}
   b5dd0:	0003023c 	.word	0x0003023c

000b5dd4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5dd4:	b508      	push	{r3, lr}
   b5dd6:	4b02      	ldr	r3, [pc, #8]	; (b5de0 <hal_usart_read+0xc>)
   b5dd8:	681b      	ldr	r3, [r3, #0]
   b5dda:	695b      	ldr	r3, [r3, #20]
   b5ddc:	9301      	str	r3, [sp, #4]
   b5dde:	bd08      	pop	{r3, pc}
   b5de0:	0003023c 	.word	0x0003023c

000b5de4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5de4:	b508      	push	{r3, lr}
   b5de6:	4b02      	ldr	r3, [pc, #8]	; (b5df0 <hal_usart_peek+0xc>)
   b5de8:	681b      	ldr	r3, [r3, #0]
   b5dea:	699b      	ldr	r3, [r3, #24]
   b5dec:	9301      	str	r3, [sp, #4]
   b5dee:	bd08      	pop	{r3, pc}
   b5df0:	0003023c 	.word	0x0003023c

000b5df4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5df4:	b508      	push	{r3, lr}
   b5df6:	4b02      	ldr	r3, [pc, #8]	; (b5e00 <hal_usart_flush+0xc>)
   b5df8:	681b      	ldr	r3, [r3, #0]
   b5dfa:	69db      	ldr	r3, [r3, #28]
   b5dfc:	9301      	str	r3, [sp, #4]
   b5dfe:	bd08      	pop	{r3, pc}
   b5e00:	0003023c 	.word	0x0003023c

000b5e04 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5e04:	b508      	push	{r3, lr}
   b5e06:	4b02      	ldr	r3, [pc, #8]	; (b5e10 <hal_usart_is_enabled+0xc>)
   b5e08:	681b      	ldr	r3, [r3, #0]
   b5e0a:	6a1b      	ldr	r3, [r3, #32]
   b5e0c:	9301      	str	r3, [sp, #4]
   b5e0e:	bd08      	pop	{r3, pc}
   b5e10:	0003023c 	.word	0x0003023c

000b5e14 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5e14:	b508      	push	{r3, lr}
   b5e16:	4b02      	ldr	r3, [pc, #8]	; (b5e20 <hal_usart_available_data_for_write+0xc>)
   b5e18:	681b      	ldr	r3, [r3, #0]
   b5e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5e1c:	9301      	str	r3, [sp, #4]
   b5e1e:	bd08      	pop	{r3, pc}
   b5e20:	0003023c 	.word	0x0003023c

000b5e24 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5e24:	b508      	push	{r3, lr}
   b5e26:	4b02      	ldr	r3, [pc, #8]	; (b5e30 <hal_usart_init_ex+0xc>)
   b5e28:	681b      	ldr	r3, [r3, #0]
   b5e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5e2c:	9301      	str	r3, [sp, #4]
   b5e2e:	bd08      	pop	{r3, pc}
   b5e30:	0003023c 	.word	0x0003023c

000b5e34 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5e34:	b508      	push	{r3, lr}
   b5e36:	4b02      	ldr	r3, [pc, #8]	; (b5e40 <HAL_USB_USART_Init+0xc>)
   b5e38:	681b      	ldr	r3, [r3, #0]
   b5e3a:	681b      	ldr	r3, [r3, #0]
   b5e3c:	9301      	str	r3, [sp, #4]
   b5e3e:	bd08      	pop	{r3, pc}
   b5e40:	0003024c 	.word	0x0003024c

000b5e44 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5e44:	b508      	push	{r3, lr}
   b5e46:	4b02      	ldr	r3, [pc, #8]	; (b5e50 <HAL_USB_USART_Begin+0xc>)
   b5e48:	681b      	ldr	r3, [r3, #0]
   b5e4a:	685b      	ldr	r3, [r3, #4]
   b5e4c:	9301      	str	r3, [sp, #4]
   b5e4e:	bd08      	pop	{r3, pc}
   b5e50:	0003024c 	.word	0x0003024c

000b5e54 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5e54:	b508      	push	{r3, lr}
   b5e56:	4b02      	ldr	r3, [pc, #8]	; (b5e60 <HAL_USB_USART_Available_Data+0xc>)
   b5e58:	681b      	ldr	r3, [r3, #0]
   b5e5a:	691b      	ldr	r3, [r3, #16]
   b5e5c:	9301      	str	r3, [sp, #4]
   b5e5e:	bd08      	pop	{r3, pc}
   b5e60:	0003024c 	.word	0x0003024c

000b5e64 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5e64:	b508      	push	{r3, lr}
   b5e66:	4b02      	ldr	r3, [pc, #8]	; (b5e70 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5e68:	681b      	ldr	r3, [r3, #0]
   b5e6a:	695b      	ldr	r3, [r3, #20]
   b5e6c:	9301      	str	r3, [sp, #4]
   b5e6e:	bd08      	pop	{r3, pc}
   b5e70:	0003024c 	.word	0x0003024c

000b5e74 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5e74:	b508      	push	{r3, lr}
   b5e76:	4b02      	ldr	r3, [pc, #8]	; (b5e80 <HAL_USB_USART_Receive_Data+0xc>)
   b5e78:	681b      	ldr	r3, [r3, #0]
   b5e7a:	699b      	ldr	r3, [r3, #24]
   b5e7c:	9301      	str	r3, [sp, #4]
   b5e7e:	bd08      	pop	{r3, pc}
   b5e80:	0003024c 	.word	0x0003024c

000b5e84 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5e84:	b508      	push	{r3, lr}
   b5e86:	4b02      	ldr	r3, [pc, #8]	; (b5e90 <HAL_USB_USART_Send_Data+0xc>)
   b5e88:	681b      	ldr	r3, [r3, #0]
   b5e8a:	69db      	ldr	r3, [r3, #28]
   b5e8c:	9301      	str	r3, [sp, #4]
   b5e8e:	bd08      	pop	{r3, pc}
   b5e90:	0003024c 	.word	0x0003024c

000b5e94 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5e94:	b508      	push	{r3, lr}
   b5e96:	4b02      	ldr	r3, [pc, #8]	; (b5ea0 <HAL_USB_USART_Flush_Data+0xc>)
   b5e98:	681b      	ldr	r3, [r3, #0]
   b5e9a:	6a1b      	ldr	r3, [r3, #32]
   b5e9c:	9301      	str	r3, [sp, #4]
   b5e9e:	bd08      	pop	{r3, pc}
   b5ea0:	0003024c 	.word	0x0003024c

000b5ea4 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b5ea4:	b508      	push	{r3, lr}
   b5ea6:	4b02      	ldr	r3, [pc, #8]	; (b5eb0 <HAL_USB_USART_Is_Connected+0xc>)
   b5ea8:	681b      	ldr	r3, [r3, #0]
   b5eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5eac:	9301      	str	r3, [sp, #4]
   b5eae:	bd08      	pop	{r3, pc}
   b5eb0:	0003024c 	.word	0x0003024c

000b5eb4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5eb4:	b508      	push	{r3, lr}
   b5eb6:	4b02      	ldr	r3, [pc, #8]	; (b5ec0 <panic_+0xc>)
   b5eb8:	681b      	ldr	r3, [r3, #0]
   b5eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5ebc:	9301      	str	r3, [sp, #4]
   b5ebe:	bd08      	pop	{r3, pc}
   b5ec0:	00030260 	.word	0x00030260

000b5ec4 <jsmn_init>:

DYNALIB_FN(14, services, jsmn_init, void(jsmn_parser*, void*))
   b5ec4:	b508      	push	{r3, lr}
   b5ec6:	4b02      	ldr	r3, [pc, #8]	; (b5ed0 <jsmn_init+0xc>)
   b5ec8:	681b      	ldr	r3, [r3, #0]
   b5eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5ecc:	9301      	str	r3, [sp, #4]
   b5ece:	bd08      	pop	{r3, pc}
   b5ed0:	00030260 	.word	0x00030260

000b5ed4 <jsmn_parse>:
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
DYNALIB_FN(39, services, diag_command, int(int, void*, void*))
DYNALIB_FN(40, services, set_system_error_message, void(const char*, ...))
DYNALIB_FN(41, services, clear_system_error_message, void())
DYNALIB_FN(42, services, get_system_error_message, const char*(int))
DYNALIB_FN(43, services, jsmn_parse, int(jsmn_parser*, const char*, size_t, jsmntok_t*, unsigned int, void*))
   b5ed4:	b508      	push	{r3, lr}
   b5ed6:	4b03      	ldr	r3, [pc, #12]	; (b5ee4 <jsmn_parse+0x10>)
   b5ed8:	681b      	ldr	r3, [r3, #0]
   b5eda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   b5ede:	9301      	str	r3, [sp, #4]
   b5ee0:	bd08      	pop	{r3, pc}
   b5ee2:	0000      	.short	0x0000
   b5ee4:	00030260 	.word	0x00030260

000b5ee8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5ee8:	b508      	push	{r3, lr}
   b5eea:	4b02      	ldr	r3, [pc, #8]	; (b5ef4 <set_system_mode+0xc>)
   b5eec:	681b      	ldr	r3, [r3, #0]
   b5eee:	685b      	ldr	r3, [r3, #4]
   b5ef0:	9301      	str	r3, [sp, #4]
   b5ef2:	bd08      	pop	{r3, pc}
   b5ef4:	00030220 	.word	0x00030220

000b5ef8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5ef8:	b508      	push	{r3, lr}
   b5efa:	4b02      	ldr	r3, [pc, #8]	; (b5f04 <system_delay_ms+0xc>)
   b5efc:	681b      	ldr	r3, [r3, #0]
   b5efe:	695b      	ldr	r3, [r3, #20]
   b5f00:	9301      	str	r3, [sp, #4]
   b5f02:	bd08      	pop	{r3, pc}
   b5f04:	00030220 	.word	0x00030220

000b5f08 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5f08:	b508      	push	{r3, lr}
   b5f0a:	4b03      	ldr	r3, [pc, #12]	; (b5f18 <system_ctrl_set_app_request_handler+0x10>)
   b5f0c:	681b      	ldr	r3, [r3, #0]
   b5f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5f12:	9301      	str	r3, [sp, #4]
   b5f14:	bd08      	pop	{r3, pc}
   b5f16:	0000      	.short	0x0000
   b5f18:	00030220 	.word	0x00030220

000b5f1c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5f1c:	b508      	push	{r3, lr}
   b5f1e:	4b03      	ldr	r3, [pc, #12]	; (b5f2c <system_ctrl_set_result+0x10>)
   b5f20:	681b      	ldr	r3, [r3, #0]
   b5f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5f26:	9301      	str	r3, [sp, #4]
   b5f28:	bd08      	pop	{r3, pc}
   b5f2a:	0000      	.short	0x0000
   b5f2c:	00030220 	.word	0x00030220

000b5f30 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5f30:	b508      	push	{r3, lr}
   b5f32:	4b02      	ldr	r3, [pc, #8]	; (b5f3c <spark_process+0xc>)
   b5f34:	681b      	ldr	r3, [r3, #0]
   b5f36:	689b      	ldr	r3, [r3, #8]
   b5f38:	9301      	str	r3, [sp, #4]
   b5f3a:	bd08      	pop	{r3, pc}
   b5f3c:	00030244 	.word	0x00030244

000b5f40 <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b5f40:	b508      	push	{r3, lr}
   b5f42:	4b02      	ldr	r3, [pc, #8]	; (b5f4c <spark_deviceID+0xc>)
   b5f44:	681b      	ldr	r3, [r3, #0]
   b5f46:	69db      	ldr	r3, [r3, #28]
   b5f48:	9301      	str	r3, [sp, #4]
   b5f4a:	bd08      	pop	{r3, pc}
   b5f4c:	00030244 	.word	0x00030244

000b5f50 <spark_subscribe>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b5f50:	b508      	push	{r3, lr}
   b5f52:	4b02      	ldr	r3, [pc, #8]	; (b5f5c <spark_subscribe+0xc>)
   b5f54:	681b      	ldr	r3, [r3, #0]
   b5f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5f58:	9301      	str	r3, [sp, #4]
   b5f5a:	bd08      	pop	{r3, pc}
   b5f5c:	00030244 	.word	0x00030244

000b5f60 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5f60:	b508      	push	{r3, lr}
   b5f62:	4b02      	ldr	r3, [pc, #8]	; (b5f6c <spark_set_random_seed_from_cloud_handler+0xc>)
   b5f64:	681b      	ldr	r3, [r3, #0]
   b5f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5f68:	9301      	str	r3, [sp, #4]
   b5f6a:	bd08      	pop	{r3, pc}
   b5f6c:	00030244 	.word	0x00030244

000b5f70 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5f70:	b508      	push	{r3, lr}
   b5f72:	4b02      	ldr	r3, [pc, #8]	; (b5f7c <network_connect+0xc>)
   b5f74:	681b      	ldr	r3, [r3, #0]
   b5f76:	685b      	ldr	r3, [r3, #4]
   b5f78:	9301      	str	r3, [sp, #4]
   b5f7a:	bd08      	pop	{r3, pc}
   b5f7c:	00030240 	.word	0x00030240

000b5f80 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5f80:	b508      	push	{r3, lr}
   b5f82:	4b02      	ldr	r3, [pc, #8]	; (b5f8c <network_connecting+0xc>)
   b5f84:	681b      	ldr	r3, [r3, #0]
   b5f86:	689b      	ldr	r3, [r3, #8]
   b5f88:	9301      	str	r3, [sp, #4]
   b5f8a:	bd08      	pop	{r3, pc}
   b5f8c:	00030240 	.word	0x00030240

000b5f90 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5f90:	b508      	push	{r3, lr}
   b5f92:	4b02      	ldr	r3, [pc, #8]	; (b5f9c <network_disconnect+0xc>)
   b5f94:	681b      	ldr	r3, [r3, #0]
   b5f96:	68db      	ldr	r3, [r3, #12]
   b5f98:	9301      	str	r3, [sp, #4]
   b5f9a:	bd08      	pop	{r3, pc}
   b5f9c:	00030240 	.word	0x00030240

000b5fa0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5fa0:	b508      	push	{r3, lr}
   b5fa2:	4b02      	ldr	r3, [pc, #8]	; (b5fac <network_ready+0xc>)
   b5fa4:	681b      	ldr	r3, [r3, #0]
   b5fa6:	691b      	ldr	r3, [r3, #16]
   b5fa8:	9301      	str	r3, [sp, #4]
   b5faa:	bd08      	pop	{r3, pc}
   b5fac:	00030240 	.word	0x00030240

000b5fb0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5fb0:	b508      	push	{r3, lr}
   b5fb2:	4b02      	ldr	r3, [pc, #8]	; (b5fbc <network_on+0xc>)
   b5fb4:	681b      	ldr	r3, [r3, #0]
   b5fb6:	695b      	ldr	r3, [r3, #20]
   b5fb8:	9301      	str	r3, [sp, #4]
   b5fba:	bd08      	pop	{r3, pc}
   b5fbc:	00030240 	.word	0x00030240

000b5fc0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5fc0:	b508      	push	{r3, lr}
   b5fc2:	4b02      	ldr	r3, [pc, #8]	; (b5fcc <network_off+0xc>)
   b5fc4:	681b      	ldr	r3, [r3, #0]
   b5fc6:	699b      	ldr	r3, [r3, #24]
   b5fc8:	9301      	str	r3, [sp, #4]
   b5fca:	bd08      	pop	{r3, pc}
   b5fcc:	00030240 	.word	0x00030240

000b5fd0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5fd0:	b508      	push	{r3, lr}
   b5fd2:	4b02      	ldr	r3, [pc, #8]	; (b5fdc <network_listen+0xc>)
   b5fd4:	681b      	ldr	r3, [r3, #0]
   b5fd6:	69db      	ldr	r3, [r3, #28]
   b5fd8:	9301      	str	r3, [sp, #4]
   b5fda:	bd08      	pop	{r3, pc}
   b5fdc:	00030240 	.word	0x00030240

000b5fe0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5fe0:	b508      	push	{r3, lr}
   b5fe2:	4b02      	ldr	r3, [pc, #8]	; (b5fec <network_listening+0xc>)
   b5fe4:	681b      	ldr	r3, [r3, #0]
   b5fe6:	6a1b      	ldr	r3, [r3, #32]
   b5fe8:	9301      	str	r3, [sp, #4]
   b5fea:	bd08      	pop	{r3, pc}
   b5fec:	00030240 	.word	0x00030240

000b5ff0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5ff0:	b508      	push	{r3, lr}
   b5ff2:	4b02      	ldr	r3, [pc, #8]	; (b5ffc <network_set_listen_timeout+0xc>)
   b5ff4:	681b      	ldr	r3, [r3, #0]
   b5ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5ff8:	9301      	str	r3, [sp, #4]
   b5ffa:	bd08      	pop	{r3, pc}
   b5ffc:	00030240 	.word	0x00030240

000b6000 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6000:	b508      	push	{r3, lr}
   b6002:	4b02      	ldr	r3, [pc, #8]	; (b600c <network_get_listen_timeout+0xc>)
   b6004:	681b      	ldr	r3, [r3, #0]
   b6006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6008:	9301      	str	r3, [sp, #4]
   b600a:	bd08      	pop	{r3, pc}
   b600c:	00030240 	.word	0x00030240

000b6010 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6010:	b508      	push	{r3, lr}
   b6012:	4b02      	ldr	r3, [pc, #8]	; (b601c <network_is_on+0xc>)
   b6014:	681b      	ldr	r3, [r3, #0]
   b6016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6018:	9301      	str	r3, [sp, #4]
   b601a:	bd08      	pop	{r3, pc}
   b601c:	00030240 	.word	0x00030240

000b6020 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6020:	b508      	push	{r3, lr}
   b6022:	4b02      	ldr	r3, [pc, #8]	; (b602c <network_is_off+0xc>)
   b6024:	681b      	ldr	r3, [r3, #0]
   b6026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6028:	9301      	str	r3, [sp, #4]
   b602a:	bd08      	pop	{r3, pc}
   b602c:	00030240 	.word	0x00030240

000b6030 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6030:	b508      	push	{r3, lr}
   b6032:	4b02      	ldr	r3, [pc, #8]	; (b603c <malloc+0xc>)
   b6034:	681b      	ldr	r3, [r3, #0]
   b6036:	681b      	ldr	r3, [r3, #0]
   b6038:	9301      	str	r3, [sp, #4]
   b603a:	bd08      	pop	{r3, pc}
   b603c:	0003021c 	.word	0x0003021c

000b6040 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6040:	b508      	push	{r3, lr}
   b6042:	4b02      	ldr	r3, [pc, #8]	; (b604c <free+0xc>)
   b6044:	681b      	ldr	r3, [r3, #0]
   b6046:	685b      	ldr	r3, [r3, #4]
   b6048:	9301      	str	r3, [sp, #4]
   b604a:	bd08      	pop	{r3, pc}
   b604c:	0003021c 	.word	0x0003021c

000b6050 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6050:	b508      	push	{r3, lr}
   b6052:	4b02      	ldr	r3, [pc, #8]	; (b605c <realloc+0xc>)
   b6054:	681b      	ldr	r3, [r3, #0]
   b6056:	689b      	ldr	r3, [r3, #8]
   b6058:	9301      	str	r3, [sp, #4]
   b605a:	bd08      	pop	{r3, pc}
   b605c:	0003021c 	.word	0x0003021c

000b6060 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6060:	b508      	push	{r3, lr}
   b6062:	4b02      	ldr	r3, [pc, #8]	; (b606c <vsnprintf+0xc>)
   b6064:	681b      	ldr	r3, [r3, #0]
   b6066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6068:	9301      	str	r3, [sp, #4]
   b606a:	bd08      	pop	{r3, pc}
   b606c:	0003021c 	.word	0x0003021c

000b6070 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6070:	b508      	push	{r3, lr}
   b6072:	4b02      	ldr	r3, [pc, #8]	; (b607c <__assert_func+0xc>)
   b6074:	681b      	ldr	r3, [r3, #0]
   b6076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6078:	9301      	str	r3, [sp, #4]
   b607a:	bd08      	pop	{r3, pc}
   b607c:	0003021c 	.word	0x0003021c

000b6080 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6080:	b508      	push	{r3, lr}
   b6082:	4b02      	ldr	r3, [pc, #8]	; (b608c <newlib_impure_ptr_callback+0xc>)
   b6084:	681b      	ldr	r3, [r3, #0]
   b6086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6088:	9301      	str	r3, [sp, #4]
   b608a:	bd08      	pop	{r3, pc}
   b608c:	0003021c 	.word	0x0003021c

000b6090 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6090:	2100      	movs	r1, #0
   b6092:	f7ff bf31 	b.w	b5ef8 <system_delay_ms>

000b6096 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b6096:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b6098:	6843      	ldr	r3, [r0, #4]
   b609a:	3b01      	subs	r3, #1
    {
   b609c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b609e:	6043      	str	r3, [r0, #4]
   b60a0:	b963      	cbnz	r3, b60bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b60a2:	6803      	ldr	r3, [r0, #0]
   b60a4:	689b      	ldr	r3, [r3, #8]
   b60a6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b60a8:	68a3      	ldr	r3, [r4, #8]
   b60aa:	3b01      	subs	r3, #1
   b60ac:	60a3      	str	r3, [r4, #8]
   b60ae:	b92b      	cbnz	r3, b60bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b60b0:	6823      	ldr	r3, [r4, #0]
   b60b2:	4620      	mov	r0, r4
   b60b4:	68db      	ldr	r3, [r3, #12]
    }
   b60b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b60ba:	4718      	bx	r3
    }
   b60bc:	bd10      	pop	{r4, pc}
	...

000b60c0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b60c0:	4802      	ldr	r0, [pc, #8]	; (b60cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b60c2:	2300      	movs	r3, #0
   b60c4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b60c6:	f7ff bd5d 	b.w	b5b84 <os_mutex_recursive_create>
   b60ca:	bf00      	nop
   b60cc:	2003e6c4 	.word	0x2003e6c4

000b60d0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b60d0:	2200      	movs	r2, #0
   b60d2:	6840      	ldr	r0, [r0, #4]
   b60d4:	4611      	mov	r1, r2
   b60d6:	f7ff bf83 	b.w	b5fe0 <network_listening>

000b60da <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b60da:	2200      	movs	r2, #0
   b60dc:	6840      	ldr	r0, [r0, #4]
   b60de:	4611      	mov	r1, r2
   b60e0:	f7ff bf8e 	b.w	b6000 <network_get_listen_timeout>

000b60e4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b60e4:	6840      	ldr	r0, [r0, #4]
   b60e6:	2200      	movs	r2, #0
   b60e8:	f7ff bf82 	b.w	b5ff0 <network_set_listen_timeout>

000b60ec <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b60ec:	6840      	ldr	r0, [r0, #4]
   b60ee:	2200      	movs	r2, #0
   b60f0:	f081 0101 	eor.w	r1, r1, #1
   b60f4:	f7ff bf6c 	b.w	b5fd0 <network_listen>

000b60f8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b60f8:	2300      	movs	r3, #0
   b60fa:	6840      	ldr	r0, [r0, #4]
   b60fc:	461a      	mov	r2, r3
   b60fe:	4619      	mov	r1, r3
   b6100:	f7ff bf5e 	b.w	b5fc0 <network_off>

000b6104 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6104:	2300      	movs	r3, #0
   b6106:	6840      	ldr	r0, [r0, #4]
   b6108:	461a      	mov	r2, r3
   b610a:	4619      	mov	r1, r3
   b610c:	f7ff bf50 	b.w	b5fb0 <network_on>

000b6110 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6110:	2200      	movs	r2, #0
   b6112:	6840      	ldr	r0, [r0, #4]
   b6114:	4611      	mov	r1, r2
   b6116:	f7ff bf43 	b.w	b5fa0 <network_ready>

000b611a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b611a:	2200      	movs	r2, #0
   b611c:	6840      	ldr	r0, [r0, #4]
   b611e:	4611      	mov	r1, r2
   b6120:	f7ff bf2e 	b.w	b5f80 <network_connecting>

000b6124 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6124:	6840      	ldr	r0, [r0, #4]
   b6126:	2200      	movs	r2, #0
   b6128:	2102      	movs	r1, #2
   b612a:	f7ff bf31 	b.w	b5f90 <network_disconnect>

000b612e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b612e:	2300      	movs	r3, #0
   b6130:	6840      	ldr	r0, [r0, #4]
   b6132:	461a      	mov	r2, r3
   b6134:	f7ff bf1c 	b.w	b5f70 <network_connect>

000b6138 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6138:	4b02      	ldr	r3, [pc, #8]	; (b6144 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b613a:	2203      	movs	r2, #3
   b613c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b613e:	4a02      	ldr	r2, [pc, #8]	; (b6148 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6140:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6142:	4770      	bx	lr
   b6144:	2003e6c8 	.word	0x2003e6c8
   b6148:	000b7ea8 	.word	0x000b7ea8

000b614c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b614c:	4770      	bx	lr

000b614e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b614e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6150:	4606      	mov	r6, r0
   b6152:	4615      	mov	r5, r2
   b6154:	460c      	mov	r4, r1
   b6156:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6158:	42bc      	cmp	r4, r7
   b615a:	d006      	beq.n	b616a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b615c:	6833      	ldr	r3, [r6, #0]
   b615e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6162:	689b      	ldr	r3, [r3, #8]
   b6164:	4630      	mov	r0, r6
   b6166:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6168:	e7f6      	b.n	b6158 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b616a:	4628      	mov	r0, r5
   b616c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b616e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b616e:	7c00      	ldrb	r0, [r0, #16]
   b6170:	2200      	movs	r2, #0
   b6172:	f7ff bd7f 	b.w	b5c74 <hal_i2c_write>

000b6176 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6176:	7c00      	ldrb	r0, [r0, #16]
   b6178:	2100      	movs	r1, #0
   b617a:	f7ff bd83 	b.w	b5c84 <hal_i2c_available>

000b617e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b617e:	7c00      	ldrb	r0, [r0, #16]
   b6180:	2100      	movs	r1, #0
   b6182:	f7ff bd87 	b.w	b5c94 <hal_i2c_read>

000b6186 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6186:	7c00      	ldrb	r0, [r0, #16]
   b6188:	2100      	movs	r1, #0
   b618a:	f7ff bd8b 	b.w	b5ca4 <hal_i2c_peek>

000b618e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b618e:	7c00      	ldrb	r0, [r0, #16]
   b6190:	2100      	movs	r1, #0
   b6192:	f7ff bd8f 	b.w	b5cb4 <hal_i2c_flush>

000b6196 <_ZN7TwoWireD0Ev>:
   b6196:	b510      	push	{r4, lr}
   b6198:	2114      	movs	r1, #20
   b619a:	4604      	mov	r4, r0
   b619c:	f7fd ff7f 	bl	b409e <_ZdlPvj>
   b61a0:	4620      	mov	r0, r4
   b61a2:	bd10      	pop	{r4, pc}

000b61a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b61a4:	b538      	push	{r3, r4, r5, lr}
   b61a6:	4604      	mov	r4, r0
   b61a8:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b61aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b61ae:	2200      	movs	r2, #0
   b61b0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b61b4:	4b09      	ldr	r3, [pc, #36]	; (b61dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b61b6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b61b8:	4608      	mov	r0, r1
   b61ba:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b61bc:	4629      	mov	r1, r5
   b61be:	f7ff fd89 	bl	b5cd4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b61c2:	30bf      	adds	r0, #191	; 0xbf
   b61c4:	d108      	bne.n	b61d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b61c6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b61c8:	07db      	lsls	r3, r3, #31
   b61ca:	d505      	bpl.n	b61d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b61cc:	6868      	ldr	r0, [r5, #4]
   b61ce:	f7ff ff37 	bl	b6040 <free>
    free(conf.tx_buffer);
   b61d2:	68e8      	ldr	r0, [r5, #12]
   b61d4:	f7ff ff34 	bl	b6040 <free>
}
   b61d8:	4620      	mov	r0, r4
   b61da:	bd38      	pop	{r3, r4, r5, pc}
   b61dc:	000b7ee4 	.word	0x000b7ee4

000b61e0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b61e0:	2300      	movs	r3, #0
   b61e2:	7c00      	ldrb	r0, [r0, #16]
   b61e4:	461a      	mov	r2, r3
   b61e6:	4619      	mov	r1, r3
   b61e8:	f7ff bd2c 	b.w	b5c44 <hal_i2c_begin>

000b61ec <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b61ec:	7c00      	ldrb	r0, [r0, #16]
   b61ee:	2200      	movs	r2, #0
   b61f0:	f7ff bd30 	b.w	b5c54 <hal_i2c_begin_transmission>

000b61f4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b61f4:	b2c9      	uxtb	r1, r1
   b61f6:	f7ff bff9 	b.w	b61ec <_ZN7TwoWire17beginTransmissionEh>

000b61fa <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b61fa:	7c00      	ldrb	r0, [r0, #16]
   b61fc:	2200      	movs	r2, #0
   b61fe:	f7ff bd31 	b.w	b5c64 <hal_i2c_end_transmission>

000b6202 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6202:	2101      	movs	r1, #1
   b6204:	f7ff bff9 	b.w	b61fa <_ZN7TwoWire15endTransmissionEh>

000b6208 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6208:	4770      	bx	lr

000b620a <_ZN9IPAddressD0Ev>:
   b620a:	b510      	push	{r4, lr}
   b620c:	2118      	movs	r1, #24
   b620e:	4604      	mov	r4, r0
   b6210:	f7fd ff45 	bl	b409e <_ZdlPvj>
   b6214:	4620      	mov	r0, r4
   b6216:	bd10      	pop	{r4, pc}

000b6218 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6218:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b621a:	7d03      	ldrb	r3, [r0, #20]
   b621c:	2b06      	cmp	r3, #6
{
   b621e:	b08d      	sub	sp, #52	; 0x34
   b6220:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6222:	f100 0704 	add.w	r7, r0, #4
   b6226:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b622a:	d012      	beq.n	b6252 <_ZNK9IPAddress7printToER5Print+0x3a>
   b622c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6230:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6234:	220a      	movs	r2, #10
   b6236:	4630      	mov	r0, r6
   b6238:	f000 fb49 	bl	b68ce <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b623c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b623e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6240:	d019      	beq.n	b6276 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6242:	2c00      	cmp	r4, #0
   b6244:	d0f4      	beq.n	b6230 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6246:	212e      	movs	r1, #46	; 0x2e
   b6248:	4630      	mov	r0, r6
   b624a:	f000 fb31 	bl	b68b0 <_ZN5Print5printEc>
   b624e:	4404      	add	r4, r0
   b6250:	e7ee      	b.n	b6230 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6252:	232f      	movs	r3, #47	; 0x2f
   b6254:	466a      	mov	r2, sp
   b6256:	4639      	mov	r1, r7
   b6258:	200a      	movs	r0, #10
		buf[0] = 0;
   b625a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b625e:	f7ff fd41 	bl	b5ce4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6262:	4668      	mov	r0, sp
   b6264:	f001 f828 	bl	b72b8 <strlen>
   b6268:	6833      	ldr	r3, [r6, #0]
   b626a:	4602      	mov	r2, r0
   b626c:	68db      	ldr	r3, [r3, #12]
   b626e:	4669      	mov	r1, sp
   b6270:	4630      	mov	r0, r6
   b6272:	4798      	blx	r3
   b6274:	4604      	mov	r4, r0
    }
    return n;
}
   b6276:	4620      	mov	r0, r4
   b6278:	b00d      	add	sp, #52	; 0x34
   b627a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b627c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b627c:	b510      	push	{r4, lr}
   b627e:	4b05      	ldr	r3, [pc, #20]	; (b6294 <_ZN9IPAddressC1Ev+0x18>)
   b6280:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6282:	2211      	movs	r2, #17
   b6284:	f840 3b04 	str.w	r3, [r0], #4
   b6288:	2100      	movs	r1, #0
   b628a:	f000 ffdf 	bl	b724c <memset>
}
   b628e:	4620      	mov	r0, r4
   b6290:	bd10      	pop	{r4, pc}
   b6292:	bf00      	nop
   b6294:	000b7f0c 	.word	0x000b7f0c

000b6298 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6298:	4603      	mov	r3, r0
   b629a:	4a07      	ldr	r2, [pc, #28]	; (b62b8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b629c:	b510      	push	{r4, lr}
   b629e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b62a2:	f101 0210 	add.w	r2, r1, #16
   b62a6:	f851 4b04 	ldr.w	r4, [r1], #4
   b62aa:	f843 4b04 	str.w	r4, [r3], #4
   b62ae:	4291      	cmp	r1, r2
   b62b0:	d1f9      	bne.n	b62a6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b62b2:	780a      	ldrb	r2, [r1, #0]
   b62b4:	701a      	strb	r2, [r3, #0]
}
   b62b6:	bd10      	pop	{r4, pc}
   b62b8:	000b7f0c 	.word	0x000b7f0c

000b62bc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b62bc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b62be:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b62c2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b62c6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b62ca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b62ce:	2304      	movs	r3, #4
   b62d0:	6041      	str	r1, [r0, #4]
   b62d2:	7503      	strb	r3, [r0, #20]
}
   b62d4:	bd10      	pop	{r4, pc}
	...

000b62d8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b62d8:	b507      	push	{r0, r1, r2, lr}
   b62da:	4b06      	ldr	r3, [pc, #24]	; (b62f4 <_ZN9IPAddressC1EPKh+0x1c>)
   b62dc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b62de:	78cb      	ldrb	r3, [r1, #3]
   b62e0:	9300      	str	r3, [sp, #0]
   b62e2:	788b      	ldrb	r3, [r1, #2]
   b62e4:	784a      	ldrb	r2, [r1, #1]
   b62e6:	7809      	ldrb	r1, [r1, #0]
   b62e8:	f7ff ffe8 	bl	b62bc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b62ec:	b003      	add	sp, #12
   b62ee:	f85d fb04 	ldr.w	pc, [sp], #4
   b62f2:	bf00      	nop
   b62f4:	000b7f0c 	.word	0x000b7f0c

000b62f8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b62f8:	f100 0310 	add.w	r3, r0, #16
   b62fc:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b62fe:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b6302:	2901      	cmp	r1, #1
   b6304:	4618      	mov	r0, r3
   b6306:	d108      	bne.n	b631a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b6308:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b630c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b6310:	3a01      	subs	r2, #1
   b6312:	f103 0310 	add.w	r3, r3, #16
   b6316:	d1f2      	bne.n	b62fe <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b6318:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b631a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b631c:	bf04      	itt	eq
   b631e:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b6322:	1852      	addeq	r2, r2, r1
   b6324:	e7f4      	b.n	b6310 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b6326 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b6326:	4770      	bx	lr

000b6328 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b6328:	2000      	movs	r0, #0
   b632a:	4770      	bx	lr

000b632c <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b632c:	b510      	push	{r4, lr}
   b632e:	2110      	movs	r1, #16
   b6330:	4604      	mov	r4, r0
   b6332:	f7fd feb4 	bl	b409e <_ZdlPvj>
   b6336:	4620      	mov	r0, r4
   b6338:	bd10      	pop	{r4, pc}

000b633a <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b633a:	b508      	push	{r3, lr}
      { delete this; }
   b633c:	f7ff fff6 	bl	b632c <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b6340:	bd08      	pop	{r3, pc}

000b6342 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b6342:	b510      	push	{r4, lr}
      { delete _M_ptr; }
   b6344:	68c4      	ldr	r4, [r0, #12]
   b6346:	b17c      	cbz	r4, b6368 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
            json(nullptr),
            freeJson(false) {
    }

    ~JSONData() {
        delete[] tokens;
   b6348:	6820      	ldr	r0, [r4, #0]
   b634a:	b108      	cbz	r0, b6350 <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0xe>
   b634c:	f7fd fea5 	bl	b409a <_ZdaPv>
        if (freeJson) {
   b6350:	7a23      	ldrb	r3, [r4, #8]
   b6352:	b11b      	cbz	r3, b635c <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   b6354:	6860      	ldr	r0, [r4, #4]
            delete[] json;
   b6356:	b108      	cbz	r0, b635c <_ZNSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x1a>
   b6358:	f7fd fe9f 	bl	b409a <_ZdaPv>
   b635c:	4620      	mov	r0, r4
   b635e:	210c      	movs	r1, #12
   b6360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6364:	f7fd be9b 	b.w	b409e <_ZdlPvj>
   b6368:	bd10      	pop	{r4, pc}

000b636a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b636a:	b538      	push	{r3, r4, r5, lr}
   b636c:	680b      	ldr	r3, [r1, #0]
   b636e:	6003      	str	r3, [r0, #0]
   b6370:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b6372:	6843      	ldr	r3, [r0, #4]
   b6374:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b6376:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b6378:	d008      	beq.n	b638c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b637a:	b115      	cbz	r5, b6382 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b637c:	686b      	ldr	r3, [r5, #4]
   b637e:	3301      	adds	r3, #1
   b6380:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b6382:	6860      	ldr	r0, [r4, #4]
   b6384:	b108      	cbz	r0, b638a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b6386:	f7ff fe86 	bl	b6096 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b638a:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b638c:	bd38      	pop	{r3, r4, r5, pc}

000b638e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b638e:	460b      	mov	r3, r1
   b6390:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b6392:	2200      	movs	r2, #0
   b6394:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b6396:	e9c0 2200 	strd	r2, r2, [r0]
   b639a:	4604      	mov	r4, r0
        JSONValue() {
    if (t) {
        t_ = t;
   b639c:	6083      	str	r3, [r0, #8]
    if (t) {
   b639e:	b90b      	cbnz	r3, b63a4 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
        d_ = d;
    }
}
   b63a0:	4620      	mov	r0, r4
   b63a2:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b63a4:	f7ff ffe1 	bl	b636a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b63a8:	e7fa      	b.n	b63a0 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>
	...

000b63ac <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>:
        return JSONValue();
    }
    return JSONValue(d->tokens, d);
}

bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   b63ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b63b0:	b086      	sub	sp, #24
   b63b2:	4607      	mov	r7, r0
   b63b4:	4688      	mov	r8, r1
    jsmn_parser parser;
    parser.size = sizeof(jsmn_parser);
    jsmn_init(&parser, nullptr);
   b63b6:	a802      	add	r0, sp, #8
   b63b8:	2100      	movs	r1, #0
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   b63ba:	2400      	movs	r4, #0
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   b63bc:	4699      	mov	r9, r3
    parser.size = sizeof(jsmn_parser);
   b63be:	2310      	movs	r3, #16
bool spark::JSONValue::tokenize(const char *json, size_t size, jsmntok_t **tokens, size_t *count) {
   b63c0:	4692      	mov	sl, r2
    parser.size = sizeof(jsmn_parser);
   b63c2:	9302      	str	r3, [sp, #8]
    jsmn_init(&parser, nullptr);
   b63c4:	f7ff fd7e 	bl	b5ec4 <jsmn_init>
    const int n = jsmn_parse(&parser, json, size, nullptr, 0, nullptr); // Get number of tokens
   b63c8:	e9cd 4400 	strd	r4, r4, [sp]
   b63cc:	4623      	mov	r3, r4
   b63ce:	4642      	mov	r2, r8
   b63d0:	4639      	mov	r1, r7
   b63d2:	a802      	add	r0, sp, #8
   b63d4:	f7ff fd7e 	bl	b5ed4 <jsmn_parse>
    if (n <= 0) {
   b63d8:	1e06      	subs	r6, r0, #0
   b63da:	dd24      	ble.n	b6426 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x7a>
        return false; // Parsing error
    }
    std::unique_ptr<jsmntok_t[]> t(new(std::nothrow) jsmntok_t[n]);
   b63dc:	f1b6 6f00 	cmp.w	r6, #134217728	; 0x8000000
   b63e0:	4912      	ldr	r1, [pc, #72]	; (b642c <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x80>)
   b63e2:	bfb4      	ite	lt
   b63e4:	0130      	lsllt	r0, r6, #4
   b63e6:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   b63ea:	f000 feff 	bl	b71ec <_ZnajRKSt9nothrow_t>
    if (!t) {
   b63ee:	4605      	mov	r5, r0
   b63f0:	b198      	cbz	r0, b641a <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x6e>
        return false;
    }
    jsmn_init(&parser, nullptr); // Reset parser
   b63f2:	2100      	movs	r1, #0
   b63f4:	a802      	add	r0, sp, #8
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
   b63f6:	2400      	movs	r4, #0
    jsmn_init(&parser, nullptr); // Reset parser
   b63f8:	f7ff fd64 	bl	b5ec4 <jsmn_init>
    if (jsmn_parse(&parser, json, size, t.get(), n, nullptr) <= 0) {
   b63fc:	e9cd 6400 	strd	r6, r4, [sp]
   b6400:	462b      	mov	r3, r5
   b6402:	4642      	mov	r2, r8
   b6404:	4639      	mov	r1, r7
   b6406:	a802      	add	r0, sp, #8
   b6408:	f7ff fd64 	bl	b5ed4 <jsmn_parse>
   b640c:	42a0      	cmp	r0, r4
   b640e:	dd07      	ble.n	b6420 <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x74>
        return false;
    }
    *tokens = t.release();
   b6410:	f8ca 5000 	str.w	r5, [sl]
    *count = n;
    return true;
   b6414:	2001      	movs	r0, #1
    *count = n;
   b6416:	f8c9 6000 	str.w	r6, [r9]
}
   b641a:	b006      	add	sp, #24
   b641c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	typename enable_if<is_convertible<_Up(*)[], _Tp(*)[]>::value>::type
	operator()(_Up* __ptr) const
	{
	  static_assert(sizeof(_Tp)>0,
			"can't delete pointer to incomplete type");
	  delete [] __ptr;
   b6420:	4628      	mov	r0, r5
   b6422:	f7fd fe3a 	bl	b409a <_ZdaPv>
	}
   b6426:	4620      	mov	r0, r4
   b6428:	e7f7      	b.n	b641a <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj+0x6e>
   b642a:	bf00      	nop
   b642c:	000b8034 	.word	0x000b8034

000b6430 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>:
        ++t;
    }
    return true;
}

bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   b6430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    char *str = json + t->start; // Destination string
   b6434:	6843      	ldr	r3, [r0, #4]
    const char* const end = json + t->end; // End of the source string
   b6436:	6886      	ldr	r6, [r0, #8]
    char *str = json + t->start; // Destination string
   b6438:	440b      	add	r3, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   b643a:	4688      	mov	r8, r1
    const char* const end = json + t->end; // End of the source string
   b643c:	440e      	add	r6, r1
bool spark::JSONValue::unescape(jsmntok_t *t, char *json) {
   b643e:	4607      	mov	r7, r0
    const char *s1 = str; // Beginning of an unescaped sequence
    const char *s = s1;
   b6440:	461c      	mov	r4, r3
    const char *s1 = str; // Beginning of an unescaped sequence
   b6442:	4619      	mov	r1, r3
                    break;
                case 'f': // Form feed
                    *str = 0x0c;
                    break;
                case 'r': // Carriage return
                    *str = 0x0d;
   b6444:	f04f 090d 	mov.w	r9, #13
                    *str = 0x09;
   b6448:	f04f 0a09 	mov.w	sl, #9
    while (s != end) {
   b644c:	42b4      	cmp	r4, r6
   b644e:	d063      	beq.n	b6518 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe8>
            ++s;
   b6450:	4625      	mov	r5, r4
        if (*s == '\\') {
   b6452:	f815 2b01 	ldrb.w	r2, [r5], #1
   b6456:	2a5c      	cmp	r2, #92	; 0x5c
   b6458:	d12b      	bne.n	b64b2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x82>
            if (s != s1) {
   b645a:	42a1      	cmp	r1, r4
   b645c:	d007      	beq.n	b646e <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x3e>
                const size_t n = s - s1;
   b645e:	eba4 0b01 	sub.w	fp, r4, r1
                memmove(str, s1, n); // Shift preceeding characters
   b6462:	4618      	mov	r0, r3
   b6464:	465a      	mov	r2, fp
   b6466:	f000 fed7 	bl	b7218 <memmove>
   b646a:	4603      	mov	r3, r0
                str += n;
   b646c:	445b      	add	r3, fp
            if (s == end) {
   b646e:	42b5      	cmp	r5, r6
   b6470:	d039      	beq.n	b64e6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            if (*s == 'u') { // Arbitrary character, e.g. "\u001f"
   b6472:	7862      	ldrb	r2, [r4, #1]
   b6474:	2a75      	cmp	r2, #117	; 0x75
   b6476:	d12a      	bne.n	b64ce <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x9e>
                ++s;
   b6478:	1ca2      	adds	r2, r4, #2
                if (end - s < 4) {
   b647a:	1ab2      	subs	r2, r6, r2
   b647c:	2a03      	cmp	r2, #3
   b647e:	dd32      	ble.n	b64e6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
    const char* const end = s + size;
   b6480:	1da0      	adds	r0, r4, #6
   b6482:	f104 0e05 	add.w	lr, r4, #5
    uint32_t v = 0;
   b6486:	f04f 0c00 	mov.w	ip, #0
    while (s != end) {
   b648a:	45ae      	cmp	lr, r5
   b648c:	d053      	beq.n	b6536 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x106>
        const char c = *s;
   b648e:	f815 1f01 	ldrb.w	r1, [r5, #1]!
        if (c >= '0' && c <= '9') {
   b6492:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   b6496:	fa5f fb82 	uxtb.w	fp, r2
   b649a:	f1bb 0f09 	cmp.w	fp, #9
   b649e:	d905      	bls.n	b64ac <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
        } else if (c >= 'a' && c <= 'f') {
   b64a0:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   b64a4:	2a05      	cmp	r2, #5
   b64a6:	d807      	bhi.n	b64b8 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x88>
            n = c - 'a' + 10;
   b64a8:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
        v = (v << 4) | n;
   b64ac:	ea42 1c0c 	orr.w	ip, r2, ip, lsl #4
    while (s != end) {
   b64b0:	e7eb      	b.n	b648a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x5a>
            ++s;
   b64b2:	4628      	mov	r0, r5
   b64b4:	4604      	mov	r4, r0
   b64b6:	e7c9      	b.n	b644c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x1c>
        } else if (c >= 'A' && c <= 'F') {
   b64b8:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   b64bc:	2a05      	cmp	r2, #5
   b64be:	d812      	bhi.n	b64e6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
            n = c - 'A' + 10;
   b64c0:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   b64c4:	e7f2      	b.n	b64ac <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x7c>
                    *str = u;
   b64c6:	f803 cb01 	strb.w	ip, [r3], #1
                    s1 += 6; // Skip escaped sequence
   b64ca:	4601      	mov	r1, r0
   b64cc:	e7f2      	b.n	b64b4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                switch (*s) {
   b64ce:	2a6e      	cmp	r2, #110	; 0x6e
   b64d0:	d01c      	beq.n	b650c <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xdc>
   b64d2:	d80e      	bhi.n	b64f2 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xc2>
   b64d4:	2a62      	cmp	r2, #98	; 0x62
   b64d6:	d013      	beq.n	b6500 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd0>
   b64d8:	d807      	bhi.n	b64ea <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xba>
   b64da:	2a2f      	cmp	r2, #47	; 0x2f
   b64dc:	d011      	beq.n	b6502 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   b64de:	2a5c      	cmp	r2, #92	; 0x5c
   b64e0:	d00f      	beq.n	b6502 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
   b64e2:	2a22      	cmp	r2, #34	; 0x22
   b64e4:	d00d      	beq.n	b6502 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                return false; // Unexpected end of string
   b64e6:	2000      	movs	r0, #0
   b64e8:	e023      	b.n	b6532 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x102>
                switch (*s) {
   b64ea:	2a66      	cmp	r2, #102	; 0x66
   b64ec:	d1fb      	bne.n	b64e6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x0c;
   b64ee:	220c      	movs	r2, #12
   b64f0:	e007      	b.n	b6502 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                switch (*s) {
   b64f2:	2a72      	cmp	r2, #114	; 0x72
   b64f4:	d00d      	beq.n	b6512 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xe2>
   b64f6:	2a74      	cmp	r2, #116	; 0x74
   b64f8:	d1f5      	bne.n	b64e6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xb6>
                    *str = 0x09;
   b64fa:	f883 a000 	strb.w	sl, [r3]
                    break;
   b64fe:	e001      	b.n	b6504 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
                    *str = 0x08;
   b6500:	2208      	movs	r2, #8
   b6502:	701a      	strb	r2, [r3, #0]
                    break;
                default:
                    return false; // Invalid escaped sequence
                }
                ++str;
                ++s;
   b6504:	1ca1      	adds	r1, r4, #2
                ++str;
   b6506:	3301      	adds	r3, #1
                ++s;
   b6508:	4608      	mov	r0, r1
   b650a:	e7d3      	b.n	b64b4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>
                    *str = 0x0a;
   b650c:	f04f 020a 	mov.w	r2, #10
   b6510:	e7f7      	b.n	b6502 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd2>
                    *str = 0x0d;
   b6512:	f883 9000 	strb.w	r9, [r3]
                    break;
   b6516:	e7f5      	b.n	b6504 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xd4>
            }
        } else {
            ++s;
        }
    }
    if (s != s1) {
   b6518:	42a1      	cmp	r1, r4
   b651a:	d006      	beq.n	b652a <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0xfa>
        const size_t n = s - s1;
   b651c:	1a64      	subs	r4, r4, r1
        memmove(str, s1, n); // Shift remaining characters
   b651e:	4618      	mov	r0, r3
   b6520:	4622      	mov	r2, r4
   b6522:	f000 fe79 	bl	b7218 <memmove>
   b6526:	4603      	mov	r3, r0
        str += n;
   b6528:	4423      	add	r3, r4
    }
    t->end = str - json; // Update string length
   b652a:	eba3 0308 	sub.w	r3, r3, r8
   b652e:	60bb      	str	r3, [r7, #8]
    return true;
   b6530:	2001      	movs	r0, #1
}
   b6532:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if (u <= 0x7f) { // Processing only code points within the basic latin block
   b6536:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   b653a:	d9c4      	bls.n	b64c6 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x96>
   b653c:	4621      	mov	r1, r4
   b653e:	e7b9      	b.n	b64b4 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc+0x84>

000b6540 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>:
bool spark::JSONValue::stringize(jsmntok_t *t, size_t count, char *json) {
   b6540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6542:	4604      	mov	r4, r0
   b6544:	4615      	mov	r5, r2
    const jsmntok_t* const end = t + count;
   b6546:	eb00 1601 	add.w	r6, r0, r1, lsl #4
            json[t->end] = '\0';
   b654a:	2700      	movs	r7, #0
    while (t != end) {
   b654c:	42b4      	cmp	r4, r6
   b654e:	d010      	beq.n	b6572 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x32>
        if (t->type == JSMN_STRING) {
   b6550:	7823      	ldrb	r3, [r4, #0]
   b6552:	2b03      	cmp	r3, #3
   b6554:	d108      	bne.n	b6568 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x28>
            if (!unescape(t, json)) {
   b6556:	4629      	mov	r1, r5
   b6558:	4620      	mov	r0, r4
   b655a:	f7ff ff69 	bl	b6430 <_ZN5spark9JSONValue8unescapeEP9jsmntok_tPc>
   b655e:	b148      	cbz	r0, b6574 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x34>
            json[t->end] = '\0';
   b6560:	68a3      	ldr	r3, [r4, #8]
   b6562:	54ef      	strb	r7, [r5, r3]
        ++t;
   b6564:	3410      	adds	r4, #16
    while (t != end) {
   b6566:	e7f1      	b.n	b654c <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0xc>
        } else if (t->type == JSMN_PRIMITIVE) {
   b6568:	2b00      	cmp	r3, #0
   b656a:	d1fb      	bne.n	b6564 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
            json[t->end] = '\0';
   b656c:	68a2      	ldr	r2, [r4, #8]
   b656e:	54ab      	strb	r3, [r5, r2]
   b6570:	e7f8      	b.n	b6564 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc+0x24>
    return true;
   b6572:	2001      	movs	r0, #1
}
   b6574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b6578 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b6578:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b657a:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b657c:	e9c0 3300 	strd	r3, r3, [r0]
   b6580:	4604      	mov	r4, r0
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   b6582:	480e      	ldr	r0, [pc, #56]	; (b65bc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b6584:	e9c4 0302 	strd	r0, r3, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b6588:	b1a9      	cbz	r1, b65b6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b658a:	780b      	ldrb	r3, [r1, #0]
   b658c:	2b03      	cmp	r3, #3
   b658e:	d006      	beq.n	b659e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b6590:	b98b      	cbnz	r3, b65b6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b6592:	6813      	ldr	r3, [r2, #0]
   b6594:	6858      	ldr	r0, [r3, #4]
   b6596:	684b      	ldr	r3, [r1, #4]
   b6598:	5cc3      	ldrb	r3, [r0, r3]
   b659a:	2b6e      	cmp	r3, #110	; 0x6e
   b659c:	d007      	beq.n	b65ae <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b659e:	6813      	ldr	r3, [r2, #0]
   b65a0:	684d      	ldr	r5, [r1, #4]
   b65a2:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b65a4:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b65a6:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b65a8:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b65aa:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b65ac:	60e3      	str	r3, [r4, #12]
   b65ae:	4611      	mov	r1, r2
   b65b0:	4620      	mov	r0, r4
   b65b2:	f7ff feda 	bl	b636a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
        }
        d_ = d;
    }
}
   b65b6:	4620      	mov	r0, r4
   b65b8:	bd38      	pop	{r3, r4, r5, pc}
   b65ba:	bf00      	nop
   b65bc:	000b73db 	.word	0x000b73db

000b65c0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b65c0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b65c2:	2500      	movs	r5, #0
   b65c4:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b65c6:	e9c0 5500 	strd	r5, r5, [r0]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   b65ca:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b65ce:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b65d2:	4604      	mov	r4, r0
   b65d4:	4611      	mov	r1, r2
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   b65d6:	b14b      	cbz	r3, b65ec <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b65d8:	781a      	ldrb	r2, [r3, #0]
   b65da:	2a01      	cmp	r2, #1
   b65dc:	d106      	bne.n	b65ec <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b65de:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b65e2:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b65e4:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b65e6:	6143      	str	r3, [r0, #20]
   b65e8:	f7ff febf 	bl	b636a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
        d_ = d;
    }
}
   b65ec:	4620      	mov	r0, r4
   b65ee:	bd38      	pop	{r3, r4, r5, pc}

000b65f0 <_ZN5spark18JSONObjectIterator4nextEv>:

bool spark::JSONObjectIterator::next() {
   b65f0:	b510      	push	{r4, lr}
    if (!n_) {
   b65f2:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b65f4:	4604      	mov	r4, r0
    if (!n_) {
   b65f6:	b163      	cbz	r3, b6612 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
        return false;
    }
    k_ = t_; // Name
   b65f8:	6880      	ldr	r0, [r0, #8]
   b65fa:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   b65fc:	3b01      	subs	r3, #1
    ++t_;
   b65fe:	3010      	adds	r0, #16
   b6600:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b6602:	6120      	str	r0, [r4, #16]
    --n_;
   b6604:	6163      	str	r3, [r4, #20]
    if (n_) {
   b6606:	b113      	cbz	r3, b660e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b6608:	f7ff fe76 	bl	b62f8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b660c:	60a0      	str	r0, [r4, #8]
    }
    return true;
   b660e:	2001      	movs	r0, #1
   b6610:	e000      	b.n	b6614 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b6612:	4618      	mov	r0, r3
}
   b6614:	bd10      	pop	{r4, pc}
	...

000b6618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b6618:	b538      	push	{r3, r4, r5, lr}
   b661a:	2300      	movs	r3, #0
   b661c:	4604      	mov	r4, r0
   b661e:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6620:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b6622:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6624:	f7fd fd35 	bl	b4092 <_Znwj>
   b6628:	b128      	cbz	r0, b6636 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b662a:	2301      	movs	r3, #1
   b662c:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b6630:	4b02      	ldr	r3, [pc, #8]	; (b663c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_+0x24>)
   b6632:	6003      	str	r3, [r0, #0]
   b6634:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b6636:	6020      	str	r0, [r4, #0]
	}
   b6638:	4620      	mov	r0, r4
   b663a:	bd38      	pop	{r3, r4, r5, pc}
   b663c:	000b7f20 	.word	0x000b7f20

000b6640 <_ZN5spark9JSONValue9parseCopyEPKcj>:
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   b6640:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6642:	4604      	mov	r4, r0
   b6644:	b087      	sub	sp, #28
   b6646:	460e      	mov	r6, r1
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   b6648:	200c      	movs	r0, #12
   b664a:	4927      	ldr	r1, [pc, #156]	; (b66e8 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
spark::JSONValue spark::JSONValue::parseCopy(const char *json, size_t size) {
   b664c:	4615      	mov	r5, r2
    detail::JSONDataPtr d(new(std::nothrow) detail::JSONData);
   b664e:	f000 fdcb 	bl	b71e8 <_ZnwjRKSt9nothrow_t>
   b6652:	4601      	mov	r1, r0
   b6654:	b118      	cbz	r0, b665e <_ZN5spark9JSONValue9parseCopyEPKcj+0x1e>
            freeJson(false) {
   b6656:	2300      	movs	r3, #0
   b6658:	e9c0 3300 	strd	r3, r3, [r0]
   b665c:	7203      	strb	r3, [r0, #8]
	: __shared_count(__p)
   b665e:	a803      	add	r0, sp, #12
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b6660:	9102      	str	r1, [sp, #8]
	: __shared_count(__p)
   b6662:	f7ff ffd9 	bl	b6618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN5spark6detail8JSONDataEEET_>
      get() const noexcept
      { return _M_ptr; }

      /// Return true if the stored pointer is not null.
      explicit operator bool() const // never throws
      { return _M_ptr == 0 ? false : true; }
   b6666:	9a02      	ldr	r2, [sp, #8]
    if (!d) {
   b6668:	b942      	cbnz	r2, b667c <_ZN5spark9JSONValue9parseCopyEPKcj+0x3c>
      constexpr __shared_count() noexcept : _M_pi(0)
   b666a:	e9c4 2200 	strd	r2, r2, [r4]
        t_(nullptr) {
   b666e:	60a2      	str	r2, [r4, #8]
      ~__shared_ptr() = default;
   b6670:	a803      	add	r0, sp, #12
   b6672:	f7fe f969 	bl	b4948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b6676:	4620      	mov	r0, r4
   b6678:	b007      	add	sp, #28
   b667a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    size_t tokenCount = 0;
   b667c:	2300      	movs	r3, #0
   b667e:	9301      	str	r3, [sp, #4]
    if (!tokenize(json, size, &d->tokens, &tokenCount)) {
   b6680:	4629      	mov	r1, r5
   b6682:	ab01      	add	r3, sp, #4
   b6684:	4630      	mov	r0, r6
   b6686:	f7ff fe91 	bl	b63ac <_ZN5spark9JSONValue8tokenizeEPKcjPP9jsmntok_tPj>
   b668a:	b918      	cbnz	r0, b6694 <_ZN5spark9JSONValue9parseCopyEPKcj+0x54>
      constexpr __shared_count() noexcept : _M_pi(0)
   b668c:	e9c4 0000 	strd	r0, r0, [r4]
   b6690:	60a0      	str	r0, [r4, #8]
}
   b6692:	e7ed      	b.n	b6670 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
    d->json = new(std::nothrow) char[size + 1];
   b6694:	4914      	ldr	r1, [pc, #80]	; (b66e8 <_ZN5spark9JSONValue9parseCopyEPKcj+0xa8>)
      { return _M_ptr; }
   b6696:	9f02      	ldr	r7, [sp, #8]
   b6698:	1c68      	adds	r0, r5, #1
   b669a:	f000 fda7 	bl	b71ec <_ZnajRKSt9nothrow_t>
    if (!d->json) {
   b669e:	9b02      	ldr	r3, [sp, #8]
    d->json = new(std::nothrow) char[size + 1];
   b66a0:	6078      	str	r0, [r7, #4]
    if (!d->json) {
   b66a2:	6858      	ldr	r0, [r3, #4]
   b66a4:	2800      	cmp	r0, #0
   b66a6:	d0f1      	beq.n	b668c <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
    memcpy(d->json, json, size); // TODO: Copy only token data
   b66a8:	462a      	mov	r2, r5
   b66aa:	4631      	mov	r1, r6
   b66ac:	f000 fda6 	bl	b71fc <memcpy>
   b66b0:	9b02      	ldr	r3, [sp, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   b66b2:	9901      	ldr	r1, [sp, #4]
   b66b4:	6818      	ldr	r0, [r3, #0]
    d->freeJson = true;
   b66b6:	2201      	movs	r2, #1
   b66b8:	721a      	strb	r2, [r3, #8]
    if (!stringize(d->tokens, tokenCount, d->json)) {
   b66ba:	685a      	ldr	r2, [r3, #4]
   b66bc:	f7ff ff40 	bl	b6540 <_ZN5spark9JSONValue9stringizeEP9jsmntok_tjPc>
   b66c0:	2800      	cmp	r0, #0
   b66c2:	d0e3      	beq.n	b668c <_ZN5spark9JSONValue9parseCopyEPKcj+0x4c>
   b66c4:	9b02      	ldr	r3, [sp, #8]
    return JSONValue(d->tokens, d);
   b66c6:	6819      	ldr	r1, [r3, #0]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b66c8:	9304      	str	r3, [sp, #16]
      : _M_pi(__r._M_pi)
   b66ca:	9b03      	ldr	r3, [sp, #12]
   b66cc:	9305      	str	r3, [sp, #20]
	if (_M_pi != 0)
   b66ce:	b113      	cbz	r3, b66d6 <_ZN5spark9JSONValue9parseCopyEPKcj+0x96>
    { ++_M_use_count; }
   b66d0:	685a      	ldr	r2, [r3, #4]
   b66d2:	3201      	adds	r2, #1
   b66d4:	605a      	str	r2, [r3, #4]
   b66d6:	aa04      	add	r2, sp, #16
   b66d8:	4620      	mov	r0, r4
   b66da:	f7ff fe58 	bl	b638e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b66de:	a805      	add	r0, sp, #20
   b66e0:	f7fe f932 	bl	b4948 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b66e4:	e7c4      	b.n	b6670 <_ZN5spark9JSONValue9parseCopyEPKcj+0x30>
   b66e6:	bf00      	nop
   b66e8:	000b8034 	.word	0x000b8034

000b66ec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b66ec:	4b01      	ldr	r3, [pc, #4]	; (b66f4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b66ee:	4a02      	ldr	r2, [pc, #8]	; (b66f8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b66f0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b66f2:	4770      	bx	lr
   b66f4:	2003e6d0 	.word	0x2003e6d0
   b66f8:	000b7f34 	.word	0x000b7f34

000b66fc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b66fc:	2300      	movs	r3, #0
   b66fe:	6840      	ldr	r0, [r0, #4]
   b6700:	461a      	mov	r2, r3
   b6702:	f7ff bc35 	b.w	b5f70 <network_connect>

000b6706 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6706:	6840      	ldr	r0, [r0, #4]
   b6708:	2200      	movs	r2, #0
   b670a:	2102      	movs	r1, #2
   b670c:	f7ff bc40 	b.w	b5f90 <network_disconnect>

000b6710 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6710:	2200      	movs	r2, #0
   b6712:	6840      	ldr	r0, [r0, #4]
   b6714:	4611      	mov	r1, r2
   b6716:	f7ff bc33 	b.w	b5f80 <network_connecting>

000b671a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b671a:	2200      	movs	r2, #0
   b671c:	6840      	ldr	r0, [r0, #4]
   b671e:	4611      	mov	r1, r2
   b6720:	f7ff bc3e 	b.w	b5fa0 <network_ready>

000b6724 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6724:	2300      	movs	r3, #0
   b6726:	6840      	ldr	r0, [r0, #4]
   b6728:	461a      	mov	r2, r3
   b672a:	4619      	mov	r1, r3
   b672c:	f7ff bc40 	b.w	b5fb0 <network_on>

000b6730 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6730:	2300      	movs	r3, #0
   b6732:	6840      	ldr	r0, [r0, #4]
   b6734:	461a      	mov	r2, r3
   b6736:	4619      	mov	r1, r3
   b6738:	f7ff bc42 	b.w	b5fc0 <network_off>

000b673c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b673c:	6840      	ldr	r0, [r0, #4]
   b673e:	2100      	movs	r1, #0
   b6740:	f7ff bc66 	b.w	b6010 <network_is_on>

000b6744 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6744:	6840      	ldr	r0, [r0, #4]
   b6746:	2100      	movs	r1, #0
   b6748:	f7ff bc6a 	b.w	b6020 <network_is_off>

000b674c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b674c:	6840      	ldr	r0, [r0, #4]
   b674e:	2200      	movs	r2, #0
   b6750:	f081 0101 	eor.w	r1, r1, #1
   b6754:	f7ff bc3c 	b.w	b5fd0 <network_listen>

000b6758 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6758:	6840      	ldr	r0, [r0, #4]
   b675a:	2200      	movs	r2, #0
   b675c:	f7ff bc48 	b.w	b5ff0 <network_set_listen_timeout>

000b6760 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6760:	2200      	movs	r2, #0
   b6762:	6840      	ldr	r0, [r0, #4]
   b6764:	4611      	mov	r1, r2
   b6766:	f7ff bc4b 	b.w	b6000 <network_get_listen_timeout>

000b676a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b676a:	2200      	movs	r2, #0
   b676c:	6840      	ldr	r0, [r0, #4]
   b676e:	4611      	mov	r1, r2
   b6770:	f7ff bc36 	b.w	b5fe0 <network_listening>

000b6774 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6778:	b095      	sub	sp, #84	; 0x54
   b677a:	4614      	mov	r4, r2
   b677c:	460d      	mov	r5, r1
   b677e:	4607      	mov	r7, r0
    IPAddress addr;
   b6780:	f7ff fd7c 	bl	b627c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6784:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6786:	221c      	movs	r2, #28
   b6788:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b678a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b678c:	f000 fd5e 	bl	b724c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6790:	2340      	movs	r3, #64	; 0x40
   b6792:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6794:	4620      	mov	r0, r4
   b6796:	466b      	mov	r3, sp
   b6798:	aa0c      	add	r2, sp, #48	; 0x30
   b679a:	2100      	movs	r1, #0
   b679c:	f7ff fab2 	bl	b5d04 <netdb_getaddrinfo>
    if (!r) {
   b67a0:	4604      	mov	r4, r0
   b67a2:	2800      	cmp	r0, #0
   b67a4:	d14b      	bne.n	b683e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b67a6:	4602      	mov	r2, r0
   b67a8:	2101      	movs	r1, #1
   b67aa:	6868      	ldr	r0, [r5, #4]
   b67ac:	f7ff fbf8 	bl	b5fa0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b67b0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b67b2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b67b4:	4622      	mov	r2, r4
   b67b6:	6868      	ldr	r0, [r5, #4]
   b67b8:	f7ff fbf2 	bl	b5fa0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b67bc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b67be:	4681      	mov	r9, r0
        bool ok = false;
   b67c0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b67c2:	2e00      	cmp	r6, #0
   b67c4:	d03b      	beq.n	b683e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b67c6:	2900      	cmp	r1, #0
   b67c8:	d139      	bne.n	b683e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b67ca:	6873      	ldr	r3, [r6, #4]
   b67cc:	2b02      	cmp	r3, #2
   b67ce:	d003      	beq.n	b67d8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b67d0:	2b0a      	cmp	r3, #10
   b67d2:	d011      	beq.n	b67f8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b67d4:	69f6      	ldr	r6, [r6, #28]
   b67d6:	e7f4      	b.n	b67c2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b67d8:	f1b8 0f00 	cmp.w	r8, #0
   b67dc:	d0fa      	beq.n	b67d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b67de:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b67e0:	a806      	add	r0, sp, #24
   b67e2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b67e4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b67e6:	f7ff fd77 	bl	b62d8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b67ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b67ec:	1d3c      	adds	r4, r7, #4
   b67ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b67f0:	682b      	ldr	r3, [r5, #0]
   b67f2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b67f4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b67f6:	e7ed      	b.n	b67d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b67f8:	f1b9 0f00 	cmp.w	r9, #0
   b67fc:	d0ea      	beq.n	b67d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b67fe:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6800:	2210      	movs	r2, #16
   b6802:	a801      	add	r0, sp, #4
   b6804:	f000 fd22 	bl	b724c <memset>
                    a.v = 6;
   b6808:	2306      	movs	r3, #6
   b680a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b680e:	ad01      	add	r5, sp, #4
   b6810:	f104 0308 	add.w	r3, r4, #8
   b6814:	3418      	adds	r4, #24
   b6816:	6818      	ldr	r0, [r3, #0]
   b6818:	6859      	ldr	r1, [r3, #4]
   b681a:	462a      	mov	r2, r5
   b681c:	c203      	stmia	r2!, {r0, r1}
   b681e:	3308      	adds	r3, #8
   b6820:	42a3      	cmp	r3, r4
   b6822:	4615      	mov	r5, r2
   b6824:	d1f7      	bne.n	b6816 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6826:	a901      	add	r1, sp, #4
   b6828:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b682a:	ad07      	add	r5, sp, #28
   b682c:	f7ff fd34 	bl	b6298 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6832:	1d3c      	adds	r4, r7, #4
   b6834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6836:	682b      	ldr	r3, [r5, #0]
   b6838:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b683a:	4649      	mov	r1, r9
   b683c:	e7ca      	b.n	b67d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b683e:	9800      	ldr	r0, [sp, #0]
   b6840:	f7ff fa58 	bl	b5cf4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6844:	4638      	mov	r0, r7
   b6846:	b015      	add	sp, #84	; 0x54
   b6848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b684c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b684c:	4b02      	ldr	r3, [pc, #8]	; (b6858 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b684e:	4a03      	ldr	r2, [pc, #12]	; (b685c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6850:	601a      	str	r2, [r3, #0]
   b6852:	2200      	movs	r2, #0
   b6854:	605a      	str	r2, [r3, #4]

} // spark
   b6856:	4770      	bx	lr
   b6858:	2003e6d4 	.word	0x2003e6d4
   b685c:	000b7f40 	.word	0x000b7f40

000b6860 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6862:	4606      	mov	r6, r0
   b6864:	460d      	mov	r5, r1
  size_t n = 0;
   b6866:	188f      	adds	r7, r1, r2
   b6868:	2400      	movs	r4, #0
  while (size--) {
   b686a:	42bd      	cmp	r5, r7
   b686c:	d00c      	beq.n	b6888 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b686e:	6833      	ldr	r3, [r6, #0]
   b6870:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6874:	689b      	ldr	r3, [r3, #8]
   b6876:	4630      	mov	r0, r6
   b6878:	4798      	blx	r3
     if (chunk>=0)
   b687a:	1e03      	subs	r3, r0, #0
   b687c:	db01      	blt.n	b6882 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b687e:	441c      	add	r4, r3
  while (size--) {
   b6880:	e7f3      	b.n	b686a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6882:	2c00      	cmp	r4, #0
   b6884:	bf08      	it	eq
   b6886:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6888:	4620      	mov	r0, r4
   b688a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b688c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b688c:	b513      	push	{r0, r1, r4, lr}
   b688e:	4604      	mov	r4, r0
    }
   b6890:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6892:	b159      	cbz	r1, b68ac <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6894:	9101      	str	r1, [sp, #4]
   b6896:	f000 fd0f 	bl	b72b8 <strlen>
   b689a:	6823      	ldr	r3, [r4, #0]
   b689c:	9901      	ldr	r1, [sp, #4]
   b689e:	68db      	ldr	r3, [r3, #12]
   b68a0:	4602      	mov	r2, r0
   b68a2:	4620      	mov	r0, r4
    }
   b68a4:	b002      	add	sp, #8
   b68a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b68aa:	4718      	bx	r3
    }
   b68ac:	b002      	add	sp, #8
   b68ae:	bd10      	pop	{r4, pc}

000b68b0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b68b0:	6803      	ldr	r3, [r0, #0]
   b68b2:	689b      	ldr	r3, [r3, #8]
   b68b4:	4718      	bx	r3

000b68b6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b68b6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b68b8:	210d      	movs	r1, #13
{
   b68ba:	4605      	mov	r5, r0
  size_t n = print('\r');
   b68bc:	f7ff fff8 	bl	b68b0 <_ZN5Print5printEc>
  n += print('\n');
   b68c0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b68c2:	4604      	mov	r4, r0
  n += print('\n');
   b68c4:	4628      	mov	r0, r5
   b68c6:	f7ff fff3 	bl	b68b0 <_ZN5Print5printEc>
  return n;
}
   b68ca:	4420      	add	r0, r4
   b68cc:	bd38      	pop	{r3, r4, r5, pc}

000b68ce <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b68ce:	b530      	push	{r4, r5, lr}
   b68d0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b68d2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b68d4:	2a01      	cmp	r2, #1
  *str = '\0';
   b68d6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b68da:	bf98      	it	ls
   b68dc:	220a      	movls	r2, #10
   b68de:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b68e0:	460d      	mov	r5, r1
   b68e2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b68e6:	fb01 5312 	mls	r3, r1, r2, r5
   b68ea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b68ee:	2b09      	cmp	r3, #9
   b68f0:	bf94      	ite	ls
   b68f2:	3330      	addls	r3, #48	; 0x30
   b68f4:	3337      	addhi	r3, #55	; 0x37
   b68f6:	b2db      	uxtb	r3, r3
  } while(n);
   b68f8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b68fa:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b68fe:	d9ef      	bls.n	b68e0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6900:	4621      	mov	r1, r4
   b6902:	f7ff ffc3 	bl	b688c <_ZN5Print5writeEPKc>
}
   b6906:	b00b      	add	sp, #44	; 0x2c
   b6908:	bd30      	pop	{r4, r5, pc}

000b690a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b690a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b690e:	b086      	sub	sp, #24
   b6910:	af00      	add	r7, sp, #0
   b6912:	4605      	mov	r5, r0
   b6914:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6916:	1d38      	adds	r0, r7, #4
   b6918:	2114      	movs	r1, #20
{
   b691a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b691c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b691e:	f7ff fb9f 	bl	b6060 <vsnprintf>

    if (n<bufsize)
   b6922:	2813      	cmp	r0, #19
   b6924:	d80e      	bhi.n	b6944 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6926:	1d39      	adds	r1, r7, #4
   b6928:	4628      	mov	r0, r5
   b692a:	f7ff ffaf 	bl	b688c <_ZN5Print5writeEPKc>
   b692e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6930:	b11e      	cbz	r6, b693a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6932:	4628      	mov	r0, r5
   b6934:	f7ff ffbf 	bl	b68b6 <_ZN5Print7printlnEv>
   b6938:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b693a:	4620      	mov	r0, r4
   b693c:	3718      	adds	r7, #24
   b693e:	46bd      	mov	sp, r7
   b6940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6944:	f100 0308 	add.w	r3, r0, #8
   b6948:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b694c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b694e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6952:	4622      	mov	r2, r4
   b6954:	1c41      	adds	r1, r0, #1
   b6956:	683b      	ldr	r3, [r7, #0]
   b6958:	4668      	mov	r0, sp
   b695a:	f7ff fb81 	bl	b6060 <vsnprintf>
  return write(str);
   b695e:	4669      	mov	r1, sp
   b6960:	4628      	mov	r0, r5
   b6962:	f7ff ff93 	bl	b688c <_ZN5Print5writeEPKc>
   b6966:	4604      	mov	r4, r0
   b6968:	46c5      	mov	sp, r8
   b696a:	e7e1      	b.n	b6930 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b696c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b696c:	4b01      	ldr	r3, [pc, #4]	; (b6974 <_GLOBAL__sub_I_RGB+0x8>)
   b696e:	2200      	movs	r2, #0
   b6970:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6972:	4770      	bx	lr
   b6974:	2003e6dc 	.word	0x2003e6dc

000b6978 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6978:	2100      	movs	r1, #0
   b697a:	f7ff ba13 	b.w	b5da4 <hal_spi_release>

000b697e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b697e:	2100      	movs	r1, #0
   b6980:	f7ff ba08 	b.w	b5d94 <hal_spi_acquire>

000b6984 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6984:	b510      	push	{r4, lr}
   b6986:	4604      	mov	r4, r0
   b6988:	4608      	mov	r0, r1
{
    _spi = spi;
   b698a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b698c:	f7ff f9ea 	bl	b5d64 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6990:	2300      	movs	r3, #0
   b6992:	6063      	str	r3, [r4, #4]
}
   b6994:	4620      	mov	r0, r4
   b6996:	bd10      	pop	{r4, pc}

000b6998 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6998:	b513      	push	{r0, r1, r4, lr}
   b699a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b699c:	7800      	ldrb	r0, [r0, #0]
   b699e:	f7ff ffee 	bl	b697e <_ZN8SPIClass4lockEv.isra.0>
   b69a2:	b958      	cbnz	r0, b69bc <_ZN8SPIClass5beginEv+0x24>
   b69a4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b69a6:	9001      	str	r0, [sp, #4]
   b69a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b69ac:	f7ff f9b2 	bl	b5d14 <hal_spi_begin>
        unlock();
   b69b0:	9801      	ldr	r0, [sp, #4]
    }
}
   b69b2:	b002      	add	sp, #8
   b69b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b69b8:	f7ff bfde 	b.w	b6978 <_ZN8SPIClass6unlockEv.isra.0>
   b69bc:	b002      	add	sp, #8
   b69be:	bd10      	pop	{r4, pc}

000b69c0 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b69c0:	b513      	push	{r0, r1, r4, lr}
   b69c2:	4604      	mov	r4, r0
    if (!lock())
   b69c4:	7800      	ldrb	r0, [r0, #0]
{
   b69c6:	9101      	str	r1, [sp, #4]
    if (!lock())
   b69c8:	f7ff ffd9 	bl	b697e <_ZN8SPIClass4lockEv.isra.0>
   b69cc:	9901      	ldr	r1, [sp, #4]
   b69ce:	b948      	cbnz	r0, b69e4 <_ZN8SPIClass11setBitOrderEh+0x24>
   b69d0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b69d2:	9001      	str	r0, [sp, #4]
   b69d4:	f7ff f9a6 	bl	b5d24 <hal_spi_set_bit_order>
        unlock();
   b69d8:	9801      	ldr	r0, [sp, #4]
    }
}
   b69da:	b002      	add	sp, #8
   b69dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b69e0:	f7ff bfca 	b.w	b6978 <_ZN8SPIClass6unlockEv.isra.0>
   b69e4:	b002      	add	sp, #8
   b69e6:	bd10      	pop	{r4, pc}

000b69e8 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b69e8:	b513      	push	{r0, r1, r4, lr}
   b69ea:	4604      	mov	r4, r0
    if (!lock())
   b69ec:	7800      	ldrb	r0, [r0, #0]
{
   b69ee:	9101      	str	r1, [sp, #4]
    if (!lock())
   b69f0:	f7ff ffc5 	bl	b697e <_ZN8SPIClass4lockEv.isra.0>
   b69f4:	9901      	ldr	r1, [sp, #4]
   b69f6:	b948      	cbnz	r0, b6a0c <_ZN8SPIClass11setDataModeEh+0x24>
   b69f8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b69fa:	9001      	str	r0, [sp, #4]
   b69fc:	f7ff f99a 	bl	b5d34 <hal_spi_set_data_mode>
        unlock();
   b6a00:	9801      	ldr	r0, [sp, #4]
    }
}
   b6a02:	b002      	add	sp, #8
   b6a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6a08:	f7ff bfb6 	b.w	b6978 <_ZN8SPIClass6unlockEv.isra.0>
   b6a0c:	b002      	add	sp, #8
   b6a0e:	bd10      	pop	{r4, pc}

000b6a10 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6a10:	0840      	lsrs	r0, r0, #1
{
   b6a12:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6a14:	6018      	str	r0, [r3, #0]
   b6a16:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6a18:	6818      	ldr	r0, [r3, #0]
   b6a1a:	4288      	cmp	r0, r1
   b6a1c:	b2e5      	uxtb	r5, r4
   b6a1e:	d906      	bls.n	b6a2e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6a20:	3401      	adds	r4, #1
   b6a22:	2c08      	cmp	r4, #8
   b6a24:	d002      	beq.n	b6a2c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6a26:	0840      	lsrs	r0, r0, #1
   b6a28:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6a2a:	e7f5      	b.n	b6a18 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6a2c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6a2e:	4b02      	ldr	r3, [pc, #8]	; (b6a38 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6a30:	5d5b      	ldrb	r3, [r3, r5]
   b6a32:	7013      	strb	r3, [r2, #0]
}
   b6a34:	bd30      	pop	{r4, r5, pc}
   b6a36:	bf00      	nop
   b6a38:	000b7f74 	.word	0x000b7f74

000b6a3c <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b6a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6a40:	b088      	sub	sp, #32
    unsigned clock = 0;
   b6a42:	2300      	movs	r3, #0
{
   b6a44:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b6a46:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b6a48:	9302      	str	r3, [sp, #8]
{
   b6a4a:	460e      	mov	r6, r1
   b6a4c:	4617      	mov	r7, r2
    if (!lock())
   b6a4e:	f7ff ff96 	bl	b697e <_ZN8SPIClass4lockEv.isra.0>
   b6a52:	4605      	mov	r5, r0
   b6a54:	bb00      	cbnz	r0, b6a98 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b6a56:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6a5a:	4601      	mov	r1, r0
   b6a5c:	2214      	movs	r2, #20
   b6a5e:	a803      	add	r0, sp, #12
   b6a60:	f000 fbf4 	bl	b724c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6a64:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6a66:	462a      	mov	r2, r5
   b6a68:	a903      	add	r1, sp, #12
   b6a6a:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b6a6c:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b6a70:	f7ff f988 	bl	b5d84 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b6a74:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b6a76:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b6a7a:	ab02      	add	r3, sp, #8
   b6a7c:	f10d 0207 	add.w	r2, sp, #7
   b6a80:	fb07 f106 	mul.w	r1, r7, r6
   b6a84:	f7ff ffc4 	bl	b6a10 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b6a88:	7820      	ldrb	r0, [r4, #0]
   b6a8a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b6a8e:	f7ff f959 	bl	b5d44 <hal_spi_set_clock_divider>
        unlock();
   b6a92:	7820      	ldrb	r0, [r4, #0]
   b6a94:	f7ff ff70 	bl	b6978 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b6a98:	9802      	ldr	r0, [sp, #8]
   b6a9a:	b008      	add	sp, #32
   b6a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6aa0 <_ZN8SPIClass15setClockDividerEh>:
{
   b6aa0:	b538      	push	{r3, r4, r5, lr}
   b6aa2:	4604      	mov	r4, r0
    if (!lock())
   b6aa4:	7800      	ldrb	r0, [r0, #0]
{
   b6aa6:	460d      	mov	r5, r1
    if (!lock())
   b6aa8:	f7ff ff69 	bl	b697e <_ZN8SPIClass4lockEv.isra.0>
   b6aac:	4603      	mov	r3, r0
   b6aae:	b9d0      	cbnz	r0, b6ae6 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b6ab0:	6861      	ldr	r1, [r4, #4]
   b6ab2:	b199      	cbz	r1, b6adc <_ZN8SPIClass15setClockDividerEh+0x3c>
   b6ab4:	4a0c      	ldr	r2, [pc, #48]	; (b6ae8 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b6ab6:	f812 0b01 	ldrb.w	r0, [r2], #1
   b6aba:	4285      	cmp	r5, r0
   b6abc:	d002      	beq.n	b6ac4 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b6abe:	3301      	adds	r3, #1
   b6ac0:	2b08      	cmp	r3, #8
   b6ac2:	d1f8      	bne.n	b6ab6 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b6ac4:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b6ac6:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b6ac8:	2201      	movs	r2, #1
   b6aca:	40d9      	lsrs	r1, r3
   b6acc:	4620      	mov	r0, r4
   b6ace:	f7ff ffb5 	bl	b6a3c <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b6ad2:	7820      	ldrb	r0, [r4, #0]
}
   b6ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b6ad8:	f7ff bf4e 	b.w	b6978 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b6adc:	7820      	ldrb	r0, [r4, #0]
   b6ade:	4629      	mov	r1, r5
   b6ae0:	f7ff f930 	bl	b5d44 <hal_spi_set_clock_divider>
   b6ae4:	e7f5      	b.n	b6ad2 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b6ae6:	bd38      	pop	{r3, r4, r5, pc}
   b6ae8:	000b7f74 	.word	0x000b7f74

000b6aec <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b6aec:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6aee:	7800      	ldrb	r0, [r0, #0]
   b6af0:	f7ff f930 	bl	b5d54 <hal_spi_transfer>
}
   b6af4:	b2c0      	uxtb	r0, r0
   b6af6:	bd08      	pop	{r3, pc}

000b6af8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6af8:	b510      	push	{r4, lr}
   b6afa:	4604      	mov	r4, r0
{
	free(buffer);
   b6afc:	6800      	ldr	r0, [r0, #0]
   b6afe:	f7ff fa9f 	bl	b6040 <free>
}
   b6b02:	4620      	mov	r0, r4
   b6b04:	bd10      	pop	{r4, pc}

000b6b06 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6b06:	b510      	push	{r4, lr}
   b6b08:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6b0a:	6800      	ldr	r0, [r0, #0]
   b6b0c:	b108      	cbz	r0, b6b12 <_ZN6String10invalidateEv+0xc>
   b6b0e:	f7ff fa97 	bl	b6040 <free>
	buffer = NULL;
   b6b12:	2300      	movs	r3, #0
	capacity = len = 0;
   b6b14:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6b18:	6023      	str	r3, [r4, #0]
}
   b6b1a:	bd10      	pop	{r4, pc}

000b6b1c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6b1c:	b538      	push	{r3, r4, r5, lr}
   b6b1e:	4604      	mov	r4, r0
   b6b20:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6b22:	6800      	ldr	r0, [r0, #0]
   b6b24:	3101      	adds	r1, #1
   b6b26:	f7ff fa93 	bl	b6050 <realloc>
	if (newbuffer) {
   b6b2a:	b110      	cbz	r0, b6b32 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6b2c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6b30:	2001      	movs	r0, #1
	}
	return 0;
}
   b6b32:	bd38      	pop	{r3, r4, r5, pc}

000b6b34 <_ZN6String7reserveEj>:
{
   b6b34:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6b36:	6803      	ldr	r3, [r0, #0]
{
   b6b38:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6b3a:	b123      	cbz	r3, b6b46 <_ZN6String7reserveEj+0x12>
   b6b3c:	6843      	ldr	r3, [r0, #4]
   b6b3e:	428b      	cmp	r3, r1
   b6b40:	d301      	bcc.n	b6b46 <_ZN6String7reserveEj+0x12>
   b6b42:	2001      	movs	r0, #1
}
   b6b44:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6b46:	4620      	mov	r0, r4
   b6b48:	f7ff ffe8 	bl	b6b1c <_ZN6String12changeBufferEj>
   b6b4c:	2800      	cmp	r0, #0
   b6b4e:	d0f9      	beq.n	b6b44 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6b50:	68a3      	ldr	r3, [r4, #8]
   b6b52:	2b00      	cmp	r3, #0
   b6b54:	d1f5      	bne.n	b6b42 <_ZN6String7reserveEj+0xe>
   b6b56:	6822      	ldr	r2, [r4, #0]
   b6b58:	7013      	strb	r3, [r2, #0]
   b6b5a:	e7f2      	b.n	b6b42 <_ZN6String7reserveEj+0xe>

000b6b5c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6b5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6b5e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6b60:	4611      	mov	r1, r2
   b6b62:	9201      	str	r2, [sp, #4]
{
   b6b64:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6b66:	f7ff ffe5 	bl	b6b34 <_ZN6String7reserveEj>
   b6b6a:	9a01      	ldr	r2, [sp, #4]
   b6b6c:	b928      	cbnz	r0, b6b7a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6b6e:	4620      	mov	r0, r4
   b6b70:	f7ff ffc9 	bl	b6b06 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6b74:	4620      	mov	r0, r4
   b6b76:	b003      	add	sp, #12
   b6b78:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6b7a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6b7c:	4629      	mov	r1, r5
   b6b7e:	6820      	ldr	r0, [r4, #0]
   b6b80:	f000 fb3c 	bl	b71fc <memcpy>
	buffer[len] = 0;
   b6b84:	6822      	ldr	r2, [r4, #0]
   b6b86:	68a3      	ldr	r3, [r4, #8]
   b6b88:	2100      	movs	r1, #0
   b6b8a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6b8c:	e7f2      	b.n	b6b74 <_ZN6String4copyEPKcj+0x18>

000b6b8e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6b8e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6b90:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6b92:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6b96:	4604      	mov	r4, r0
	len = 0;
   b6b98:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6b9a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6b9c:	b141      	cbz	r1, b6bb0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6b9e:	4608      	mov	r0, r1
   b6ba0:	9101      	str	r1, [sp, #4]
   b6ba2:	f000 fb89 	bl	b72b8 <strlen>
   b6ba6:	9901      	ldr	r1, [sp, #4]
   b6ba8:	4602      	mov	r2, r0
   b6baa:	4620      	mov	r0, r4
   b6bac:	f7ff ffd6 	bl	b6b5c <_ZN6String4copyEPKcj>
}
   b6bb0:	4620      	mov	r0, r4
   b6bb2:	b002      	add	sp, #8
   b6bb4:	bd10      	pop	{r4, pc}
	...

000b6bb8 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   b6bb8:	b40e      	push	{r1, r2, r3}
   b6bba:	b570      	push	{r4, r5, r6, lr}
   b6bbc:	b087      	sub	sp, #28
   b6bbe:	ad0b      	add	r5, sp, #44	; 0x2c
   b6bc0:	4604      	mov	r4, r0
   b6bc2:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b6bc6:	9201      	str	r2, [sp, #4]
   b6bc8:	462b      	mov	r3, r5
   b6bca:	2105      	movs	r1, #5
   b6bcc:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   b6bce:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b6bd0:	f7ff fa46 	bl	b6060 <vsnprintf>
    va_end(marker);

    String result;
   b6bd4:	490b      	ldr	r1, [pc, #44]	; (b6c04 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   b6bd6:	4606      	mov	r6, r0
    String result;
   b6bd8:	4620      	mov	r0, r4
   b6bda:	f7ff ffd8 	bl	b6b8e <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
   b6bde:	4631      	mov	r1, r6
   b6be0:	4620      	mov	r0, r4
   b6be2:	f7ff ffa7 	bl	b6b34 <_ZN6String7reserveEj>
    if (result.buffer) {
   b6be6:	6820      	ldr	r0, [r4, #0]
   b6be8:	b130      	cbz	r0, b6bf8 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b6bea:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   b6bec:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   b6bee:	462b      	mov	r3, r5
   b6bf0:	1c71      	adds	r1, r6, #1
   b6bf2:	f7ff fa35 	bl	b6060 <vsnprintf>
        va_end(marker);
        result.len = n;
   b6bf6:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   b6bf8:	4620      	mov	r0, r4
   b6bfa:	b007      	add	sp, #28
   b6bfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6c00:	b003      	add	sp, #12
   b6c02:	4770      	bx	lr
   b6c04:	000b73db 	.word	0x000b73db

000b6c08 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6c08:	4b05      	ldr	r3, [pc, #20]	; (b6c20 <_GLOBAL__sub_I_System+0x18>)
   b6c0a:	2202      	movs	r2, #2
   b6c0c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6c0e:	4b05      	ldr	r3, [pc, #20]	; (b6c24 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6c10:	4a05      	ldr	r2, [pc, #20]	; (b6c28 <_GLOBAL__sub_I_System+0x20>)
   b6c12:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6c14:	2000      	movs	r0, #0
   b6c16:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6c1a:	f7ff b965 	b.w	b5ee8 <set_system_mode>
   b6c1e:	bf00      	nop
   b6c20:	2003e6f8 	.word	0x2003e6f8
   b6c24:	2003e6ec 	.word	0x2003e6ec
   b6c28:	ffff0000 	.word	0xffff0000

000b6c2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6c2c:	4b02      	ldr	r3, [pc, #8]	; (b6c38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6c2e:	681a      	ldr	r2, [r3, #0]
   b6c30:	4b02      	ldr	r3, [pc, #8]	; (b6c3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6c32:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6c34:	4770      	bx	lr
   b6c36:	bf00      	nop
   b6c38:	2003e5e4 	.word	0x2003e5e4
   b6c3c:	2003e6fc 	.word	0x2003e6fc

000b6c40 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6c40:	4770      	bx	lr

000b6c42 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6c42:	7441      	strb	r1, [r0, #17]
}
   b6c44:	4770      	bx	lr

000b6c46 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6c46:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6c48:	7c00      	ldrb	r0, [r0, #16]
   b6c4a:	f7ff f8e3 	bl	b5e14 <hal_usart_available_data_for_write>
}
   b6c4e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6c52:	bd08      	pop	{r3, pc}

000b6c54 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6c54:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6c56:	7c00      	ldrb	r0, [r0, #16]
   b6c58:	f7ff f8b4 	bl	b5dc4 <hal_usart_available>
}
   b6c5c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6c60:	bd08      	pop	{r3, pc}

000b6c62 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6c62:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6c64:	7c00      	ldrb	r0, [r0, #16]
   b6c66:	f7ff f8bd 	bl	b5de4 <hal_usart_peek>
}
   b6c6a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6c6e:	bd08      	pop	{r3, pc}

000b6c70 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6c70:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6c72:	7c00      	ldrb	r0, [r0, #16]
   b6c74:	f7ff f8ae 	bl	b5dd4 <hal_usart_read>
}
   b6c78:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6c7c:	bd08      	pop	{r3, pc}

000b6c7e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6c7e:	7c00      	ldrb	r0, [r0, #16]
   b6c80:	f7ff b8b8 	b.w	b5df4 <hal_usart_flush>

000b6c84 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6c86:	7c45      	ldrb	r5, [r0, #17]
{
   b6c88:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6c8a:	b12d      	cbz	r5, b6c98 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6c8c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6c8e:	b003      	add	sp, #12
   b6c90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6c94:	f7ff b88e 	b.w	b5db4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6c98:	7c00      	ldrb	r0, [r0, #16]
   b6c9a:	9101      	str	r1, [sp, #4]
   b6c9c:	f7ff f8ba 	bl	b5e14 <hal_usart_available_data_for_write>
   b6ca0:	2800      	cmp	r0, #0
   b6ca2:	9901      	ldr	r1, [sp, #4]
   b6ca4:	dcf2      	bgt.n	b6c8c <_ZN11USARTSerial5writeEh+0x8>
}
   b6ca6:	4628      	mov	r0, r5
   b6ca8:	b003      	add	sp, #12
   b6caa:	bd30      	pop	{r4, r5, pc}

000b6cac <_ZN11USARTSerialD0Ev>:
   b6cac:	b510      	push	{r4, lr}
   b6cae:	2114      	movs	r1, #20
   b6cb0:	4604      	mov	r4, r0
   b6cb2:	f7fd f9f4 	bl	b409e <_ZdlPvj>
   b6cb6:	4620      	mov	r0, r4
   b6cb8:	bd10      	pop	{r4, pc}
	...

000b6cbc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6cbc:	b510      	push	{r4, lr}
   b6cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6cc2:	4604      	mov	r4, r0
   b6cc4:	4608      	mov	r0, r1
   b6cc6:	4611      	mov	r1, r2
   b6cc8:	2200      	movs	r2, #0
   b6cca:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6cce:	4b04      	ldr	r3, [pc, #16]	; (b6ce0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6cd0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6cd2:	2301      	movs	r3, #1
  _serial = serial;
   b6cd4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6cd6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6cd8:	f7ff f8a4 	bl	b5e24 <hal_usart_init_ex>
}
   b6cdc:	4620      	mov	r0, r4
   b6cde:	bd10      	pop	{r4, pc}
   b6ce0:	000b7fa0 	.word	0x000b7fa0

000b6ce4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6ce4:	7441      	strb	r1, [r0, #17]
}
   b6ce6:	4770      	bx	lr

000b6ce8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6ce8:	4770      	bx	lr

000b6cea <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6cea:	4770      	bx	lr

000b6cec <_ZN9USBSerial4readEv>:
{
   b6cec:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6cee:	2100      	movs	r1, #0
   b6cf0:	7c00      	ldrb	r0, [r0, #16]
   b6cf2:	f7ff f8bf 	bl	b5e74 <HAL_USB_USART_Receive_Data>
}
   b6cf6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6cfa:	bd08      	pop	{r3, pc}

000b6cfc <_ZN9USBSerial4peekEv>:
{
   b6cfc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6cfe:	2101      	movs	r1, #1
   b6d00:	7c00      	ldrb	r0, [r0, #16]
   b6d02:	f7ff f8b7 	bl	b5e74 <HAL_USB_USART_Receive_Data>
}
   b6d06:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6d0a:	bd08      	pop	{r3, pc}

000b6d0c <_ZN9USBSerial17availableForWriteEv>:
{
   b6d0c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6d0e:	7c00      	ldrb	r0, [r0, #16]
   b6d10:	f7ff f8a8 	bl	b5e64 <HAL_USB_USART_Available_Data_For_Write>
}
   b6d14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6d18:	bd08      	pop	{r3, pc}

000b6d1a <_ZN9USBSerial9availableEv>:
{
   b6d1a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6d1c:	7c00      	ldrb	r0, [r0, #16]
   b6d1e:	f7ff f899 	bl	b5e54 <HAL_USB_USART_Available_Data>
}
   b6d22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6d26:	bd08      	pop	{r3, pc}

000b6d28 <_ZN9USBSerial5writeEh>:
{
   b6d28:	b513      	push	{r0, r1, r4, lr}
   b6d2a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6d2c:	7c00      	ldrb	r0, [r0, #16]
{
   b6d2e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6d30:	f7ff f898 	bl	b5e64 <HAL_USB_USART_Available_Data_For_Write>
   b6d34:	2800      	cmp	r0, #0
   b6d36:	9901      	ldr	r1, [sp, #4]
   b6d38:	dc01      	bgt.n	b6d3e <_ZN9USBSerial5writeEh+0x16>
   b6d3a:	7c60      	ldrb	r0, [r4, #17]
   b6d3c:	b120      	cbz	r0, b6d48 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6d3e:	7c20      	ldrb	r0, [r4, #16]
   b6d40:	f7ff f8a0 	bl	b5e84 <HAL_USB_USART_Send_Data>
   b6d44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6d48:	b002      	add	sp, #8
   b6d4a:	bd10      	pop	{r4, pc}

000b6d4c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6d4c:	7c00      	ldrb	r0, [r0, #16]
   b6d4e:	f7ff b8a1 	b.w	b5e94 <HAL_USB_USART_Flush_Data>

000b6d52 <_ZN9USBSerialD0Ev>:
   b6d52:	b510      	push	{r4, lr}
   b6d54:	2114      	movs	r1, #20
   b6d56:	4604      	mov	r4, r0
   b6d58:	f7fd f9a1 	bl	b409e <_ZdlPvj>
   b6d5c:	4620      	mov	r0, r4
   b6d5e:	bd10      	pop	{r4, pc}

000b6d60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6d60:	b510      	push	{r4, lr}
   b6d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6d66:	4604      	mov	r4, r0
   b6d68:	4608      	mov	r0, r1
   b6d6a:	2100      	movs	r1, #0
   b6d6c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6d70:	4b04      	ldr	r3, [pc, #16]	; (b6d84 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6d72:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6d74:	2301      	movs	r3, #1
  _serial = serial;
   b6d76:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6d78:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6d7a:	4611      	mov	r1, r2
   b6d7c:	f7ff f85a 	bl	b5e34 <HAL_USB_USART_Init>
}
   b6d80:	4620      	mov	r0, r4
   b6d82:	bd10      	pop	{r4, pc}
   b6d84:	000b7fd0 	.word	0x000b7fd0

000b6d88 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6d88:	7c00      	ldrb	r0, [r0, #16]
   b6d8a:	2200      	movs	r2, #0
   b6d8c:	f7ff b85a 	b.w	b5e44 <HAL_USB_USART_Begin>

000b6d90 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b6d90:	7c00      	ldrb	r0, [r0, #16]
   b6d92:	f7ff b887 	b.w	b5ea4 <HAL_USB_USART_Is_Connected>

000b6d96 <_Z19acquireSerialBufferv>:
{
   b6d96:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6d98:	2214      	movs	r2, #20
{
   b6d9a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6d9c:	2100      	movs	r1, #0
   b6d9e:	f000 fa55 	bl	b724c <memset>
}
   b6da2:	4620      	mov	r0, r4
   b6da4:	bd10      	pop	{r4, pc}
	...

000b6da8 <_Z16_fetch_usbserialv>:
{
   b6da8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6daa:	4c0f      	ldr	r4, [pc, #60]	; (b6de8 <_Z16_fetch_usbserialv+0x40>)
{
   b6dac:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6dae:	a803      	add	r0, sp, #12
   b6db0:	f7ff fff1 	bl	b6d96 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6db4:	7821      	ldrb	r1, [r4, #0]
   b6db6:	f3bf 8f5b 	dmb	ish
   b6dba:	f011 0101 	ands.w	r1, r1, #1
   b6dbe:	d10f      	bne.n	b6de0 <_Z16_fetch_usbserialv+0x38>
   b6dc0:	4620      	mov	r0, r4
   b6dc2:	9101      	str	r1, [sp, #4]
   b6dc4:	f7fd f97a 	bl	b40bc <__cxa_guard_acquire>
   b6dc8:	9901      	ldr	r1, [sp, #4]
   b6dca:	b148      	cbz	r0, b6de0 <_Z16_fetch_usbserialv+0x38>
   b6dcc:	aa03      	add	r2, sp, #12
   b6dce:	4807      	ldr	r0, [pc, #28]	; (b6dec <_Z16_fetch_usbserialv+0x44>)
   b6dd0:	f7ff ffc6 	bl	b6d60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6dd4:	4620      	mov	r0, r4
   b6dd6:	f7fd f976 	bl	b40c6 <__cxa_guard_release>
   b6dda:	4805      	ldr	r0, [pc, #20]	; (b6df0 <_Z16_fetch_usbserialv+0x48>)
   b6ddc:	f000 fa08 	bl	b71f0 <atexit>
	return _usbserial;
}
   b6de0:	4802      	ldr	r0, [pc, #8]	; (b6dec <_Z16_fetch_usbserialv+0x44>)
   b6de2:	b008      	add	sp, #32
   b6de4:	bd10      	pop	{r4, pc}
   b6de6:	bf00      	nop
   b6de8:	2003e700 	.word	0x2003e700
   b6dec:	2003e704 	.word	0x2003e704
   b6df0:	000b6ce9 	.word	0x000b6ce9

000b6df4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6df4:	2200      	movs	r2, #0
   b6df6:	6840      	ldr	r0, [r0, #4]
   b6df8:	4611      	mov	r1, r2
   b6dfa:	f7ff b8d1 	b.w	b5fa0 <network_ready>

000b6dfe <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6dfe:	2200      	movs	r2, #0
   b6e00:	6840      	ldr	r0, [r0, #4]
   b6e02:	4611      	mov	r1, r2
   b6e04:	f7ff b8ec 	b.w	b5fe0 <network_listening>

000b6e08 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6e08:	2200      	movs	r2, #0
   b6e0a:	6840      	ldr	r0, [r0, #4]
   b6e0c:	4611      	mov	r1, r2
   b6e0e:	f7ff b8f7 	b.w	b6000 <network_get_listen_timeout>

000b6e12 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6e12:	6840      	ldr	r0, [r0, #4]
   b6e14:	2200      	movs	r2, #0
   b6e16:	f7ff b8eb 	b.w	b5ff0 <network_set_listen_timeout>

000b6e1a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6e1a:	6840      	ldr	r0, [r0, #4]
   b6e1c:	2200      	movs	r2, #0
   b6e1e:	f081 0101 	eor.w	r1, r1, #1
   b6e22:	f7ff b8d5 	b.w	b5fd0 <network_listen>

000b6e26 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6e26:	2300      	movs	r3, #0
   b6e28:	6840      	ldr	r0, [r0, #4]
   b6e2a:	461a      	mov	r2, r3
   b6e2c:	4619      	mov	r1, r3
   b6e2e:	f7ff b8c7 	b.w	b5fc0 <network_off>

000b6e32 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6e32:	2300      	movs	r3, #0
   b6e34:	6840      	ldr	r0, [r0, #4]
   b6e36:	461a      	mov	r2, r3
   b6e38:	4619      	mov	r1, r3
   b6e3a:	f7ff b8b9 	b.w	b5fb0 <network_on>

000b6e3e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6e3e:	2200      	movs	r2, #0
   b6e40:	6840      	ldr	r0, [r0, #4]
   b6e42:	4611      	mov	r1, r2
   b6e44:	f7ff b89c 	b.w	b5f80 <network_connecting>

000b6e48 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6e48:	6840      	ldr	r0, [r0, #4]
   b6e4a:	2200      	movs	r2, #0
   b6e4c:	2102      	movs	r1, #2
   b6e4e:	f7ff b89f 	b.w	b5f90 <network_disconnect>

000b6e52 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6e52:	2300      	movs	r3, #0
   b6e54:	6840      	ldr	r0, [r0, #4]
   b6e56:	461a      	mov	r2, r3
   b6e58:	f7ff b88a 	b.w	b5f70 <network_connect>

000b6e5c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6e5c:	4b02      	ldr	r3, [pc, #8]	; (b6e68 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6e5e:	2204      	movs	r2, #4
   b6e60:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6e62:	4a02      	ldr	r2, [pc, #8]	; (b6e6c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6e64:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6e66:	4770      	bx	lr
   b6e68:	2003e718 	.word	0x2003e718
   b6e6c:	000b8000 	.word	0x000b8000

000b6e70 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6e70:	4b01      	ldr	r3, [pc, #4]	; (b6e78 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6e72:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6e74:	4770      	bx	lr
   b6e76:	bf00      	nop
   b6e78:	2003e5e8 	.word	0x2003e5e8

000b6e7c <serialEventRun>:
{
   b6e7c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6e7e:	4b0b      	ldr	r3, [pc, #44]	; (b6eac <serialEventRun+0x30>)
   b6e80:	b143      	cbz	r3, b6e94 <serialEventRun+0x18>
   b6e82:	f7ff ff91 	bl	b6da8 <_Z16_fetch_usbserialv>
   b6e86:	6803      	ldr	r3, [r0, #0]
   b6e88:	691b      	ldr	r3, [r3, #16]
   b6e8a:	4798      	blx	r3
   b6e8c:	2800      	cmp	r0, #0
   b6e8e:	dd01      	ble.n	b6e94 <serialEventRun+0x18>
        serialEvent();
   b6e90:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6e94:	4b06      	ldr	r3, [pc, #24]	; (b6eb0 <serialEventRun+0x34>)
   b6e96:	b143      	cbz	r3, b6eaa <serialEventRun+0x2e>
   b6e98:	f000 f982 	bl	b71a0 <_Z22__fetch_global_Serial1v>
   b6e9c:	6803      	ldr	r3, [r0, #0]
   b6e9e:	691b      	ldr	r3, [r3, #16]
   b6ea0:	4798      	blx	r3
   b6ea2:	2800      	cmp	r0, #0
   b6ea4:	dd01      	ble.n	b6eaa <serialEventRun+0x2e>
        serialEvent1();
   b6ea6:	f3af 8000 	nop.w
}
   b6eaa:	bd08      	pop	{r3, pc}
	...

000b6eb4 <_post_loop>:
{
   b6eb4:	b508      	push	{r3, lr}
	serialEventRun();
   b6eb6:	f7ff ffe1 	bl	b6e7c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6eba:	f7fe fe83 	bl	b5bc4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6ebe:	4b01      	ldr	r3, [pc, #4]	; (b6ec4 <_post_loop+0x10>)
   b6ec0:	6018      	str	r0, [r3, #0]
}
   b6ec2:	bd08      	pop	{r3, pc}
   b6ec4:	2003e728 	.word	0x2003e728

000b6ec8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6ec8:	4805      	ldr	r0, [pc, #20]	; (b6ee0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b6eca:	4a06      	ldr	r2, [pc, #24]	; (b6ee4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6ecc:	4906      	ldr	r1, [pc, #24]	; (b6ee8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6ece:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6ed0:	1a12      	subs	r2, r2, r0
   b6ed2:	f000 f993 	bl	b71fc <memcpy>
    __backup_sram_signature = signature;
   b6ed6:	4b05      	ldr	r3, [pc, #20]	; (b6eec <_Z33system_initialize_user_backup_ramv+0x24>)
   b6ed8:	4a05      	ldr	r2, [pc, #20]	; (b6ef0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b6eda:	601a      	str	r2, [r3, #0]
}
   b6edc:	bd08      	pop	{r3, pc}
   b6ede:	bf00      	nop
   b6ee0:	2003f400 	.word	0x2003f400
   b6ee4:	2003f404 	.word	0x2003f404
   b6ee8:	000b80f4 	.word	0x000b80f4
   b6eec:	2003f400 	.word	0x2003f400
   b6ef0:	9a271c1e 	.word	0x9a271c1e

000b6ef4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6ef4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6ef6:	2300      	movs	r3, #0
   b6ef8:	9300      	str	r3, [sp, #0]
   b6efa:	461a      	mov	r2, r3
   b6efc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6f00:	f7ff f80c 	bl	b5f1c <system_ctrl_set_result>
}
   b6f04:	b003      	add	sp, #12
   b6f06:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6f0c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6f0c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6f0e:	8843      	ldrh	r3, [r0, #2]
   b6f10:	2b0a      	cmp	r3, #10
   b6f12:	d008      	beq.n	b6f26 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6f14:	2b50      	cmp	r3, #80	; 0x50
   b6f16:	d10b      	bne.n	b6f30 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6f18:	4b09      	ldr	r3, [pc, #36]	; (b6f40 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6f1a:	681b      	ldr	r3, [r3, #0]
   b6f1c:	b14b      	cbz	r3, b6f32 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6f1e:	b003      	add	sp, #12
   b6f20:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6f24:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6f26:	f7ff ffe5 	bl	b6ef4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6f2a:	b003      	add	sp, #12
   b6f2c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6f30:	2300      	movs	r3, #0
   b6f32:	9300      	str	r3, [sp, #0]
   b6f34:	461a      	mov	r2, r3
   b6f36:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6f3a:	f7fe ffef 	bl	b5f1c <system_ctrl_set_result>
}
   b6f3e:	e7f4      	b.n	b6f2a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6f40:	2003e724 	.word	0x2003e724

000b6f44 <module_user_init_hook>:
{
   b6f44:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6f46:	4812      	ldr	r0, [pc, #72]	; (b6f90 <module_user_init_hook+0x4c>)
   b6f48:	2100      	movs	r1, #0
   b6f4a:	f7ff f899 	bl	b6080 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6f4e:	4b11      	ldr	r3, [pc, #68]	; (b6f94 <module_user_init_hook+0x50>)
   b6f50:	681a      	ldr	r2, [r3, #0]
   b6f52:	4b11      	ldr	r3, [pc, #68]	; (b6f98 <module_user_init_hook+0x54>)
   b6f54:	429a      	cmp	r2, r3
   b6f56:	4b11      	ldr	r3, [pc, #68]	; (b6f9c <module_user_init_hook+0x58>)
   b6f58:	bf0c      	ite	eq
   b6f5a:	2201      	moveq	r2, #1
   b6f5c:	2200      	movne	r2, #0
   b6f5e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6f60:	d001      	beq.n	b6f66 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6f62:	f7ff ffb1 	bl	b6ec8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6f66:	f7fe fe15 	bl	b5b94 <HAL_RNG_GetRandomNumber>
   b6f6a:	4604      	mov	r4, r0
    srand(seed);
   b6f6c:	f000 f976 	bl	b725c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6f70:	4b0b      	ldr	r3, [pc, #44]	; (b6fa0 <module_user_init_hook+0x5c>)
   b6f72:	b113      	cbz	r3, b6f7a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6f74:	4620      	mov	r0, r4
   b6f76:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6f7a:	2100      	movs	r1, #0
   b6f7c:	4808      	ldr	r0, [pc, #32]	; (b6fa0 <module_user_init_hook+0x5c>)
   b6f7e:	f7fe ffef 	bl	b5f60 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6f86:	4807      	ldr	r0, [pc, #28]	; (b6fa4 <module_user_init_hook+0x60>)
   b6f88:	2100      	movs	r1, #0
   b6f8a:	f7fe bfbd 	b.w	b5f08 <system_ctrl_set_app_request_handler>
   b6f8e:	bf00      	nop
   b6f90:	000b6e71 	.word	0x000b6e71
   b6f94:	2003f400 	.word	0x2003f400
   b6f98:	9a271c1e 	.word	0x9a271c1e
   b6f9c:	2003e720 	.word	0x2003e720
   b6fa0:	00000000 	.word	0x00000000
   b6fa4:	000b6f0d 	.word	0x000b6f0d

000b6fa8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6fa8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6faa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6fac:	d902      	bls.n	b6fb4 <pinAvailable+0xc>
    return false;
   b6fae:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6fb0:	b002      	add	sp, #8
   b6fb2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6fb4:	f1a0 030b 	sub.w	r3, r0, #11
   b6fb8:	2b02      	cmp	r3, #2
   b6fba:	d81a      	bhi.n	b6ff2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6fbc:	4c17      	ldr	r4, [pc, #92]	; (b701c <pinAvailable+0x74>)
   b6fbe:	7821      	ldrb	r1, [r4, #0]
   b6fc0:	f3bf 8f5b 	dmb	ish
   b6fc4:	f011 0101 	ands.w	r1, r1, #1
   b6fc8:	d10b      	bne.n	b6fe2 <pinAvailable+0x3a>
   b6fca:	4620      	mov	r0, r4
   b6fcc:	9101      	str	r1, [sp, #4]
   b6fce:	f7fd f875 	bl	b40bc <__cxa_guard_acquire>
   b6fd2:	9901      	ldr	r1, [sp, #4]
   b6fd4:	b128      	cbz	r0, b6fe2 <pinAvailable+0x3a>
   b6fd6:	4812      	ldr	r0, [pc, #72]	; (b7020 <pinAvailable+0x78>)
   b6fd8:	f7ff fcd4 	bl	b6984 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6fdc:	4620      	mov	r0, r4
   b6fde:	f7fd f872 	bl	b40c6 <__cxa_guard_release>
   b6fe2:	4b0f      	ldr	r3, [pc, #60]	; (b7020 <pinAvailable+0x78>)
   b6fe4:	7818      	ldrb	r0, [r3, #0]
   b6fe6:	f7fe fec5 	bl	b5d74 <hal_spi_is_enabled>
   b6fea:	2800      	cmp	r0, #0
   b6fec:	d1df      	bne.n	b6fae <pinAvailable+0x6>
  return true; // 'pin' is available
   b6fee:	2001      	movs	r0, #1
   b6ff0:	e7de      	b.n	b6fb0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6ff2:	2801      	cmp	r0, #1
   b6ff4:	d809      	bhi.n	b700a <pinAvailable+0x62>
   b6ff6:	f000 f893 	bl	b7120 <_Z19__fetch_global_Wirev>
   b6ffa:	2100      	movs	r1, #0
   b6ffc:	7c00      	ldrb	r0, [r0, #16]
   b6ffe:	f7fe fe61 	bl	b5cc4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7002:	f080 0001 	eor.w	r0, r0, #1
   b7006:	b2c0      	uxtb	r0, r0
   b7008:	e7d2      	b.n	b6fb0 <pinAvailable+0x8>
   b700a:	3809      	subs	r0, #9
   b700c:	2801      	cmp	r0, #1
   b700e:	d8ee      	bhi.n	b6fee <pinAvailable+0x46>
   b7010:	f000 f8c6 	bl	b71a0 <_Z22__fetch_global_Serial1v>
   b7014:	7c00      	ldrb	r0, [r0, #16]
   b7016:	f7fe fef5 	bl	b5e04 <hal_usart_is_enabled>
   b701a:	e7f2      	b.n	b7002 <pinAvailable+0x5a>
   b701c:	2003e6b8 	.word	0x2003e6b8
   b7020:	2003e6bc 	.word	0x2003e6bc

000b7024 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7024:	2823      	cmp	r0, #35	; 0x23
{
   b7026:	b538      	push	{r3, r4, r5, lr}
   b7028:	4604      	mov	r4, r0
   b702a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b702c:	d80a      	bhi.n	b7044 <pinMode+0x20>
   b702e:	29ff      	cmp	r1, #255	; 0xff
   b7030:	d008      	beq.n	b7044 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7032:	f7ff ffb9 	bl	b6fa8 <pinAvailable>
   b7036:	b128      	cbz	r0, b7044 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7038:	4629      	mov	r1, r5
   b703a:	4620      	mov	r0, r4
}
   b703c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7040:	f7fe bde0 	b.w	b5c04 <HAL_Pin_Mode>
}
   b7044:	bd38      	pop	{r3, r4, r5, pc}

000b7046 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7046:	b538      	push	{r3, r4, r5, lr}
   b7048:	4604      	mov	r4, r0
   b704a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b704c:	f7fe fde2 	bl	b5c14 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7050:	28ff      	cmp	r0, #255	; 0xff
   b7052:	d010      	beq.n	b7076 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7054:	2806      	cmp	r0, #6
   b7056:	d804      	bhi.n	b7062 <digitalWrite+0x1c>
   b7058:	234d      	movs	r3, #77	; 0x4d
   b705a:	fa23 f000 	lsr.w	r0, r3, r0
   b705e:	07c3      	lsls	r3, r0, #31
   b7060:	d409      	bmi.n	b7076 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7062:	4620      	mov	r0, r4
   b7064:	f7ff ffa0 	bl	b6fa8 <pinAvailable>
   b7068:	b128      	cbz	r0, b7076 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b706a:	4629      	mov	r1, r5
   b706c:	4620      	mov	r0, r4
}
   b706e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b7072:	f7fe bdd7 	b.w	b5c24 <HAL_GPIO_Write>
}
   b7076:	bd38      	pop	{r3, r4, r5, pc}

000b7078 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b7078:	280d      	cmp	r0, #13
{
   b707a:	b510      	push	{r4, lr}
   b707c:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b707e:	bf9c      	itt	ls
   b7080:	340e      	addls	r4, #14
   b7082:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b7084:	4620      	mov	r0, r4
   b7086:	f7ff ff8f 	bl	b6fa8 <pinAvailable>
   b708a:	b150      	cbz	r0, b70a2 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b708c:	2103      	movs	r1, #3
   b708e:	4620      	mov	r0, r4
   b7090:	f7fe fdb0 	bl	b5bf4 <HAL_Validate_Pin_Function>
   b7094:	2803      	cmp	r0, #3
   b7096:	d104      	bne.n	b70a2 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b7098:	4620      	mov	r0, r4
}
   b709a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b709e:	f7fe bdc9 	b.w	b5c34 <hal_adc_read>
}
   b70a2:	2000      	movs	r0, #0
   b70a4:	bd10      	pop	{r4, pc}

000b70a6 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b70a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b70aa:	4690      	mov	r8, r2
   b70ac:	461f      	mov	r7, r3
   b70ae:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b70b0:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b70b2:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b70b4:	f1c4 0107 	rsb	r1, r4, #7
   b70b8:	f1b8 0f00 	cmp.w	r8, #0
   b70bc:	d112      	bne.n	b70e4 <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b70be:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b70c2:	f001 0101 	and.w	r1, r1, #1
   b70c6:	4630      	mov	r0, r6
   b70c8:	f7ff ffbd 	bl	b7046 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b70cc:	2101      	movs	r1, #1
   b70ce:	4628      	mov	r0, r5
   b70d0:	f7ff ffb9 	bl	b7046 <digitalWrite>
    digitalWrite(clockPin, LOW);
   b70d4:	2100      	movs	r1, #0
   b70d6:	4628      	mov	r0, r5
   b70d8:	f7ff ffb5 	bl	b7046 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b70dc:	3c01      	subs	r4, #1
   b70de:	d2e9      	bcs.n	b70b4 <shiftOut+0xe>
  }
}
   b70e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b70e4:	fa47 f104 	asr.w	r1, r7, r4
   b70e8:	e7eb      	b.n	b70c2 <shiftOut+0x1c>

000b70ea <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b70ea:	4770      	bx	lr

000b70ec <_Z17acquireWireBufferv>:
{
   b70ec:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b70ee:	4b0a      	ldr	r3, [pc, #40]	; (b7118 <_Z17acquireWireBufferv+0x2c>)
   b70f0:	6003      	str	r3, [r0, #0]
   b70f2:	2301      	movs	r3, #1
{
   b70f4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b70f6:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b70f8:	4908      	ldr	r1, [pc, #32]	; (b711c <_Z17acquireWireBufferv+0x30>)
   b70fa:	2020      	movs	r0, #32
   b70fc:	f000 f876 	bl	b71ec <_ZnajRKSt9nothrow_t>
	};
   b7100:	2520      	movs	r5, #32
   b7102:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7104:	4905      	ldr	r1, [pc, #20]	; (b711c <_Z17acquireWireBufferv+0x30>)
	};
   b7106:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7108:	4628      	mov	r0, r5
   b710a:	f000 f86f 	bl	b71ec <_ZnajRKSt9nothrow_t>
	};
   b710e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7112:	4620      	mov	r0, r4
   b7114:	bd38      	pop	{r3, r4, r5, pc}
   b7116:	bf00      	nop
   b7118:	00010018 	.word	0x00010018
   b711c:	000b8034 	.word	0x000b8034

000b7120 <_Z19__fetch_global_Wirev>:
{
   b7120:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7122:	4d0e      	ldr	r5, [pc, #56]	; (b715c <_Z19__fetch_global_Wirev+0x3c>)
   b7124:	7829      	ldrb	r1, [r5, #0]
   b7126:	f3bf 8f5b 	dmb	ish
   b712a:	f011 0401 	ands.w	r4, r1, #1
{
   b712e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7130:	d111      	bne.n	b7156 <_Z19__fetch_global_Wirev+0x36>
   b7132:	4628      	mov	r0, r5
   b7134:	f7fc ffc2 	bl	b40bc <__cxa_guard_acquire>
   b7138:	b168      	cbz	r0, b7156 <_Z19__fetch_global_Wirev+0x36>
   b713a:	4668      	mov	r0, sp
   b713c:	f7ff ffd6 	bl	b70ec <_Z17acquireWireBufferv>
   b7140:	466a      	mov	r2, sp
   b7142:	4621      	mov	r1, r4
   b7144:	4806      	ldr	r0, [pc, #24]	; (b7160 <_Z19__fetch_global_Wirev+0x40>)
   b7146:	f7ff f82d 	bl	b61a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b714a:	4628      	mov	r0, r5
   b714c:	f7fc ffbb 	bl	b40c6 <__cxa_guard_release>
   b7150:	4804      	ldr	r0, [pc, #16]	; (b7164 <_Z19__fetch_global_Wirev+0x44>)
   b7152:	f000 f84d 	bl	b71f0 <atexit>
	return wire;
}
   b7156:	4802      	ldr	r0, [pc, #8]	; (b7160 <_Z19__fetch_global_Wirev+0x40>)
   b7158:	b007      	add	sp, #28
   b715a:	bd30      	pop	{r4, r5, pc}
   b715c:	2003e72c 	.word	0x2003e72c
   b7160:	2003e730 	.word	0x2003e730
   b7164:	000b70eb 	.word	0x000b70eb

000b7168 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7168:	4770      	bx	lr
	...

000b716c <_Z20acquireSerial1Bufferv>:
{
   b716c:	b538      	push	{r3, r4, r5, lr}
   b716e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7170:	2514      	movs	r5, #20
   b7172:	462a      	mov	r2, r5
   b7174:	2100      	movs	r1, #0
   b7176:	f000 f869 	bl	b724c <memset>
   b717a:	8025      	strh	r5, [r4, #0]
   b717c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b717e:	4907      	ldr	r1, [pc, #28]	; (b719c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7180:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7182:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7184:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7186:	f000 f831 	bl	b71ec <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b718a:	4904      	ldr	r1, [pc, #16]	; (b719c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b718c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b718e:	4628      	mov	r0, r5
   b7190:	f000 f82c 	bl	b71ec <_ZnajRKSt9nothrow_t>
    };
   b7194:	60e0      	str	r0, [r4, #12]
}
   b7196:	4620      	mov	r0, r4
   b7198:	bd38      	pop	{r3, r4, r5, pc}
   b719a:	bf00      	nop
   b719c:	000b8034 	.word	0x000b8034

000b71a0 <_Z22__fetch_global_Serial1v>:
{
   b71a0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b71a2:	4d0e      	ldr	r5, [pc, #56]	; (b71dc <_Z22__fetch_global_Serial1v+0x3c>)
   b71a4:	7829      	ldrb	r1, [r5, #0]
   b71a6:	f3bf 8f5b 	dmb	ish
   b71aa:	f011 0401 	ands.w	r4, r1, #1
{
   b71ae:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b71b0:	d111      	bne.n	b71d6 <_Z22__fetch_global_Serial1v+0x36>
   b71b2:	4628      	mov	r0, r5
   b71b4:	f7fc ff82 	bl	b40bc <__cxa_guard_acquire>
   b71b8:	b168      	cbz	r0, b71d6 <_Z22__fetch_global_Serial1v+0x36>
   b71ba:	a801      	add	r0, sp, #4
   b71bc:	f7ff ffd6 	bl	b716c <_Z20acquireSerial1Bufferv>
   b71c0:	aa01      	add	r2, sp, #4
   b71c2:	4621      	mov	r1, r4
   b71c4:	4806      	ldr	r0, [pc, #24]	; (b71e0 <_Z22__fetch_global_Serial1v+0x40>)
   b71c6:	f7ff fd79 	bl	b6cbc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b71ca:	4628      	mov	r0, r5
   b71cc:	f7fc ff7b 	bl	b40c6 <__cxa_guard_release>
   b71d0:	4804      	ldr	r0, [pc, #16]	; (b71e4 <_Z22__fetch_global_Serial1v+0x44>)
   b71d2:	f000 f80d 	bl	b71f0 <atexit>
    return serial1;
}
   b71d6:	4802      	ldr	r0, [pc, #8]	; (b71e0 <_Z22__fetch_global_Serial1v+0x40>)
   b71d8:	b007      	add	sp, #28
   b71da:	bd30      	pop	{r4, r5, pc}
   b71dc:	2003e744 	.word	0x2003e744
   b71e0:	2003e748 	.word	0x2003e748
   b71e4:	000b7169 	.word	0x000b7169

000b71e8 <_ZnwjRKSt9nothrow_t>:
   b71e8:	f7fc bf53 	b.w	b4092 <_Znwj>

000b71ec <_ZnajRKSt9nothrow_t>:
   b71ec:	f7fc bf53 	b.w	b4096 <_Znaj>

000b71f0 <atexit>:
   b71f0:	2300      	movs	r3, #0
   b71f2:	4601      	mov	r1, r0
   b71f4:	461a      	mov	r2, r3
   b71f6:	4618      	mov	r0, r3
   b71f8:	f000 b866 	b.w	b72c8 <__register_exitproc>

000b71fc <memcpy>:
   b71fc:	440a      	add	r2, r1
   b71fe:	4291      	cmp	r1, r2
   b7200:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7204:	d100      	bne.n	b7208 <memcpy+0xc>
   b7206:	4770      	bx	lr
   b7208:	b510      	push	{r4, lr}
   b720a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b720e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7212:	4291      	cmp	r1, r2
   b7214:	d1f9      	bne.n	b720a <memcpy+0xe>
   b7216:	bd10      	pop	{r4, pc}

000b7218 <memmove>:
   b7218:	4288      	cmp	r0, r1
   b721a:	b510      	push	{r4, lr}
   b721c:	eb01 0402 	add.w	r4, r1, r2
   b7220:	d902      	bls.n	b7228 <memmove+0x10>
   b7222:	4284      	cmp	r4, r0
   b7224:	4623      	mov	r3, r4
   b7226:	d807      	bhi.n	b7238 <memmove+0x20>
   b7228:	1e43      	subs	r3, r0, #1
   b722a:	42a1      	cmp	r1, r4
   b722c:	d008      	beq.n	b7240 <memmove+0x28>
   b722e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7232:	f803 2f01 	strb.w	r2, [r3, #1]!
   b7236:	e7f8      	b.n	b722a <memmove+0x12>
   b7238:	4402      	add	r2, r0
   b723a:	4601      	mov	r1, r0
   b723c:	428a      	cmp	r2, r1
   b723e:	d100      	bne.n	b7242 <memmove+0x2a>
   b7240:	bd10      	pop	{r4, pc}
   b7242:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b7246:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b724a:	e7f7      	b.n	b723c <memmove+0x24>

000b724c <memset>:
   b724c:	4402      	add	r2, r0
   b724e:	4603      	mov	r3, r0
   b7250:	4293      	cmp	r3, r2
   b7252:	d100      	bne.n	b7256 <memset+0xa>
   b7254:	4770      	bx	lr
   b7256:	f803 1b01 	strb.w	r1, [r3], #1
   b725a:	e7f9      	b.n	b7250 <memset+0x4>

000b725c <srand>:
   b725c:	b538      	push	{r3, r4, r5, lr}
   b725e:	4b10      	ldr	r3, [pc, #64]	; (b72a0 <srand+0x44>)
   b7260:	681d      	ldr	r5, [r3, #0]
   b7262:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7264:	4604      	mov	r4, r0
   b7266:	b9b3      	cbnz	r3, b7296 <srand+0x3a>
   b7268:	2018      	movs	r0, #24
   b726a:	f7fe fee1 	bl	b6030 <malloc>
   b726e:	4602      	mov	r2, r0
   b7270:	63a8      	str	r0, [r5, #56]	; 0x38
   b7272:	b920      	cbnz	r0, b727e <srand+0x22>
   b7274:	4b0b      	ldr	r3, [pc, #44]	; (b72a4 <srand+0x48>)
   b7276:	480c      	ldr	r0, [pc, #48]	; (b72a8 <srand+0x4c>)
   b7278:	2142      	movs	r1, #66	; 0x42
   b727a:	f7fe fef9 	bl	b6070 <__assert_func>
   b727e:	490b      	ldr	r1, [pc, #44]	; (b72ac <srand+0x50>)
   b7280:	4b0b      	ldr	r3, [pc, #44]	; (b72b0 <srand+0x54>)
   b7282:	e9c0 1300 	strd	r1, r3, [r0]
   b7286:	4b0b      	ldr	r3, [pc, #44]	; (b72b4 <srand+0x58>)
   b7288:	6083      	str	r3, [r0, #8]
   b728a:	230b      	movs	r3, #11
   b728c:	8183      	strh	r3, [r0, #12]
   b728e:	2100      	movs	r1, #0
   b7290:	2001      	movs	r0, #1
   b7292:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7296:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7298:	2200      	movs	r2, #0
   b729a:	611c      	str	r4, [r3, #16]
   b729c:	615a      	str	r2, [r3, #20]
   b729e:	bd38      	pop	{r3, r4, r5, pc}
   b72a0:	2003e5e8 	.word	0x2003e5e8
   b72a4:	000b8035 	.word	0x000b8035
   b72a8:	000b804c 	.word	0x000b804c
   b72ac:	abcd330e 	.word	0xabcd330e
   b72b0:	e66d1234 	.word	0xe66d1234
   b72b4:	0005deec 	.word	0x0005deec

000b72b8 <strlen>:
   b72b8:	4603      	mov	r3, r0
   b72ba:	f813 2b01 	ldrb.w	r2, [r3], #1
   b72be:	2a00      	cmp	r2, #0
   b72c0:	d1fb      	bne.n	b72ba <strlen+0x2>
   b72c2:	1a18      	subs	r0, r3, r0
   b72c4:	3801      	subs	r0, #1
   b72c6:	4770      	bx	lr

000b72c8 <__register_exitproc>:
   b72c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b72cc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7388 <__register_exitproc+0xc0>
   b72d0:	4606      	mov	r6, r0
   b72d2:	f8d8 0000 	ldr.w	r0, [r8]
   b72d6:	461f      	mov	r7, r3
   b72d8:	460d      	mov	r5, r1
   b72da:	4691      	mov	r9, r2
   b72dc:	f000 f856 	bl	b738c <__retarget_lock_acquire_recursive>
   b72e0:	4b25      	ldr	r3, [pc, #148]	; (b7378 <__register_exitproc+0xb0>)
   b72e2:	681c      	ldr	r4, [r3, #0]
   b72e4:	b934      	cbnz	r4, b72f4 <__register_exitproc+0x2c>
   b72e6:	4c25      	ldr	r4, [pc, #148]	; (b737c <__register_exitproc+0xb4>)
   b72e8:	601c      	str	r4, [r3, #0]
   b72ea:	4b25      	ldr	r3, [pc, #148]	; (b7380 <__register_exitproc+0xb8>)
   b72ec:	b113      	cbz	r3, b72f4 <__register_exitproc+0x2c>
   b72ee:	681b      	ldr	r3, [r3, #0]
   b72f0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b72f4:	6863      	ldr	r3, [r4, #4]
   b72f6:	2b1f      	cmp	r3, #31
   b72f8:	dd07      	ble.n	b730a <__register_exitproc+0x42>
   b72fa:	f8d8 0000 	ldr.w	r0, [r8]
   b72fe:	f000 f847 	bl	b7390 <__retarget_lock_release_recursive>
   b7302:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b730a:	b34e      	cbz	r6, b7360 <__register_exitproc+0x98>
   b730c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7310:	b988      	cbnz	r0, b7336 <__register_exitproc+0x6e>
   b7312:	4b1c      	ldr	r3, [pc, #112]	; (b7384 <__register_exitproc+0xbc>)
   b7314:	b923      	cbnz	r3, b7320 <__register_exitproc+0x58>
   b7316:	f8d8 0000 	ldr.w	r0, [r8]
   b731a:	f000 f838 	bl	b738e <__retarget_lock_release>
   b731e:	e7f0      	b.n	b7302 <__register_exitproc+0x3a>
   b7320:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7324:	f7fe fe84 	bl	b6030 <malloc>
   b7328:	2800      	cmp	r0, #0
   b732a:	d0f4      	beq.n	b7316 <__register_exitproc+0x4e>
   b732c:	2300      	movs	r3, #0
   b732e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7332:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7336:	6863      	ldr	r3, [r4, #4]
   b7338:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b733c:	2201      	movs	r2, #1
   b733e:	409a      	lsls	r2, r3
   b7340:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7344:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7348:	4313      	orrs	r3, r2
   b734a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b734e:	2e02      	cmp	r6, #2
   b7350:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7354:	bf02      	ittt	eq
   b7356:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b735a:	4313      	orreq	r3, r2
   b735c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7360:	6863      	ldr	r3, [r4, #4]
   b7362:	f8d8 0000 	ldr.w	r0, [r8]
   b7366:	1c5a      	adds	r2, r3, #1
   b7368:	3302      	adds	r3, #2
   b736a:	6062      	str	r2, [r4, #4]
   b736c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7370:	f000 f80e 	bl	b7390 <__retarget_lock_release_recursive>
   b7374:	2000      	movs	r0, #0
   b7376:	e7c6      	b.n	b7306 <__register_exitproc+0x3e>
   b7378:	2003e7e8 	.word	0x2003e7e8
   b737c:	2003e75c 	.word	0x2003e75c
   b7380:	00000000 	.word	0x00000000
   b7384:	000b6031 	.word	0x000b6031
   b7388:	2003e64c 	.word	0x2003e64c

000b738c <__retarget_lock_acquire_recursive>:
   b738c:	4770      	bx	lr

000b738e <__retarget_lock_release>:
   b738e:	4770      	bx	lr

000b7390 <__retarget_lock_release_recursive>:
   b7390:	4770      	bx	lr

000b7392 <link_code_end>:
	...

000b7394 <dynalib_user>:
   b7394:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b73a4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b73b4:	7620 7269 7574 6c61 2500 2f73 7325 002f      virtual.%s/%s/.
   b73c4:	7553 7362 7263 6269 6e69 2067 6f74 2520     Subscribing to %
   b73d4:	0a73 2e00 0a00 000a 6944 7473 6e61 6563     s.......Distance
   b73e4:	5220 6165 2064 7369 2520 0a69 3000 2f34      Read is %i..04/
   b73f4:	3931 322f 3230 0a33 3530 303a 5032 3620     19/2023.05:02P 6
   b7404:	4638 4c0a 574f 203a 3235 2046 4820 4749     8F.LOW: 52F  HIG
   b7414:	3a48 3720 4632 000a 5445 0a41 3530 343a     H: 72F..ETA.05:4
   b7424:	5035 3a20 5220 6465 696c 656e 300a 3a36     5P : Redline.06:
   b7434:	3534 3a20 2320 3636 300a 3a36 3030 2050     45 : #66.06:00P 
   b7444:	6152 6c69 5220 6e75 656e 0a72 4c00 7665     Rail Runner..Lev
   b7454:	6c65 3020 200a 6156 756c 2065 6925 000a     el 0. Value %i..
   b7464:	654c 6576 206c 0a31 5620 6c61 6575 2520     Level 1. Value %
   b7474:	0a69 4c00 7665 6c65 3220 200a 6156 756c     i..Level 2. Valu
   b7484:	2065 6925 000a 654c 6576 206c 0a33 5620     e %i..Level 3. V
   b7494:	6c61 6575 2520 0a69 4c00 7665 6c65 3420     alue %i..Level 4
   b74a4:	200a 6156 756c 2065 6925 000a 654c 6576     . Value %i..Leve
   b74b4:	206c 0a35 5620 6c61 6575 2520 0a69 4c00     l 5. Value %i..L
   b74c4:	7665 6c65 3620 200a 6156 756c 2065 6925     evel 6. Value %i
   b74d4:	000a 656b 3d79 7325 7620 6c61 6575 253d     ..key=%s value=%
   b74e4:	0a73 2500 2073 7325 000a 6547 5774 6165     s..%s %s..GetWea
   b74f4:	6874 7265 6144 6174 3400 6438 3435 6162     therData.48d54ba
   b7504:	6436 3039 3732 3038 3437 6138 3437 6430     6d902780748a740d
   b7514:	6438 6332 3930 3733 0061                    8d2c0937a.

000b751e <_ZL6QRcode>:
   b751e:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b752e:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b753e:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b754e:	ffff ffff 00e0 7860 0618 0700 ffff ffff     ......`x........
   b755e:	ffff ffff 00e0 7860 0618 0700 ffff ffff     ......`x........
   b756e:	ffff ffff fee7 6166 66e0 e77f ffff ffff     ......fa.f......
   b757e:	ffff ffff fee7 6166 66e0 e77f ffff ffff     ......fa.f......
   b758e:	ffff ffff 06e6 677e fee7 6760 ffff ffff     ......~g..`g....
   b759e:	ffff ffff 06e6 677e fee7 6760 ffff ffff     ......~g..`g....
   b75ae:	ffff ffff 06e6 9e67 fe19 6760 ffff ffff     ......g...`g....
   b75be:	ffff ffff 06e6 9e67 fe19 6760 ffff ffff     ......g...`g....
   b75ce:	ffff ffff 06e6 fe79 9e61 6760 ffff ffff     ......y.a.`g....
   b75de:	ffff ffff 06e6 fe79 9e61 6760 ffff ffff     ......y.a.`g....
   b75ee:	ffff ffff fee7 997f 1e86 e77f ffff ffff     ................
   b75fe:	ffff ffff fee7 997f 1e86 e77f ffff ffff     ................
   b760e:	ffff ffff 00e0 6666 6666 0700 ffff ffff     ......ffff......
   b761e:	ffff ffff 00e0 6666 6666 0700 ffff ffff     ......ffff......
   b762e:	ffff ffff ffff e7e1 0780 ffff ffff ffff     ................
   b763e:	ffff ffff ffff e7e1 0780 ffff ffff ffff     ................
   b764e:	ffff ffff 18e6 f919 1e98 8779 ffff ffff     ..........y.....
   b765e:	ffff ffff 18e6 f919 1e98 8779 ffff ffff     ..........y.....
   b766e:	ffff ffff 61fe f887 001e e707 ffff ffff     .....a..........
   b767e:	ffff ffff 61fe f887 001e e707 ffff ffff     .....a..........
   b768e:	ffff ffff 18fe 611e ffe1 1ffe ffff ffff     .......a........
   b769e:	ffff ffff 18fe 611e ffe1 1ffe ffff ffff     .......a........
   b76ae:	ffff ffff 07fe ffe7 07e6 e79f ffff ffff     ................
   b76be:	ffff ffff 07fe ffe7 07e6 e79f ffff ffff     ................
   b76ce:	ffff ffff 66e6 8679 e719 7ff8 ffff ffff     .....fy.........
   b76de:	ffff ffff 66e6 8679 e719 7ff8 ffff ffff     .....fy.........
   b76ee:	ffff ffff e1f9 66e0 1e60 077e ffff ffff     .......f`.~.....
   b76fe:	ffff ffff e1f9 66e0 1e60 077e ffff ffff     .......f`.~.....
   b770e:	ffff ffff 66fe 817f 9887 071e ffff ffff     .....f..........
   b771e:	ffff ffff 66fe 817f 9887 071e ffff ffff     .....f..........
   b772e:	ffff ffff e7f9 8681 1f66 9f87 ffff ffff     ........f.......
   b773e:	ffff ffff e7f9 8681 1f66 9f87 ffff ffff     ........f.......
   b774e:	ffff ffff 1ef8 8661 611e 9fe1 ffff ffff     ......a..a......
   b775e:	ffff ffff 1ef8 8661 611e 9fe1 ffff ffff     ......a..a......
   b776e:	ffff ffff f9f9 fe99 6766 1f98 ffff ffff     ........fg......
   b777e:	ffff ffff f9f9 fe99 6766 1f98 ffff ffff     ........fg......
   b778e:	ffff ffff 06e6 0000 7e06 7f66 ffff ffff     .........~f.....
   b779e:	ffff ffff 06e6 0000 7e06 7f66 ffff ffff     .........~f.....
   b77ae:	ffff ffff 67fe 80ff 9e01 7f66 ffff ffff     .....g....f.....
   b77be:	ffff ffff 67fe 80ff 9e01 7f66 ffff ffff     .....g....f.....
   b77ce:	ffff ffff 60f8 1860 6000 7f00 ffff ffff     .....``..`......
   b77de:	ffff ffff 60f8 1860 6000 7f00 ffff ffff     .....``..`......
   b77ee:	ffff ffff ffff 67e0 e7ff 07e0 ffff ffff     .......g........
   b77fe:	ffff ffff ffff 67e0 e7ff 07e0 ffff ffff     .......g........
   b780e:	ffff ffff 00e0 e667 8667 9f61 ffff ffff     ......g.g.a.....
   b781e:	ffff ffff 00e0 e667 8667 9f61 ffff ffff     ......g.g.a.....
   b782e:	ffff ffff fee7 1866 071e e7e1 ffff ffff     ......f.........
   b783e:	ffff ffff fee7 1866 071e e7e1 ffff ffff     ......f.........
   b784e:	ffff ffff 06e6 7f78 60f8 1f06 ffff ffff     ......x..`......
   b785e:	ffff ffff 06e6 7f78 60f8 1f06 ffff ffff     ......x..`......
   b786e:	ffff ffff 06e6 e761 e187 e781 ffff ffff     ......a.........
   b787e:	ffff ffff 06e6 e761 e187 e781 ffff ffff     ......a.........
   b788e:	ffff ffff 06e6 9961 07f8 679e ffff ffff     ......a....g....
   b789e:	ffff ffff 06e6 9961 07f8 679e ffff ffff     ......a....g....
   b78ae:	ffff ffff fee7 8079 611e 9f99 ffff ffff     ......y..a......
   b78be:	ffff ffff fee7 8079 611e 9f99 ffff ffff     ......y..a......
   b78ce:	ffff ffff 00e0 7f66 009e 9f7f ffff ffff     ......f.........
   b78de:	ffff ffff 00e0 7f66 009e 9f7f ffff ffff     ......f.........
   b78ee:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b78fe:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
   b790e:	ffff ffff ffff ffff ffff ffff ffff ffff     ................
	...

000b7920 <CSWTCH.88>:
   b7920:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   b7930:	0050 0000                                   P...

000b7934 <_ZL4font>:
   b7934:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b7944:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b7954:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b7964:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b7974:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b7984:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b7994:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b79a4:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b79b4:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b79c4:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b79d4:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b79e4:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b79f4:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b7a04:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b7a14:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b7a24:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b7a34:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b7a44:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b7a54:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b7a64:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b7a74:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b7a84:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b7a94:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b7aa4:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b7ab4:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b7ac4:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b7ad4:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b7ae4:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b7af4:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b7b04:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b7b14:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b7b24:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b7b34:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b7b44:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b7b54:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b7b64:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b7b74:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b7b84:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b7b94:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b7ba4:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b7bb4:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b7bc4:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b7bd4:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b7be4:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b7bf4:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b7c04:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b7c14:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b7c24:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b7c34:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b7c44:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b7c54:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b7c64:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b7c74:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b7c84:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b7c94:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b7ca4:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b7cb4:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b7cc4:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b7cd4:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b7ce4:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b7cf4:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b7d04:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b7d14:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b7d24:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b7d34:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b7d44:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b7d54:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b7d64:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b7d74:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b7d84:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b7d94:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b7da4:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b7db4:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b7dc4:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b7dd4:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b7de4:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b7df4:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b7e04:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b7e14:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b7e24:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000b7e30 <_ZTV12Adafruit_GFX>:
	...
   b7e40:	53ad 000b 6861 000b 40a5 000b 5031 000b     .S..ah...@..1P..
   b7e50:	5157 000b 5173 000b 50ef 000b 518d 000b     WQ..sQ...P...Q..
   b7e60:	51c3 000b 51df 000b                         .Q...Q..

000b7e68 <_ZTV16Adafruit_SSD1306>:
	...
   b7e70:	5739 000b 57c9 000b 53ad 000b 6861 000b     9W...W...S..ah..
   b7e80:	573d 000b 5031 000b 55c5 000b 5455 000b     =W..1P...U..UT..
   b7e90:	50ef 000b 518d 000b 51c3 000b 51df 000b     .P...Q...Q...Q..

000b7ea0 <_ZTVN5spark13EthernetClassE>:
	...
   b7ea8:	612f 000b 6125 000b 611b 000b 6111 000b     /a..%a...a...a..
   b7eb8:	6105 000b 60f9 000b 673d 000b 6745 000b     .a...`..=g..Eg..
   b7ec8:	60ed 000b 60e5 000b 60db 000b 60d1 000b     .`...`...`...`..
   b7ed8:	6775 000b                                   ug..

000b7edc <_ZTV7TwoWire>:
	...
   b7ee4:	614d 000b 6197 000b 616f 000b 614f 000b     Ma...a..oa..Oa..
   b7ef4:	6177 000b 617f 000b 6187 000b 618f 000b     wa...a...a...a..

000b7f04 <_ZTV9IPAddress>:
	...
   b7f0c:	6219 000b 6209 000b 620b 000b               .b...b...b..

000b7f18 <_ZTVSt15_Sp_counted_ptrIPN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7f20:	6327 000b 632d 000b 6343 000b 633b 000b     'c..-c..Cc..;c..
   b7f30:	6329 000b 7061 0070                         )c..app.

000b7f38 <_ZTVN5spark12NetworkClassE>:
	...
   b7f40:	66fd 000b 6707 000b 6711 000b 671b 000b     .f...g...g...g..
   b7f50:	6725 000b 6731 000b 673d 000b 6745 000b     %g..1g..=g..Eg..
   b7f60:	674d 000b 6759 000b 6761 000b 676b 000b     Mg..Yg..ag..kg..
   b7f70:	6775 000b                                   ug..

000b7f74 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b7f74:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b7f84:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b7f94:	6d69 0065                                   ime.

000b7f98 <_ZTV11USARTSerial>:
	...
   b7fa0:	6c41 000b 6cad 000b 6c85 000b 6861 000b     Al...l...l..ah..
   b7fb0:	6c55 000b 6c71 000b 6c63 000b 6c7f 000b     Ul..ql..cl...l..
   b7fc0:	6c43 000b 6c47 000b                         Cl..Gl..

000b7fc8 <_ZTV9USBSerial>:
	...
   b7fd0:	6ceb 000b 6d53 000b 6d29 000b 6861 000b     .l..Sm..)m..ah..
   b7fe0:	6d1b 000b 6ced 000b 6cfd 000b 6d4d 000b     .m...l...l..Mm..
   b7ff0:	6d0d 000b 6ce5 000b                         .m...l..

000b7ff8 <_ZTVN5spark9WiFiClassE>:
	...
   b8000:	6e53 000b 6e49 000b 6e3f 000b 6df5 000b     Sn..In..?n...m..
   b8010:	6e33 000b 6e27 000b 673d 000b 6745 000b     3n..'n..=g..Eg..
   b8020:	6e1b 000b 6e13 000b 6e09 000b 6dff 000b     .n...n...n...m..
   b8030:	6775 000b                                   ug..

000b8034 <_ZSt7nothrow>:
   b8034:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b8044:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b8054:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b8064:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b8074:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b8084:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b8094:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b80a5 <link_const_variable_data_end>:
   b80a5:	00          	.byte	0x00
	...

000b80a8 <link_constructors_location>:
   b80a8:	000b4af5 	.word	0x000b4af5
   b80ac:	000b5021 	.word	0x000b5021
   b80b0:	000b60c1 	.word	0x000b60c1
   b80b4:	000b6139 	.word	0x000b6139
   b80b8:	000b66ed 	.word	0x000b66ed
   b80bc:	000b684d 	.word	0x000b684d
   b80c0:	000b696d 	.word	0x000b696d
   b80c4:	000b6c09 	.word	0x000b6c09
   b80c8:	000b6c2d 	.word	0x000b6c2d
   b80cc:	000b6e5d 	.word	0x000b6e5d
