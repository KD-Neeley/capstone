
/Users/kdneeley/Documents/IoT/capstone/prototype_solarPoweredParkBench/target/4.0.2/argon/prototype_solarPoweredParkBench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003da4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7dc0  000b7dc0  00007dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7de4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000480  2003e1a0  000b7de8  0001e1a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001d0  2003e620  2003e620  0002e620  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b8268  000b8268  00028268  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b8290  000b8290  00028290  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0011b451  00000000  00000000  00028294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00013b74  00000000  00000000  001436e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0003bfbd  00000000  00000000  00157259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002fb8  00000000  00000000  00193216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000a778  00000000  00000000  001961ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a212  00000000  00000000  001a0946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000433c3  00000000  00000000  001dab58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013475b  00000000  00000000  0021df1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000086d8  00000000  00000000  00352678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 f95d 	bl	b72ec <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 f965 	bl	b7308 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e1a0 	.word	0x2003e1a0
   b4048:	000b7de8 	.word	0x000b7de8
   b404c:	2003e620 	.word	0x2003e620
   b4050:	2003e620 	.word	0x2003e620
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 fed9 	bl	b6e14 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b7d98 	.word	0x000b7d98
   b407c:	000b7dc0 	.word	0x000b7dc0

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b830 	b.w	b40e4 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f8b9 	bl	b41fc <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 be79 	b.w	b6d84 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 be65 	b.w	b5d60 <malloc>

000b4096 <_Znaj>:
   b4096:	f001 be63 	b.w	b5d60 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 be69 	b.w	b5d70 <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f001 fdb6 	bl	b5c18 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b5879 	.word	0x000b5879
   b40b4:	000b7478 	.word	0x000b7478

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40c8:	b40e      	push	{r1, r2, r3}
   b40ca:	b503      	push	{r0, r1, lr}
   b40cc:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40ce:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40d0:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40d4:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b40d6:	f002 f8c0 	bl	b625a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b40da:	b002      	add	sp, #8
   b40dc:	f85d eb04 	ldr.w	lr, [sp], #4
   b40e0:	b003      	add	sp, #12
   b40e2:	4770      	bx	lr

000b40e4 <setup>:
int movingTradRainbow (int startPixel, int endPixel, int hexColor);


SYSTEM_MODE(SEMI_AUTOMATIC);

void setup() {
   b40e4:	b538      	push	{r3, r4, r5, lr}
    Serial.begin(9600);
   b40e6:	f002 fdc7 	bl	b6c78 <_Z16_fetch_usbserialv>
   b40ea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40ee:	f002 fdb3 	bl	b6c58 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b40f2:	2000      	movs	r0, #0
   b40f4:	f001 fbd8 	bl	b58a8 <hal_timer_millis>
        while (_while() && !_condition()) {
   b40f8:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b40fc:	4604      	mov	r4, r0
   b40fe:	2000      	movs	r0, #0
   b4100:	f001 fbd2 	bl	b58a8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4104:	1b00      	subs	r0, r0, r4
   b4106:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b410a:	42a8      	cmp	r0, r5
   b410c:	f171 0300 	sbcs.w	r3, r1, #0
   b4110:	d207      	bcs.n	b4122 <setup+0x3e>
    waitFor(Serial.isConnected, 15000);
   b4112:	f002 fdb1 	bl	b6c78 <_Z16_fetch_usbserialv>
   b4116:	f002 fda3 	bl	b6c60 <_ZN9USBSerial11isConnectedEv>
   b411a:	b910      	cbnz	r0, b4122 <setup+0x3e>
            spark_process();
   b411c:	f001 fdb0 	bl	b5c80 <spark_process>
        while (_while() && !_condition()) {
   b4120:	e7ed      	b.n	b40fe <setup+0x1a>
   b4122:	f002 fda9 	bl	b6c78 <_Z16_fetch_usbserialv>
   b4126:	f002 fd9b 	bl	b6c60 <_ZN9USBSerial11isConnectedEv>
    pixel.begin();
   b412a:	481d      	ldr	r0, [pc, #116]	; (b41a0 <setup+0xbc>)
   b412c:	f000 fbd7 	bl	b48de <_ZN17Adafruit_NeoPixel5beginEv>
    //initialize Sound Input
   // Define our pin modes
    pinMode(STROBE, OUTPUT);
   b4130:	2101      	movs	r1, #1
   b4132:	2010      	movs	r0, #16
   b4134:	f002 fede 	bl	b6ef4 <pinMode>
    pinMode(RESETPIN, OUTPUT);
   b4138:	2101      	movs	r1, #1
   b413a:	2011      	movs	r0, #17
   b413c:	f002 feda 	bl	b6ef4 <pinMode>
    pinMode(OUT, INPUT);
   b4140:	2100      	movs	r1, #0
   b4142:	200f      	movs	r0, #15
   b4144:	f002 fed6 	bl	b6ef4 <pinMode>
 
// Initialize the Sound Sensor Pins
    digitalWrite(RESETPIN, LOW);
   b4148:	2100      	movs	r1, #0
   b414a:	2011      	movs	r0, #17
   b414c:	f002 fee3 	bl	b6f16 <digitalWrite>
    digitalWrite(STROBE, LOW);
   b4150:	2100      	movs	r1, #0
   b4152:	2010      	movs	r0, #16
   b4154:	f002 fedf 	bl	b6f16 <digitalWrite>
    delay(1);
   b4158:	2001      	movs	r0, #1
   b415a:	f001 fe39 	bl	b5dd0 <delay>
 
  // Reset MSGEQ7 
    digitalWrite(RESETPIN, HIGH);
   b415e:	2101      	movs	r1, #1
   b4160:	2011      	movs	r0, #17
   b4162:	f002 fed8 	bl	b6f16 <digitalWrite>
    delay(1);
   b4166:	2001      	movs	r0, #1
   b4168:	f001 fe32 	bl	b5dd0 <delay>
    digitalWrite(RESETPIN, LOW);
   b416c:	2100      	movs	r1, #0
   b416e:	2011      	movs	r0, #17
   b4170:	f002 fed1 	bl	b6f16 <digitalWrite>
    digitalWrite(STROBE, HIGH); 
   b4174:	2101      	movs	r1, #1
   b4176:	2010      	movs	r0, #16
   b4178:	f002 fecd 	bl	b6f16 <digitalWrite>
    delay(1);
   b417c:	2001      	movs	r0, #1
   b417e:	f001 fe27 	bl	b5dd0 <delay>

//Initialize the OLED
    myDisplay.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4182:	2102      	movs	r1, #2
   b4184:	4807      	ldr	r0, [pc, #28]	; (b41a4 <setup+0xc0>)
   b4186:	223c      	movs	r2, #60	; 0x3c
   b4188:	f001 fa8e 	bl	b56a8 <_ZN16Adafruit_SSD13065beginEhh>
    myDisplay.clearDisplay();
   b418c:	4805      	ldr	r0, [pc, #20]	; (b41a4 <setup+0xc0>)
   b418e:	f001 f9a3 	bl	b54d8 <_ZN16Adafruit_SSD130612clearDisplayEv>

//Initialize the IR Distance Sensor
    pinMode(MOTIONSENSOR, INPUT);
    

}
   b4192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    pinMode(MOTIONSENSOR, INPUT);
   b4196:	2100      	movs	r1, #0
   b4198:	2012      	movs	r0, #18
   b419a:	f002 beab 	b.w	b6ef4 <pinMode>
   b419e:	bf00      	nop
   b41a0:	2003e674 	.word	0x2003e674
   b41a4:	2003e650 	.word	0x2003e650

000b41a8 <_Z9pixelFilliiii>:
    
}

////FUNCTION DEFINITIONS
//NEOPIXEL FUNCTIONS
int pixelFill(int startPixel, int endPixel, int brightness, int hexColor) {
   b41a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b41aa:	4604      	mov	r4, r0
            pixel.clear();
   b41ac:	4812      	ldr	r0, [pc, #72]	; (b41f8 <_Z9pixelFilliiii+0x50>)
int pixelFill(int startPixel, int endPixel, int brightness, int hexColor) {
   b41ae:	4617      	mov	r7, r2
   b41b0:	460d      	mov	r5, r1
   b41b2:	461e      	mov	r6, r3
            pixel.clear();
   b41b4:	f000 fde2 	bl	b4d7c <_ZN17Adafruit_NeoPixel5clearEv>
            pixel.show();
   b41b8:	480f      	ldr	r0, [pc, #60]	; (b41f8 <_Z9pixelFilliiii+0x50>)
   b41ba:	f000 fbc9 	bl	b4950 <_ZN17Adafruit_NeoPixel4showEv>
            pixel.setBrightness(brightness);
   b41be:	b2f9      	uxtb	r1, r7
   b41c0:	480d      	ldr	r0, [pc, #52]	; (b41f8 <_Z9pixelFilliiii+0x50>)
            for(int i = startPixel; i < endPixel; i++) {
                pixel.setPixelColor(i, hexColor);
   b41c2:	4f0d      	ldr	r7, [pc, #52]	; (b41f8 <_Z9pixelFilliiii+0x50>)
            pixel.setBrightness(brightness);
   b41c4:	f000 fdb3 	bl	b4d2e <_ZN17Adafruit_NeoPixel13setBrightnessEh>
            for(int i = startPixel; i < endPixel; i++) {
   b41c8:	42ac      	cmp	r4, r5
   b41ca:	da06      	bge.n	b41da <_Z9pixelFilliiii+0x32>
                pixel.setPixelColor(i, hexColor);
   b41cc:	b2a1      	uxth	r1, r4
   b41ce:	4632      	mov	r2, r6
   b41d0:	4638      	mov	r0, r7
   b41d2:	f000 fd69 	bl	b4ca8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
            for(int i = startPixel; i < endPixel; i++) {
   b41d6:	3401      	adds	r4, #1
   b41d8:	e7f6      	b.n	b41c8 <_Z9pixelFilliiii+0x20>
            }
            pixel.show();
   b41da:	4807      	ldr	r0, [pc, #28]	; (b41f8 <_Z9pixelFilliiii+0x50>)
   b41dc:	f000 fbb8 	bl	b4950 <_ZN17Adafruit_NeoPixel4showEv>
            delay(100);
   b41e0:	2064      	movs	r0, #100	; 0x64
   b41e2:	f001 fdf5 	bl	b5dd0 <delay>
            pixel.clear();
   b41e6:	4804      	ldr	r0, [pc, #16]	; (b41f8 <_Z9pixelFilliiii+0x50>)
   b41e8:	f000 fdc8 	bl	b4d7c <_ZN17Adafruit_NeoPixel5clearEv>
            pixel.show();
   b41ec:	4802      	ldr	r0, [pc, #8]	; (b41f8 <_Z9pixelFilliiii+0x50>)
   b41ee:	f000 fbaf 	bl	b4950 <_ZN17Adafruit_NeoPixel4showEv>

            return(endPixel);
}
   b41f2:	4628      	mov	r0, r5
   b41f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b41f6:	bf00      	nop
   b41f8:	2003e674 	.word	0x2003e674

000b41fc <loop>:
void loop() {
   b41fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    distance = analogRead(MOTIONSENSOR); //Get Distance to determine if the program will run given a presence
   b4200:	2012      	movs	r0, #18
   b4202:	f002 fea1 	bl	b6f48 <analogRead>
   b4206:	4d9d      	ldr	r5, [pc, #628]	; (b447c <loop+0x280>)
   b4208:	4f9d      	ldr	r7, [pc, #628]	; (b4480 <loop+0x284>)
   b420a:	6028      	str	r0, [r5, #0]
    Serial.printf("Distance = %i\n", distance); //Troubleshoot: Print Distance
   b420c:	f002 fd34 	bl	b6c78 <_Z16_fetch_usbserialv>
   b4210:	682a      	ldr	r2, [r5, #0]
   b4212:	499c      	ldr	r1, [pc, #624]	; (b4484 <loop+0x288>)
   b4214:	f7ff ff58 	bl	b40c8 <_ZN5Print6printfEPKcz>
   b4218:	46b8      	mov	r8, r7
    for(int i = 0; i < 7; i++) {
   b421a:	2600      	movs	r6, #0
   b421c:	463c      	mov	r4, r7
        digitalWrite(STROBE, LOW);
   b421e:	2100      	movs	r1, #0
   b4220:	2010      	movs	r0, #16
   b4222:	f002 fe78 	bl	b6f16 <digitalWrite>
        delay(1);
   b4226:	2001      	movs	r0, #1
   b4228:	f001 fdd2 	bl	b5dd0 <delay>
        soundLevel[i] = analogRead(OUT);
   b422c:	200f      	movs	r0, #15
   b422e:	f002 fe8b 	bl	b6f48 <analogRead>
        digitalWrite(STROBE, HIGH);
   b4232:	2101      	movs	r1, #1
        soundLevel[i] = analogRead(OUT);
   b4234:	f848 0b04 	str.w	r0, [r8], #4
        digitalWrite(STROBE, HIGH);
   b4238:	2010      	movs	r0, #16
   b423a:	f002 fe6c 	bl	b6f16 <digitalWrite>
    for(int i = 0; i < 7; i++) {
   b423e:	3601      	adds	r6, #1
        delay(1); 
   b4240:	2001      	movs	r0, #1
   b4242:	f001 fdc5 	bl	b5dd0 <delay>
    for(int i = 0; i < 7; i++) {
   b4246:	2e07      	cmp	r6, #7
   b4248:	d1e9      	bne.n	b421e <loop+0x22>
        Serial.printf("Level %i\n Value %i\n", i, soundLevel[i]);
   b424a:	f8df 824c 	ldr.w	r8, [pc, #588]	; b4498 <loop+0x29c>
    for(int i=0; i<7; i++) {
   b424e:	2600      	movs	r6, #0
        Serial.printf("Level %i\n Value %i\n", i, soundLevel[i]);
   b4250:	f002 fd12 	bl	b6c78 <_Z16_fetch_usbserialv>
   b4254:	4632      	mov	r2, r6
   b4256:	f857 3b04 	ldr.w	r3, [r7], #4
   b425a:	4641      	mov	r1, r8
    for(int i=0; i<7; i++) {
   b425c:	3601      	adds	r6, #1
        Serial.printf("Level %i\n Value %i\n", i, soundLevel[i]);
   b425e:	f7ff ff33 	bl	b40c8 <_ZN5Print6printfEPKcz>
    for(int i=0; i<7; i++) {
   b4262:	2e07      	cmp	r6, #7
   b4264:	d1f4      	bne.n	b4250 <loop+0x54>
    if(distance > distanceThreshold) { //if a presence is sensed run the program {
   b4266:	4b88      	ldr	r3, [pc, #544]	; (b4488 <loop+0x28c>)
   b4268:	682a      	ldr	r2, [r5, #0]
   b426a:	681b      	ldr	r3, [r3, #0]
   b426c:	429a      	cmp	r2, r3
   b426e:	f340 82e4 	ble.w	b483a <loop+0x63e>
        myDisplay.setRotation(2);
   b4272:	4886      	ldr	r0, [pc, #536]	; (b448c <loop+0x290>)
   b4274:	2102      	movs	r1, #2
   b4276:	f000 ff42 	bl	b50fe <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor (8,1);
   b427a:	2201      	movs	r2, #1
   b427c:	4883      	ldr	r0, [pc, #524]	; (b448c <loop+0x290>)
   b427e:	2108      	movs	r1, #8
   b4280:	f000 ff30 	bl	b50e4 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.setTextSize(2);
   b4284:	4881      	ldr	r0, [pc, #516]	; (b448c <loop+0x290>)
   b4286:	2102      	movs	r1, #2
   b4288:	f000 ff2f 	bl	b50ea <_ZN12Adafruit_GFX11setTextSizeEh>
        myDisplay.setTextColor(WHITE);
   b428c:	487f      	ldr	r0, [pc, #508]	; (b448c <loop+0x290>)
   b428e:	2101      	movs	r1, #1
   b4290:	f000 ff30 	bl	b50f4 <_ZN12Adafruit_GFX12setTextColorEt>
        myDisplay.printf("Distance = %i\n", distance); //Troublehsoot: Print Distance
   b4294:	682a      	ldr	r2, [r5, #0]
   b4296:	497b      	ldr	r1, [pc, #492]	; (b4484 <loop+0x288>)
   b4298:	487c      	ldr	r0, [pc, #496]	; (b448c <loop+0x290>)
        if(millis()-lastPixelTime > 500) {  //start timer
   b429a:	4d7d      	ldr	r5, [pc, #500]	; (b4490 <loop+0x294>)
        myDisplay.printf("Distance = %i\n", distance); //Troublehsoot: Print Distance
   b429c:	f7ff ff14 	bl	b40c8 <_ZN5Print6printfEPKcz>
        myDisplay.display();
   b42a0:	487a      	ldr	r0, [pc, #488]	; (b448c <loop+0x290>)
   b42a2:	f001 f991 	bl	b55c8 <_ZN16Adafruit_SSD13067displayEv>
        myDisplay.clearDisplay();
   b42a6:	4879      	ldr	r0, [pc, #484]	; (b448c <loop+0x290>)
   b42a8:	f001 f916 	bl	b54d8 <_ZN16Adafruit_SSD130612clearDisplayEv>
        myDisplay.display();
   b42ac:	4877      	ldr	r0, [pc, #476]	; (b448c <loop+0x290>)
   b42ae:	f001 f98b 	bl	b55c8 <_ZN16Adafruit_SSD13067displayEv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b42b2:	f001 faf1 	bl	b5898 <HAL_Timer_Get_Milli_Seconds>
        if(millis()-lastPixelTime > 500) {  //start timer
   b42b6:	682b      	ldr	r3, [r5, #0]
   b42b8:	1ac0      	subs	r0, r0, r3
   b42ba:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   b42be:	f240 82c0 	bls.w	b4842 <loop+0x646>
   b42c2:	f001 fae9 	bl	b5898 <HAL_Timer_Get_Milli_Seconds>
            if(soundLevel[0] <= 63){
   b42c6:	6823      	ldr	r3, [r4, #0]
            lastPixelTime = millis();       //reset timer
   b42c8:	6028      	str	r0, [r5, #0]
            if(soundLevel[0] <= 63){
   b42ca:	2b3f      	cmp	r3, #63	; 0x3f
   b42cc:	dc06      	bgt.n	b42dc <loop+0xe0>
                pixelFill(0, 4, 50, fullred);
   b42ce:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   b42d2:	2232      	movs	r2, #50	; 0x32
   b42d4:	2104      	movs	r1, #4
   b42d6:	2000      	movs	r0, #0
   b42d8:	f7ff ff66 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[0] <= 160 && soundLevel[0] > 63){
   b42dc:	6823      	ldr	r3, [r4, #0]
   b42de:	3b40      	subs	r3, #64	; 0x40
   b42e0:	2b60      	cmp	r3, #96	; 0x60
   b42e2:	d806      	bhi.n	b42f2 <loop+0xf6>
                pixelFill(0, 4, 85, fullred);
   b42e4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   b42e8:	2255      	movs	r2, #85	; 0x55
   b42ea:	2104      	movs	r1, #4
   b42ec:	2000      	movs	r0, #0
   b42ee:	f7ff ff5b 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[0] <= 400 && soundLevel[0] > 160){
   b42f2:	6823      	ldr	r3, [r4, #0]
   b42f4:	3ba1      	subs	r3, #161	; 0xa1
   b42f6:	2bef      	cmp	r3, #239	; 0xef
   b42f8:	d806      	bhi.n	b4308 <loop+0x10c>
                pixelFill(0, 4, 100, fullred);
   b42fa:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   b42fe:	2264      	movs	r2, #100	; 0x64
   b4300:	2104      	movs	r1, #4
   b4302:	2000      	movs	r0, #0
   b4304:	f7ff ff50 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[0] <= 1000 && soundLevel[0] > 400){
   b4308:	6823      	ldr	r3, [r4, #0]
   b430a:	f46f 71c8 	mvn.w	r1, #400	; 0x190
   b430e:	440b      	add	r3, r1
   b4310:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b4314:	d206      	bcs.n	b4324 <loop+0x128>
                pixelFill(0, 4, 150, fullred);
   b4316:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   b431a:	2296      	movs	r2, #150	; 0x96
   b431c:	2104      	movs	r1, #4
   b431e:	2000      	movs	r0, #0
   b4320:	f7ff ff42 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[0] <= 2500 && soundLevel[0] > 1000){
   b4324:	6823      	ldr	r3, [r4, #0]
   b4326:	f46f 727a 	mvn.w	r2, #1000	; 0x3e8
   b432a:	4413      	add	r3, r2
   b432c:	f240 52db 	movw	r2, #1499	; 0x5db
   b4330:	4293      	cmp	r3, r2
   b4332:	d806      	bhi.n	b4342 <loop+0x146>
                pixelFill(0, 4, 200, fullred);
   b4334:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   b4338:	22c8      	movs	r2, #200	; 0xc8
   b433a:	2104      	movs	r1, #4
   b433c:	2000      	movs	r0, #0
   b433e:	f7ff ff33 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[0] <= 6250 && soundLevel[0] > 2500){
   b4342:	6823      	ldr	r3, [r4, #0]
   b4344:	f640 62a5 	movw	r2, #3749	; 0xea5
   b4348:	f6a3 13c5 	subw	r3, r3, #2501	; 0x9c5
   b434c:	4293      	cmp	r3, r2
   b434e:	d806      	bhi.n	b435e <loop+0x162>
                pixelFill(0, 4, 220, fullred);
   b4350:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   b4354:	22dc      	movs	r2, #220	; 0xdc
   b4356:	2104      	movs	r1, #4
   b4358:	2000      	movs	r0, #0
   b435a:	f7ff ff25 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[0] <= 16000 && soundLevel[0] > 6250){
   b435e:	6823      	ldr	r3, [r4, #0]
   b4360:	f5a3 53c3 	sub.w	r3, r3, #6240	; 0x1860
   b4364:	3b0b      	subs	r3, #11
   b4366:	f242 6215 	movw	r2, #9749	; 0x2615
   b436a:	4293      	cmp	r3, r2
   b436c:	d806      	bhi.n	b437c <loop+0x180>
                pixelFill(0, 4, 255, fullred);
   b436e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   b4372:	22ff      	movs	r2, #255	; 0xff
   b4374:	2104      	movs	r1, #4
   b4376:	2000      	movs	r0, #0
   b4378:	f7ff ff16 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[1] <= 63){
   b437c:	6863      	ldr	r3, [r4, #4]
   b437e:	2b3f      	cmp	r3, #63	; 0x3f
   b4380:	dc06      	bgt.n	b4390 <loop+0x194>
                pixelFill(5, 6, 50, fullmagenta);
   b4382:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
   b4386:	2232      	movs	r2, #50	; 0x32
   b4388:	2106      	movs	r1, #6
   b438a:	2005      	movs	r0, #5
   b438c:	f7ff ff0c 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[1] <= 160 && soundLevel[0] > 63){
   b4390:	6863      	ldr	r3, [r4, #4]
   b4392:	2ba0      	cmp	r3, #160	; 0xa0
   b4394:	dc14      	bgt.n	b43c0 <loop+0x1c4>
   b4396:	6823      	ldr	r3, [r4, #0]
   b4398:	2b3f      	cmp	r3, #63	; 0x3f
   b439a:	dc0a      	bgt.n	b43b2 <loop+0x1b6>
            if(soundLevel[1] <= 400 && soundLevel[0] > 160){
   b439c:	6823      	ldr	r3, [r4, #0]
   b439e:	2ba0      	cmp	r3, #160	; 0xa0
   b43a0:	dd16      	ble.n	b43d0 <loop+0x1d4>
                pixelFill(5, 6, 100, fullmagenta);
   b43a2:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
   b43a6:	2264      	movs	r2, #100	; 0x64
   b43a8:	2106      	movs	r1, #6
   b43aa:	2005      	movs	r0, #5
   b43ac:	f7ff fefc 	bl	b41a8 <_Z9pixelFilliiii>
   b43b0:	e00a      	b.n	b43c8 <loop+0x1cc>
                pixelFill(5, 6, 85, fullmagenta);
   b43b2:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
   b43b6:	2255      	movs	r2, #85	; 0x55
   b43b8:	2106      	movs	r1, #6
   b43ba:	2005      	movs	r0, #5
   b43bc:	f7ff fef4 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[1] <= 400 && soundLevel[0] > 160){
   b43c0:	6863      	ldr	r3, [r4, #4]
   b43c2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b43c6:	dde9      	ble.n	b439c <loop+0x1a0>
            if(soundLevel[1] <= 1000 && soundLevel[0] > 400){
   b43c8:	6863      	ldr	r3, [r4, #4]
   b43ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b43ce:	dc0a      	bgt.n	b43e6 <loop+0x1ea>
   b43d0:	6823      	ldr	r3, [r4, #0]
   b43d2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b43d6:	dd0b      	ble.n	b43f0 <loop+0x1f4>
                pixelFill(5, 6, 150, fullmagenta);
   b43d8:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
   b43dc:	2296      	movs	r2, #150	; 0x96
   b43de:	2106      	movs	r1, #6
   b43e0:	2005      	movs	r0, #5
   b43e2:	f7ff fee1 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[1] <= 2500 && soundLevel[0] > 1000){
   b43e6:	6862      	ldr	r2, [r4, #4]
   b43e8:	f640 13c4 	movw	r3, #2500	; 0x9c4
   b43ec:	429a      	cmp	r2, r3
   b43ee:	dc0a      	bgt.n	b4406 <loop+0x20a>
   b43f0:	6823      	ldr	r3, [r4, #0]
   b43f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b43f6:	dd0b      	ble.n	b4410 <loop+0x214>
                pixelFill(5, 6, 200, fullmagenta);
   b43f8:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
   b43fc:	22c8      	movs	r2, #200	; 0xc8
   b43fe:	2106      	movs	r1, #6
   b4400:	2005      	movs	r0, #5
   b4402:	f7ff fed1 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[1] <= 6250 && soundLevel[0] > 2500){
   b4406:	6862      	ldr	r2, [r4, #4]
   b4408:	f641 036a 	movw	r3, #6250	; 0x186a
   b440c:	429a      	cmp	r2, r3
   b440e:	dc0b      	bgt.n	b4428 <loop+0x22c>
   b4410:	6822      	ldr	r2, [r4, #0]
   b4412:	f640 13c4 	movw	r3, #2500	; 0x9c4
   b4416:	429a      	cmp	r2, r3
   b4418:	dd0a      	ble.n	b4430 <loop+0x234>
                pixelFill(5, 6, 220, fullmagenta);
   b441a:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
   b441e:	22dc      	movs	r2, #220	; 0xdc
   b4420:	2106      	movs	r1, #6
   b4422:	2005      	movs	r0, #5
   b4424:	f7ff fec0 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[1] <= 16000 && soundLevel[0] > 6250){
   b4428:	6863      	ldr	r3, [r4, #4]
   b442a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   b442e:	dc0b      	bgt.n	b4448 <loop+0x24c>
   b4430:	6822      	ldr	r2, [r4, #0]
   b4432:	f641 036a 	movw	r3, #6250	; 0x186a
   b4436:	429a      	cmp	r2, r3
   b4438:	dd06      	ble.n	b4448 <loop+0x24c>
                pixelFill(5, 6, 255, fullmagenta);
   b443a:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
   b443e:	22ff      	movs	r2, #255	; 0xff
   b4440:	2106      	movs	r1, #6
   b4442:	2005      	movs	r0, #5
   b4444:	f7ff feb0 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[2] <= 63){
   b4448:	68a3      	ldr	r3, [r4, #8]
   b444a:	2b3f      	cmp	r3, #63	; 0x3f
   b444c:	dc05      	bgt.n	b445a <loop+0x25e>
                pixelFill(7, 8, 50, purple);
   b444e:	4b11      	ldr	r3, [pc, #68]	; (b4494 <loop+0x298>)
   b4450:	2232      	movs	r2, #50	; 0x32
   b4452:	2108      	movs	r1, #8
   b4454:	2007      	movs	r0, #7
   b4456:	f7ff fea7 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[2] <= 160 && soundLevel[0] > 63){
   b445a:	68a3      	ldr	r3, [r4, #8]
   b445c:	2ba0      	cmp	r3, #160	; 0xa0
   b445e:	dc23      	bgt.n	b44a8 <loop+0x2ac>
   b4460:	6823      	ldr	r3, [r4, #0]
   b4462:	2b3f      	cmp	r3, #63	; 0x3f
   b4464:	dc1a      	bgt.n	b449c <loop+0x2a0>
            if(soundLevel[2] <= 400 && soundLevel[0] > 160){
   b4466:	6823      	ldr	r3, [r4, #0]
   b4468:	2ba0      	cmp	r3, #160	; 0xa0
   b446a:	dd25      	ble.n	b44b8 <loop+0x2bc>
                pixelFill(7, 8, 100, purple);
   b446c:	4b09      	ldr	r3, [pc, #36]	; (b4494 <loop+0x298>)
   b446e:	2264      	movs	r2, #100	; 0x64
   b4470:	2108      	movs	r1, #8
   b4472:	2007      	movs	r0, #7
   b4474:	f7ff fe98 	bl	b41a8 <_Z9pixelFilliiii>
   b4478:	e01a      	b.n	b44b0 <loop+0x2b4>
   b447a:	bf00      	nop
   b447c:	2003e64c 	.word	0x2003e64c
   b4480:	2003e698 	.word	0x2003e698
   b4484:	000b748d 	.word	0x000b748d
   b4488:	2003e1a0 	.word	0x2003e1a0
   b448c:	2003e650 	.word	0x2003e650
   b4490:	2003e62c 	.word	0x2003e62c
   b4494:	007700ff 	.word	0x007700ff
   b4498:	000b749c 	.word	0x000b749c
                pixelFill(7, 8, 85, purple);
   b449c:	4b91      	ldr	r3, [pc, #580]	; (b46e4 <loop+0x4e8>)
   b449e:	2255      	movs	r2, #85	; 0x55
   b44a0:	2108      	movs	r1, #8
   b44a2:	2007      	movs	r0, #7
   b44a4:	f7ff fe80 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[2] <= 400 && soundLevel[0] > 160){
   b44a8:	68a3      	ldr	r3, [r4, #8]
   b44aa:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b44ae:	ddda      	ble.n	b4466 <loop+0x26a>
            if(soundLevel[2] <= 1000 && soundLevel[0] > 400){
   b44b0:	68a3      	ldr	r3, [r4, #8]
   b44b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b44b6:	dc09      	bgt.n	b44cc <loop+0x2d0>
   b44b8:	6823      	ldr	r3, [r4, #0]
   b44ba:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b44be:	dd0a      	ble.n	b44d6 <loop+0x2da>
                pixelFill(7, 8, 150, purple);
   b44c0:	4b88      	ldr	r3, [pc, #544]	; (b46e4 <loop+0x4e8>)
   b44c2:	2296      	movs	r2, #150	; 0x96
   b44c4:	2108      	movs	r1, #8
   b44c6:	2007      	movs	r0, #7
   b44c8:	f7ff fe6e 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[2] <= 2500 && soundLevel[0] > 1000){
   b44cc:	68a2      	ldr	r2, [r4, #8]
   b44ce:	f640 13c4 	movw	r3, #2500	; 0x9c4
   b44d2:	429a      	cmp	r2, r3
   b44d4:	dc09      	bgt.n	b44ea <loop+0x2ee>
   b44d6:	6823      	ldr	r3, [r4, #0]
   b44d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b44dc:	dd0a      	ble.n	b44f4 <loop+0x2f8>
                pixelFill(7, 8, 200, purple);
   b44de:	4b81      	ldr	r3, [pc, #516]	; (b46e4 <loop+0x4e8>)
   b44e0:	22c8      	movs	r2, #200	; 0xc8
   b44e2:	2108      	movs	r1, #8
   b44e4:	2007      	movs	r0, #7
   b44e6:	f7ff fe5f 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[2] <= 6250 && soundLevel[0] > 2500){
   b44ea:	68a2      	ldr	r2, [r4, #8]
   b44ec:	f641 036a 	movw	r3, #6250	; 0x186a
   b44f0:	429a      	cmp	r2, r3
   b44f2:	dc0a      	bgt.n	b450a <loop+0x30e>
   b44f4:	6822      	ldr	r2, [r4, #0]
   b44f6:	f640 13c4 	movw	r3, #2500	; 0x9c4
   b44fa:	429a      	cmp	r2, r3
   b44fc:	dd09      	ble.n	b4512 <loop+0x316>
                pixelFill(7, 8, 220, purple);
   b44fe:	4b79      	ldr	r3, [pc, #484]	; (b46e4 <loop+0x4e8>)
   b4500:	22dc      	movs	r2, #220	; 0xdc
   b4502:	2108      	movs	r1, #8
   b4504:	2007      	movs	r0, #7
   b4506:	f7ff fe4f 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[2] <= 16000 && soundLevel[0] > 6250){
   b450a:	68a3      	ldr	r3, [r4, #8]
   b450c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   b4510:	dc0a      	bgt.n	b4528 <loop+0x32c>
   b4512:	6822      	ldr	r2, [r4, #0]
   b4514:	f641 036a 	movw	r3, #6250	; 0x186a
   b4518:	429a      	cmp	r2, r3
   b451a:	dd05      	ble.n	b4528 <loop+0x32c>
                pixelFill(7, 8, 255, purple);
   b451c:	4b71      	ldr	r3, [pc, #452]	; (b46e4 <loop+0x4e8>)
   b451e:	22ff      	movs	r2, #255	; 0xff
   b4520:	2108      	movs	r1, #8
   b4522:	2007      	movs	r0, #7
   b4524:	f7ff fe40 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[3] <= 63){
   b4528:	68e3      	ldr	r3, [r4, #12]
   b452a:	2b3f      	cmp	r3, #63	; 0x3f
   b452c:	dc05      	bgt.n	b453a <loop+0x33e>
                pixelFill(9, 12, 50, fullblue);
   b452e:	23ff      	movs	r3, #255	; 0xff
   b4530:	2232      	movs	r2, #50	; 0x32
   b4532:	210c      	movs	r1, #12
   b4534:	2009      	movs	r0, #9
   b4536:	f7ff fe37 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[3] <= 160 && soundLevel[0] > 63){
   b453a:	68e3      	ldr	r3, [r4, #12]
   b453c:	2ba0      	cmp	r3, #160	; 0xa0
   b453e:	dc12      	bgt.n	b4566 <loop+0x36a>
   b4540:	6823      	ldr	r3, [r4, #0]
   b4542:	2b3f      	cmp	r3, #63	; 0x3f
   b4544:	dc09      	bgt.n	b455a <loop+0x35e>
            if(soundLevel[3] <= 400 && soundLevel[0] > 160){
   b4546:	6823      	ldr	r3, [r4, #0]
   b4548:	2ba0      	cmp	r3, #160	; 0xa0
   b454a:	dd14      	ble.n	b4576 <loop+0x37a>
                pixelFill(9, 12, 100, fullblue);
   b454c:	23ff      	movs	r3, #255	; 0xff
   b454e:	2264      	movs	r2, #100	; 0x64
   b4550:	210c      	movs	r1, #12
   b4552:	2009      	movs	r0, #9
   b4554:	f7ff fe28 	bl	b41a8 <_Z9pixelFilliiii>
   b4558:	e009      	b.n	b456e <loop+0x372>
                pixelFill(9, 12, 85, fullblue);
   b455a:	23ff      	movs	r3, #255	; 0xff
   b455c:	2255      	movs	r2, #85	; 0x55
   b455e:	210c      	movs	r1, #12
   b4560:	2009      	movs	r0, #9
   b4562:	f7ff fe21 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[3] <= 400 && soundLevel[0] > 160){
   b4566:	68e3      	ldr	r3, [r4, #12]
   b4568:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b456c:	ddeb      	ble.n	b4546 <loop+0x34a>
            if(soundLevel[3] <= 1000 && soundLevel[0] > 400){
   b456e:	68e3      	ldr	r3, [r4, #12]
   b4570:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b4574:	dc09      	bgt.n	b458a <loop+0x38e>
   b4576:	6823      	ldr	r3, [r4, #0]
   b4578:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b457c:	dd0a      	ble.n	b4594 <loop+0x398>
                pixelFill(9, 12, 150, fullblue);
   b457e:	23ff      	movs	r3, #255	; 0xff
   b4580:	2296      	movs	r2, #150	; 0x96
   b4582:	210c      	movs	r1, #12
   b4584:	2009      	movs	r0, #9
   b4586:	f7ff fe0f 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[3] <= 2500 && soundLevel[0] > 1000){
   b458a:	68e2      	ldr	r2, [r4, #12]
   b458c:	f640 13c4 	movw	r3, #2500	; 0x9c4
   b4590:	429a      	cmp	r2, r3
   b4592:	dc09      	bgt.n	b45a8 <loop+0x3ac>
   b4594:	6823      	ldr	r3, [r4, #0]
   b4596:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b459a:	dd0a      	ble.n	b45b2 <loop+0x3b6>
                pixelFill(9, 12, 200, fullblue);
   b459c:	23ff      	movs	r3, #255	; 0xff
   b459e:	22c8      	movs	r2, #200	; 0xc8
   b45a0:	210c      	movs	r1, #12
   b45a2:	2009      	movs	r0, #9
   b45a4:	f7ff fe00 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[3] <= 6250 && soundLevel[0] > 2500){
   b45a8:	68e2      	ldr	r2, [r4, #12]
   b45aa:	f641 036a 	movw	r3, #6250	; 0x186a
   b45ae:	429a      	cmp	r2, r3
   b45b0:	dc0a      	bgt.n	b45c8 <loop+0x3cc>
   b45b2:	6822      	ldr	r2, [r4, #0]
   b45b4:	f640 13c4 	movw	r3, #2500	; 0x9c4
   b45b8:	429a      	cmp	r2, r3
   b45ba:	dd09      	ble.n	b45d0 <loop+0x3d4>
                pixelFill(9, 12, 220, fullblue);
   b45bc:	23ff      	movs	r3, #255	; 0xff
   b45be:	22dc      	movs	r2, #220	; 0xdc
   b45c0:	210c      	movs	r1, #12
   b45c2:	2009      	movs	r0, #9
   b45c4:	f7ff fdf0 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[3] <= 16000 && soundLevel[0] > 6250){
   b45c8:	68e3      	ldr	r3, [r4, #12]
   b45ca:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   b45ce:	dc0a      	bgt.n	b45e6 <loop+0x3ea>
   b45d0:	6822      	ldr	r2, [r4, #0]
   b45d2:	f641 036a 	movw	r3, #6250	; 0x186a
   b45d6:	429a      	cmp	r2, r3
   b45d8:	dd05      	ble.n	b45e6 <loop+0x3ea>
                pixelFill(9, 12, 255, fullblue);
   b45da:	23ff      	movs	r3, #255	; 0xff
   b45dc:	461a      	mov	r2, r3
   b45de:	210c      	movs	r1, #12
   b45e0:	2009      	movs	r0, #9
   b45e2:	f7ff fde1 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[4] <= 63){
   b45e6:	6923      	ldr	r3, [r4, #16]
   b45e8:	2b3f      	cmp	r3, #63	; 0x3f
   b45ea:	dc06      	bgt.n	b45fa <loop+0x3fe>
                pixelFill(13, 14, 50, fullgreen);
   b45ec:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b45f0:	2232      	movs	r2, #50	; 0x32
   b45f2:	210e      	movs	r1, #14
   b45f4:	200d      	movs	r0, #13
   b45f6:	f7ff fdd7 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[4] <= 160 && soundLevel[0] > 63){
   b45fa:	6923      	ldr	r3, [r4, #16]
   b45fc:	2ba0      	cmp	r3, #160	; 0xa0
   b45fe:	dc14      	bgt.n	b462a <loop+0x42e>
   b4600:	6823      	ldr	r3, [r4, #0]
   b4602:	2b3f      	cmp	r3, #63	; 0x3f
   b4604:	dc0a      	bgt.n	b461c <loop+0x420>
            if(soundLevel[4] <= 400 && soundLevel[0] > 160){
   b4606:	6823      	ldr	r3, [r4, #0]
   b4608:	2ba0      	cmp	r3, #160	; 0xa0
   b460a:	dd16      	ble.n	b463a <loop+0x43e>
                pixelFill(13, 14, 100, fullgreen);
   b460c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b4610:	2264      	movs	r2, #100	; 0x64
   b4612:	210e      	movs	r1, #14
   b4614:	200d      	movs	r0, #13
   b4616:	f7ff fdc7 	bl	b41a8 <_Z9pixelFilliiii>
   b461a:	e00a      	b.n	b4632 <loop+0x436>
                pixelFill(13, 14, 85, fullgreen);
   b461c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b4620:	2255      	movs	r2, #85	; 0x55
   b4622:	210e      	movs	r1, #14
   b4624:	200d      	movs	r0, #13
   b4626:	f7ff fdbf 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[4] <= 400 && soundLevel[0] > 160){
   b462a:	6923      	ldr	r3, [r4, #16]
   b462c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b4630:	dde9      	ble.n	b4606 <loop+0x40a>
            if(soundLevel[4] <= 1000 && soundLevel[0] > 400){
   b4632:	6923      	ldr	r3, [r4, #16]
   b4634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b4638:	dc0a      	bgt.n	b4650 <loop+0x454>
   b463a:	6823      	ldr	r3, [r4, #0]
   b463c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b4640:	dd0b      	ble.n	b465a <loop+0x45e>
                pixelFill(13, 14, 150, fullgreen);
   b4642:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b4646:	2296      	movs	r2, #150	; 0x96
   b4648:	210e      	movs	r1, #14
   b464a:	200d      	movs	r0, #13
   b464c:	f7ff fdac 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[4] <= 2500 && soundLevel[0] > 1000){
   b4650:	6922      	ldr	r2, [r4, #16]
   b4652:	f640 13c4 	movw	r3, #2500	; 0x9c4
   b4656:	429a      	cmp	r2, r3
   b4658:	dc0a      	bgt.n	b4670 <loop+0x474>
   b465a:	6823      	ldr	r3, [r4, #0]
   b465c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b4660:	dd0b      	ble.n	b467a <loop+0x47e>
                pixelFill(13, 14, 200, fullgreen);
   b4662:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b4666:	22c8      	movs	r2, #200	; 0xc8
   b4668:	210e      	movs	r1, #14
   b466a:	200d      	movs	r0, #13
   b466c:	f7ff fd9c 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[4] <= 6250 && soundLevel[0] > 2500){
   b4670:	6922      	ldr	r2, [r4, #16]
   b4672:	f641 036a 	movw	r3, #6250	; 0x186a
   b4676:	429a      	cmp	r2, r3
   b4678:	dc0b      	bgt.n	b4692 <loop+0x496>
   b467a:	6822      	ldr	r2, [r4, #0]
   b467c:	f640 13c4 	movw	r3, #2500	; 0x9c4
   b4680:	429a      	cmp	r2, r3
   b4682:	dd0a      	ble.n	b469a <loop+0x49e>
                pixelFill(13, 14, 220, fullgreen);
   b4684:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b4688:	22dc      	movs	r2, #220	; 0xdc
   b468a:	210e      	movs	r1, #14
   b468c:	200d      	movs	r0, #13
   b468e:	f7ff fd8b 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[4] <= 16000 && soundLevel[0] > 6250){
   b4692:	6923      	ldr	r3, [r4, #16]
   b4694:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   b4698:	dc0b      	bgt.n	b46b2 <loop+0x4b6>
   b469a:	6822      	ldr	r2, [r4, #0]
   b469c:	f641 036a 	movw	r3, #6250	; 0x186a
   b46a0:	429a      	cmp	r2, r3
   b46a2:	dd06      	ble.n	b46b2 <loop+0x4b6>
                pixelFill(13, 14, 255, fullgreen);
   b46a4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b46a8:	22ff      	movs	r2, #255	; 0xff
   b46aa:	210e      	movs	r1, #14
   b46ac:	200d      	movs	r0, #13
   b46ae:	f7ff fd7b 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[5] <= 63){
   b46b2:	6963      	ldr	r3, [r4, #20]
   b46b4:	2b3f      	cmp	r3, #63	; 0x3f
   b46b6:	dc05      	bgt.n	b46c4 <loop+0x4c8>
                pixelFill(15, 15, 50, fullyellow);
   b46b8:	210f      	movs	r1, #15
   b46ba:	4b0b      	ldr	r3, [pc, #44]	; (b46e8 <loop+0x4ec>)
   b46bc:	2232      	movs	r2, #50	; 0x32
   b46be:	4608      	mov	r0, r1
   b46c0:	f7ff fd72 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[5] <= 160 && soundLevel[0] > 63){
   b46c4:	6963      	ldr	r3, [r4, #20]
   b46c6:	2ba0      	cmp	r3, #160	; 0xa0
   b46c8:	dc16      	bgt.n	b46f8 <loop+0x4fc>
   b46ca:	6823      	ldr	r3, [r4, #0]
   b46cc:	2b3f      	cmp	r3, #63	; 0x3f
   b46ce:	dc0d      	bgt.n	b46ec <loop+0x4f0>
            if(soundLevel[5] <= 400 && soundLevel[0] > 160){
   b46d0:	6823      	ldr	r3, [r4, #0]
   b46d2:	2ba0      	cmp	r3, #160	; 0xa0
   b46d4:	dd18      	ble.n	b4708 <loop+0x50c>
                pixelFill(15, 15, 100, fullyellow);
   b46d6:	210f      	movs	r1, #15
   b46d8:	4b03      	ldr	r3, [pc, #12]	; (b46e8 <loop+0x4ec>)
   b46da:	2264      	movs	r2, #100	; 0x64
   b46dc:	4608      	mov	r0, r1
   b46de:	f7ff fd63 	bl	b41a8 <_Z9pixelFilliiii>
   b46e2:	e00d      	b.n	b4700 <loop+0x504>
   b46e4:	007700ff 	.word	0x007700ff
   b46e8:	00ffff00 	.word	0x00ffff00
                pixelFill(15, 15, 85, fullyellow);
   b46ec:	210f      	movs	r1, #15
   b46ee:	4b56      	ldr	r3, [pc, #344]	; (b4848 <loop+0x64c>)
   b46f0:	2255      	movs	r2, #85	; 0x55
   b46f2:	4608      	mov	r0, r1
   b46f4:	f7ff fd58 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[5] <= 400 && soundLevel[0] > 160){
   b46f8:	6963      	ldr	r3, [r4, #20]
   b46fa:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b46fe:	dde7      	ble.n	b46d0 <loop+0x4d4>
            if(soundLevel[5] <= 1000 && soundLevel[0] > 400){
   b4700:	6963      	ldr	r3, [r4, #20]
   b4702:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b4706:	dc09      	bgt.n	b471c <loop+0x520>
   b4708:	6823      	ldr	r3, [r4, #0]
   b470a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b470e:	dd0a      	ble.n	b4726 <loop+0x52a>
                pixelFill(15, 15, 150, fullyellow);
   b4710:	210f      	movs	r1, #15
   b4712:	4b4d      	ldr	r3, [pc, #308]	; (b4848 <loop+0x64c>)
   b4714:	2296      	movs	r2, #150	; 0x96
   b4716:	4608      	mov	r0, r1
   b4718:	f7ff fd46 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[5] <= 2500 && soundLevel[0] > 1000){
   b471c:	6962      	ldr	r2, [r4, #20]
   b471e:	f640 13c4 	movw	r3, #2500	; 0x9c4
   b4722:	429a      	cmp	r2, r3
   b4724:	dc09      	bgt.n	b473a <loop+0x53e>
   b4726:	6823      	ldr	r3, [r4, #0]
   b4728:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b472c:	dd0a      	ble.n	b4744 <loop+0x548>
                pixelFill(15, 15, 200, fullyellow);
   b472e:	210f      	movs	r1, #15
   b4730:	4b45      	ldr	r3, [pc, #276]	; (b4848 <loop+0x64c>)
   b4732:	22c8      	movs	r2, #200	; 0xc8
   b4734:	4608      	mov	r0, r1
   b4736:	f7ff fd37 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[5] <= 6250 && soundLevel[0] > 2500){
   b473a:	6962      	ldr	r2, [r4, #20]
   b473c:	f641 036a 	movw	r3, #6250	; 0x186a
   b4740:	429a      	cmp	r2, r3
   b4742:	dc0a      	bgt.n	b475a <loop+0x55e>
   b4744:	6822      	ldr	r2, [r4, #0]
   b4746:	f640 13c4 	movw	r3, #2500	; 0x9c4
   b474a:	429a      	cmp	r2, r3
   b474c:	dd09      	ble.n	b4762 <loop+0x566>
                pixelFill(15, 15, 220, fullyellow);
   b474e:	210f      	movs	r1, #15
   b4750:	4b3d      	ldr	r3, [pc, #244]	; (b4848 <loop+0x64c>)
   b4752:	22dc      	movs	r2, #220	; 0xdc
   b4754:	4608      	mov	r0, r1
   b4756:	f7ff fd27 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[5] <= 16000 && soundLevel[0] > 6250){
   b475a:	6963      	ldr	r3, [r4, #20]
   b475c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   b4760:	dc0a      	bgt.n	b4778 <loop+0x57c>
   b4762:	6822      	ldr	r2, [r4, #0]
   b4764:	f641 036a 	movw	r3, #6250	; 0x186a
   b4768:	429a      	cmp	r2, r3
   b476a:	dd05      	ble.n	b4778 <loop+0x57c>
                pixelFill(15, 15, 255, fullyellow);
   b476c:	210f      	movs	r1, #15
   b476e:	4b36      	ldr	r3, [pc, #216]	; (b4848 <loop+0x64c>)
   b4770:	22ff      	movs	r2, #255	; 0xff
   b4772:	4608      	mov	r0, r1
   b4774:	f7ff fd18 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[6] <= 63){
   b4778:	69a3      	ldr	r3, [r4, #24]
   b477a:	2b3f      	cmp	r3, #63	; 0x3f
   b477c:	dc05      	bgt.n	b478a <loop+0x58e>
                pixelFill(16, 16, 50, orange);
   b477e:	2110      	movs	r1, #16
   b4780:	4b32      	ldr	r3, [pc, #200]	; (b484c <loop+0x650>)
   b4782:	2232      	movs	r2, #50	; 0x32
   b4784:	4608      	mov	r0, r1
   b4786:	f7ff fd0f 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[6] <= 160 && soundLevel[0] > 63){
   b478a:	69a3      	ldr	r3, [r4, #24]
   b478c:	2ba0      	cmp	r3, #160	; 0xa0
   b478e:	dc12      	bgt.n	b47b6 <loop+0x5ba>
   b4790:	6823      	ldr	r3, [r4, #0]
   b4792:	2b3f      	cmp	r3, #63	; 0x3f
   b4794:	dc09      	bgt.n	b47aa <loop+0x5ae>
            if(soundLevel[6] <= 400 && soundLevel[0] > 160){
   b4796:	6823      	ldr	r3, [r4, #0]
   b4798:	2ba0      	cmp	r3, #160	; 0xa0
   b479a:	dd14      	ble.n	b47c6 <loop+0x5ca>
                pixelFill(16, 16, 100, orange);
   b479c:	2110      	movs	r1, #16
   b479e:	4b2b      	ldr	r3, [pc, #172]	; (b484c <loop+0x650>)
   b47a0:	2264      	movs	r2, #100	; 0x64
   b47a2:	4608      	mov	r0, r1
   b47a4:	f7ff fd00 	bl	b41a8 <_Z9pixelFilliiii>
   b47a8:	e009      	b.n	b47be <loop+0x5c2>
                pixelFill(16, 16, 85, orange);
   b47aa:	2110      	movs	r1, #16
   b47ac:	4b27      	ldr	r3, [pc, #156]	; (b484c <loop+0x650>)
   b47ae:	2255      	movs	r2, #85	; 0x55
   b47b0:	4608      	mov	r0, r1
   b47b2:	f7ff fcf9 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[6] <= 400 && soundLevel[0] > 160){
   b47b6:	69a3      	ldr	r3, [r4, #24]
   b47b8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b47bc:	ddeb      	ble.n	b4796 <loop+0x59a>
            if(soundLevel[6] <= 1000 && soundLevel[0] > 400){
   b47be:	69a3      	ldr	r3, [r4, #24]
   b47c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b47c4:	dc09      	bgt.n	b47da <loop+0x5de>
   b47c6:	6823      	ldr	r3, [r4, #0]
   b47c8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b47cc:	dd0a      	ble.n	b47e4 <loop+0x5e8>
                pixelFill(16, 16, 150, orange);
   b47ce:	2110      	movs	r1, #16
   b47d0:	4b1e      	ldr	r3, [pc, #120]	; (b484c <loop+0x650>)
   b47d2:	2296      	movs	r2, #150	; 0x96
   b47d4:	4608      	mov	r0, r1
   b47d6:	f7ff fce7 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[6] <= 2500 && soundLevel[0] > 1000){
   b47da:	69a2      	ldr	r2, [r4, #24]
   b47dc:	f640 13c4 	movw	r3, #2500	; 0x9c4
   b47e0:	429a      	cmp	r2, r3
   b47e2:	dc09      	bgt.n	b47f8 <loop+0x5fc>
   b47e4:	6823      	ldr	r3, [r4, #0]
   b47e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b47ea:	dd0a      	ble.n	b4802 <loop+0x606>
                pixelFill(16, 16, 200, orange);
   b47ec:	2110      	movs	r1, #16
   b47ee:	4b17      	ldr	r3, [pc, #92]	; (b484c <loop+0x650>)
   b47f0:	22c8      	movs	r2, #200	; 0xc8
   b47f2:	4608      	mov	r0, r1
   b47f4:	f7ff fcd8 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[6] <= 6250 && soundLevel[0] > 2500){
   b47f8:	69a2      	ldr	r2, [r4, #24]
   b47fa:	f641 036a 	movw	r3, #6250	; 0x186a
   b47fe:	429a      	cmp	r2, r3
   b4800:	dc0a      	bgt.n	b4818 <loop+0x61c>
   b4802:	6822      	ldr	r2, [r4, #0]
   b4804:	f640 13c4 	movw	r3, #2500	; 0x9c4
   b4808:	429a      	cmp	r2, r3
   b480a:	dd09      	ble.n	b4820 <loop+0x624>
                pixelFill(16, 16, 220, orange);
   b480c:	2110      	movs	r1, #16
   b480e:	4b0f      	ldr	r3, [pc, #60]	; (b484c <loop+0x650>)
   b4810:	22dc      	movs	r2, #220	; 0xdc
   b4812:	4608      	mov	r0, r1
   b4814:	f7ff fcc8 	bl	b41a8 <_Z9pixelFilliiii>
            if(soundLevel[6] <= 16000 && soundLevel[0] > 6250){
   b4818:	69a3      	ldr	r3, [r4, #24]
   b481a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
   b481e:	dc10      	bgt.n	b4842 <loop+0x646>
   b4820:	6822      	ldr	r2, [r4, #0]
   b4822:	f641 036a 	movw	r3, #6250	; 0x186a
   b4826:	429a      	cmp	r2, r3
   b4828:	dd0b      	ble.n	b4842 <loop+0x646>
                pixelFill(16, 16, 255, orange);
   b482a:	2110      	movs	r1, #16
}
   b482c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                pixelFill(16, 16, 255, orange);
   b4830:	4b06      	ldr	r3, [pc, #24]	; (b484c <loop+0x650>)
   b4832:	22ff      	movs	r2, #255	; 0xff
   b4834:	4608      	mov	r0, r1
   b4836:	f7ff bcb7 	b.w	b41a8 <_Z9pixelFilliiii>
        distance = analogRead(MOTIONSENSOR);
   b483a:	2012      	movs	r0, #18
   b483c:	f002 fb84 	bl	b6f48 <analogRead>
   b4840:	6028      	str	r0, [r5, #0]
}
   b4842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4846:	bf00      	nop
   b4848:	00ffff00 	.word	0x00ffff00
   b484c:	00ff7700 	.word	0x00ff7700

000b4850 <_GLOBAL__sub_I_soundInput>:
            
        }
    }
    pixel.show();
    return (endPixel);
}
   b4850:	b508      	push	{r3, lr}
Adafruit_NeoPixel pixel(PIXELCOUNT, PIXELPIN, WS2812B);
   b4852:	2208      	movs	r2, #8
   b4854:	2302      	movs	r3, #2
   b4856:	2110      	movs	r1, #16
   b4858:	480c      	ldr	r0, [pc, #48]	; (b488c <_GLOBAL__sub_I_soundInput+0x3c>)
   b485a:	f000 f867 	bl	b492c <_ZN17Adafruit_NeoPixelC1Ethh>
Adafruit_SSD1306 myDisplay(OLED_RESET); 
   b485e:	2104      	movs	r1, #4
   b4860:	480b      	ldr	r0, [pc, #44]	; (b4890 <_GLOBAL__sub_I_soundInput+0x40>)
   b4862:	f000 fe23 	bl	b54ac <_ZN16Adafruit_SSD1306C1Ea>
TCPClient client;                           // Create TCP Client object
   b4866:	480b      	ldr	r0, [pc, #44]	; (b4894 <_GLOBAL__sub_I_soundInput+0x44>)
   b4868:	f002 f934 	bl	b6ad4 <_ZN9TCPClientC1Ev>
String receivedData;
   b486c:	490a      	ldr	r1, [pc, #40]	; (b4898 <_GLOBAL__sub_I_soundInput+0x48>)
   b486e:	480b      	ldr	r0, [pc, #44]	; (b489c <_GLOBAL__sub_I_soundInput+0x4c>)
   b4870:	f001 fe2e 	bl	b64d0 <_ZN6StringC1EPK19__FlashStringHelper>
              error_(SYSTEM_ERROR_NONE) {
   b4874:	4b0a      	ldr	r3, [pc, #40]	; (b48a0 <_GLOBAL__sub_I_soundInput+0x50>)
   b4876:	2200      	movs	r2, #0
   b4878:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b487c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4880:	609a      	str	r2, [r3, #8]
}
   b4882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        set_system_mode(mode);
   b4886:	2002      	movs	r0, #2
   b4888:	f001 b9d6 	b.w	b5c38 <set_system_mode>
   b488c:	2003e674 	.word	0x2003e674
   b4890:	2003e650 	.word	0x2003e650
   b4894:	2003e630 	.word	0x2003e630
   b4898:	000b749b 	.word	0x000b749b
   b489c:	2003e688 	.word	0x2003e688
   b48a0:	2003e620 	.word	0x2003e620

000b48a4 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b48a4:	b538      	push	{r3, r4, r5, lr}
   b48a6:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b48a8:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b48aa:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b48ac:	b108      	cbz	r0, b48b2 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b48ae:	f001 fa5f 	bl	b5d70 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b48b2:	79a3      	ldrb	r3, [r4, #6]
   b48b4:	2b06      	cmp	r3, #6
   b48b6:	bf0c      	ite	eq
   b48b8:	2004      	moveq	r0, #4
   b48ba:	2003      	movne	r0, #3
   b48bc:	fb10 f005 	smulbb	r0, r0, r5
   b48c0:	b280      	uxth	r0, r0
   b48c2:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b48c4:	f001 fa4c 	bl	b5d60 <malloc>
   b48c8:	60e0      	str	r0, [r4, #12]
   b48ca:	b128      	cbz	r0, b48d8 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b48cc:	88a2      	ldrh	r2, [r4, #4]
   b48ce:	2100      	movs	r1, #0
   b48d0:	f002 fd1a 	bl	b7308 <memset>
    numLEDs = n;
   b48d4:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b48d6:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b48d8:	80a0      	strh	r0, [r4, #4]
   b48da:	8060      	strh	r0, [r4, #2]
}
   b48dc:	e7fb      	b.n	b48d6 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b48de <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b48de:	b510      	push	{r4, lr}
   b48e0:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b48e2:	2101      	movs	r1, #1
   b48e4:	79c0      	ldrb	r0, [r0, #7]
   b48e6:	f002 fb05 	bl	b6ef4 <pinMode>
  digitalWrite(pin, LOW);
   b48ea:	79e0      	ldrb	r0, [r4, #7]
   b48ec:	2100      	movs	r1, #0
   b48ee:	f002 fb12 	bl	b6f16 <digitalWrite>
  begun = true;
   b48f2:	2301      	movs	r3, #1
   b48f4:	7023      	strb	r3, [r4, #0]
}
   b48f6:	bd10      	pop	{r4, pc}

000b48f8 <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b48f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b48fa:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b48fc:	4605      	mov	r5, r0
   b48fe:	460c      	mov	r4, r1
    if (begun) {
   b4900:	b11b      	cbz	r3, b490a <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b4902:	79c0      	ldrb	r0, [r0, #7]
   b4904:	2100      	movs	r1, #0
   b4906:	f002 faf5 	bl	b6ef4 <pinMode>
    }
    pin = p;
    if (begun) {
   b490a:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b490c:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b490e:	b15b      	cbz	r3, b4928 <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b4910:	b2a0      	uxth	r0, r4
   b4912:	2101      	movs	r1, #1
   b4914:	9001      	str	r0, [sp, #4]
   b4916:	f002 faed 	bl	b6ef4 <pinMode>
        digitalWrite(p, LOW);
   b491a:	9801      	ldr	r0, [sp, #4]
   b491c:	2100      	movs	r1, #0
    }
}
   b491e:	b003      	add	sp, #12
   b4920:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b4924:	f002 baf7 	b.w	b6f16 <digitalWrite>
}
   b4928:	b003      	add	sp, #12
   b492a:	bd30      	pop	{r4, r5, pc}

000b492c <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b492c:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b492e:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4930:	4604      	mov	r4, r0
   b4932:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4934:	7183      	strb	r3, [r0, #6]
   b4936:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b493a:	7005      	strb	r5, [r0, #0]
   b493c:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b493e:	f7ff ffb1 	bl	b48a4 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b4942:	4620      	mov	r0, r4
   b4944:	4631      	mov	r1, r6
   b4946:	f7ff ffd7 	bl	b48f8 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b494a:	4620      	mov	r0, r4
   b494c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4950 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b4950:	68c3      	ldr	r3, [r0, #12]
   b4952:	2b00      	cmp	r3, #0
   b4954:	f000 81a4 	beq.w	b4ca0 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b4958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b495c:	7983      	ldrb	r3, [r0, #6]
   b495e:	3b02      	subs	r3, #2
   b4960:	b2db      	uxtb	r3, r3
   b4962:	2b04      	cmp	r3, #4
   b4964:	bf9c      	itt	ls
   b4966:	4abf      	ldrls	r2, [pc, #764]	; (b4c64 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b4968:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b496c:	b085      	sub	sp, #20
   b496e:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b4970:	bf88      	it	hi
   b4972:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4974:	f000 ff88 	bl	b5888 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b4978:	692b      	ldr	r3, [r5, #16]
   b497a:	1ac0      	subs	r0, r0, r3
   b497c:	42a0      	cmp	r0, r4
   b497e:	d3f9      	bcc.n	b4974 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b4980:	4cb9      	ldr	r4, [pc, #740]	; (b4c68 <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4982:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b4984:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4988:	b91b      	cbnz	r3, b4992 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b498a:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b498e:	2b00      	cmp	r3, #0
   b4990:	db7e      	blt.n	b4a90 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b4992:	4cb6      	ldr	r4, [pc, #728]	; (b4c6c <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b4994:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4998:	b923      	cbnz	r3, b49a4 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b499a:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b499e:	2b00      	cmp	r3, #0
   b49a0:	f2c0 816e 	blt.w	b4c80 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b49a4:	4cb2      	ldr	r4, [pc, #712]	; (b4c70 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b49a6:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b49aa:	2b00      	cmp	r3, #0
   b49ac:	f000 8144 	beq.w	b4c38 <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b49b0:	79eb      	ldrb	r3, [r5, #7]
   b49b2:	4ab0      	ldr	r2, [pc, #704]	; (b4c74 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b49b4:	4cb0      	ldr	r4, [pc, #704]	; (b4c78 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b49b6:	6812      	ldr	r2, [r2, #0]
   b49b8:	0119      	lsls	r1, r3, #4
   b49ba:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b49be:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b49c0:	49ae      	ldr	r1, [pc, #696]	; (b4c7c <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b49c2:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b49c4:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b49c8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b49cc:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b49d0:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b49d2:	f003 031f 	and.w	r3, r3, #31
   b49d6:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b49da:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b49dc:	433a      	orrs	r2, r7
   b49de:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b49e0:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b49e2:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b49e6:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b49ea:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b49ec:	2900      	cmp	r1, #0
   b49ee:	d044      	beq.n	b4a7a <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b49f0:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b49f4:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b49f6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b49fa:	f818 cb01 	ldrb.w	ip, [r8], #1
   b49fe:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4a00:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b4a02:	6863      	ldr	r3, [r4, #4]
   b4a04:	1a9b      	subs	r3, r3, r2
   b4a06:	2b46      	cmp	r3, #70	; 0x46
   b4a08:	d9fb      	bls.n	b4a02 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b4a0a:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b4a0c:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b4a10:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b4a14:	ea43 0307 	orr.w	r3, r3, r7
   b4a18:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b4a1c:	d02f      	beq.n	b4a7e <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b4a1e:	6863      	ldr	r3, [r4, #4]
   b4a20:	1a9b      	subs	r3, r3, r2
   b4a22:	2b28      	cmp	r3, #40	; 0x28
   b4a24:	d9fb      	bls.n	b4a1e <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b4a26:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4a2a:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4a2c:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4a30:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4a34:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4a38:	d1e3      	bne.n	b4a02 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b4a3a:	88ab      	ldrh	r3, [r5, #4]
   b4a3c:	f10e 0e01 	add.w	lr, lr, #1
   b4a40:	fa1f fe8e 	uxth.w	lr, lr
   b4a44:	4573      	cmp	r3, lr
   b4a46:	d8d8      	bhi.n	b49fa <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b4a48:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b4a4c:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b4a50:	6863      	ldr	r3, [r4, #4]
   b4a52:	1a9b      	subs	r3, r3, r2
   b4a54:	2b46      	cmp	r3, #70	; 0x46
   b4a56:	d9fb      	bls.n	b4a50 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b4a58:	6863      	ldr	r3, [r4, #4]
   b4a5a:	eba3 0909 	sub.w	r9, r3, r9
   b4a5e:	4589      	cmp	r9, r1
   b4a60:	f0c0 80e4 	bcc.w	b4c2c <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4a64:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4a68:	f000 ff06 	bl	b5878 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b4a6c:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b4a6e:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b4a72:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b4a76:	2900      	cmp	r1, #0
   b4a78:	d1ba      	bne.n	b49f0 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b4a7a:	460a      	mov	r2, r1
   b4a7c:	e7e8      	b.n	b4a50 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b4a7e:	6863      	ldr	r3, [r4, #4]
   b4a80:	1a9b      	subs	r3, r3, r2
   b4a82:	2b11      	cmp	r3, #17
   b4a84:	d8cf      	bhi.n	b4a26 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b4a86:	6863      	ldr	r3, [r4, #4]
   b4a88:	1a9b      	subs	r3, r3, r2
   b4a8a:	2b11      	cmp	r3, #17
   b4a8c:	d9f7      	bls.n	b4a7e <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b4a8e:	e7ca      	b.n	b4a26 <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4a90:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4a94:	2b00      	cmp	r3, #0
   b4a96:	f6bf af7c 	bge.w	b4992 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4a9a:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4a9e:	2b00      	cmp	r3, #0
   b4aa0:	f6bf af77 	bge.w	b4992 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4aa4:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4aa8:	2b00      	cmp	r3, #0
   b4aaa:	f6bf af72 	bge.w	b4992 <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4aae:	0136      	lsls	r6, r6, #4
   b4ab0:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b4ab2:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4ab4:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b4ab6:	f001 f953 	bl	b5d60 <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b4aba:	2800      	cmp	r0, #0
   b4abc:	f43f af78 	beq.w	b49b0 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b4ac0:	88ab      	ldrh	r3, [r5, #4]
   b4ac2:	2b00      	cmp	r3, #0
   b4ac4:	f000 80ed 	beq.w	b4ca2 <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b4ac8:	68ea      	ldr	r2, [r5, #12]
   b4aca:	3b01      	subs	r3, #1
   b4acc:	fa12 f783 	uxtah	r7, r2, r3
   b4ad0:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    uint16_t pos = 0; // bit position
   b4ad4:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4ad6:	f248 0206 	movw	r2, #32774	; 0x8006
   b4ada:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b4ade:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4ae2:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b4ae6:	bf0c      	ite	eq
   b4ae8:	4693      	moveq	fp, r2
   b4aea:	468b      	movne	fp, r1
   b4aec:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b4af0:	bf0c      	ite	eq
   b4af2:	4616      	moveq	r6, r2
   b4af4:	460e      	movne	r6, r1
   b4af6:	f01c 0f20 	tst.w	ip, #32
   b4afa:	bf0c      	ite	eq
   b4afc:	4690      	moveq	r8, r2
   b4afe:	4688      	movne	r8, r1
        pos++;
   b4b00:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4b04:	f8cd 8008 	str.w	r8, [sp, #8]
   b4b08:	9601      	str	r6, [sp, #4]
        pos++;
   b4b0a:	f103 0802 	add.w	r8, r3, #2
   b4b0e:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4b12:	9e01      	ldr	r6, [sp, #4]
   b4b14:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b4b18:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4b1c:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b4b20:	9e02      	ldr	r6, [sp, #8]
   b4b22:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b4b26:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4b2a:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b4b2e:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4b32:	bf0c      	ite	eq
   b4b34:	4693      	moveq	fp, r2
   b4b36:	468b      	movne	fp, r1
   b4b38:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4b3c:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4b40:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b4b44:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4b48:	bf0c      	ite	eq
   b4b4a:	4693      	moveq	fp, r2
   b4b4c:	468b      	movne	fp, r1
   b4b4e:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4b52:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4b56:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b4b5a:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4b5e:	bf0c      	ite	eq
   b4b60:	4693      	moveq	fp, r2
   b4b62:	468b      	movne	fp, r1
   b4b64:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4b68:	f103 0a08 	add.w	sl, r3, #8
   b4b6c:	f103 0806 	add.w	r8, r3, #6
   b4b70:	3307      	adds	r3, #7
   b4b72:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4b74:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b4b78:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4b7c:	bf0c      	ite	eq
   b4b7e:	4693      	moveq	fp, r2
   b4b80:	468b      	movne	fp, r1
        pos++;
   b4b82:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4b86:	f01c 0f01 	tst.w	ip, #1
   b4b8a:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b4b8e:	bf15      	itete	ne
   b4b90:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b4b94:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b4b98:	fa1f f38a 	uxthne.w	r3, sl
   b4b9c:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b4ba0:	4577      	cmp	r7, lr
   b4ba2:	d19c      	bne.n	b4ade <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4ba4:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4ba6:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4ba8:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4baa:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4bac:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4bae:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4bb0:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b4bb4:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4bb6:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4bb8:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4bba:	4b2e      	ldr	r3, [pc, #184]	; (b4c74 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4bbc:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4bbe:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4bc0:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4bc2:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4bc4:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b4bc8:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4bcc:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b4bd0:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b4bd4:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b4bd8:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4bdc:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b4be0:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b4be4:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4be8:	79eb      	ldrb	r3, [r5, #7]
   b4bea:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b4bee:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b4bf0:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4bf2:	5cfe      	ldrb	r6, [r7, r3]
   b4bf4:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b4bf8:	f003 031f 	and.w	r3, r3, #31
   b4bfc:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b4c00:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b4c04:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b4c08:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b4c0c:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b4c0e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b4c12:	2b00      	cmp	r3, #0
   b4c14:	d0fb      	beq.n	b4c0e <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b4c16:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pwm->EVENTS_SEQEND[0] = 0;
   b4c1c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b4c20:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4c24:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b4c28:	f001 f8a2 	bl	b5d70 <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4c2c:	f000 fe2c 	bl	b5888 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b4c30:	6128      	str	r0, [r5, #16]
}
   b4c32:	b005      	add	sp, #20
   b4c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c38:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4c3c:	2b00      	cmp	r3, #0
   b4c3e:	f6bf aeb7 	bge.w	b49b0 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c42:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c46:	2b00      	cmp	r3, #0
   b4c48:	f6bf aeb2 	bge.w	b49b0 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c4c:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c50:	2b00      	cmp	r3, #0
   b4c52:	f6bf aead 	bge.w	b49b0 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4c56:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c5a:	2b00      	cmp	r3, #0
   b4c5c:	f6bf aea8 	bge.w	b49b0 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b4c60:	e725      	b.n	b4aae <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b4c62:	bf00      	nop
   b4c64:	000b74b0 	.word	0x000b74b0
   b4c68:	4001c000 	.word	0x4001c000
   b4c6c:	40021000 	.word	0x40021000
   b4c70:	40022000 	.word	0x40022000
   b4c74:	2003e6b4 	.word	0x2003e6b4
   b4c78:	e0001000 	.word	0xe0001000
   b4c7c:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c80:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c84:	2b00      	cmp	r3, #0
   b4c86:	f6bf ae8d 	bge.w	b49a4 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c8a:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c8e:	2b00      	cmp	r3, #0
   b4c90:	f6bf ae88 	bge.w	b49a4 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4c94:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4c98:	2b00      	cmp	r3, #0
   b4c9a:	f6bf ae83 	bge.w	b49a4 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b4c9e:	e706      	b.n	b4aae <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b4ca0:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b4ca2:	2304      	movs	r3, #4
   b4ca4:	2102      	movs	r1, #2
   b4ca6:	e783      	b.n	b4bb0 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b4ca8 <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   b4ca8:	8843      	ldrh	r3, [r0, #2]
   b4caa:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   b4cac:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   b4cae:	d92d      	bls.n	b4d0c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   b4cb0:	7a06      	ldrb	r6, [r0, #8]
   b4cb2:	f3c2 4307 	ubfx	r3, r2, #16, #8
   b4cb6:	f3c2 2407 	ubfx	r4, r2, #8, #8
   b4cba:	b2d5      	uxtb	r5, r2
   b4cbc:	b13e      	cbz	r6, b4cce <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   b4cbe:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
   b4cc0:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
   b4cc2:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
   b4cc4:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   b4cc8:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   b4ccc:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b4cce:	f890 c006 	ldrb.w	ip, [r0, #6]
   b4cd2:	68c7      	ldr	r7, [r0, #12]
   b4cd4:	f1bc 0f06 	cmp.w	ip, #6
   b4cd8:	bf0c      	ite	eq
   b4cda:	2604      	moveq	r6, #4
   b4cdc:	2603      	movne	r6, #3
   b4cde:	434e      	muls	r6, r1
   b4ce0:	f1ac 0c02 	sub.w	ip, ip, #2
   b4ce4:	19b9      	adds	r1, r7, r6
    switch(type) {
   b4ce6:	f1bc 0f06 	cmp.w	ip, #6
   b4cea:	d81d      	bhi.n	b4d28 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   b4cec:	e8df f00c 	tbb	[pc, ip]
   b4cf0:	04081c04 	.word	0x04081c04
   b4cf4:	040f      	.short	0x040f
   b4cf6:	04          	.byte	0x04
   b4cf7:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b4cf8:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
   b4cfa:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b4cfc:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
   b4cfe:	e005      	b.n	b4d0c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
   b4d00:	2bfe      	cmp	r3, #254	; 0xfe
   b4d02:	bf28      	it	cs
   b4d04:	23fe      	movcs	r3, #254	; 0xfe
   b4d06:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
   b4d08:	704d      	strb	r5, [r1, #1]
          *p = g;
   b4d0a:	708c      	strb	r4, [r1, #2]
}
   b4d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b4d0e:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b4d10:	704c      	strb	r4, [r1, #1]
          *p++ = b;
   b4d12:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4d14:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   b4d16:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4d18:	b913      	cbnz	r3, b4d20 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   b4d1a:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4d1c:	70ca      	strb	r2, [r1, #3]
        } break;
   b4d1e:	e7f5      	b.n	b4d0c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4d20:	435a      	muls	r2, r3
   b4d22:	f3c2 2207 	ubfx	r2, r2, #8, #8
   b4d26:	e7f9      	b.n	b4d1c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   b4d28:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b4d2a:	704c      	strb	r4, [r1, #1]
   b4d2c:	e7e6      	b.n	b4cfc <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

000b4d2e <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   b4d2e:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
   b4d30:	1c4a      	adds	r2, r1, #1
   b4d32:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   b4d34:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   b4d36:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
   b4d38:	d01f      	beq.n	b4d7a <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4c>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   b4d3a:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b4d3c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
   b4d40:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b4d42:	d00c      	beq.n	b4d5e <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   b4d44:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   b4d46:	bf1f      	itttt	ne
   b4d48:	0211      	lslne	r1, r2, #8
   b4d4a:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
   b4d4e:	fbb1 f3f3 	udivne	r3, r1, r3
   b4d52:	b29b      	uxthne	r3, r3
    else if(b == 255) scale = 65535 / oldBrightness;
   b4d54:	bf04      	itt	eq
   b4d56:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   b4d5a:	fbb1 f3f3 	udiveq	r3, r1, r3
            *ptr           = pixels,
   b4d5e:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
   b4d60:	8886      	ldrh	r6, [r0, #4]
   b4d62:	1b29      	subs	r1, r5, r4
   b4d64:	b289      	uxth	r1, r1
   b4d66:	428e      	cmp	r6, r1
   b4d68:	d906      	bls.n	b4d78 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
   b4d6a:	7829      	ldrb	r1, [r5, #0]
   b4d6c:	4359      	muls	r1, r3
   b4d6e:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b4d72:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
   b4d76:	e7f3      	b.n	b4d60 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
   b4d78:	7202      	strb	r2, [r0, #8]
  }
}
   b4d7a:	bd70      	pop	{r4, r5, r6, pc}

000b4d7c <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   b4d7c:	8882      	ldrh	r2, [r0, #4]
   b4d7e:	68c0      	ldr	r0, [r0, #12]
   b4d80:	2100      	movs	r1, #0
   b4d82:	f002 bac1 	b.w	b7308 <memset>
	...

000b4d88 <_GLOBAL__sub_I_PIN_MAP2>:
}
   b4d88:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b4d8a:	f000 fd95 	bl	b58b8 <HAL_Pin_Map>
   b4d8e:	4b01      	ldr	r3, [pc, #4]	; (b4d94 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b4d90:	6018      	str	r0, [r3, #0]
}
   b4d92:	bd08      	pop	{r3, pc}
   b4d94:	2003e6b4 	.word	0x2003e6b4

000b4d98 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b4d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4d9c:	b085      	sub	sp, #20
   b4d9e:	461f      	mov	r7, r3
   b4da0:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4da4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4da8:	eba8 0902 	sub.w	r9, r8, r2
   b4dac:	eba7 0a01 	sub.w	sl, r7, r1
   b4db0:	f1b9 0f00 	cmp.w	r9, #0
   b4db4:	bfb8      	it	lt
   b4db6:	f1c9 0900 	rsblt	r9, r9, #0
   b4dba:	f1ba 0f00 	cmp.w	sl, #0
   b4dbe:	bfb8      	it	lt
   b4dc0:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b4dc4:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b4dc6:	4683      	mov	fp, r0
   b4dc8:	460c      	mov	r4, r1
   b4dca:	4615      	mov	r5, r2
  if (steep) {
   b4dcc:	dd04      	ble.n	b4dd8 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b4dce:	463a      	mov	r2, r7
    swap(x0, y0);
   b4dd0:	462c      	mov	r4, r5
    swap(x1, y1);
   b4dd2:	4647      	mov	r7, r8
    swap(x0, y0);
   b4dd4:	460d      	mov	r5, r1
    swap(x1, y1);
   b4dd6:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b4dd8:	42bc      	cmp	r4, r7
   b4dda:	dd05      	ble.n	b4de8 <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b4ddc:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b4dde:	4645      	mov	r5, r8
   b4de0:	4690      	mov	r8, r2
  if (x0 > x1) {
   b4de2:	4622      	mov	r2, r4
   b4de4:	463c      	mov	r4, r7
   b4de6:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b4de8:	1b3e      	subs	r6, r7, r4
   b4dea:	b2b2      	uxth	r2, r6
   b4dec:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b4dee:	eba8 0205 	sub.w	r2, r8, r5
   b4df2:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4df6:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b4dfa:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b4dfe:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b4e02:	4545      	cmp	r5, r8
   b4e04:	bfb4      	ite	lt
   b4e06:	2201      	movlt	r2, #1
   b4e08:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
   b4e0c:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b4e0e:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b4e10:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b4e12:	42bc      	cmp	r4, r7
   b4e14:	dc1c      	bgt.n	b4e50 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b4e16:	f8db 2000 	ldr.w	r2, [fp]
   b4e1a:	9303      	str	r3, [sp, #12]
    if (steep) {
   b4e1c:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b4e1e:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b4e22:	bfc7      	ittee	gt
   b4e24:	4629      	movgt	r1, r5
   b4e26:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b4e28:	462a      	movle	r2, r5
   b4e2a:	4621      	movle	r1, r4
   b4e2c:	4658      	mov	r0, fp
   b4e2e:	47c0      	blx	r8
    }
    err -= dy;
   b4e30:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b4e32:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b4e34:	1ab6      	subs	r6, r6, r2
   b4e36:	b2b1      	uxth	r1, r6
   b4e38:	b236      	sxth	r6, r6
    if (err < 0) {
   b4e3a:	2e00      	cmp	r6, #0
   b4e3c:	da05      	bge.n	b4e4a <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b4e3e:	9a02      	ldr	r2, [sp, #8]
   b4e40:	4415      	add	r5, r2
      err += dx;
   b4e42:	9a00      	ldr	r2, [sp, #0]
   b4e44:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b4e46:	b22d      	sxth	r5, r5
      err += dx;
   b4e48:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b4e4a:	3401      	adds	r4, #1
   b4e4c:	b224      	sxth	r4, r4
   b4e4e:	e7e0      	b.n	b4e12 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b4e50:	b005      	add	sp, #20
   b4e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4e56 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b4e56:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4e5a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b4e5e:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b4e60:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b4e64:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b4e68:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b4e6a:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b4e6c:	4616      	mov	r6, r2
   b4e6e:	468a      	mov	sl, r1
   b4e70:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b4e72:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b4e74:	6823      	ldr	r3, [r4, #0]
   b4e76:	f8cd 8000 	str.w	r8, [sp]
   b4e7a:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b4e7e:	4432      	add	r2, r6
   b4e80:	69df      	ldr	r7, [r3, #28]
   b4e82:	4651      	mov	r1, sl
   b4e84:	462b      	mov	r3, r5
   b4e86:	4620      	mov	r0, r4
   b4e88:	b212      	sxth	r2, r2
   b4e8a:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b4e8c:	6823      	ldr	r3, [r4, #0]
   b4e8e:	f8cd 8000 	str.w	r8, [sp]
   b4e92:	699f      	ldr	r7, [r3, #24]
   b4e94:	4632      	mov	r2, r6
   b4e96:	464b      	mov	r3, r9
   b4e98:	4651      	mov	r1, sl
   b4e9a:	4620      	mov	r0, r4
   b4e9c:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b4e9e:	1e6b      	subs	r3, r5, #1
   b4ea0:	eb03 010a 	add.w	r1, r3, sl
   b4ea4:	6823      	ldr	r3, [r4, #0]
   b4ea6:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b4eaa:	699d      	ldr	r5, [r3, #24]
   b4eac:	4632      	mov	r2, r6
   b4eae:	464b      	mov	r3, r9
   b4eb0:	b209      	sxth	r1, r1
   b4eb2:	4620      	mov	r0, r4
   b4eb4:	46ac      	mov	ip, r5
}
   b4eb6:	b002      	add	sp, #8
   b4eb8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b4ebc:	4760      	bx	ip

000b4ebe <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b4ebe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b4ec0:	3b01      	subs	r3, #1
   b4ec2:	4413      	add	r3, r2
   b4ec4:	6804      	ldr	r4, [r0, #0]
   b4ec6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b4eca:	9501      	str	r5, [sp, #4]
   b4ecc:	b21b      	sxth	r3, r3
   b4ece:	9300      	str	r3, [sp, #0]
   b4ed0:	6964      	ldr	r4, [r4, #20]
   b4ed2:	460b      	mov	r3, r1
   b4ed4:	47a0      	blx	r4
}
   b4ed6:	b003      	add	sp, #12
   b4ed8:	bd30      	pop	{r4, r5, pc}

000b4eda <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b4eda:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b4edc:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b4ee0:	6804      	ldr	r4, [r0, #0]
   b4ee2:	e9cd 2500 	strd	r2, r5, [sp]
   b4ee6:	3b01      	subs	r3, #1
   b4ee8:	440b      	add	r3, r1
   b4eea:	6964      	ldr	r4, [r4, #20]
   b4eec:	b21b      	sxth	r3, r3
   b4eee:	47a0      	blx	r4
}
   b4ef0:	b003      	add	sp, #12
   b4ef2:	bd30      	pop	{r4, r5, pc}

000b4ef4 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b4ef4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4ef8:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b4efc:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4f00:	4605      	mov	r5, r0
   b4f02:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b4f04:	460c      	mov	r4, r1
   b4f06:	18ce      	adds	r6, r1, r3
   b4f08:	42b4      	cmp	r4, r6
   b4f0a:	da0b      	bge.n	b4f24 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b4f0c:	682b      	ldr	r3, [r5, #0]
   b4f0e:	f8cd 8000 	str.w	r8, [sp]
   b4f12:	699f      	ldr	r7, [r3, #24]
   b4f14:	4621      	mov	r1, r4
   b4f16:	464b      	mov	r3, r9
   b4f18:	4652      	mov	r2, sl
   b4f1a:	4628      	mov	r0, r5
   b4f1c:	3401      	adds	r4, #1
   b4f1e:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b4f20:	b224      	sxth	r4, r4
   b4f22:	e7f1      	b.n	b4f08 <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b4f24:	b002      	add	sp, #8
   b4f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b4f2a <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b4f2a:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b4f2c:	6802      	ldr	r2, [r0, #0]
   b4f2e:	9101      	str	r1, [sp, #4]
   b4f30:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4f34:	9100      	str	r1, [sp, #0]
   b4f36:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b4f38:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4f3c:	2200      	movs	r2, #0
   b4f3e:	4611      	mov	r1, r2
   b4f40:	47a0      	blx	r4
}
   b4f42:	b002      	add	sp, #8
   b4f44:	bd10      	pop	{r4, pc}

000b4f46 <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b4f46:	4770      	bx	lr

000b4f48 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4f48:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b4f4a:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b4f4c:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b4f4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    Print() : write_error(0) {}
   b4f52:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b4f54:	4d05      	ldr	r5, [pc, #20]	; (b4f6c <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b4f56:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b4f58:	2201      	movs	r2, #1
   b4f5a:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b4f5c:	6005      	str	r5, [r0, #0]
   b4f5e:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b4f60:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b4f62:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b4f64:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b4f66:	7682      	strb	r2, [r0, #26]
}
   b4f68:	bd30      	pop	{r4, r5, pc}
   b4f6a:	bf00      	nop
   b4f6c:	000b79c8 	.word	0x000b79c8

000b4f70 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b4f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4f74:	ed2d 8b02 	vpush	{d8}
   b4f78:	b08d      	sub	sp, #52	; 0x34
   b4f7a:	4607      	mov	r7, r0
   b4f7c:	9104      	str	r1, [sp, #16]
   b4f7e:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b4f82:	9105      	str	r1, [sp, #20]
   b4f84:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b4f88:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b4f8a:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b4f8e:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b4f90:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b4f94:	4281      	cmp	r1, r0
   b4f96:	dd52      	ble.n	b503e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b4f98:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b4f9c:	4291      	cmp	r1, r2
   b4f9e:	dd4e      	ble.n	b503e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b4fa0:	2106      	movs	r1, #6
   b4fa2:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b4fa6:	2c00      	cmp	r4, #0
   b4fa8:	dd49      	ble.n	b503e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b4faa:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b4fae:	2c00      	cmp	r4, #0
   b4fb0:	dd45      	ble.n	b503e <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b4fb2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b4fb6:	930b      	str	r3, [sp, #44]	; 0x2c
   b4fb8:	b293      	uxth	r3, r2
   b4fba:	9307      	str	r3, [sp, #28]
   b4fbc:	3308      	adds	r3, #8
   b4fbe:	b29b      	uxth	r3, r3
   b4fc0:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b4fc2:	2400      	movs	r4, #0
   b4fc4:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b4fc6:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b4fc8:	bf1c      	itt	ne
   b4fca:	4b2c      	ldrne	r3, [pc, #176]	; (b507c <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b4fcc:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b4fce:	9e07      	ldr	r6, [sp, #28]
   b4fd0:	bf16      	itet	ne
   b4fd2:	191b      	addne	r3, r3, r4
      line = 0x0;
   b4fd4:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b4fd6:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b4fd8:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4fda:	9a04      	ldr	r2, [sp, #16]
   b4fdc:	b2ab      	uxth	r3, r5
   b4fde:	930a      	str	r3, [sp, #40]	; 0x28
   b4fe0:	fb04 f305 	mul.w	r3, r4, r5
   b4fe4:	fa13 f382 	uxtah	r3, r3, r2
   b4fe8:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b4fea:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b4fee:	ee08 3a10 	vmov	s16, r3
   b4ff2:	46b0      	mov	r8, r6
   b4ff4:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b4ff8:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b4ffc:	9b03      	ldr	r3, [sp, #12]
   b4ffe:	07db      	lsls	r3, r3, #31
   b5000:	d52f      	bpl.n	b5062 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b5002:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5004:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5006:	d11f      	bne.n	b5048 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b5008:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b500c:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b500e:	b232      	sxth	r2, r6
   b5010:	4651      	mov	r1, sl
   b5012:	4638      	mov	r0, r7
   b5014:	47d8      	blx	fp
      line >>= 1;
   b5016:	9b03      	ldr	r3, [sp, #12]
   b5018:	085b      	lsrs	r3, r3, #1
   b501a:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b501c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b501e:	3601      	adds	r6, #1
   b5020:	4498      	add	r8, r3
   b5022:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5024:	b2b6      	uxth	r6, r6
   b5026:	42b3      	cmp	r3, r6
   b5028:	fa1f f888 	uxth.w	r8, r8
   b502c:	d1e6      	bne.n	b4ffc <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b502e:	9b08      	ldr	r3, [sp, #32]
   b5030:	3b01      	subs	r3, #1
   b5032:	3401      	adds	r4, #1
   b5034:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5038:	b264      	sxtb	r4, r4
   b503a:	9308      	str	r3, [sp, #32]
   b503c:	d1c3      	bne.n	b4fc6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b503e:	b00d      	add	sp, #52	; 0x34
   b5040:	ecbd 8b02 	vpop	{d8}
   b5044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b5048:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b504a:	e9cd 9200 	strd	r9, r2, [sp]
   b504e:	ee18 1a10 	vmov	r1, s16
   b5052:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b5056:	fa0f f288 	sxth.w	r2, r8
   b505a:	464b      	mov	r3, r9
   b505c:	4638      	mov	r0, r7
   b505e:	47d8      	blx	fp
   b5060:	e7d9      	b.n	b5016 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b5062:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b5066:	4293      	cmp	r3, r2
   b5068:	d0d5      	beq.n	b5016 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b506a:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b506c:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b506e:	d103      	bne.n	b5078 <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b5070:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5074:	9b06      	ldr	r3, [sp, #24]
   b5076:	e7ca      	b.n	b500e <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b5078:	9a06      	ldr	r2, [sp, #24]
   b507a:	e7e6      	b.n	b504a <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b507c:	000b74c4 	.word	0x000b74c4

000b5080 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5080:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b5082:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b5084:	b085      	sub	sp, #20
   b5086:	4604      	mov	r4, r0
  if (c == '\n') {
   b5088:	d107      	bne.n	b509a <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b508a:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b508c:	8a63      	ldrh	r3, [r4, #18]
   b508e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b5092:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b5094:	2300      	movs	r3, #0
   b5096:	8223      	strh	r3, [r4, #16]
   b5098:	e021      	b.n	b50de <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b509a:	290d      	cmp	r1, #13
   b509c:	d01f      	beq.n	b50de <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b509e:	7e03      	ldrb	r3, [r0, #24]
   b50a0:	9302      	str	r3, [sp, #8]
   b50a2:	8ac3      	ldrh	r3, [r0, #22]
   b50a4:	9301      	str	r3, [sp, #4]
   b50a6:	8a83      	ldrh	r3, [r0, #20]
   b50a8:	9300      	str	r3, [sp, #0]
   b50aa:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b50ae:	460b      	mov	r3, r1
   b50b0:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b50b4:	f7ff ff5c 	bl	b4f70 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b50b8:	7e20      	ldrb	r0, [r4, #24]
   b50ba:	8a23      	ldrh	r3, [r4, #16]
   b50bc:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b50c0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b50c4:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b50c6:	b21b      	sxth	r3, r3
   b50c8:	4602      	mov	r2, r0
   b50ca:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b50cc:	b139      	cbz	r1, b50de <_ZN12Adafruit_GFX5writeEh+0x5e>
   b50ce:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b50d2:	f06f 0505 	mvn.w	r5, #5
   b50d6:	fb05 1100 	mla	r1, r5, r0, r1
   b50da:	428b      	cmp	r3, r1
   b50dc:	dcd6      	bgt.n	b508c <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b50de:	2001      	movs	r0, #1
   b50e0:	b005      	add	sp, #20
   b50e2:	bd30      	pop	{r4, r5, pc}

000b50e4 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b50e4:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b50e6:	8242      	strh	r2, [r0, #18]
}
   b50e8:	4770      	bx	lr

000b50ea <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b50ea:	2901      	cmp	r1, #1
   b50ec:	bf38      	it	cc
   b50ee:	2101      	movcc	r1, #1
   b50f0:	7601      	strb	r1, [r0, #24]
}
   b50f2:	4770      	bx	lr

000b50f4 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b50f4:	82c1      	strh	r1, [r0, #22]
   b50f6:	8281      	strh	r1, [r0, #20]
}
   b50f8:	4770      	bx	lr

000b50fa <_ZN12Adafruit_GFX11getRotationEv>:
}
   b50fa:	7e40      	ldrb	r0, [r0, #25]
   b50fc:	4770      	bx	lr

000b50fe <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   b50fe:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
   b5102:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
   b5106:	7643      	strb	r3, [r0, #25]
  switch(rotation) {
   b5108:	07c9      	lsls	r1, r1, #31
    _width  = WIDTH;
   b510a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b510e:	bf59      	ittee	pl
   b5110:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   b5112:	81c2      	strhpl	r2, [r0, #14]
    _width  = HEIGHT;
   b5114:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   b5116:	81c3      	strhmi	r3, [r0, #14]
}
   b5118:	4770      	bx	lr

000b511a <_ZN12Adafruit_GFX5widthEv>:
}
   b511a:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b511e:	4770      	bx	lr

000b5120 <_ZN12Adafruit_GFX6heightEv>:
}
   b5120:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b5124:	4770      	bx	lr
	...

000b5128 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5128:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b512a:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b512c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b5130:	2d02      	cmp	r5, #2
   b5132:	d069      	beq.n	b5208 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b5134:	2d03      	cmp	r5, #3
   b5136:	f000 8099 	beq.w	b526c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b513a:	2d01      	cmp	r5, #1
   b513c:	d16c      	bne.n	b5218 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b513e:	8905      	ldrh	r5, [r0, #8]
   b5140:	43d2      	mvns	r2, r2
   b5142:	442a      	add	r2, r5
   b5144:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b5146:	2a00      	cmp	r2, #0
   b5148:	db5d      	blt.n	b5206 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b514a:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b514e:	4295      	cmp	r5, r2
   b5150:	dd59      	ble.n	b5206 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b5152:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b5154:	bfbe      	ittt	lt
   b5156:	185b      	addlt	r3, r3, r1
   b5158:	b21b      	sxthlt	r3, r3
    __y = 0;
   b515a:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b515c:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b5160:	18cd      	adds	r5, r1, r3
   b5162:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b5164:	bfc4      	itt	gt
   b5166:	1a43      	subgt	r3, r0, r1
   b5168:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b516a:	2b00      	cmp	r3, #0
   b516c:	dd4b      	ble.n	b5206 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b516e:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b5172:	f8df c120 	ldr.w	ip, [pc, #288]	; b5294 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b5176:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b517a:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b517e:	b2db      	uxtb	r3, r3
  pBuf += x;
   b5180:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b5184:	d01a      	beq.n	b51bc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b5186:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b518a:	4e40      	ldr	r6, [pc, #256]	; (b528c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b518c:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b518e:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b5190:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b5192:	bf3f      	itttt	cc
   b5194:	eba5 0e03 	subcc.w	lr, r5, r3
   b5198:	26ff      	movcc	r6, #255	; 0xff
   b519a:	fa46 f60e 	asrcc.w	r6, r6, lr
   b519e:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b51a0:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b51a4:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b51a6:	bf0c      	ite	eq
   b51a8:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b51aa:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b51ac:	42ab      	cmp	r3, r5
   b51ae:	f80c 6002 	strb.w	r6, [ip, r2]
   b51b2:	d328      	bcc.n	b5206 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b51b4:	3908      	subs	r1, #8
   b51b6:	440b      	add	r3, r1
   b51b8:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b51ba:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b51bc:	2b07      	cmp	r3, #7
   b51be:	d919      	bls.n	b51f4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b51c0:	2c01      	cmp	r4, #1
   b51c2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b51c6:	bf18      	it	ne
   b51c8:	2500      	movne	r5, #0
   b51ca:	b2ed      	uxtb	r5, r5
   b51cc:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b51d0:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b51d2:	3a08      	subs	r2, #8
   b51d4:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b51d6:	2a07      	cmp	r2, #7
      *pBuf = val;
   b51d8:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b51dc:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b51e0:	d8f7      	bhi.n	b51d2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b51e2:	f1a3 0208 	sub.w	r2, r3, #8
   b51e6:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b51ea:	3201      	adds	r2, #1
   b51ec:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b51f0:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b51f4:	b13b      	cbz	r3, b5206 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b51f6:	4a26      	ldr	r2, [pc, #152]	; (b5290 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b51f8:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b51fa:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b51fc:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b51fe:	bf0c      	ite	eq
   b5200:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b5202:	4393      	bicne	r3, r2
   b5204:	7003      	strb	r3, [r0, #0]
}
   b5206:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b5208:	8945      	ldrh	r5, [r0, #10]
   b520a:	43d2      	mvns	r2, r2
   b520c:	442a      	add	r2, r5
      x -= (w-1);
   b520e:	18cd      	adds	r5, r1, r3
   b5210:	8901      	ldrh	r1, [r0, #8]
   b5212:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b5214:	b212      	sxth	r2, r2
      x -= (w-1);
   b5216:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b5218:	2a00      	cmp	r2, #0
   b521a:	dbf4      	blt.n	b5206 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b521c:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b5220:	4295      	cmp	r5, r2
   b5222:	ddf0      	ble.n	b5206 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b5224:	2900      	cmp	r1, #0
    w += x;
   b5226:	bfbe      	ittt	lt
   b5228:	185b      	addlt	r3, r3, r1
   b522a:	b21b      	sxthlt	r3, r3
    x = 0;
   b522c:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b522e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b5232:	18ce      	adds	r6, r1, r3
   b5234:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b5236:	bfc4      	itt	gt
   b5238:	1a6b      	subgt	r3, r5, r1
   b523a:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b523c:	2b00      	cmp	r3, #0
   b523e:	dde2      	ble.n	b5206 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b5240:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b5242:	2580      	movs	r5, #128	; 0x80
   b5244:	fb10 1105 	smlabb	r1, r0, r5, r1
   b5248:	4812      	ldr	r0, [pc, #72]	; (b5294 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b524a:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b524c:	f002 0007 	and.w	r0, r2, #7
   b5250:	2201      	movs	r2, #1
   b5252:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b5254:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b5256:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b5258:	440b      	add	r3, r1
   b525a:	d10c      	bne.n	b5276 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b525c:	428b      	cmp	r3, r1
   b525e:	d0d2      	beq.n	b5206 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5260:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5264:	4310      	orrs	r0, r2
   b5266:	f801 0c01 	strb.w	r0, [r1, #-1]
   b526a:	e7f7      	b.n	b525c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b526c:	18cd      	adds	r5, r1, r3
   b526e:	8941      	ldrh	r1, [r0, #10]
   b5270:	1b49      	subs	r1, r1, r5
   b5272:	b209      	sxth	r1, r1
      break;
   b5274:	e767      	b.n	b5146 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b5276:	43d2      	mvns	r2, r2
   b5278:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b527a:	428b      	cmp	r3, r1
   b527c:	d0c3      	beq.n	b5206 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b527e:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5282:	4010      	ands	r0, r2
   b5284:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5288:	e7f7      	b.n	b527a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b528a:	bf00      	nop
   b528c:	2003e1ac 	.word	0x2003e1ac
   b5290:	2003e1a4 	.word	0x2003e1a4
   b5294:	2003e1b4 	.word	0x2003e1b4

000b5298 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5298:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b529a:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b529c:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b52a0:	2d02      	cmp	r5, #2
   b52a2:	d034      	beq.n	b530e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b52a4:	2d03      	cmp	r5, #3
   b52a6:	f000 809b 	beq.w	b53e0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b52aa:	2d01      	cmp	r5, #1
   b52ac:	d137      	bne.n	b531e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b52ae:	18d5      	adds	r5, r2, r3
   b52b0:	8902      	ldrh	r2, [r0, #8]
   b52b2:	1b52      	subs	r2, r2, r5
   b52b4:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b52b6:	2900      	cmp	r1, #0
   b52b8:	f2c0 8091 	blt.w	b53de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b52bc:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b52c0:	428d      	cmp	r5, r1
   b52c2:	f340 808c 	ble.w	b53de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b52c6:	2a00      	cmp	r2, #0
    w += x;
   b52c8:	bfbe      	ittt	lt
   b52ca:	189b      	addlt	r3, r3, r2
   b52cc:	b21b      	sxthlt	r3, r3
    x = 0;
   b52ce:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b52d0:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b52d4:	18d6      	adds	r6, r2, r3
   b52d6:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b52d8:	bfc4      	itt	gt
   b52da:	1aab      	subgt	r3, r5, r2
   b52dc:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b52de:	2b00      	cmp	r3, #0
   b52e0:	dd7d      	ble.n	b53de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b52e2:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b52e4:	2580      	movs	r5, #128	; 0x80
   b52e6:	fb10 2205 	smlabb	r2, r0, r5, r2
   b52ea:	4845      	ldr	r0, [pc, #276]	; (b5400 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b52ec:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b52ee:	f001 0007 	and.w	r0, r1, #7
   b52f2:	2101      	movs	r1, #1
   b52f4:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b52f6:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b52f8:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b52fa:	4413      	add	r3, r2
   b52fc:	d175      	bne.n	b53ea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b52fe:	429a      	cmp	r2, r3
   b5300:	d06d      	beq.n	b53de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5302:	f812 0b01 	ldrb.w	r0, [r2], #1
   b5306:	4308      	orrs	r0, r1
   b5308:	f802 0c01 	strb.w	r0, [r2, #-1]
   b530c:	e7f7      	b.n	b52fe <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b530e:	8905      	ldrh	r5, [r0, #8]
   b5310:	43c9      	mvns	r1, r1
   b5312:	4429      	add	r1, r5
      y -= (h-1);
   b5314:	18d5      	adds	r5, r2, r3
   b5316:	8942      	ldrh	r2, [r0, #10]
   b5318:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b531a:	b209      	sxth	r1, r1
      y -= (h-1);
   b531c:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b531e:	2900      	cmp	r1, #0
   b5320:	db5d      	blt.n	b53de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5322:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b5326:	428d      	cmp	r5, r1
   b5328:	dd59      	ble.n	b53de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b532a:	2a00      	cmp	r2, #0
    __h += __y;
   b532c:	bfbe      	ittt	lt
   b532e:	189b      	addlt	r3, r3, r2
   b5330:	b21b      	sxthlt	r3, r3
    __y = 0;
   b5332:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b5334:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b5338:	18d5      	adds	r5, r2, r3
   b533a:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b533c:	bfc4      	itt	gt
   b533e:	1a83      	subgt	r3, r0, r2
   b5340:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b5342:	2b00      	cmp	r3, #0
   b5344:	dd4b      	ble.n	b53de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b5346:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b534a:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b5400 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b534e:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b5352:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b5356:	b2db      	uxtb	r3, r3
  pBuf += x;
   b5358:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b535c:	d01a      	beq.n	b5394 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b535e:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b5362:	4e28      	ldr	r6, [pc, #160]	; (b5404 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b5364:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b5366:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b5368:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b536a:	bf3f      	itttt	cc
   b536c:	eba5 0e03 	subcc.w	lr, r5, r3
   b5370:	26ff      	movcc	r6, #255	; 0xff
   b5372:	fa46 f60e 	asrcc.w	r6, r6, lr
   b5376:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b5378:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b537c:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b537e:	bf0c      	ite	eq
   b5380:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b5382:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b5384:	42ab      	cmp	r3, r5
   b5386:	f80c 6001 	strb.w	r6, [ip, r1]
   b538a:	d328      	bcc.n	b53de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b538c:	3a08      	subs	r2, #8
   b538e:	4413      	add	r3, r2
   b5390:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b5392:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b5394:	2b07      	cmp	r3, #7
   b5396:	d919      	bls.n	b53cc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b5398:	2c01      	cmp	r4, #1
   b539a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b539e:	bf18      	it	ne
   b53a0:	2500      	movne	r5, #0
   b53a2:	b2ed      	uxtb	r5, r5
   b53a4:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b53a8:	461a      	mov	r2, r3
      h -= 8;
   b53aa:	3a08      	subs	r2, #8
   b53ac:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b53ae:	2a07      	cmp	r2, #7
      *pBuf = val;
   b53b0:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b53b4:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b53b8:	d8f7      	bhi.n	b53aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b53ba:	f1a3 0208 	sub.w	r2, r3, #8
   b53be:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b53c2:	3201      	adds	r2, #1
   b53c4:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b53c8:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b53cc:	b13b      	cbz	r3, b53de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b53ce:	4a0e      	ldr	r2, [pc, #56]	; (b5408 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b53d0:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b53d2:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b53d4:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b53d6:	bf0c      	ite	eq
   b53d8:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b53da:	4393      	bicne	r3, r2
   b53dc:	7003      	strb	r3, [r0, #0]
}
   b53de:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b53e0:	8945      	ldrh	r5, [r0, #10]
   b53e2:	43c9      	mvns	r1, r1
   b53e4:	4429      	add	r1, r5
   b53e6:	b209      	sxth	r1, r1
      break;
   b53e8:	e765      	b.n	b52b6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b53ea:	43c9      	mvns	r1, r1
   b53ec:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b53ee:	429a      	cmp	r2, r3
   b53f0:	d0f5      	beq.n	b53de <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b53f2:	f812 0b01 	ldrb.w	r0, [r2], #1
   b53f6:	4008      	ands	r0, r1
   b53f8:	f802 0c01 	strb.w	r0, [r2, #-1]
   b53fc:	e7f7      	b.n	b53ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b53fe:	bf00      	nop
   b5400:	2003e1b4 	.word	0x2003e1b4
   b5404:	2003e1ac 	.word	0x2003e1ac
   b5408:	2003e1a4 	.word	0x2003e1a4

000b540c <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b540c:	4770      	bx	lr
	...

000b5410 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b5412:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5414:	4606      	mov	r6, r0
   b5416:	4614      	mov	r4, r2
   b5418:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b541a:	db2d      	blt.n	b5478 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b541c:	f7ff fe7d 	bl	b511a <_ZN12Adafruit_GFX5widthEv>
   b5420:	42a8      	cmp	r0, r5
   b5422:	dd29      	ble.n	b5478 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5424:	2c00      	cmp	r4, #0
   b5426:	db27      	blt.n	b5478 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5428:	4630      	mov	r0, r6
   b542a:	f7ff fe79 	bl	b5120 <_ZN12Adafruit_GFX6heightEv>
   b542e:	42a0      	cmp	r0, r4
   b5430:	dd22      	ble.n	b5478 <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b5432:	4630      	mov	r0, r6
   b5434:	f7ff fe61 	bl	b50fa <_ZN12Adafruit_GFX11getRotationEv>
   b5438:	2802      	cmp	r0, #2
   b543a:	d01e      	beq.n	b547a <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b543c:	2803      	cmp	r0, #3
   b543e:	d025      	beq.n	b548c <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b5440:	2801      	cmp	r0, #1
   b5442:	d104      	bne.n	b544e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b5444:	8933      	ldrh	r3, [r6, #8]
   b5446:	43e2      	mvns	r2, r4
   b5448:	441a      	add	r2, r3
    break;
   b544a:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b544c:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b544e:	2c00      	cmp	r4, #0
   b5450:	4622      	mov	r2, r4
   b5452:	bfb8      	it	lt
   b5454:	1de2      	addlt	r2, r4, #7
   b5456:	10d2      	asrs	r2, r2, #3
   b5458:	2180      	movs	r1, #128	; 0x80
   b545a:	fb12 5501 	smlabb	r5, r2, r1, r5
   b545e:	490e      	ldr	r1, [pc, #56]	; (b5498 <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b5460:	2201      	movs	r2, #1
   b5462:	f004 0407 	and.w	r4, r4, #7
   b5466:	574b      	ldrsb	r3, [r1, r5]
   b5468:	fa02 f404 	lsl.w	r4, r2, r4
   b546c:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b546e:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b5470:	bf0c      	ite	eq
   b5472:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b5474:	43a3      	bicne	r3, r4
   b5476:	554b      	strb	r3, [r1, r5]
}
   b5478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b547a:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b547c:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b547e:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b5480:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b5482:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b5484:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b5486:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b5488:	b224      	sxth	r4, r4
    break;
   b548a:	e7e0      	b.n	b544e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b548c:	8973      	ldrh	r3, [r6, #10]
   b548e:	3b01      	subs	r3, #1
   b5490:	1b5b      	subs	r3, r3, r5
    break;
   b5492:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b5494:	b21c      	sxth	r4, r3
    break;
   b5496:	e7da      	b.n	b544e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b5498:	2003e1b4 	.word	0x2003e1b4

000b549c <_ZN16Adafruit_SSD1306D0Ev>:
   b549c:	b510      	push	{r4, lr}
   b549e:	2124      	movs	r1, #36	; 0x24
   b54a0:	4604      	mov	r4, r0
   b54a2:	f7fe fdfa 	bl	b409a <_ZdlPvj>
   b54a6:	4620      	mov	r0, r4
   b54a8:	bd10      	pop	{r4, pc}
	...

000b54ac <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b54ac:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b54ae:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b54b0:	4604      	mov	r4, r0
   b54b2:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b54b4:	2180      	movs	r1, #128	; 0x80
   b54b6:	f7ff fd47 	bl	b4f48 <_ZN12Adafruit_GFXC1Ess>
   b54ba:	4b06      	ldr	r3, [pc, #24]	; (b54d4 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b54bc:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b54be:	23ff      	movs	r3, #255	; 0xff
   b54c0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b54c4:	7763      	strb	r3, [r4, #29]
   b54c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b54ca:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b54cc:	f884 5020 	strb.w	r5, [r4, #32]
}
   b54d0:	4620      	mov	r0, r4
   b54d2:	bd38      	pop	{r3, r4, r5, pc}
   b54d4:	000b7a00 	.word	0x000b7a00

000b54d8 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b54d8:	4802      	ldr	r0, [pc, #8]	; (b54e4 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b54da:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b54de:	2100      	movs	r1, #0
   b54e0:	f001 bf12 	b.w	b7308 <memset>
   b54e4:	2003e1b4 	.word	0x2003e1b4

000b54e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b54e8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b54ea:	4c0b      	ldr	r4, [pc, #44]	; (b5518 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b54ec:	7821      	ldrb	r1, [r4, #0]
   b54ee:	f3bf 8f5b 	dmb	ish
   b54f2:	f011 0101 	ands.w	r1, r1, #1
   b54f6:	d10b      	bne.n	b5510 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b54f8:	4620      	mov	r0, r4
   b54fa:	9101      	str	r1, [sp, #4]
   b54fc:	f7fe fddc 	bl	b40b8 <__cxa_guard_acquire>
   b5500:	9901      	ldr	r1, [sp, #4]
   b5502:	b128      	cbz	r0, b5510 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5504:	4805      	ldr	r0, [pc, #20]	; (b551c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5506:	f000 fee5 	bl	b62d4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b550a:	4620      	mov	r0, r4
   b550c:	f7fe fdd9 	bl	b40c2 <__cxa_guard_release>
        return instance;
    }
   b5510:	4802      	ldr	r0, [pc, #8]	; (b551c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5512:	b002      	add	sp, #8
   b5514:	bd10      	pop	{r4, pc}
   b5516:	bf00      	nop
   b5518:	2003e6b8 	.word	0x2003e6b8
   b551c:	2003e6bc 	.word	0x2003e6bc

000b5520 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b5520:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b5522:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b5526:	b143      	cbz	r3, b553a <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b5528:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b552a:	f7ff ffdd 	bl	b54e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b552e:	9901      	ldr	r1, [sp, #4]
}
   b5530:	b003      	add	sp, #12
   b5532:	f85d eb04 	ldr.w	lr, [sp], #4
   b5536:	f000 bf81 	b.w	b643c <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b553a:	460b      	mov	r3, r1
   b553c:	7f81      	ldrb	r1, [r0, #30]
   b553e:	7f40      	ldrb	r0, [r0, #29]
   b5540:	2201      	movs	r2, #1
}
   b5542:	b003      	add	sp, #12
   b5544:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b5548:	f001 bd15 	b.w	b6f76 <shiftOut>

000b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b554c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b554e:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5552:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b5554:	4604      	mov	r4, r0
   b5556:	460d      	mov	r5, r1
  if (sid != -1)
   b5558:	d01d      	beq.n	b5596 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b555a:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b555e:	2101      	movs	r1, #1
   b5560:	b280      	uxth	r0, r0
   b5562:	f001 fcd8 	bl	b6f16 <digitalWrite>
    digitalWrite(dc, LOW);
   b5566:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b556a:	2100      	movs	r1, #0
   b556c:	b280      	uxth	r0, r0
   b556e:	f001 fcd2 	bl	b6f16 <digitalWrite>
    digitalWrite(cs, LOW);
   b5572:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5576:	2100      	movs	r1, #0
   b5578:	b280      	uxth	r0, r0
   b557a:	f001 fccc 	bl	b6f16 <digitalWrite>
    fastSPIwrite(c);
   b557e:	4629      	mov	r1, r5
   b5580:	4620      	mov	r0, r4
   b5582:	f7ff ffcd 	bl	b5520 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b5586:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b558a:	2101      	movs	r1, #1
}
   b558c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b5590:	b280      	uxth	r0, r0
   b5592:	f001 bcc0 	b.w	b6f16 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b5596:	f001 fd2b 	bl	b6ff0 <_Z19__fetch_global_Wirev>
   b559a:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b559e:	f000 fcb5 	bl	b5f0c <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b55a2:	f001 fd25 	bl	b6ff0 <_Z19__fetch_global_Wirev>
   b55a6:	6803      	ldr	r3, [r0, #0]
   b55a8:	2100      	movs	r1, #0
   b55aa:	689b      	ldr	r3, [r3, #8]
   b55ac:	4798      	blx	r3
    Wire.write(c);
   b55ae:	f001 fd1f 	bl	b6ff0 <_Z19__fetch_global_Wirev>
   b55b2:	6803      	ldr	r3, [r0, #0]
   b55b4:	4629      	mov	r1, r5
   b55b6:	689b      	ldr	r3, [r3, #8]
   b55b8:	4798      	blx	r3
    Wire.endTransmission();
   b55ba:	f001 fd19 	bl	b6ff0 <_Z19__fetch_global_Wirev>
}
   b55be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b55c2:	f000 bcaa 	b.w	b5f1a <_ZN7TwoWire15endTransmissionEv>
	...

000b55c8 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b55c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b55ca:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b55cc:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b55ce:	f7ff ffbd 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b55d2:	2100      	movs	r1, #0
   b55d4:	4620      	mov	r0, r4
   b55d6:	f7ff ffb9 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b55da:	217f      	movs	r1, #127	; 0x7f
   b55dc:	4620      	mov	r0, r4
   b55de:	f7ff ffb5 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b55e2:	2122      	movs	r1, #34	; 0x22
   b55e4:	4620      	mov	r0, r4
   b55e6:	f7ff ffb1 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b55ea:	2100      	movs	r1, #0
   b55ec:	4620      	mov	r0, r4
   b55ee:	f7ff ffad 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b55f2:	2107      	movs	r1, #7
   b55f4:	4620      	mov	r0, r4
   b55f6:	f7ff ffa9 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b55fa:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b55fe:	4f29      	ldr	r7, [pc, #164]	; (b56a4 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b5600:	3301      	adds	r3, #1
   b5602:	d02a      	beq.n	b565a <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b5604:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5608:	2101      	movs	r1, #1
   b560a:	b280      	uxth	r0, r0
   b560c:	f001 fc83 	bl	b6f16 <digitalWrite>
    digitalWrite(dc, HIGH);
   b5610:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5614:	2101      	movs	r1, #1
   b5616:	b280      	uxth	r0, r0
   b5618:	f001 fc7d 	bl	b6f16 <digitalWrite>
    digitalWrite(cs, LOW);
   b561c:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5620:	2100      	movs	r1, #0
   b5622:	b280      	uxth	r0, r0
   b5624:	f001 fc77 	bl	b6f16 <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b5628:	2001      	movs	r0, #1
   b562a:	f000 f925 	bl	b5878 <HAL_Delay_Microseconds>
   b562e:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5632:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b5634:	f817 1b01 	ldrb.w	r1, [r7], #1
   b5638:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b563a:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b563c:	f7ff ff70 	bl	b5520 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5640:	2d00      	cmp	r5, #0
   b5642:	d1f6      	bne.n	b5632 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b5644:	2001      	movs	r0, #1
   b5646:	f000 f917 	bl	b5878 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b564a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b564e:	2101      	movs	r1, #1
}
   b5650:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b5654:	b280      	uxth	r0, r0
   b5656:	f001 bc5e 	b.w	b6f16 <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b565a:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b565c:	f001 fcc8 	bl	b6ff0 <_Z19__fetch_global_Wirev>
   b5660:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b5664:	f000 fc52 	bl	b5f0c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b5668:	f001 fcc2 	bl	b6ff0 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b566c:	6803      	ldr	r3, [r0, #0]
   b566e:	2140      	movs	r1, #64	; 0x40
   b5670:	689b      	ldr	r3, [r3, #8]
   b5672:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b5674:	f105 0610 	add.w	r6, r5, #16
   b5678:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b567a:	f001 fcb9 	bl	b6ff0 <_Z19__fetch_global_Wirev>
   b567e:	6803      	ldr	r3, [r0, #0]
   b5680:	5d79      	ldrb	r1, [r7, r5]
   b5682:	689b      	ldr	r3, [r3, #8]
   b5684:	4798      	blx	r3
		i++;
   b5686:	1c6b      	adds	r3, r5, #1
   b5688:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b568a:	42ae      	cmp	r6, r5
   b568c:	d1f5      	bne.n	b567a <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b568e:	f001 fcaf 	bl	b6ff0 <_Z19__fetch_global_Wirev>
   b5692:	f000 fc42 	bl	b5f1a <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5696:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b569a:	d100      	bne.n	b569e <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b569c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b569e:	4635      	mov	r5, r6
   b56a0:	e7dc      	b.n	b565c <_ZN16Adafruit_SSD13067displayEv+0x94>
   b56a2:	bf00      	nop
   b56a4:	2003e1b4 	.word	0x2003e1b4

000b56a8 <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b56a8:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b56aa:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b56ae:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b56b0:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b56b2:	4604      	mov	r4, r0
   b56b4:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b56b6:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b56b8:	f000 80c9 	beq.w	b584e <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b56bc:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b56c0:	2101      	movs	r1, #1
   b56c2:	b280      	uxth	r0, r0
   b56c4:	f001 fc16 	bl	b6ef4 <pinMode>
    pinMode(cs, OUTPUT);
   b56c8:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b56cc:	2101      	movs	r1, #1
   b56ce:	b280      	uxth	r0, r0
   b56d0:	f001 fc10 	bl	b6ef4 <pinMode>
    if (!hwSPI){
   b56d4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b56d8:	2b00      	cmp	r3, #0
   b56da:	f000 80a6 	beq.w	b582a <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b56de:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b56e2:	2101      	movs	r1, #1
   b56e4:	b280      	uxth	r0, r0
   b56e6:	f001 fc16 	bl	b6f16 <digitalWrite>
        instance().setBitOrder(order);
   b56ea:	f7ff fefd 	bl	b54e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b56ee:	2101      	movs	r1, #1
   b56f0:	f000 fe0e 	bl	b6310 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b56f4:	f7ff fef8 	bl	b54e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b56f8:	2110      	movs	r1, #16
   b56fa:	f000 fe79 	bl	b63f0 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b56fe:	f7ff fef3 	bl	b54e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5702:	2100      	movs	r1, #0
   b5704:	f000 fe18 	bl	b6338 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b5708:	f7ff feee 	bl	b54e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b570c:	f000 fdec 	bl	b62e8 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b5710:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5714:	2101      	movs	r1, #1
   b5716:	b280      	uxth	r0, r0
   b5718:	f001 fbec 	bl	b6ef4 <pinMode>
  digitalWrite(rst, HIGH);
   b571c:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5720:	2101      	movs	r1, #1
   b5722:	b280      	uxth	r0, r0
   b5724:	f001 fbf7 	bl	b6f16 <digitalWrite>
  delay(1);
   b5728:	2001      	movs	r0, #1
   b572a:	f000 fb51 	bl	b5dd0 <delay>
  digitalWrite(rst, LOW);
   b572e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5732:	2100      	movs	r1, #0
   b5734:	b280      	uxth	r0, r0
   b5736:	f001 fbee 	bl	b6f16 <digitalWrite>
  delay(10);
   b573a:	200a      	movs	r0, #10
   b573c:	f000 fb48 	bl	b5dd0 <delay>
  digitalWrite(rst, HIGH);
   b5740:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5744:	2101      	movs	r1, #1
   b5746:	b280      	uxth	r0, r0
   b5748:	f001 fbe5 	bl	b6f16 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b574c:	4620      	mov	r0, r4
   b574e:	21ae      	movs	r1, #174	; 0xae
   b5750:	f7ff fefc 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b5754:	4620      	mov	r0, r4
   b5756:	21d5      	movs	r1, #213	; 0xd5
   b5758:	f7ff fef8 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b575c:	4620      	mov	r0, r4
   b575e:	2180      	movs	r1, #128	; 0x80
   b5760:	f7ff fef4 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b5764:	4620      	mov	r0, r4
   b5766:	21a8      	movs	r1, #168	; 0xa8
   b5768:	f7ff fef0 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b576c:	4620      	mov	r0, r4
   b576e:	213f      	movs	r1, #63	; 0x3f
   b5770:	f7ff feec 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b5774:	4620      	mov	r0, r4
   b5776:	21d3      	movs	r1, #211	; 0xd3
   b5778:	f7ff fee8 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b577c:	4620      	mov	r0, r4
   b577e:	2100      	movs	r1, #0
   b5780:	f7ff fee4 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b5784:	4620      	mov	r0, r4
   b5786:	2140      	movs	r1, #64	; 0x40
   b5788:	f7ff fee0 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b578c:	218d      	movs	r1, #141	; 0x8d
   b578e:	4620      	mov	r0, r4
   b5790:	f7ff fedc 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5794:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b5796:	bf0c      	ite	eq
   b5798:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b579a:	2114      	movne	r1, #20
   b579c:	4620      	mov	r0, r4
   b579e:	f7ff fed5 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b57a2:	4620      	mov	r0, r4
   b57a4:	2120      	movs	r1, #32
   b57a6:	f7ff fed1 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b57aa:	4620      	mov	r0, r4
   b57ac:	2100      	movs	r1, #0
   b57ae:	f7ff fecd 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b57b2:	4620      	mov	r0, r4
   b57b4:	21a1      	movs	r1, #161	; 0xa1
   b57b6:	f7ff fec9 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b57ba:	4620      	mov	r0, r4
   b57bc:	21c8      	movs	r1, #200	; 0xc8
   b57be:	f7ff fec5 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b57c2:	4620      	mov	r0, r4
   b57c4:	21da      	movs	r1, #218	; 0xda
   b57c6:	f7ff fec1 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b57ca:	4620      	mov	r0, r4
   b57cc:	2112      	movs	r1, #18
   b57ce:	f7ff febd 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b57d2:	2181      	movs	r1, #129	; 0x81
   b57d4:	4620      	mov	r0, r4
   b57d6:	f7ff feb9 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b57da:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b57dc:	bf0c      	ite	eq
   b57de:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b57e0:	21cf      	movne	r1, #207	; 0xcf
   b57e2:	4620      	mov	r0, r4
   b57e4:	f7ff feb2 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b57e8:	21d9      	movs	r1, #217	; 0xd9
   b57ea:	4620      	mov	r0, r4
   b57ec:	f7ff feae 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b57f0:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b57f2:	bf0c      	ite	eq
   b57f4:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b57f6:	21f1      	movne	r1, #241	; 0xf1
   b57f8:	4620      	mov	r0, r4
   b57fa:	f7ff fea7 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b57fe:	4620      	mov	r0, r4
   b5800:	21db      	movs	r1, #219	; 0xdb
   b5802:	f7ff fea3 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b5806:	4620      	mov	r0, r4
   b5808:	2140      	movs	r1, #64	; 0x40
   b580a:	f7ff fe9f 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b580e:	4620      	mov	r0, r4
   b5810:	21a4      	movs	r1, #164	; 0xa4
   b5812:	f7ff fe9b 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b5816:	4620      	mov	r0, r4
   b5818:	21a6      	movs	r1, #166	; 0xa6
   b581a:	f7ff fe97 	bl	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b581e:	4620      	mov	r0, r4
   b5820:	21af      	movs	r1, #175	; 0xaf
}
   b5822:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b5826:	f7ff be91 	b.w	b554c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b582a:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b582e:	2101      	movs	r1, #1
   b5830:	b280      	uxth	r0, r0
   b5832:	f001 fb5f 	bl	b6ef4 <pinMode>
    	pinMode(sclk, OUTPUT);
   b5836:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b583a:	2101      	movs	r1, #1
   b583c:	b280      	uxth	r0, r0
   b583e:	f001 fb59 	bl	b6ef4 <pinMode>
    if (hwSPI){
   b5842:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b5846:	2b00      	cmp	r3, #0
   b5848:	f43f af62 	beq.w	b5710 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b584c:	e747      	b.n	b56de <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b584e:	f001 fbcf 	bl	b6ff0 <_Z19__fetch_global_Wirev>
   b5852:	f000 fb51 	bl	b5ef8 <_ZN7TwoWire5beginEv>
   b5856:	e75b      	b.n	b5710 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b5858 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5858:	b508      	push	{r3, lr}
   b585a:	4b02      	ldr	r3, [pc, #8]	; (b5864 <os_mutex_recursive_create+0xc>)
   b585c:	681b      	ldr	r3, [r3, #0]
   b585e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5860:	9301      	str	r3, [sp, #4]
   b5862:	bd08      	pop	{r3, pc}
   b5864:	00030248 	.word	0x00030248

000b5868 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5868:	b508      	push	{r3, lr}
   b586a:	4b02      	ldr	r3, [pc, #8]	; (b5874 <HAL_RNG_GetRandomNumber+0xc>)
   b586c:	681b      	ldr	r3, [r3, #0]
   b586e:	685b      	ldr	r3, [r3, #4]
   b5870:	9301      	str	r3, [sp, #4]
   b5872:	bd08      	pop	{r3, pc}
   b5874:	00030218 	.word	0x00030218

000b5878 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5878:	b508      	push	{r3, lr}
   b587a:	4b02      	ldr	r3, [pc, #8]	; (b5884 <HAL_Delay_Microseconds+0xc>)
   b587c:	681b      	ldr	r3, [r3, #0]
   b587e:	68db      	ldr	r3, [r3, #12]
   b5880:	9301      	str	r3, [sp, #4]
   b5882:	bd08      	pop	{r3, pc}
   b5884:	00030218 	.word	0x00030218

000b5888 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b5888:	b508      	push	{r3, lr}
   b588a:	4b02      	ldr	r3, [pc, #8]	; (b5894 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b588c:	681b      	ldr	r3, [r3, #0]
   b588e:	691b      	ldr	r3, [r3, #16]
   b5890:	9301      	str	r3, [sp, #4]
   b5892:	bd08      	pop	{r3, pc}
   b5894:	00030218 	.word	0x00030218

000b5898 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5898:	b508      	push	{r3, lr}
   b589a:	4b02      	ldr	r3, [pc, #8]	; (b58a4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b589c:	681b      	ldr	r3, [r3, #0]
   b589e:	695b      	ldr	r3, [r3, #20]
   b58a0:	9301      	str	r3, [sp, #4]
   b58a2:	bd08      	pop	{r3, pc}
   b58a4:	00030218 	.word	0x00030218

000b58a8 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b58a8:	b508      	push	{r3, lr}
   b58aa:	4b02      	ldr	r3, [pc, #8]	; (b58b4 <hal_timer_millis+0xc>)
   b58ac:	681b      	ldr	r3, [r3, #0]
   b58ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b58b0:	9301      	str	r3, [sp, #4]
   b58b2:	bd08      	pop	{r3, pc}
   b58b4:	00030218 	.word	0x00030218

000b58b8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b58b8:	b508      	push	{r3, lr}
   b58ba:	4b02      	ldr	r3, [pc, #8]	; (b58c4 <HAL_Pin_Map+0xc>)
   b58bc:	681b      	ldr	r3, [r3, #0]
   b58be:	681b      	ldr	r3, [r3, #0]
   b58c0:	9301      	str	r3, [sp, #4]
   b58c2:	bd08      	pop	{r3, pc}
   b58c4:	0003022c 	.word	0x0003022c

000b58c8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b58c8:	b508      	push	{r3, lr}
   b58ca:	4b02      	ldr	r3, [pc, #8]	; (b58d4 <HAL_Validate_Pin_Function+0xc>)
   b58cc:	681b      	ldr	r3, [r3, #0]
   b58ce:	685b      	ldr	r3, [r3, #4]
   b58d0:	9301      	str	r3, [sp, #4]
   b58d2:	bd08      	pop	{r3, pc}
   b58d4:	0003022c 	.word	0x0003022c

000b58d8 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b58d8:	b508      	push	{r3, lr}
   b58da:	4b02      	ldr	r3, [pc, #8]	; (b58e4 <HAL_Pin_Mode+0xc>)
   b58dc:	681b      	ldr	r3, [r3, #0]
   b58de:	689b      	ldr	r3, [r3, #8]
   b58e0:	9301      	str	r3, [sp, #4]
   b58e2:	bd08      	pop	{r3, pc}
   b58e4:	0003022c 	.word	0x0003022c

000b58e8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b58e8:	b508      	push	{r3, lr}
   b58ea:	4b02      	ldr	r3, [pc, #8]	; (b58f4 <HAL_Get_Pin_Mode+0xc>)
   b58ec:	681b      	ldr	r3, [r3, #0]
   b58ee:	68db      	ldr	r3, [r3, #12]
   b58f0:	9301      	str	r3, [sp, #4]
   b58f2:	bd08      	pop	{r3, pc}
   b58f4:	0003022c 	.word	0x0003022c

000b58f8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b58f8:	b508      	push	{r3, lr}
   b58fa:	4b02      	ldr	r3, [pc, #8]	; (b5904 <HAL_GPIO_Write+0xc>)
   b58fc:	681b      	ldr	r3, [r3, #0]
   b58fe:	691b      	ldr	r3, [r3, #16]
   b5900:	9301      	str	r3, [sp, #4]
   b5902:	bd08      	pop	{r3, pc}
   b5904:	0003022c 	.word	0x0003022c

000b5908 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b5908:	b508      	push	{r3, lr}
   b590a:	4b02      	ldr	r3, [pc, #8]	; (b5914 <hal_adc_read+0xc>)
   b590c:	681b      	ldr	r3, [r3, #0]
   b590e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5910:	9301      	str	r3, [sp, #4]
   b5912:	bd08      	pop	{r3, pc}
   b5914:	0003022c 	.word	0x0003022c

000b5918 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5918:	b508      	push	{r3, lr}
   b591a:	4b02      	ldr	r3, [pc, #8]	; (b5924 <hal_i2c_begin+0xc>)
   b591c:	681b      	ldr	r3, [r3, #0]
   b591e:	68db      	ldr	r3, [r3, #12]
   b5920:	9301      	str	r3, [sp, #4]
   b5922:	bd08      	pop	{r3, pc}
   b5924:	00030228 	.word	0x00030228

000b5928 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5928:	b508      	push	{r3, lr}
   b592a:	4b02      	ldr	r3, [pc, #8]	; (b5934 <hal_i2c_begin_transmission+0xc>)
   b592c:	681b      	ldr	r3, [r3, #0]
   b592e:	699b      	ldr	r3, [r3, #24]
   b5930:	9301      	str	r3, [sp, #4]
   b5932:	bd08      	pop	{r3, pc}
   b5934:	00030228 	.word	0x00030228

000b5938 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5938:	b508      	push	{r3, lr}
   b593a:	4b02      	ldr	r3, [pc, #8]	; (b5944 <hal_i2c_end_transmission+0xc>)
   b593c:	681b      	ldr	r3, [r3, #0]
   b593e:	69db      	ldr	r3, [r3, #28]
   b5940:	9301      	str	r3, [sp, #4]
   b5942:	bd08      	pop	{r3, pc}
   b5944:	00030228 	.word	0x00030228

000b5948 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5948:	b508      	push	{r3, lr}
   b594a:	4b02      	ldr	r3, [pc, #8]	; (b5954 <hal_i2c_write+0xc>)
   b594c:	681b      	ldr	r3, [r3, #0]
   b594e:	6a1b      	ldr	r3, [r3, #32]
   b5950:	9301      	str	r3, [sp, #4]
   b5952:	bd08      	pop	{r3, pc}
   b5954:	00030228 	.word	0x00030228

000b5958 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5958:	b508      	push	{r3, lr}
   b595a:	4b02      	ldr	r3, [pc, #8]	; (b5964 <hal_i2c_available+0xc>)
   b595c:	681b      	ldr	r3, [r3, #0]
   b595e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5960:	9301      	str	r3, [sp, #4]
   b5962:	bd08      	pop	{r3, pc}
   b5964:	00030228 	.word	0x00030228

000b5968 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b5968:	b508      	push	{r3, lr}
   b596a:	4b02      	ldr	r3, [pc, #8]	; (b5974 <hal_i2c_read+0xc>)
   b596c:	681b      	ldr	r3, [r3, #0]
   b596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5970:	9301      	str	r3, [sp, #4]
   b5972:	bd08      	pop	{r3, pc}
   b5974:	00030228 	.word	0x00030228

000b5978 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b5978:	b508      	push	{r3, lr}
   b597a:	4b02      	ldr	r3, [pc, #8]	; (b5984 <hal_i2c_peek+0xc>)
   b597c:	681b      	ldr	r3, [r3, #0]
   b597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5980:	9301      	str	r3, [sp, #4]
   b5982:	bd08      	pop	{r3, pc}
   b5984:	00030228 	.word	0x00030228

000b5988 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b5988:	b508      	push	{r3, lr}
   b598a:	4b02      	ldr	r3, [pc, #8]	; (b5994 <hal_i2c_flush+0xc>)
   b598c:	681b      	ldr	r3, [r3, #0]
   b598e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5990:	9301      	str	r3, [sp, #4]
   b5992:	bd08      	pop	{r3, pc}
   b5994:	00030228 	.word	0x00030228

000b5998 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b5998:	b508      	push	{r3, lr}
   b599a:	4b02      	ldr	r3, [pc, #8]	; (b59a4 <hal_i2c_is_enabled+0xc>)
   b599c:	681b      	ldr	r3, [r3, #0]
   b599e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b59a0:	9301      	str	r3, [sp, #4]
   b59a2:	bd08      	pop	{r3, pc}
   b59a4:	00030228 	.word	0x00030228

000b59a8 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b59a8:	b508      	push	{r3, lr}
   b59aa:	4b02      	ldr	r3, [pc, #8]	; (b59b4 <hal_i2c_init+0xc>)
   b59ac:	681b      	ldr	r3, [r3, #0]
   b59ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b59b0:	9301      	str	r3, [sp, #4]
   b59b2:	bd08      	pop	{r3, pc}
   b59b4:	00030228 	.word	0x00030228

000b59b8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b59b8:	b508      	push	{r3, lr}
   b59ba:	4b02      	ldr	r3, [pc, #8]	; (b59c4 <if_index_to_name+0xc>)
   b59bc:	681b      	ldr	r3, [r3, #0]
   b59be:	695b      	ldr	r3, [r3, #20]
   b59c0:	9301      	str	r3, [sp, #4]
   b59c2:	bd08      	pop	{r3, pc}
   b59c4:	0003026c 	.word	0x0003026c

000b59c8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b59c8:	b508      	push	{r3, lr}
   b59ca:	4b02      	ldr	r3, [pc, #8]	; (b59d4 <inet_inet_ntop+0xc>)
   b59cc:	681b      	ldr	r3, [r3, #0]
   b59ce:	695b      	ldr	r3, [r3, #20]
   b59d0:	9301      	str	r3, [sp, #4]
   b59d2:	bd08      	pop	{r3, pc}
   b59d4:	00030264 	.word	0x00030264

000b59d8 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b59d8:	b508      	push	{r3, lr}
   b59da:	4b02      	ldr	r3, [pc, #8]	; (b59e4 <inet_htonl+0xc>)
   b59dc:	681b      	ldr	r3, [r3, #0]
   b59de:	6a1b      	ldr	r3, [r3, #32]
   b59e0:	9301      	str	r3, [sp, #4]
   b59e2:	bd08      	pop	{r3, pc}
   b59e4:	00030264 	.word	0x00030264

000b59e8 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b59e8:	b508      	push	{r3, lr}
   b59ea:	4b02      	ldr	r3, [pc, #8]	; (b59f4 <inet_htons+0xc>)
   b59ec:	681b      	ldr	r3, [r3, #0]
   b59ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b59f0:	9301      	str	r3, [sp, #4]
   b59f2:	bd08      	pop	{r3, pc}
   b59f4:	00030264 	.word	0x00030264

000b59f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b59f8:	b508      	push	{r3, lr}
   b59fa:	4b02      	ldr	r3, [pc, #8]	; (b5a04 <netdb_freeaddrinfo+0xc>)
   b59fc:	681b      	ldr	r3, [r3, #0]
   b59fe:	689b      	ldr	r3, [r3, #8]
   b5a00:	9301      	str	r3, [sp, #4]
   b5a02:	bd08      	pop	{r3, pc}
   b5a04:	00030268 	.word	0x00030268

000b5a08 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5a08:	b508      	push	{r3, lr}
   b5a0a:	4b02      	ldr	r3, [pc, #8]	; (b5a14 <netdb_getaddrinfo+0xc>)
   b5a0c:	681b      	ldr	r3, [r3, #0]
   b5a0e:	68db      	ldr	r3, [r3, #12]
   b5a10:	9301      	str	r3, [sp, #4]
   b5a12:	bd08      	pop	{r3, pc}
   b5a14:	00030268 	.word	0x00030268

000b5a18 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5a18:	b508      	push	{r3, lr}
   b5a1a:	4b02      	ldr	r3, [pc, #8]	; (b5a24 <sock_setsockopt+0xc>)
   b5a1c:	681b      	ldr	r3, [r3, #0]
   b5a1e:	699b      	ldr	r3, [r3, #24]
   b5a20:	9301      	str	r3, [sp, #4]
   b5a22:	bd08      	pop	{r3, pc}
   b5a24:	00030238 	.word	0x00030238

000b5a28 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5a28:	b508      	push	{r3, lr}
   b5a2a:	4b02      	ldr	r3, [pc, #8]	; (b5a34 <sock_close+0xc>)
   b5a2c:	681b      	ldr	r3, [r3, #0]
   b5a2e:	69db      	ldr	r3, [r3, #28]
   b5a30:	9301      	str	r3, [sp, #4]
   b5a32:	bd08      	pop	{r3, pc}
   b5a34:	00030238 	.word	0x00030238

000b5a38 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5a38:	b508      	push	{r3, lr}
   b5a3a:	4b02      	ldr	r3, [pc, #8]	; (b5a44 <sock_connect+0xc>)
   b5a3c:	681b      	ldr	r3, [r3, #0]
   b5a3e:	6a1b      	ldr	r3, [r3, #32]
   b5a40:	9301      	str	r3, [sp, #4]
   b5a42:	bd08      	pop	{r3, pc}
   b5a44:	00030238 	.word	0x00030238

000b5a48 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5a48:	b508      	push	{r3, lr}
   b5a4a:	4b02      	ldr	r3, [pc, #8]	; (b5a54 <sock_recv+0xc>)
   b5a4c:	681b      	ldr	r3, [r3, #0]
   b5a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5a50:	9301      	str	r3, [sp, #4]
   b5a52:	bd08      	pop	{r3, pc}
   b5a54:	00030238 	.word	0x00030238

000b5a58 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5a58:	b508      	push	{r3, lr}
   b5a5a:	4b02      	ldr	r3, [pc, #8]	; (b5a64 <sock_send+0xc>)
   b5a5c:	681b      	ldr	r3, [r3, #0]
   b5a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5a60:	9301      	str	r3, [sp, #4]
   b5a62:	bd08      	pop	{r3, pc}
   b5a64:	00030238 	.word	0x00030238

000b5a68 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5a68:	b508      	push	{r3, lr}
   b5a6a:	4b02      	ldr	r3, [pc, #8]	; (b5a74 <sock_socket+0xc>)
   b5a6c:	681b      	ldr	r3, [r3, #0]
   b5a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b5a70:	9301      	str	r3, [sp, #4]
   b5a72:	bd08      	pop	{r3, pc}
   b5a74:	00030238 	.word	0x00030238

000b5a78 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5a78:	b508      	push	{r3, lr}
   b5a7a:	4b02      	ldr	r3, [pc, #8]	; (b5a84 <hal_spi_begin+0xc>)
   b5a7c:	681b      	ldr	r3, [r3, #0]
   b5a7e:	681b      	ldr	r3, [r3, #0]
   b5a80:	9301      	str	r3, [sp, #4]
   b5a82:	bd08      	pop	{r3, pc}
   b5a84:	00030230 	.word	0x00030230

000b5a88 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b5a88:	b508      	push	{r3, lr}
   b5a8a:	4b02      	ldr	r3, [pc, #8]	; (b5a94 <hal_spi_set_bit_order+0xc>)
   b5a8c:	681b      	ldr	r3, [r3, #0]
   b5a8e:	689b      	ldr	r3, [r3, #8]
   b5a90:	9301      	str	r3, [sp, #4]
   b5a92:	bd08      	pop	{r3, pc}
   b5a94:	00030230 	.word	0x00030230

000b5a98 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b5a98:	b508      	push	{r3, lr}
   b5a9a:	4b02      	ldr	r3, [pc, #8]	; (b5aa4 <hal_spi_set_data_mode+0xc>)
   b5a9c:	681b      	ldr	r3, [r3, #0]
   b5a9e:	68db      	ldr	r3, [r3, #12]
   b5aa0:	9301      	str	r3, [sp, #4]
   b5aa2:	bd08      	pop	{r3, pc}
   b5aa4:	00030230 	.word	0x00030230

000b5aa8 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b5aa8:	b508      	push	{r3, lr}
   b5aaa:	4b02      	ldr	r3, [pc, #8]	; (b5ab4 <hal_spi_set_clock_divider+0xc>)
   b5aac:	681b      	ldr	r3, [r3, #0]
   b5aae:	691b      	ldr	r3, [r3, #16]
   b5ab0:	9301      	str	r3, [sp, #4]
   b5ab2:	bd08      	pop	{r3, pc}
   b5ab4:	00030230 	.word	0x00030230

000b5ab8 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5ab8:	b508      	push	{r3, lr}
   b5aba:	4b02      	ldr	r3, [pc, #8]	; (b5ac4 <hal_spi_transfer+0xc>)
   b5abc:	681b      	ldr	r3, [r3, #0]
   b5abe:	695b      	ldr	r3, [r3, #20]
   b5ac0:	9301      	str	r3, [sp, #4]
   b5ac2:	bd08      	pop	{r3, pc}
   b5ac4:	00030230 	.word	0x00030230

000b5ac8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5ac8:	b508      	push	{r3, lr}
   b5aca:	4b02      	ldr	r3, [pc, #8]	; (b5ad4 <hal_spi_init+0xc>)
   b5acc:	681b      	ldr	r3, [r3, #0]
   b5ace:	69db      	ldr	r3, [r3, #28]
   b5ad0:	9301      	str	r3, [sp, #4]
   b5ad2:	bd08      	pop	{r3, pc}
   b5ad4:	00030230 	.word	0x00030230

000b5ad8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b5ad8:	b508      	push	{r3, lr}
   b5ada:	4b02      	ldr	r3, [pc, #8]	; (b5ae4 <hal_spi_is_enabled+0xc>)
   b5adc:	681b      	ldr	r3, [r3, #0]
   b5ade:	6a1b      	ldr	r3, [r3, #32]
   b5ae0:	9301      	str	r3, [sp, #4]
   b5ae2:	bd08      	pop	{r3, pc}
   b5ae4:	00030230 	.word	0x00030230

000b5ae8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b5ae8:	b508      	push	{r3, lr}
   b5aea:	4b02      	ldr	r3, [pc, #8]	; (b5af4 <hal_spi_info+0xc>)
   b5aec:	681b      	ldr	r3, [r3, #0]
   b5aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5af0:	9301      	str	r3, [sp, #4]
   b5af2:	bd08      	pop	{r3, pc}
   b5af4:	00030230 	.word	0x00030230

000b5af8 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b5af8:	b508      	push	{r3, lr}
   b5afa:	4b02      	ldr	r3, [pc, #8]	; (b5b04 <hal_spi_acquire+0xc>)
   b5afc:	681b      	ldr	r3, [r3, #0]
   b5afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5b00:	9301      	str	r3, [sp, #4]
   b5b02:	bd08      	pop	{r3, pc}
   b5b04:	00030230 	.word	0x00030230

000b5b08 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b5b08:	b508      	push	{r3, lr}
   b5b0a:	4b02      	ldr	r3, [pc, #8]	; (b5b14 <hal_spi_release+0xc>)
   b5b0c:	681b      	ldr	r3, [r3, #0]
   b5b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5b10:	9301      	str	r3, [sp, #4]
   b5b12:	bd08      	pop	{r3, pc}
   b5b14:	00030230 	.word	0x00030230

000b5b18 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5b18:	b508      	push	{r3, lr}
   b5b1a:	4b02      	ldr	r3, [pc, #8]	; (b5b24 <hal_usart_write+0xc>)
   b5b1c:	681b      	ldr	r3, [r3, #0]
   b5b1e:	68db      	ldr	r3, [r3, #12]
   b5b20:	9301      	str	r3, [sp, #4]
   b5b22:	bd08      	pop	{r3, pc}
   b5b24:	0003023c 	.word	0x0003023c

000b5b28 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5b28:	b508      	push	{r3, lr}
   b5b2a:	4b02      	ldr	r3, [pc, #8]	; (b5b34 <hal_usart_available+0xc>)
   b5b2c:	681b      	ldr	r3, [r3, #0]
   b5b2e:	691b      	ldr	r3, [r3, #16]
   b5b30:	9301      	str	r3, [sp, #4]
   b5b32:	bd08      	pop	{r3, pc}
   b5b34:	0003023c 	.word	0x0003023c

000b5b38 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5b38:	b508      	push	{r3, lr}
   b5b3a:	4b02      	ldr	r3, [pc, #8]	; (b5b44 <hal_usart_read+0xc>)
   b5b3c:	681b      	ldr	r3, [r3, #0]
   b5b3e:	695b      	ldr	r3, [r3, #20]
   b5b40:	9301      	str	r3, [sp, #4]
   b5b42:	bd08      	pop	{r3, pc}
   b5b44:	0003023c 	.word	0x0003023c

000b5b48 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5b48:	b508      	push	{r3, lr}
   b5b4a:	4b02      	ldr	r3, [pc, #8]	; (b5b54 <hal_usart_peek+0xc>)
   b5b4c:	681b      	ldr	r3, [r3, #0]
   b5b4e:	699b      	ldr	r3, [r3, #24]
   b5b50:	9301      	str	r3, [sp, #4]
   b5b52:	bd08      	pop	{r3, pc}
   b5b54:	0003023c 	.word	0x0003023c

000b5b58 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5b58:	b508      	push	{r3, lr}
   b5b5a:	4b02      	ldr	r3, [pc, #8]	; (b5b64 <hal_usart_flush+0xc>)
   b5b5c:	681b      	ldr	r3, [r3, #0]
   b5b5e:	69db      	ldr	r3, [r3, #28]
   b5b60:	9301      	str	r3, [sp, #4]
   b5b62:	bd08      	pop	{r3, pc}
   b5b64:	0003023c 	.word	0x0003023c

000b5b68 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5b68:	b508      	push	{r3, lr}
   b5b6a:	4b02      	ldr	r3, [pc, #8]	; (b5b74 <hal_usart_is_enabled+0xc>)
   b5b6c:	681b      	ldr	r3, [r3, #0]
   b5b6e:	6a1b      	ldr	r3, [r3, #32]
   b5b70:	9301      	str	r3, [sp, #4]
   b5b72:	bd08      	pop	{r3, pc}
   b5b74:	0003023c 	.word	0x0003023c

000b5b78 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5b78:	b508      	push	{r3, lr}
   b5b7a:	4b02      	ldr	r3, [pc, #8]	; (b5b84 <hal_usart_available_data_for_write+0xc>)
   b5b7c:	681b      	ldr	r3, [r3, #0]
   b5b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5b80:	9301      	str	r3, [sp, #4]
   b5b82:	bd08      	pop	{r3, pc}
   b5b84:	0003023c 	.word	0x0003023c

000b5b88 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5b88:	b508      	push	{r3, lr}
   b5b8a:	4b02      	ldr	r3, [pc, #8]	; (b5b94 <hal_usart_init_ex+0xc>)
   b5b8c:	681b      	ldr	r3, [r3, #0]
   b5b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5b90:	9301      	str	r3, [sp, #4]
   b5b92:	bd08      	pop	{r3, pc}
   b5b94:	0003023c 	.word	0x0003023c

000b5b98 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5b98:	b508      	push	{r3, lr}
   b5b9a:	4b02      	ldr	r3, [pc, #8]	; (b5ba4 <HAL_USB_USART_Init+0xc>)
   b5b9c:	681b      	ldr	r3, [r3, #0]
   b5b9e:	681b      	ldr	r3, [r3, #0]
   b5ba0:	9301      	str	r3, [sp, #4]
   b5ba2:	bd08      	pop	{r3, pc}
   b5ba4:	0003024c 	.word	0x0003024c

000b5ba8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b5ba8:	b508      	push	{r3, lr}
   b5baa:	4b02      	ldr	r3, [pc, #8]	; (b5bb4 <HAL_USB_USART_Begin+0xc>)
   b5bac:	681b      	ldr	r3, [r3, #0]
   b5bae:	685b      	ldr	r3, [r3, #4]
   b5bb0:	9301      	str	r3, [sp, #4]
   b5bb2:	bd08      	pop	{r3, pc}
   b5bb4:	0003024c 	.word	0x0003024c

000b5bb8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5bb8:	b508      	push	{r3, lr}
   b5bba:	4b02      	ldr	r3, [pc, #8]	; (b5bc4 <HAL_USB_USART_Available_Data+0xc>)
   b5bbc:	681b      	ldr	r3, [r3, #0]
   b5bbe:	691b      	ldr	r3, [r3, #16]
   b5bc0:	9301      	str	r3, [sp, #4]
   b5bc2:	bd08      	pop	{r3, pc}
   b5bc4:	0003024c 	.word	0x0003024c

000b5bc8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5bc8:	b508      	push	{r3, lr}
   b5bca:	4b02      	ldr	r3, [pc, #8]	; (b5bd4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5bcc:	681b      	ldr	r3, [r3, #0]
   b5bce:	695b      	ldr	r3, [r3, #20]
   b5bd0:	9301      	str	r3, [sp, #4]
   b5bd2:	bd08      	pop	{r3, pc}
   b5bd4:	0003024c 	.word	0x0003024c

000b5bd8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5bd8:	b508      	push	{r3, lr}
   b5bda:	4b02      	ldr	r3, [pc, #8]	; (b5be4 <HAL_USB_USART_Receive_Data+0xc>)
   b5bdc:	681b      	ldr	r3, [r3, #0]
   b5bde:	699b      	ldr	r3, [r3, #24]
   b5be0:	9301      	str	r3, [sp, #4]
   b5be2:	bd08      	pop	{r3, pc}
   b5be4:	0003024c 	.word	0x0003024c

000b5be8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5be8:	b508      	push	{r3, lr}
   b5bea:	4b02      	ldr	r3, [pc, #8]	; (b5bf4 <HAL_USB_USART_Send_Data+0xc>)
   b5bec:	681b      	ldr	r3, [r3, #0]
   b5bee:	69db      	ldr	r3, [r3, #28]
   b5bf0:	9301      	str	r3, [sp, #4]
   b5bf2:	bd08      	pop	{r3, pc}
   b5bf4:	0003024c 	.word	0x0003024c

000b5bf8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5bf8:	b508      	push	{r3, lr}
   b5bfa:	4b02      	ldr	r3, [pc, #8]	; (b5c04 <HAL_USB_USART_Flush_Data+0xc>)
   b5bfc:	681b      	ldr	r3, [r3, #0]
   b5bfe:	6a1b      	ldr	r3, [r3, #32]
   b5c00:	9301      	str	r3, [sp, #4]
   b5c02:	bd08      	pop	{r3, pc}
   b5c04:	0003024c 	.word	0x0003024c

000b5c08 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b5c08:	b508      	push	{r3, lr}
   b5c0a:	4b02      	ldr	r3, [pc, #8]	; (b5c14 <HAL_USB_USART_Is_Connected+0xc>)
   b5c0c:	681b      	ldr	r3, [r3, #0]
   b5c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5c10:	9301      	str	r3, [sp, #4]
   b5c12:	bd08      	pop	{r3, pc}
   b5c14:	0003024c 	.word	0x0003024c

000b5c18 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5c18:	b508      	push	{r3, lr}
   b5c1a:	4b02      	ldr	r3, [pc, #8]	; (b5c24 <panic_+0xc>)
   b5c1c:	681b      	ldr	r3, [r3, #0]
   b5c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5c20:	9301      	str	r3, [sp, #4]
   b5c22:	bd08      	pop	{r3, pc}
   b5c24:	00030260 	.word	0x00030260

000b5c28 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5c28:	b508      	push	{r3, lr}
   b5c2a:	4b02      	ldr	r3, [pc, #8]	; (b5c34 <log_message+0xc>)
   b5c2c:	681b      	ldr	r3, [r3, #0]
   b5c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b5c30:	9301      	str	r3, [sp, #4]
   b5c32:	bd08      	pop	{r3, pc}
   b5c34:	00030260 	.word	0x00030260

000b5c38 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5c38:	b508      	push	{r3, lr}
   b5c3a:	4b02      	ldr	r3, [pc, #8]	; (b5c44 <set_system_mode+0xc>)
   b5c3c:	681b      	ldr	r3, [r3, #0]
   b5c3e:	685b      	ldr	r3, [r3, #4]
   b5c40:	9301      	str	r3, [sp, #4]
   b5c42:	bd08      	pop	{r3, pc}
   b5c44:	00030220 	.word	0x00030220

000b5c48 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5c48:	b508      	push	{r3, lr}
   b5c4a:	4b02      	ldr	r3, [pc, #8]	; (b5c54 <system_delay_ms+0xc>)
   b5c4c:	681b      	ldr	r3, [r3, #0]
   b5c4e:	695b      	ldr	r3, [r3, #20]
   b5c50:	9301      	str	r3, [sp, #4]
   b5c52:	bd08      	pop	{r3, pc}
   b5c54:	00030220 	.word	0x00030220

000b5c58 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5c58:	b508      	push	{r3, lr}
   b5c5a:	4b03      	ldr	r3, [pc, #12]	; (b5c68 <system_ctrl_set_app_request_handler+0x10>)
   b5c5c:	681b      	ldr	r3, [r3, #0]
   b5c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5c62:	9301      	str	r3, [sp, #4]
   b5c64:	bd08      	pop	{r3, pc}
   b5c66:	0000      	.short	0x0000
   b5c68:	00030220 	.word	0x00030220

000b5c6c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b5c6c:	b508      	push	{r3, lr}
   b5c6e:	4b03      	ldr	r3, [pc, #12]	; (b5c7c <system_ctrl_set_result+0x10>)
   b5c70:	681b      	ldr	r3, [r3, #0]
   b5c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5c76:	9301      	str	r3, [sp, #4]
   b5c78:	bd08      	pop	{r3, pc}
   b5c7a:	0000      	.short	0x0000
   b5c7c:	00030220 	.word	0x00030220

000b5c80 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b5c80:	b508      	push	{r3, lr}
   b5c82:	4b02      	ldr	r3, [pc, #8]	; (b5c8c <spark_process+0xc>)
   b5c84:	681b      	ldr	r3, [r3, #0]
   b5c86:	689b      	ldr	r3, [r3, #8]
   b5c88:	9301      	str	r3, [sp, #4]
   b5c8a:	bd08      	pop	{r3, pc}
   b5c8c:	00030244 	.word	0x00030244

000b5c90 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5c90:	b508      	push	{r3, lr}
   b5c92:	4b02      	ldr	r3, [pc, #8]	; (b5c9c <spark_set_random_seed_from_cloud_handler+0xc>)
   b5c94:	681b      	ldr	r3, [r3, #0]
   b5c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5c98:	9301      	str	r3, [sp, #4]
   b5c9a:	bd08      	pop	{r3, pc}
   b5c9c:	00030244 	.word	0x00030244

000b5ca0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5ca0:	b508      	push	{r3, lr}
   b5ca2:	4b02      	ldr	r3, [pc, #8]	; (b5cac <network_connect+0xc>)
   b5ca4:	681b      	ldr	r3, [r3, #0]
   b5ca6:	685b      	ldr	r3, [r3, #4]
   b5ca8:	9301      	str	r3, [sp, #4]
   b5caa:	bd08      	pop	{r3, pc}
   b5cac:	00030240 	.word	0x00030240

000b5cb0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5cb0:	b508      	push	{r3, lr}
   b5cb2:	4b02      	ldr	r3, [pc, #8]	; (b5cbc <network_connecting+0xc>)
   b5cb4:	681b      	ldr	r3, [r3, #0]
   b5cb6:	689b      	ldr	r3, [r3, #8]
   b5cb8:	9301      	str	r3, [sp, #4]
   b5cba:	bd08      	pop	{r3, pc}
   b5cbc:	00030240 	.word	0x00030240

000b5cc0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5cc0:	b508      	push	{r3, lr}
   b5cc2:	4b02      	ldr	r3, [pc, #8]	; (b5ccc <network_disconnect+0xc>)
   b5cc4:	681b      	ldr	r3, [r3, #0]
   b5cc6:	68db      	ldr	r3, [r3, #12]
   b5cc8:	9301      	str	r3, [sp, #4]
   b5cca:	bd08      	pop	{r3, pc}
   b5ccc:	00030240 	.word	0x00030240

000b5cd0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5cd0:	b508      	push	{r3, lr}
   b5cd2:	4b02      	ldr	r3, [pc, #8]	; (b5cdc <network_ready+0xc>)
   b5cd4:	681b      	ldr	r3, [r3, #0]
   b5cd6:	691b      	ldr	r3, [r3, #16]
   b5cd8:	9301      	str	r3, [sp, #4]
   b5cda:	bd08      	pop	{r3, pc}
   b5cdc:	00030240 	.word	0x00030240

000b5ce0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5ce0:	b508      	push	{r3, lr}
   b5ce2:	4b02      	ldr	r3, [pc, #8]	; (b5cec <network_on+0xc>)
   b5ce4:	681b      	ldr	r3, [r3, #0]
   b5ce6:	695b      	ldr	r3, [r3, #20]
   b5ce8:	9301      	str	r3, [sp, #4]
   b5cea:	bd08      	pop	{r3, pc}
   b5cec:	00030240 	.word	0x00030240

000b5cf0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5cf0:	b508      	push	{r3, lr}
   b5cf2:	4b02      	ldr	r3, [pc, #8]	; (b5cfc <network_off+0xc>)
   b5cf4:	681b      	ldr	r3, [r3, #0]
   b5cf6:	699b      	ldr	r3, [r3, #24]
   b5cf8:	9301      	str	r3, [sp, #4]
   b5cfa:	bd08      	pop	{r3, pc}
   b5cfc:	00030240 	.word	0x00030240

000b5d00 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5d00:	b508      	push	{r3, lr}
   b5d02:	4b02      	ldr	r3, [pc, #8]	; (b5d0c <network_listen+0xc>)
   b5d04:	681b      	ldr	r3, [r3, #0]
   b5d06:	69db      	ldr	r3, [r3, #28]
   b5d08:	9301      	str	r3, [sp, #4]
   b5d0a:	bd08      	pop	{r3, pc}
   b5d0c:	00030240 	.word	0x00030240

000b5d10 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5d10:	b508      	push	{r3, lr}
   b5d12:	4b02      	ldr	r3, [pc, #8]	; (b5d1c <network_listening+0xc>)
   b5d14:	681b      	ldr	r3, [r3, #0]
   b5d16:	6a1b      	ldr	r3, [r3, #32]
   b5d18:	9301      	str	r3, [sp, #4]
   b5d1a:	bd08      	pop	{r3, pc}
   b5d1c:	00030240 	.word	0x00030240

000b5d20 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5d20:	b508      	push	{r3, lr}
   b5d22:	4b02      	ldr	r3, [pc, #8]	; (b5d2c <network_set_listen_timeout+0xc>)
   b5d24:	681b      	ldr	r3, [r3, #0]
   b5d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5d28:	9301      	str	r3, [sp, #4]
   b5d2a:	bd08      	pop	{r3, pc}
   b5d2c:	00030240 	.word	0x00030240

000b5d30 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5d30:	b508      	push	{r3, lr}
   b5d32:	4b02      	ldr	r3, [pc, #8]	; (b5d3c <network_get_listen_timeout+0xc>)
   b5d34:	681b      	ldr	r3, [r3, #0]
   b5d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5d38:	9301      	str	r3, [sp, #4]
   b5d3a:	bd08      	pop	{r3, pc}
   b5d3c:	00030240 	.word	0x00030240

000b5d40 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5d40:	b508      	push	{r3, lr}
   b5d42:	4b02      	ldr	r3, [pc, #8]	; (b5d4c <network_is_on+0xc>)
   b5d44:	681b      	ldr	r3, [r3, #0]
   b5d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5d48:	9301      	str	r3, [sp, #4]
   b5d4a:	bd08      	pop	{r3, pc}
   b5d4c:	00030240 	.word	0x00030240

000b5d50 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5d50:	b508      	push	{r3, lr}
   b5d52:	4b02      	ldr	r3, [pc, #8]	; (b5d5c <network_is_off+0xc>)
   b5d54:	681b      	ldr	r3, [r3, #0]
   b5d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5d58:	9301      	str	r3, [sp, #4]
   b5d5a:	bd08      	pop	{r3, pc}
   b5d5c:	00030240 	.word	0x00030240

000b5d60 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5d60:	b508      	push	{r3, lr}
   b5d62:	4b02      	ldr	r3, [pc, #8]	; (b5d6c <malloc+0xc>)
   b5d64:	681b      	ldr	r3, [r3, #0]
   b5d66:	681b      	ldr	r3, [r3, #0]
   b5d68:	9301      	str	r3, [sp, #4]
   b5d6a:	bd08      	pop	{r3, pc}
   b5d6c:	0003021c 	.word	0x0003021c

000b5d70 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5d70:	b508      	push	{r3, lr}
   b5d72:	4b02      	ldr	r3, [pc, #8]	; (b5d7c <free+0xc>)
   b5d74:	681b      	ldr	r3, [r3, #0]
   b5d76:	685b      	ldr	r3, [r3, #4]
   b5d78:	9301      	str	r3, [sp, #4]
   b5d7a:	bd08      	pop	{r3, pc}
   b5d7c:	0003021c 	.word	0x0003021c

000b5d80 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b5d80:	b508      	push	{r3, lr}
   b5d82:	4b02      	ldr	r3, [pc, #8]	; (b5d8c <realloc+0xc>)
   b5d84:	681b      	ldr	r3, [r3, #0]
   b5d86:	689b      	ldr	r3, [r3, #8]
   b5d88:	9301      	str	r3, [sp, #4]
   b5d8a:	bd08      	pop	{r3, pc}
   b5d8c:	0003021c 	.word	0x0003021c

000b5d90 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5d90:	b508      	push	{r3, lr}
   b5d92:	4b02      	ldr	r3, [pc, #8]	; (b5d9c <vsnprintf+0xc>)
   b5d94:	681b      	ldr	r3, [r3, #0]
   b5d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5d98:	9301      	str	r3, [sp, #4]
   b5d9a:	bd08      	pop	{r3, pc}
   b5d9c:	0003021c 	.word	0x0003021c

000b5da0 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5da0:	b508      	push	{r3, lr}
   b5da2:	4b02      	ldr	r3, [pc, #8]	; (b5dac <__errno+0xc>)
   b5da4:	681b      	ldr	r3, [r3, #0]
   b5da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5da8:	9301      	str	r3, [sp, #4]
   b5daa:	bd08      	pop	{r3, pc}
   b5dac:	0003021c 	.word	0x0003021c

000b5db0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5db0:	b508      	push	{r3, lr}
   b5db2:	4b02      	ldr	r3, [pc, #8]	; (b5dbc <__assert_func+0xc>)
   b5db4:	681b      	ldr	r3, [r3, #0]
   b5db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5db8:	9301      	str	r3, [sp, #4]
   b5dba:	bd08      	pop	{r3, pc}
   b5dbc:	0003021c 	.word	0x0003021c

000b5dc0 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5dc0:	b508      	push	{r3, lr}
   b5dc2:	4b02      	ldr	r3, [pc, #8]	; (b5dcc <newlib_impure_ptr_callback+0xc>)
   b5dc4:	681b      	ldr	r3, [r3, #0]
   b5dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5dc8:	9301      	str	r3, [sp, #4]
   b5dca:	bd08      	pop	{r3, pc}
   b5dcc:	0003021c 	.word	0x0003021c

000b5dd0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5dd0:	2100      	movs	r1, #0
   b5dd2:	f7ff bf39 	b.w	b5c48 <system_delay_ms>
	...

000b5dd8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5dd8:	4802      	ldr	r0, [pc, #8]	; (b5de4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5dda:	2300      	movs	r3, #0
   b5ddc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5dde:	f7ff bd3b 	b.w	b5858 <os_mutex_recursive_create>
   b5de2:	bf00      	nop
   b5de4:	2003e6c4 	.word	0x2003e6c4

000b5de8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5de8:	2200      	movs	r2, #0
   b5dea:	6840      	ldr	r0, [r0, #4]
   b5dec:	4611      	mov	r1, r2
   b5dee:	f7ff bf8f 	b.w	b5d10 <network_listening>

000b5df2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5df2:	2200      	movs	r2, #0
   b5df4:	6840      	ldr	r0, [r0, #4]
   b5df6:	4611      	mov	r1, r2
   b5df8:	f7ff bf9a 	b.w	b5d30 <network_get_listen_timeout>

000b5dfc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5dfc:	6840      	ldr	r0, [r0, #4]
   b5dfe:	2200      	movs	r2, #0
   b5e00:	f7ff bf8e 	b.w	b5d20 <network_set_listen_timeout>

000b5e04 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5e04:	6840      	ldr	r0, [r0, #4]
   b5e06:	2200      	movs	r2, #0
   b5e08:	f081 0101 	eor.w	r1, r1, #1
   b5e0c:	f7ff bf78 	b.w	b5d00 <network_listen>

000b5e10 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5e10:	2300      	movs	r3, #0
   b5e12:	6840      	ldr	r0, [r0, #4]
   b5e14:	461a      	mov	r2, r3
   b5e16:	4619      	mov	r1, r3
   b5e18:	f7ff bf6a 	b.w	b5cf0 <network_off>

000b5e1c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5e1c:	2300      	movs	r3, #0
   b5e1e:	6840      	ldr	r0, [r0, #4]
   b5e20:	461a      	mov	r2, r3
   b5e22:	4619      	mov	r1, r3
   b5e24:	f7ff bf5c 	b.w	b5ce0 <network_on>

000b5e28 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5e28:	2200      	movs	r2, #0
   b5e2a:	6840      	ldr	r0, [r0, #4]
   b5e2c:	4611      	mov	r1, r2
   b5e2e:	f7ff bf4f 	b.w	b5cd0 <network_ready>

000b5e32 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5e32:	2200      	movs	r2, #0
   b5e34:	6840      	ldr	r0, [r0, #4]
   b5e36:	4611      	mov	r1, r2
   b5e38:	f7ff bf3a 	b.w	b5cb0 <network_connecting>

000b5e3c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5e3c:	6840      	ldr	r0, [r0, #4]
   b5e3e:	2200      	movs	r2, #0
   b5e40:	2102      	movs	r1, #2
   b5e42:	f7ff bf3d 	b.w	b5cc0 <network_disconnect>

000b5e46 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5e46:	2300      	movs	r3, #0
   b5e48:	6840      	ldr	r0, [r0, #4]
   b5e4a:	461a      	mov	r2, r3
   b5e4c:	f7ff bf28 	b.w	b5ca0 <network_connect>

000b5e50 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5e50:	4b02      	ldr	r3, [pc, #8]	; (b5e5c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5e52:	2203      	movs	r2, #3
   b5e54:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5e56:	4a02      	ldr	r2, [pc, #8]	; (b5e60 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5e58:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5e5a:	4770      	bx	lr
   b5e5c:	2003e6c8 	.word	0x2003e6c8
   b5e60:	000b7a40 	.word	0x000b7a40

000b5e64 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b5e64:	4770      	bx	lr

000b5e66 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b5e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5e68:	4606      	mov	r6, r0
   b5e6a:	4615      	mov	r5, r2
   b5e6c:	460c      	mov	r4, r1
   b5e6e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5e70:	42bc      	cmp	r4, r7
   b5e72:	d006      	beq.n	b5e82 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5e74:	6833      	ldr	r3, [r6, #0]
   b5e76:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5e7a:	689b      	ldr	r3, [r3, #8]
   b5e7c:	4630      	mov	r0, r6
   b5e7e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5e80:	e7f6      	b.n	b5e70 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5e82:	4628      	mov	r0, r5
   b5e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5e86 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5e86:	7c00      	ldrb	r0, [r0, #16]
   b5e88:	2200      	movs	r2, #0
   b5e8a:	f7ff bd5d 	b.w	b5948 <hal_i2c_write>

000b5e8e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5e8e:	7c00      	ldrb	r0, [r0, #16]
   b5e90:	2100      	movs	r1, #0
   b5e92:	f7ff bd61 	b.w	b5958 <hal_i2c_available>

000b5e96 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5e96:	7c00      	ldrb	r0, [r0, #16]
   b5e98:	2100      	movs	r1, #0
   b5e9a:	f7ff bd65 	b.w	b5968 <hal_i2c_read>

000b5e9e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5e9e:	7c00      	ldrb	r0, [r0, #16]
   b5ea0:	2100      	movs	r1, #0
   b5ea2:	f7ff bd69 	b.w	b5978 <hal_i2c_peek>

000b5ea6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5ea6:	7c00      	ldrb	r0, [r0, #16]
   b5ea8:	2100      	movs	r1, #0
   b5eaa:	f7ff bd6d 	b.w	b5988 <hal_i2c_flush>

000b5eae <_ZN7TwoWireD0Ev>:
   b5eae:	b510      	push	{r4, lr}
   b5eb0:	2114      	movs	r1, #20
   b5eb2:	4604      	mov	r4, r0
   b5eb4:	f7fe f8f1 	bl	b409a <_ZdlPvj>
   b5eb8:	4620      	mov	r0, r4
   b5eba:	bd10      	pop	{r4, pc}

000b5ebc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5ebc:	b538      	push	{r3, r4, r5, lr}
   b5ebe:	4604      	mov	r4, r0
   b5ec0:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5ec6:	2200      	movs	r2, #0
   b5ec8:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5ecc:	4b09      	ldr	r3, [pc, #36]	; (b5ef4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b5ece:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5ed0:	4608      	mov	r0, r1
   b5ed2:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5ed4:	4629      	mov	r1, r5
   b5ed6:	f7ff fd67 	bl	b59a8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5eda:	30bf      	adds	r0, #191	; 0xbf
   b5edc:	d108      	bne.n	b5ef0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b5ede:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5ee0:	07db      	lsls	r3, r3, #31
   b5ee2:	d505      	bpl.n	b5ef0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5ee4:	6868      	ldr	r0, [r5, #4]
   b5ee6:	f7ff ff43 	bl	b5d70 <free>
    free(conf.tx_buffer);
   b5eea:	68e8      	ldr	r0, [r5, #12]
   b5eec:	f7ff ff40 	bl	b5d70 <free>
}
   b5ef0:	4620      	mov	r0, r4
   b5ef2:	bd38      	pop	{r3, r4, r5, pc}
   b5ef4:	000b7a7c 	.word	0x000b7a7c

000b5ef8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b5ef8:	2300      	movs	r3, #0
   b5efa:	7c00      	ldrb	r0, [r0, #16]
   b5efc:	461a      	mov	r2, r3
   b5efe:	4619      	mov	r1, r3
   b5f00:	f7ff bd0a 	b.w	b5918 <hal_i2c_begin>

000b5f04 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b5f04:	7c00      	ldrb	r0, [r0, #16]
   b5f06:	2200      	movs	r2, #0
   b5f08:	f7ff bd0e 	b.w	b5928 <hal_i2c_begin_transmission>

000b5f0c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b5f0c:	b2c9      	uxtb	r1, r1
   b5f0e:	f7ff bff9 	b.w	b5f04 <_ZN7TwoWire17beginTransmissionEh>

000b5f12 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5f12:	7c00      	ldrb	r0, [r0, #16]
   b5f14:	2200      	movs	r2, #0
   b5f16:	f7ff bd0f 	b.w	b5938 <hal_i2c_end_transmission>

000b5f1a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b5f1a:	2101      	movs	r1, #1
   b5f1c:	f7ff bff9 	b.w	b5f12 <_ZN7TwoWire15endTransmissionEh>

000b5f20 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5f20:	4770      	bx	lr

000b5f22 <_ZN9IPAddressD0Ev>:
   b5f22:	b510      	push	{r4, lr}
   b5f24:	2118      	movs	r1, #24
   b5f26:	4604      	mov	r4, r0
   b5f28:	f7fe f8b7 	bl	b409a <_ZdlPvj>
   b5f2c:	4620      	mov	r0, r4
   b5f2e:	bd10      	pop	{r4, pc}

000b5f30 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5f30:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5f32:	7d03      	ldrb	r3, [r0, #20]
   b5f34:	2b06      	cmp	r3, #6
{
   b5f36:	b08d      	sub	sp, #52	; 0x34
   b5f38:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5f3a:	f100 0704 	add.w	r7, r0, #4
   b5f3e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5f42:	d012      	beq.n	b5f6a <_ZNK9IPAddress7printToER5Print+0x3a>
   b5f44:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5f48:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5f4c:	220a      	movs	r2, #10
   b5f4e:	4630      	mov	r0, r6
   b5f50:	f000 f965 	bl	b621e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5f54:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5f56:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5f58:	d019      	beq.n	b5f8e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5f5a:	2c00      	cmp	r4, #0
   b5f5c:	d0f4      	beq.n	b5f48 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5f5e:	212e      	movs	r1, #46	; 0x2e
   b5f60:	4630      	mov	r0, r6
   b5f62:	f000 f94d 	bl	b6200 <_ZN5Print5printEc>
   b5f66:	4404      	add	r4, r0
   b5f68:	e7ee      	b.n	b5f48 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5f6a:	232f      	movs	r3, #47	; 0x2f
   b5f6c:	466a      	mov	r2, sp
   b5f6e:	4639      	mov	r1, r7
   b5f70:	200a      	movs	r0, #10
		buf[0] = 0;
   b5f72:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5f76:	f7ff fd27 	bl	b59c8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5f7a:	4668      	mov	r0, sp
   b5f7c:	f001 fa04 	bl	b7388 <strlen>
   b5f80:	6833      	ldr	r3, [r6, #0]
   b5f82:	4602      	mov	r2, r0
   b5f84:	68db      	ldr	r3, [r3, #12]
   b5f86:	4669      	mov	r1, sp
   b5f88:	4630      	mov	r0, r6
   b5f8a:	4798      	blx	r3
   b5f8c:	4604      	mov	r4, r0
    }
    return n;
}
   b5f8e:	4620      	mov	r0, r4
   b5f90:	b00d      	add	sp, #52	; 0x34
   b5f92:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5f94 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5f94:	b510      	push	{r4, lr}
   b5f96:	4b05      	ldr	r3, [pc, #20]	; (b5fac <_ZN9IPAddressC1Ev+0x18>)
   b5f98:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5f9a:	2211      	movs	r2, #17
   b5f9c:	f840 3b04 	str.w	r3, [r0], #4
   b5fa0:	2100      	movs	r1, #0
   b5fa2:	f001 f9b1 	bl	b7308 <memset>
}
   b5fa6:	4620      	mov	r0, r4
   b5fa8:	bd10      	pop	{r4, pc}
   b5faa:	bf00      	nop
   b5fac:	000b7aa4 	.word	0x000b7aa4

000b5fb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5fb0:	4603      	mov	r3, r0
   b5fb2:	4a07      	ldr	r2, [pc, #28]	; (b5fd0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5fb4:	b510      	push	{r4, lr}
   b5fb6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5fba:	f101 0210 	add.w	r2, r1, #16
   b5fbe:	f851 4b04 	ldr.w	r4, [r1], #4
   b5fc2:	f843 4b04 	str.w	r4, [r3], #4
   b5fc6:	4291      	cmp	r1, r2
   b5fc8:	d1f9      	bne.n	b5fbe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5fca:	780a      	ldrb	r2, [r1, #0]
   b5fcc:	701a      	strb	r2, [r3, #0]
}
   b5fce:	bd10      	pop	{r4, pc}
   b5fd0:	000b7aa4 	.word	0x000b7aa4

000b5fd4 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b5fd4:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b5fd6:	2b04      	cmp	r3, #4
   b5fd8:	d104      	bne.n	b5fe4 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b5fda:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5fdc:	3800      	subs	r0, #0
   b5fde:	bf18      	it	ne
   b5fe0:	2001      	movne	r0, #1
   b5fe2:	4770      	bx	lr
    } else if (version() == 6) {
   b5fe4:	2b06      	cmp	r3, #6
   b5fe6:	d107      	bne.n	b5ff8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5fe8:	6843      	ldr	r3, [r0, #4]
   b5fea:	b93b      	cbnz	r3, b5ffc <_ZNK9IPAddresscvbEv+0x28>
   b5fec:	6883      	ldr	r3, [r0, #8]
   b5fee:	b92b      	cbnz	r3, b5ffc <_ZNK9IPAddresscvbEv+0x28>
   b5ff0:	68c3      	ldr	r3, [r0, #12]
   b5ff2:	b91b      	cbnz	r3, b5ffc <_ZNK9IPAddresscvbEv+0x28>
   b5ff4:	6900      	ldr	r0, [r0, #16]
   b5ff6:	e7f1      	b.n	b5fdc <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b5ff8:	2000      	movs	r0, #0
   b5ffa:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b5ffc:	2001      	movs	r0, #1
}
   b5ffe:	4770      	bx	lr

000b6000 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6000:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6002:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6006:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b600a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b600e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6012:	2304      	movs	r3, #4
   b6014:	6041      	str	r1, [r0, #4]
   b6016:	7503      	strb	r3, [r0, #20]
}
   b6018:	bd10      	pop	{r4, pc}
	...

000b601c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b601c:	b507      	push	{r0, r1, r2, lr}
   b601e:	4b06      	ldr	r3, [pc, #24]	; (b6038 <_ZN9IPAddressC1EPKh+0x1c>)
   b6020:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6022:	78cb      	ldrb	r3, [r1, #3]
   b6024:	9300      	str	r3, [sp, #0]
   b6026:	788b      	ldrb	r3, [r1, #2]
   b6028:	784a      	ldrb	r2, [r1, #1]
   b602a:	7809      	ldrb	r1, [r1, #0]
   b602c:	f7ff ffe8 	bl	b6000 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6030:	b003      	add	sp, #12
   b6032:	f85d fb04 	ldr.w	pc, [sp], #4
   b6036:	bf00      	nop
   b6038:	000b7aa4 	.word	0x000b7aa4

000b603c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b603c:	4b01      	ldr	r3, [pc, #4]	; (b6044 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b603e:	4a02      	ldr	r2, [pc, #8]	; (b6048 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6040:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6042:	4770      	bx	lr
   b6044:	2003e6d0 	.word	0x2003e6d0
   b6048:	000b7ab0 	.word	0x000b7ab0

000b604c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b604c:	2300      	movs	r3, #0
   b604e:	6840      	ldr	r0, [r0, #4]
   b6050:	461a      	mov	r2, r3
   b6052:	f7ff be25 	b.w	b5ca0 <network_connect>

000b6056 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6056:	6840      	ldr	r0, [r0, #4]
   b6058:	2200      	movs	r2, #0
   b605a:	2102      	movs	r1, #2
   b605c:	f7ff be30 	b.w	b5cc0 <network_disconnect>

000b6060 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6060:	2200      	movs	r2, #0
   b6062:	6840      	ldr	r0, [r0, #4]
   b6064:	4611      	mov	r1, r2
   b6066:	f7ff be23 	b.w	b5cb0 <network_connecting>

000b606a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b606a:	2200      	movs	r2, #0
   b606c:	6840      	ldr	r0, [r0, #4]
   b606e:	4611      	mov	r1, r2
   b6070:	f7ff be2e 	b.w	b5cd0 <network_ready>

000b6074 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6074:	2300      	movs	r3, #0
   b6076:	6840      	ldr	r0, [r0, #4]
   b6078:	461a      	mov	r2, r3
   b607a:	4619      	mov	r1, r3
   b607c:	f7ff be30 	b.w	b5ce0 <network_on>

000b6080 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6080:	2300      	movs	r3, #0
   b6082:	6840      	ldr	r0, [r0, #4]
   b6084:	461a      	mov	r2, r3
   b6086:	4619      	mov	r1, r3
   b6088:	f7ff be32 	b.w	b5cf0 <network_off>

000b608c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b608c:	6840      	ldr	r0, [r0, #4]
   b608e:	2100      	movs	r1, #0
   b6090:	f7ff be56 	b.w	b5d40 <network_is_on>

000b6094 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6094:	6840      	ldr	r0, [r0, #4]
   b6096:	2100      	movs	r1, #0
   b6098:	f7ff be5a 	b.w	b5d50 <network_is_off>

000b609c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b609c:	6840      	ldr	r0, [r0, #4]
   b609e:	2200      	movs	r2, #0
   b60a0:	f081 0101 	eor.w	r1, r1, #1
   b60a4:	f7ff be2c 	b.w	b5d00 <network_listen>

000b60a8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b60a8:	6840      	ldr	r0, [r0, #4]
   b60aa:	2200      	movs	r2, #0
   b60ac:	f7ff be38 	b.w	b5d20 <network_set_listen_timeout>

000b60b0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b60b0:	2200      	movs	r2, #0
   b60b2:	6840      	ldr	r0, [r0, #4]
   b60b4:	4611      	mov	r1, r2
   b60b6:	f7ff be3b 	b.w	b5d30 <network_get_listen_timeout>

000b60ba <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b60ba:	2200      	movs	r2, #0
   b60bc:	6840      	ldr	r0, [r0, #4]
   b60be:	4611      	mov	r1, r2
   b60c0:	f7ff be26 	b.w	b5d10 <network_listening>

000b60c4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b60c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b60c8:	b095      	sub	sp, #84	; 0x54
   b60ca:	4614      	mov	r4, r2
   b60cc:	460d      	mov	r5, r1
   b60ce:	4607      	mov	r7, r0
    IPAddress addr;
   b60d0:	f7ff ff60 	bl	b5f94 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b60d4:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b60d6:	221c      	movs	r2, #28
   b60d8:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b60da:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b60dc:	f001 f914 	bl	b7308 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b60e0:	2340      	movs	r3, #64	; 0x40
   b60e2:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b60e4:	4620      	mov	r0, r4
   b60e6:	466b      	mov	r3, sp
   b60e8:	aa0c      	add	r2, sp, #48	; 0x30
   b60ea:	2100      	movs	r1, #0
   b60ec:	f7ff fc8c 	bl	b5a08 <netdb_getaddrinfo>
    if (!r) {
   b60f0:	4604      	mov	r4, r0
   b60f2:	2800      	cmp	r0, #0
   b60f4:	d14b      	bne.n	b618e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b60f6:	4602      	mov	r2, r0
   b60f8:	2101      	movs	r1, #1
   b60fa:	6868      	ldr	r0, [r5, #4]
   b60fc:	f7ff fde8 	bl	b5cd0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6100:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6102:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6104:	4622      	mov	r2, r4
   b6106:	6868      	ldr	r0, [r5, #4]
   b6108:	f7ff fde2 	bl	b5cd0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b610c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b610e:	4681      	mov	r9, r0
        bool ok = false;
   b6110:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6112:	2e00      	cmp	r6, #0
   b6114:	d03b      	beq.n	b618e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6116:	2900      	cmp	r1, #0
   b6118:	d139      	bne.n	b618e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b611a:	6873      	ldr	r3, [r6, #4]
   b611c:	2b02      	cmp	r3, #2
   b611e:	d003      	beq.n	b6128 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6120:	2b0a      	cmp	r3, #10
   b6122:	d011      	beq.n	b6148 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6124:	69f6      	ldr	r6, [r6, #28]
   b6126:	e7f4      	b.n	b6112 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6128:	f1b8 0f00 	cmp.w	r8, #0
   b612c:	d0fa      	beq.n	b6124 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b612e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6130:	a806      	add	r0, sp, #24
   b6132:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6134:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6136:	f7ff ff71 	bl	b601c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b613a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b613c:	1d3c      	adds	r4, r7, #4
   b613e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6140:	682b      	ldr	r3, [r5, #0]
   b6142:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6144:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6146:	e7ed      	b.n	b6124 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6148:	f1b9 0f00 	cmp.w	r9, #0
   b614c:	d0ea      	beq.n	b6124 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b614e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6150:	2210      	movs	r2, #16
   b6152:	a801      	add	r0, sp, #4
   b6154:	f001 f8d8 	bl	b7308 <memset>
                    a.v = 6;
   b6158:	2306      	movs	r3, #6
   b615a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b615e:	ad01      	add	r5, sp, #4
   b6160:	f104 0308 	add.w	r3, r4, #8
   b6164:	3418      	adds	r4, #24
   b6166:	6818      	ldr	r0, [r3, #0]
   b6168:	6859      	ldr	r1, [r3, #4]
   b616a:	462a      	mov	r2, r5
   b616c:	c203      	stmia	r2!, {r0, r1}
   b616e:	3308      	adds	r3, #8
   b6170:	42a3      	cmp	r3, r4
   b6172:	4615      	mov	r5, r2
   b6174:	d1f7      	bne.n	b6166 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6176:	a901      	add	r1, sp, #4
   b6178:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b617a:	ad07      	add	r5, sp, #28
   b617c:	f7ff ff18 	bl	b5fb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6182:	1d3c      	adds	r4, r7, #4
   b6184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6186:	682b      	ldr	r3, [r5, #0]
   b6188:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b618a:	4649      	mov	r1, r9
   b618c:	e7ca      	b.n	b6124 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b618e:	9800      	ldr	r0, [sp, #0]
   b6190:	f7ff fc32 	bl	b59f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6194:	4638      	mov	r0, r7
   b6196:	b015      	add	sp, #84	; 0x54
   b6198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b619c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b619c:	4b02      	ldr	r3, [pc, #8]	; (b61a8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b619e:	4a03      	ldr	r2, [pc, #12]	; (b61ac <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b61a0:	601a      	str	r2, [r3, #0]
   b61a2:	2200      	movs	r2, #0
   b61a4:	605a      	str	r2, [r3, #4]

} // spark
   b61a6:	4770      	bx	lr
   b61a8:	2003e6d4 	.word	0x2003e6d4
   b61ac:	000b7abc 	.word	0x000b7abc

000b61b0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b61b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b61b2:	4606      	mov	r6, r0
   b61b4:	460d      	mov	r5, r1
  size_t n = 0;
   b61b6:	188f      	adds	r7, r1, r2
   b61b8:	2400      	movs	r4, #0
  while (size--) {
   b61ba:	42bd      	cmp	r5, r7
   b61bc:	d00c      	beq.n	b61d8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b61be:	6833      	ldr	r3, [r6, #0]
   b61c0:	f815 1b01 	ldrb.w	r1, [r5], #1
   b61c4:	689b      	ldr	r3, [r3, #8]
   b61c6:	4630      	mov	r0, r6
   b61c8:	4798      	blx	r3
     if (chunk>=0)
   b61ca:	1e03      	subs	r3, r0, #0
   b61cc:	db01      	blt.n	b61d2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b61ce:	441c      	add	r4, r3
  while (size--) {
   b61d0:	e7f3      	b.n	b61ba <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b61d2:	2c00      	cmp	r4, #0
   b61d4:	bf08      	it	eq
   b61d6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b61d8:	4620      	mov	r0, r4
   b61da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b61dc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b61dc:	b513      	push	{r0, r1, r4, lr}
   b61de:	4604      	mov	r4, r0
    }
   b61e0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b61e2:	b159      	cbz	r1, b61fc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b61e4:	9101      	str	r1, [sp, #4]
   b61e6:	f001 f8cf 	bl	b7388 <strlen>
   b61ea:	6823      	ldr	r3, [r4, #0]
   b61ec:	9901      	ldr	r1, [sp, #4]
   b61ee:	68db      	ldr	r3, [r3, #12]
   b61f0:	4602      	mov	r2, r0
   b61f2:	4620      	mov	r0, r4
    }
   b61f4:	b002      	add	sp, #8
   b61f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b61fa:	4718      	bx	r3
    }
   b61fc:	b002      	add	sp, #8
   b61fe:	bd10      	pop	{r4, pc}

000b6200 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b6200:	6803      	ldr	r3, [r0, #0]
   b6202:	689b      	ldr	r3, [r3, #8]
   b6204:	4718      	bx	r3

000b6206 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6206:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6208:	210d      	movs	r1, #13
{
   b620a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b620c:	f7ff fff8 	bl	b6200 <_ZN5Print5printEc>
  n += print('\n');
   b6210:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6212:	4604      	mov	r4, r0
  n += print('\n');
   b6214:	4628      	mov	r0, r5
   b6216:	f7ff fff3 	bl	b6200 <_ZN5Print5printEc>
  return n;
}
   b621a:	4420      	add	r0, r4
   b621c:	bd38      	pop	{r3, r4, r5, pc}

000b621e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b621e:	b530      	push	{r4, r5, lr}
   b6220:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6222:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6224:	2a01      	cmp	r2, #1
  *str = '\0';
   b6226:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b622a:	bf98      	it	ls
   b622c:	220a      	movls	r2, #10
   b622e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6230:	460d      	mov	r5, r1
   b6232:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6236:	fb01 5312 	mls	r3, r1, r2, r5
   b623a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b623e:	2b09      	cmp	r3, #9
   b6240:	bf94      	ite	ls
   b6242:	3330      	addls	r3, #48	; 0x30
   b6244:	3337      	addhi	r3, #55	; 0x37
   b6246:	b2db      	uxtb	r3, r3
  } while(n);
   b6248:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b624a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b624e:	d9ef      	bls.n	b6230 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6250:	4621      	mov	r1, r4
   b6252:	f7ff ffc3 	bl	b61dc <_ZN5Print5writeEPKc>
}
   b6256:	b00b      	add	sp, #44	; 0x2c
   b6258:	bd30      	pop	{r4, r5, pc}

000b625a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b625a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b625e:	b086      	sub	sp, #24
   b6260:	af00      	add	r7, sp, #0
   b6262:	4605      	mov	r5, r0
   b6264:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6266:	1d38      	adds	r0, r7, #4
   b6268:	2114      	movs	r1, #20
{
   b626a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b626c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b626e:	f7ff fd8f 	bl	b5d90 <vsnprintf>

    if (n<bufsize)
   b6272:	2813      	cmp	r0, #19
   b6274:	d80e      	bhi.n	b6294 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6276:	1d39      	adds	r1, r7, #4
   b6278:	4628      	mov	r0, r5
   b627a:	f7ff ffaf 	bl	b61dc <_ZN5Print5writeEPKc>
   b627e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6280:	b11e      	cbz	r6, b628a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6282:	4628      	mov	r0, r5
   b6284:	f7ff ffbf 	bl	b6206 <_ZN5Print7printlnEv>
   b6288:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b628a:	4620      	mov	r0, r4
   b628c:	3718      	adds	r7, #24
   b628e:	46bd      	mov	sp, r7
   b6290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6294:	f100 0308 	add.w	r3, r0, #8
   b6298:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b629c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b629e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b62a2:	4622      	mov	r2, r4
   b62a4:	1c41      	adds	r1, r0, #1
   b62a6:	683b      	ldr	r3, [r7, #0]
   b62a8:	4668      	mov	r0, sp
   b62aa:	f7ff fd71 	bl	b5d90 <vsnprintf>
  return write(str);
   b62ae:	4669      	mov	r1, sp
   b62b0:	4628      	mov	r0, r5
   b62b2:	f7ff ff93 	bl	b61dc <_ZN5Print5writeEPKc>
   b62b6:	4604      	mov	r4, r0
   b62b8:	46c5      	mov	sp, r8
   b62ba:	e7e1      	b.n	b6280 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b62bc <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b62bc:	4b01      	ldr	r3, [pc, #4]	; (b62c4 <_GLOBAL__sub_I_RGB+0x8>)
   b62be:	2200      	movs	r2, #0
   b62c0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b62c2:	4770      	bx	lr
   b62c4:	2003e6dc 	.word	0x2003e6dc

000b62c8 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b62c8:	2100      	movs	r1, #0
   b62ca:	f7ff bc1d 	b.w	b5b08 <hal_spi_release>

000b62ce <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b62ce:	2100      	movs	r1, #0
   b62d0:	f7ff bc12 	b.w	b5af8 <hal_spi_acquire>

000b62d4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b62d4:	b510      	push	{r4, lr}
   b62d6:	4604      	mov	r4, r0
   b62d8:	4608      	mov	r0, r1
{
    _spi = spi;
   b62da:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b62dc:	f7ff fbf4 	bl	b5ac8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b62e0:	2300      	movs	r3, #0
   b62e2:	6063      	str	r3, [r4, #4]
}
   b62e4:	4620      	mov	r0, r4
   b62e6:	bd10      	pop	{r4, pc}

000b62e8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b62e8:	b513      	push	{r0, r1, r4, lr}
   b62ea:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b62ec:	7800      	ldrb	r0, [r0, #0]
   b62ee:	f7ff ffee 	bl	b62ce <_ZN8SPIClass4lockEv.isra.0>
   b62f2:	b958      	cbnz	r0, b630c <_ZN8SPIClass5beginEv+0x24>
   b62f4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b62f6:	9001      	str	r0, [sp, #4]
   b62f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b62fc:	f7ff fbbc 	bl	b5a78 <hal_spi_begin>
        unlock();
   b6300:	9801      	ldr	r0, [sp, #4]
    }
}
   b6302:	b002      	add	sp, #8
   b6304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6308:	f7ff bfde 	b.w	b62c8 <_ZN8SPIClass6unlockEv.isra.0>
   b630c:	b002      	add	sp, #8
   b630e:	bd10      	pop	{r4, pc}

000b6310 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b6310:	b513      	push	{r0, r1, r4, lr}
   b6312:	4604      	mov	r4, r0
    if (!lock())
   b6314:	7800      	ldrb	r0, [r0, #0]
{
   b6316:	9101      	str	r1, [sp, #4]
    if (!lock())
   b6318:	f7ff ffd9 	bl	b62ce <_ZN8SPIClass4lockEv.isra.0>
   b631c:	9901      	ldr	r1, [sp, #4]
   b631e:	b948      	cbnz	r0, b6334 <_ZN8SPIClass11setBitOrderEh+0x24>
   b6320:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b6322:	9001      	str	r0, [sp, #4]
   b6324:	f7ff fbb0 	bl	b5a88 <hal_spi_set_bit_order>
        unlock();
   b6328:	9801      	ldr	r0, [sp, #4]
    }
}
   b632a:	b002      	add	sp, #8
   b632c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6330:	f7ff bfca 	b.w	b62c8 <_ZN8SPIClass6unlockEv.isra.0>
   b6334:	b002      	add	sp, #8
   b6336:	bd10      	pop	{r4, pc}

000b6338 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b6338:	b513      	push	{r0, r1, r4, lr}
   b633a:	4604      	mov	r4, r0
    if (!lock())
   b633c:	7800      	ldrb	r0, [r0, #0]
{
   b633e:	9101      	str	r1, [sp, #4]
    if (!lock())
   b6340:	f7ff ffc5 	bl	b62ce <_ZN8SPIClass4lockEv.isra.0>
   b6344:	9901      	ldr	r1, [sp, #4]
   b6346:	b948      	cbnz	r0, b635c <_ZN8SPIClass11setDataModeEh+0x24>
   b6348:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b634a:	9001      	str	r0, [sp, #4]
   b634c:	f7ff fba4 	bl	b5a98 <hal_spi_set_data_mode>
        unlock();
   b6350:	9801      	ldr	r0, [sp, #4]
    }
}
   b6352:	b002      	add	sp, #8
   b6354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6358:	f7ff bfb6 	b.w	b62c8 <_ZN8SPIClass6unlockEv.isra.0>
   b635c:	b002      	add	sp, #8
   b635e:	bd10      	pop	{r4, pc}

000b6360 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6360:	0840      	lsrs	r0, r0, #1
{
   b6362:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6364:	6018      	str	r0, [r3, #0]
   b6366:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6368:	6818      	ldr	r0, [r3, #0]
   b636a:	4288      	cmp	r0, r1
   b636c:	b2e5      	uxtb	r5, r4
   b636e:	d906      	bls.n	b637e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6370:	3401      	adds	r4, #1
   b6372:	2c08      	cmp	r4, #8
   b6374:	d002      	beq.n	b637c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6376:	0840      	lsrs	r0, r0, #1
   b6378:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b637a:	e7f5      	b.n	b6368 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b637c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b637e:	4b02      	ldr	r3, [pc, #8]	; (b6388 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6380:	5d5b      	ldrb	r3, [r3, r5]
   b6382:	7013      	strb	r3, [r2, #0]
}
   b6384:	bd30      	pop	{r4, r5, pc}
   b6386:	bf00      	nop
   b6388:	000b7af0 	.word	0x000b7af0

000b638c <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b638c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6390:	b088      	sub	sp, #32
    unsigned clock = 0;
   b6392:	2300      	movs	r3, #0
{
   b6394:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b6396:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b6398:	9302      	str	r3, [sp, #8]
{
   b639a:	460e      	mov	r6, r1
   b639c:	4617      	mov	r7, r2
    if (!lock())
   b639e:	f7ff ff96 	bl	b62ce <_ZN8SPIClass4lockEv.isra.0>
   b63a2:	4605      	mov	r5, r0
   b63a4:	bb00      	cbnz	r0, b63e8 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b63a6:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b63aa:	4601      	mov	r1, r0
   b63ac:	2214      	movs	r2, #20
   b63ae:	a803      	add	r0, sp, #12
   b63b0:	f000 ffaa 	bl	b7308 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b63b4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b63b6:	462a      	mov	r2, r5
   b63b8:	a903      	add	r1, sp, #12
   b63ba:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b63bc:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b63c0:	f7ff fb92 	bl	b5ae8 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b63c4:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b63c6:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b63ca:	ab02      	add	r3, sp, #8
   b63cc:	f10d 0207 	add.w	r2, sp, #7
   b63d0:	fb07 f106 	mul.w	r1, r7, r6
   b63d4:	f7ff ffc4 	bl	b6360 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b63d8:	7820      	ldrb	r0, [r4, #0]
   b63da:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b63de:	f7ff fb63 	bl	b5aa8 <hal_spi_set_clock_divider>
        unlock();
   b63e2:	7820      	ldrb	r0, [r4, #0]
   b63e4:	f7ff ff70 	bl	b62c8 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b63e8:	9802      	ldr	r0, [sp, #8]
   b63ea:	b008      	add	sp, #32
   b63ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b63f0 <_ZN8SPIClass15setClockDividerEh>:
{
   b63f0:	b538      	push	{r3, r4, r5, lr}
   b63f2:	4604      	mov	r4, r0
    if (!lock())
   b63f4:	7800      	ldrb	r0, [r0, #0]
{
   b63f6:	460d      	mov	r5, r1
    if (!lock())
   b63f8:	f7ff ff69 	bl	b62ce <_ZN8SPIClass4lockEv.isra.0>
   b63fc:	4603      	mov	r3, r0
   b63fe:	b9d0      	cbnz	r0, b6436 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b6400:	6861      	ldr	r1, [r4, #4]
   b6402:	b199      	cbz	r1, b642c <_ZN8SPIClass15setClockDividerEh+0x3c>
   b6404:	4a0c      	ldr	r2, [pc, #48]	; (b6438 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b6406:	f812 0b01 	ldrb.w	r0, [r2], #1
   b640a:	4285      	cmp	r5, r0
   b640c:	d002      	beq.n	b6414 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b640e:	3301      	adds	r3, #1
   b6410:	2b08      	cmp	r3, #8
   b6412:	d1f8      	bne.n	b6406 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b6414:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b6416:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b6418:	2201      	movs	r2, #1
   b641a:	40d9      	lsrs	r1, r3
   b641c:	4620      	mov	r0, r4
   b641e:	f7ff ffb5 	bl	b638c <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b6422:	7820      	ldrb	r0, [r4, #0]
}
   b6424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b6428:	f7ff bf4e 	b.w	b62c8 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b642c:	7820      	ldrb	r0, [r4, #0]
   b642e:	4629      	mov	r1, r5
   b6430:	f7ff fb3a 	bl	b5aa8 <hal_spi_set_clock_divider>
   b6434:	e7f5      	b.n	b6422 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b6436:	bd38      	pop	{r3, r4, r5, pc}
   b6438:	000b7af0 	.word	0x000b7af0

000b643c <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b643c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b643e:	7800      	ldrb	r0, [r0, #0]
   b6440:	f7ff fb3a 	bl	b5ab8 <hal_spi_transfer>
}
   b6444:	b2c0      	uxtb	r0, r0
   b6446:	bd08      	pop	{r3, pc}

000b6448 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6448:	b510      	push	{r4, lr}
   b644a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b644c:	6800      	ldr	r0, [r0, #0]
   b644e:	b108      	cbz	r0, b6454 <_ZN6String10invalidateEv+0xc>
   b6450:	f7ff fc8e 	bl	b5d70 <free>
	buffer = NULL;
   b6454:	2300      	movs	r3, #0
	capacity = len = 0;
   b6456:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b645a:	6023      	str	r3, [r4, #0]
}
   b645c:	bd10      	pop	{r4, pc}

000b645e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b645e:	b538      	push	{r3, r4, r5, lr}
   b6460:	4604      	mov	r4, r0
   b6462:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6464:	6800      	ldr	r0, [r0, #0]
   b6466:	3101      	adds	r1, #1
   b6468:	f7ff fc8a 	bl	b5d80 <realloc>
	if (newbuffer) {
   b646c:	b110      	cbz	r0, b6474 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b646e:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6472:	2001      	movs	r0, #1
	}
	return 0;
}
   b6474:	bd38      	pop	{r3, r4, r5, pc}

000b6476 <_ZN6String7reserveEj>:
{
   b6476:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6478:	6803      	ldr	r3, [r0, #0]
{
   b647a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b647c:	b123      	cbz	r3, b6488 <_ZN6String7reserveEj+0x12>
   b647e:	6843      	ldr	r3, [r0, #4]
   b6480:	428b      	cmp	r3, r1
   b6482:	d301      	bcc.n	b6488 <_ZN6String7reserveEj+0x12>
   b6484:	2001      	movs	r0, #1
}
   b6486:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6488:	4620      	mov	r0, r4
   b648a:	f7ff ffe8 	bl	b645e <_ZN6String12changeBufferEj>
   b648e:	2800      	cmp	r0, #0
   b6490:	d0f9      	beq.n	b6486 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6492:	68a3      	ldr	r3, [r4, #8]
   b6494:	2b00      	cmp	r3, #0
   b6496:	d1f5      	bne.n	b6484 <_ZN6String7reserveEj+0xe>
   b6498:	6822      	ldr	r2, [r4, #0]
   b649a:	7013      	strb	r3, [r2, #0]
   b649c:	e7f2      	b.n	b6484 <_ZN6String7reserveEj+0xe>

000b649e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b649e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b64a0:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b64a2:	4611      	mov	r1, r2
   b64a4:	9201      	str	r2, [sp, #4]
{
   b64a6:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b64a8:	f7ff ffe5 	bl	b6476 <_ZN6String7reserveEj>
   b64ac:	9a01      	ldr	r2, [sp, #4]
   b64ae:	b928      	cbnz	r0, b64bc <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b64b0:	4620      	mov	r0, r4
   b64b2:	f7ff ffc9 	bl	b6448 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b64b6:	4620      	mov	r0, r4
   b64b8:	b003      	add	sp, #12
   b64ba:	bd30      	pop	{r4, r5, pc}
	len = length;
   b64bc:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b64be:	4629      	mov	r1, r5
   b64c0:	6820      	ldr	r0, [r4, #0]
   b64c2:	f000 ff13 	bl	b72ec <memcpy>
	buffer[len] = 0;
   b64c6:	6822      	ldr	r2, [r4, #0]
   b64c8:	68a3      	ldr	r3, [r4, #8]
   b64ca:	2100      	movs	r1, #0
   b64cc:	54d1      	strb	r1, [r2, r3]
	return *this;
   b64ce:	e7f2      	b.n	b64b6 <_ZN6String4copyEPKcj+0x18>

000b64d0 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b64d0:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b64d2:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b64d4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b64d8:	4604      	mov	r4, r0
	len = 0;
   b64da:	6083      	str	r3, [r0, #8]
	flags = 0;
   b64dc:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b64de:	b141      	cbz	r1, b64f2 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b64e0:	4608      	mov	r0, r1
   b64e2:	9101      	str	r1, [sp, #4]
   b64e4:	f000 ff50 	bl	b7388 <strlen>
   b64e8:	9901      	ldr	r1, [sp, #4]
   b64ea:	4602      	mov	r2, r0
   b64ec:	4620      	mov	r0, r4
   b64ee:	f7ff ffd6 	bl	b649e <_ZN6String4copyEPKcj>
}
   b64f2:	4620      	mov	r0, r4
   b64f4:	b002      	add	sp, #8
   b64f6:	bd10      	pop	{r4, pc}

000b64f8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b64f8:	4b05      	ldr	r3, [pc, #20]	; (b6510 <_GLOBAL__sub_I_System+0x18>)
   b64fa:	2202      	movs	r2, #2
   b64fc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b64fe:	4b05      	ldr	r3, [pc, #20]	; (b6514 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6500:	4a05      	ldr	r2, [pc, #20]	; (b6518 <_GLOBAL__sub_I_System+0x20>)
   b6502:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6504:	2000      	movs	r0, #0
   b6506:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b650a:	f7ff bb95 	b.w	b5c38 <set_system_mode>
   b650e:	bf00      	nop
   b6510:	2003e6f8 	.word	0x2003e6f8
   b6514:	2003e6ec 	.word	0x2003e6ec
   b6518:	ffff0000 	.word	0xffff0000

000b651c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b651c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b651e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b6520:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b6524:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b6526:	2201      	movs	r2, #1
   b6528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b652c:	f10d 0107 	add.w	r1, sp, #7
   b6530:	47a0      	blx	r4
}
   b6532:	b002      	add	sp, #8
   b6534:	bd10      	pop	{r4, pc}

000b6536 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b6536:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6538:	6803      	ldr	r3, [r0, #0]
   b653a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b653c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b6540:	46a4      	mov	ip, r4
}
   b6542:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b6546:	4760      	bx	ip

000b6548 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b6548:	b513      	push	{r0, r1, r4, lr}
   b654a:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b654c:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b654e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b6552:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b6554:	f10d 0107 	add.w	r1, sp, #7
   b6558:	2201      	movs	r2, #1
   b655a:	47a0      	blx	r4
}
   b655c:	b002      	add	sp, #8
   b655e:	bd10      	pop	{r4, pc}

000b6560 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b6560:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b6562:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6564:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6568:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b656c:	429a      	cmp	r2, r3
int TCPClient::read() {
   b656e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6570:	d008      	beq.n	b6584 <_ZN9TCPClient4readEv+0x24>
   b6572:	6963      	ldr	r3, [r4, #20]
   b6574:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6578:	1c51      	adds	r1, r2, #1
   b657a:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b657e:	4413      	add	r3, r2
   b6580:	7918      	ldrb	r0, [r3, #4]
}
   b6582:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b6584:	6803      	ldr	r3, [r0, #0]
   b6586:	691b      	ldr	r3, [r3, #16]
   b6588:	4798      	blx	r3
   b658a:	2800      	cmp	r0, #0
   b658c:	d1f1      	bne.n	b6572 <_ZN9TCPClient4readEv+0x12>
   b658e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6592:	e7f6      	b.n	b6582 <_ZN9TCPClient4readEv+0x22>

000b6594 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b6594:	4770      	bx	lr

000b6596 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b6596:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b6598:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b659a:	43c0      	mvns	r0, r0
   b659c:	0fc0      	lsrs	r0, r0, #31
   b659e:	4770      	bx	lr

000b65a0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b65a0:	4770      	bx	lr
	...

000b65a4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b65a4:	4b06      	ldr	r3, [pc, #24]	; (b65c0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b65a6:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b65a8:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b65aa:	f100 040c 	add.w	r4, r0, #12
	    ||
   b65ae:	d005      	beq.n	b65bc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b65b0:	4608      	mov	r0, r1
   b65b2:	f000 fd83 	bl	b70bc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b65b6:	2800      	cmp	r0, #0
   b65b8:	bf08      	it	eq
   b65ba:	2400      	moveq	r4, #0
      }
   b65bc:	4620      	mov	r0, r4
   b65be:	bd10      	pop	{r4, pc}
   b65c0:	000b7a30 	.word	0x000b7a30

000b65c4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b65c4:	b510      	push	{r4, lr}
   b65c6:	21ac      	movs	r1, #172	; 0xac
   b65c8:	4604      	mov	r4, r0
   b65ca:	f7fd fd66 	bl	b409a <_ZdlPvj>
   b65ce:	4620      	mov	r0, r4
   b65d0:	bd10      	pop	{r4, pc}

000b65d2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b65d2:	21ac      	movs	r1, #172	; 0xac
   b65d4:	f7fd bd61 	b.w	b409a <_ZdlPvj>

000b65d8 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b65d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b65dc:	f04f 0800 	mov.w	r8, #0
   b65e0:	b086      	sub	sp, #24
   b65e2:	461c      	mov	r4, r3
   b65e4:	f8c0 8004 	str.w	r8, [r0, #4]
   b65e8:	4605      	mov	r5, r0
   b65ea:	460e      	mov	r6, r1
   b65ec:	4617      	mov	r7, r2
    struct timeval tv = {};
   b65ee:	4641      	mov	r1, r8
   b65f0:	2210      	movs	r2, #16
   b65f2:	a802      	add	r0, sp, #8
   b65f4:	f000 fe88 	bl	b7308 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b65f8:	1c63      	adds	r3, r4, #1
   b65fa:	d009      	beq.n	b6610 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b65fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6600:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b6604:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6608:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b660c:	435c      	muls	r4, r3
   b660e:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6610:	6968      	ldr	r0, [r5, #20]
   b6612:	2310      	movs	r3, #16
   b6614:	9300      	str	r3, [sp, #0]
   b6616:	6800      	ldr	r0, [r0, #0]
   b6618:	ab02      	add	r3, sp, #8
   b661a:	f241 0205 	movw	r2, #4101	; 0x1005
   b661e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b6622:	f7ff f9f9 	bl	b5a18 <sock_setsockopt>
    if (ret < 0) {
   b6626:	2800      	cmp	r0, #0
   b6628:	da07      	bge.n	b663a <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b662a:	f7ff fbb9 	bl	b5da0 <__errno>
   b662e:	6803      	ldr	r3, [r0, #0]
   b6630:	606b      	str	r3, [r5, #4]
        return 0;
   b6632:	2000      	movs	r0, #0
}
   b6634:	b006      	add	sp, #24
   b6636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b663a:	6968      	ldr	r0, [r5, #20]
   b663c:	2300      	movs	r3, #0
   b663e:	6800      	ldr	r0, [r0, #0]
   b6640:	463a      	mov	r2, r7
   b6642:	4631      	mov	r1, r6
   b6644:	f7ff fa08 	bl	b5a58 <sock_send>
    if (ret < 0) {
   b6648:	1e03      	subs	r3, r0, #0
   b664a:	dbee      	blt.n	b662a <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b664c:	4618      	mov	r0, r3
   b664e:	e7f1      	b.n	b6634 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b6650 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b6650:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b6652:	6984      	ldr	r4, [r0, #24]
   b6654:	4b0a      	ldr	r3, [pc, #40]	; (b6680 <_ZN9TCPClientD1Ev+0x30>)
   b6656:	6003      	str	r3, [r0, #0]
   b6658:	4605      	mov	r5, r0
   b665a:	b17c      	cbz	r4, b667c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b665c:	6863      	ldr	r3, [r4, #4]
   b665e:	3b01      	subs	r3, #1
   b6660:	6063      	str	r3, [r4, #4]
   b6662:	b95b      	cbnz	r3, b667c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b6664:	6823      	ldr	r3, [r4, #0]
   b6666:	4620      	mov	r0, r4
   b6668:	689b      	ldr	r3, [r3, #8]
   b666a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b666c:	68a3      	ldr	r3, [r4, #8]
   b666e:	3b01      	subs	r3, #1
   b6670:	60a3      	str	r3, [r4, #8]
   b6672:	b91b      	cbnz	r3, b667c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b6674:	6823      	ldr	r3, [r4, #0]
   b6676:	4620      	mov	r0, r4
   b6678:	68db      	ldr	r3, [r3, #12]
   b667a:	4798      	blx	r3
   b667c:	4628      	mov	r0, r5
   b667e:	bd38      	pop	{r3, r4, r5, pc}
   b6680:	000b7b34 	.word	0x000b7b34

000b6684 <_ZN9TCPClientD0Ev>:
   b6684:	b510      	push	{r4, lr}
   b6686:	4604      	mov	r4, r0
   b6688:	f7ff ffe2 	bl	b6650 <_ZN9TCPClientD1Ev>
   b668c:	4620      	mov	r0, r4
   b668e:	211c      	movs	r1, #28
   b6690:	f7fd fd03 	bl	b409a <_ZdlPvj>
   b6694:	4620      	mov	r0, r4
   b6696:	bd10      	pop	{r4, pc}

000b6698 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b6698:	b530      	push	{r4, r5, lr}
   b669a:	b087      	sub	sp, #28
   b669c:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b669e:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b66a0:	4668      	mov	r0, sp
   b66a2:	f7ff fcbb 	bl	b601c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b66a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b66a8:	3404      	adds	r4, #4
   b66aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b66ac:	682b      	ldr	r3, [r5, #0]
   b66ae:	7023      	strb	r3, [r4, #0]
    }
   b66b0:	b007      	add	sp, #28
   b66b2:	bd30      	pop	{r4, r5, pc}

000b66b4 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b66b4:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b66b6:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b66b8:	4b05      	ldr	r3, [pc, #20]	; (b66d0 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b66ba:	4604      	mov	r4, r0
   b66bc:	358c      	adds	r5, #140	; 0x8c
   b66be:	f844 3b04 	str.w	r3, [r4], #4
   b66c2:	4606      	mov	r6, r0
   b66c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b66c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b66c8:	682b      	ldr	r3, [r5, #0]
   b66ca:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b66cc:	4630      	mov	r0, r6
   b66ce:	bd70      	pop	{r4, r5, r6, pc}
   b66d0:	000b7aa4 	.word	0x000b7aa4

000b66d4 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b66d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b66d8:	4698      	mov	r8, r3
    stop();
   b66da:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b66dc:	b093      	sub	sp, #76	; 0x4c
   b66de:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b66e0:	2400      	movs	r4, #0
    stop();
   b66e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b66e4:	4606      	mov	r6, r0
   b66e6:	4617      	mov	r7, r2
    stop();
   b66e8:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b66ea:	4628      	mov	r0, r5
   b66ec:	466b      	mov	r3, sp
   b66ee:	4622      	mov	r2, r4
   b66f0:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b66f2:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b66f4:	f7ff f988 	bl	b5a08 <netdb_getaddrinfo>
   b66f8:	4605      	mov	r5, r0
   b66fa:	2800      	cmp	r0, #0
   b66fc:	d163      	bne.n	b67c6 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b66fe:	9b00      	ldr	r3, [sp, #0]
   b6700:	2b00      	cmp	r3, #0
   b6702:	d04b      	beq.n	b679c <_ZN9TCPClient7connectEPKctm+0xc8>
   b6704:	695b      	ldr	r3, [r3, #20]
   b6706:	2b00      	cmp	r3, #0
   b6708:	d048      	beq.n	b679c <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b670a:	a806      	add	r0, sp, #24
   b670c:	f7ff fc42 	bl	b5f94 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b6710:	9b00      	ldr	r3, [sp, #0]
   b6712:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6714:	7863      	ldrb	r3, [r4, #1]
   b6716:	2b02      	cmp	r3, #2
   b6718:	d104      	bne.n	b6724 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b671a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b671c:	a806      	add	r0, sp, #24
   b671e:	f7ff ffbb 	bl	b6698 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b6722:	e026      	b.n	b6772 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6724:	2b0a      	cmp	r3, #10
   b6726:	d124      	bne.n	b6772 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b6728:	2211      	movs	r2, #17
   b672a:	4629      	mov	r1, r5
   b672c:	a801      	add	r0, sp, #4
   b672e:	f000 fdeb 	bl	b7308 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6732:	68a3      	ldr	r3, [r4, #8]
   b6734:	2b00      	cmp	r3, #0
   b6736:	d038      	beq.n	b67aa <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6738:	f104 0308 	add.w	r3, r4, #8
   b673c:	f10d 0c04 	add.w	ip, sp, #4
   b6740:	3418      	adds	r4, #24
   b6742:	6818      	ldr	r0, [r3, #0]
   b6744:	6859      	ldr	r1, [r3, #4]
   b6746:	4662      	mov	r2, ip
   b6748:	c203      	stmia	r2!, {r0, r1}
   b674a:	3308      	adds	r3, #8
   b674c:	42a3      	cmp	r3, r4
   b674e:	4694      	mov	ip, r2
   b6750:	d1f7      	bne.n	b6742 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b6752:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6754:	a901      	add	r1, sp, #4
   b6756:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b6758:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b675c:	f7ff fc28 	bl	b5fb0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6760:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b6764:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b6768:	ac07      	add	r4, sp, #28
   b676a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b676c:	f8dc 3000 	ldr.w	r3, [ip]
   b6770:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b6772:	a806      	add	r0, sp, #24
   b6774:	f7ff fc2e 	bl	b5fd4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b6778:	b180      	cbz	r0, b679c <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b677a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b677c:	ad07      	add	r5, sp, #28
   b677e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b6782:	4b12      	ldr	r3, [pc, #72]	; (b67cc <_ZN9TCPClient7connectEPKctm+0xf8>)
   b6784:	930c      	str	r3, [sp, #48]	; 0x30
   b6786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6788:	ac0d      	add	r4, sp, #52	; 0x34
   b678a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b678c:	682b      	ldr	r3, [r5, #0]
   b678e:	7023      	strb	r3, [r4, #0]
   b6790:	463a      	mov	r2, r7
   b6792:	4643      	mov	r3, r8
   b6794:	a90c      	add	r1, sp, #48	; 0x30
   b6796:	4630      	mov	r0, r6
   b6798:	47c8      	blx	r9
   b679a:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b679c:	9800      	ldr	r0, [sp, #0]
   b679e:	f7ff f92b 	bl	b59f8 <netdb_freeaddrinfo>
}
   b67a2:	4628      	mov	r0, r5
   b67a4:	b013      	add	sp, #76	; 0x4c
   b67a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b67aa:	68e3      	ldr	r3, [r4, #12]
   b67ac:	2b00      	cmp	r3, #0
   b67ae:	d1c3      	bne.n	b6738 <_ZN9TCPClient7connectEPKctm+0x64>
   b67b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b67b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b67b8:	f7ff f90e 	bl	b59d8 <inet_htonl>
   b67bc:	4581      	cmp	r9, r0
   b67be:	d1bb      	bne.n	b6738 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b67c0:	f104 0114 	add.w	r1, r4, #20
   b67c4:	e7aa      	b.n	b671c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b67c6:	4625      	mov	r5, r4
   b67c8:	e7e8      	b.n	b679c <_ZN9TCPClient7connectEPKctm+0xc8>
   b67ca:	bf00      	nop
   b67cc:	000b7aa4 	.word	0x000b7aa4

000b67d0 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b67d0:	b538      	push	{r3, r4, r5, lr}
   b67d2:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b67d4:	681a      	ldr	r2, [r3, #0]
   b67d6:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b67d8:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b67da:	da10      	bge.n	b67fe <_ZN9TCPClient9connectedEv+0x2e>
   b67dc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b67e0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b67e4:	429a      	cmp	r2, r3
   b67e6:	d10a      	bne.n	b67fe <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b67e8:	6803      	ldr	r3, [r0, #0]
   b67ea:	691b      	ldr	r3, [r3, #16]
   b67ec:	4798      	blx	r3
        if (!rv) {
   b67ee:	4604      	mov	r4, r0
   b67f0:	b928      	cbnz	r0, b67fe <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b67f2:	682b      	ldr	r3, [r5, #0]
   b67f4:	4628      	mov	r0, r5
   b67f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b67f8:	4798      	blx	r3
        rv = available();
   b67fa:	4620      	mov	r0, r4
}
   b67fc:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b67fe:	2001      	movs	r0, #1
   b6800:	e7fc      	b.n	b67fc <_ZN9TCPClient9connectedEv+0x2c>

000b6802 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b6802:	b510      	push	{r4, lr}
   b6804:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6806:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b680a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b680e:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b6810:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6812:	d005      	beq.n	b6820 <_ZN9TCPClient4peekEv+0x1e>
   b6814:	6963      	ldr	r3, [r4, #20]
   b6816:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b681a:	4413      	add	r3, r2
   b681c:	7918      	ldrb	r0, [r3, #4]
}
   b681e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6820:	6803      	ldr	r3, [r0, #0]
   b6822:	691b      	ldr	r3, [r3, #16]
   b6824:	4798      	blx	r3
   b6826:	2800      	cmp	r0, #0
   b6828:	d1f4      	bne.n	b6814 <_ZN9TCPClient4peekEv+0x12>
   b682a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b682e:	e7f6      	b.n	b681e <_ZN9TCPClient4peekEv+0x1c>

000b6830 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6832:	6943      	ldr	r3, [r0, #20]
   b6834:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b6836:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b683a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b683e:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6840:	4605      	mov	r5, r0
   b6842:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b6844:	d016      	beq.n	b6874 <_ZN9TCPClient4readEPhj+0x44>
   b6846:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b6848:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b684c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b6850:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b6852:	42bc      	cmp	r4, r7
   b6854:	bf28      	it	cs
   b6856:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b6858:	3304      	adds	r3, #4
   b685a:	4622      	mov	r2, r4
   b685c:	4419      	add	r1, r3
   b685e:	4630      	mov	r0, r6
   b6860:	f000 fd44 	bl	b72ec <memcpy>
   b6864:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b6866:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b686a:	4423      	add	r3, r4
   b686c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b6870:	4620      	mov	r0, r4
   b6872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b6874:	6803      	ldr	r3, [r0, #0]
   b6876:	691b      	ldr	r3, [r3, #16]
   b6878:	4798      	blx	r3
   b687a:	2800      	cmp	r0, #0
   b687c:	d1e3      	bne.n	b6846 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b687e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b6882:	e7f5      	b.n	b6870 <_ZN9TCPClient4readEPhj+0x40>

000b6884 <_ZN9TCPClient12flush_bufferEv>:
   b6884:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b6886:	2300      	movs	r3, #0
   b6888:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b688c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b688e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b6892:	4770      	bx	lr

000b6894 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b6894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6898:	461f      	mov	r7, r3
    stop();
   b689a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b689c:	460c      	mov	r4, r1
    stop();
   b689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b68a0:	b08a      	sub	sp, #40	; 0x28
   b68a2:	4605      	mov	r5, r0
   b68a4:	4616      	mov	r6, r2
    stop();
   b68a6:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b68a8:	7d23      	ldrb	r3, [r4, #20]
   b68aa:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b68ae:	2b04      	cmp	r3, #4
   b68b0:	bf0c      	ite	eq
   b68b2:	2002      	moveq	r0, #2
   b68b4:	200a      	movne	r0, #10
   b68b6:	2206      	movs	r2, #6
   b68b8:	2101      	movs	r1, #1
   b68ba:	f7ff f8d5 	bl	b5a68 <sock_socket>
   b68be:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b68c2:	696b      	ldr	r3, [r5, #20]
   b68c4:	681b      	ldr	r3, [r3, #0]
   b68c6:	2b00      	cmp	r3, #0
   b68c8:	da08      	bge.n	b68dc <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b68ca:	682b      	ldr	r3, [r5, #0]
   b68cc:	4628      	mov	r0, r5
   b68ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b68d0:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b68d2:	4798      	blx	r3
}
   b68d4:	4620      	mov	r0, r4
   b68d6:	b00a      	add	sp, #40	; 0x28
   b68d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b68dc:	4628      	mov	r0, r5
   b68de:	f7ff ffd1 	bl	b6884 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b68e2:	b1b7      	cbz	r7, b6912 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b68e4:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b68e6:	a903      	add	r1, sp, #12
   b68e8:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b68ea:	9303      	str	r3, [sp, #12]
   b68ec:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b68f0:	f7ff f862 	bl	b59b8 <if_index_to_name>
   b68f4:	2800      	cmp	r0, #0
   b68f6:	d1e8      	bne.n	b68ca <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b68f8:	6968      	ldr	r0, [r5, #20]
   b68fa:	2306      	movs	r3, #6
   b68fc:	9300      	str	r3, [sp, #0]
   b68fe:	6800      	ldr	r0, [r0, #0]
   b6900:	ab03      	add	r3, sp, #12
   b6902:	f241 020b 	movw	r2, #4107	; 0x100b
   b6906:	f640 71ff 	movw	r1, #4095	; 0xfff
   b690a:	f7ff f885 	bl	b5a18 <sock_setsockopt>
   b690e:	2800      	cmp	r0, #0
   b6910:	d1db      	bne.n	b68ca <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b6912:	221c      	movs	r2, #28
   b6914:	2100      	movs	r1, #0
   b6916:	a803      	add	r0, sp, #12
   b6918:	f000 fcf6 	bl	b7308 <memset>
    if (ip.version() == 4) {
   b691c:	7d23      	ldrb	r3, [r4, #20]
   b691e:	2b04      	cmp	r3, #4
   b6920:	d11d      	bne.n	b695e <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b6922:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b6926:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b6928:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b692c:	f7ff f85c 	bl	b59e8 <inet_htons>
   b6930:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b6934:	6860      	ldr	r0, [r4, #4]
   b6936:	f7ff f84f 	bl	b59d8 <inet_htonl>
   b693a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b693c:	696b      	ldr	r3, [r5, #20]
   b693e:	221c      	movs	r2, #28
   b6940:	6818      	ldr	r0, [r3, #0]
   b6942:	a903      	add	r1, sp, #12
   b6944:	f7ff f878 	bl	b5a38 <sock_connect>
   b6948:	2800      	cmp	r0, #0
   b694a:	d1be      	bne.n	b68ca <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b694c:	3404      	adds	r4, #4
   b694e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6950:	696d      	ldr	r5, [r5, #20]
   b6952:	358c      	adds	r5, #140	; 0x8c
   b6954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6956:	6823      	ldr	r3, [r4, #0]
   b6958:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b695a:	2401      	movs	r4, #1
   b695c:	e7ba      	b.n	b68d4 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b695e:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b6962:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b6964:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b6968:	f7ff f83e 	bl	b59e8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b696c:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b696e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b6972:	1d23      	adds	r3, r4, #4
   b6974:	f104 0714 	add.w	r7, r4, #20
   b6978:	6818      	ldr	r0, [r3, #0]
   b697a:	6859      	ldr	r1, [r3, #4]
   b697c:	4632      	mov	r2, r6
   b697e:	c203      	stmia	r2!, {r0, r1}
   b6980:	3308      	adds	r3, #8
   b6982:	42bb      	cmp	r3, r7
   b6984:	4616      	mov	r6, r2
   b6986:	d1f7      	bne.n	b6978 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b6988:	e7d8      	b.n	b693c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b698c <_ZN9TCPClient9availableEv>:
{
   b698c:	b530      	push	{r4, r5, lr}
   b698e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b6990:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b6994:	b08b      	sub	sp, #44	; 0x2c
   b6996:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b6998:	b12b      	cbz	r3, b69a6 <_ZN9TCPClient9availableEv+0x1a>
   b699a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b699e:	429a      	cmp	r2, r3
   b69a0:	d101      	bne.n	b69a6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b69a2:	f7ff ff6f 	bl	b6884 <_ZN9TCPClient12flush_bufferEv>
   b69a6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b69a8:	6808      	ldr	r0, [r1, #0]
   b69aa:	2800      	cmp	r0, #0
   b69ac:	db18      	blt.n	b69e0 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b69ae:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b69b2:	2d7f      	cmp	r5, #127	; 0x7f
   b69b4:	d814      	bhi.n	b69e0 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b69b6:	3104      	adds	r1, #4
   b69b8:	2308      	movs	r3, #8
   b69ba:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b69be:	4429      	add	r1, r5
   b69c0:	f7ff f842 	bl	b5a48 <sock_recv>
            if (ret > 0) {
   b69c4:	2800      	cmp	r0, #0
   b69c6:	dd13      	ble.n	b69f0 <_ZN9TCPClient9availableEv+0x64>
   b69c8:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b69ca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b69ce:	b90a      	cbnz	r2, b69d4 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b69d0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b69d4:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b69d6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b69da:	4410      	add	r0, r2
   b69dc:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b69e0:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b69e2:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b69e6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b69ea:	1ac0      	subs	r0, r0, r3
   b69ec:	b00b      	add	sp, #44	; 0x2c
   b69ee:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b69f0:	f7ff f9d6 	bl	b5da0 <__errno>
   b69f4:	6803      	ldr	r3, [r0, #0]
   b69f6:	2b0b      	cmp	r3, #11
   b69f8:	d0f2      	beq.n	b69e0 <_ZN9TCPClient9availableEv+0x54>
   b69fa:	f7ff f9d1 	bl	b5da0 <__errno>
   b69fe:	6803      	ldr	r3, [r0, #0]
   b6a00:	2b0b      	cmp	r3, #11
   b6a02:	d0ed      	beq.n	b69e0 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b6a04:	2320      	movs	r3, #32
   b6a06:	2500      	movs	r5, #0
   b6a08:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b6a0c:	f7ff f9c8 	bl	b5da0 <__errno>
   b6a10:	6803      	ldr	r3, [r0, #0]
   b6a12:	9301      	str	r3, [sp, #4]
   b6a14:	4b08      	ldr	r3, [pc, #32]	; (b6a38 <_ZN9TCPClient9availableEv+0xac>)
   b6a16:	4909      	ldr	r1, [pc, #36]	; (b6a3c <_ZN9TCPClient9availableEv+0xb0>)
   b6a18:	9300      	str	r3, [sp, #0]
   b6a1a:	aa02      	add	r2, sp, #8
   b6a1c:	462b      	mov	r3, r5
   b6a1e:	2032      	movs	r0, #50	; 0x32
   b6a20:	f7ff f902 	bl	b5c28 <log_message>
                    sock_close(d_->sock);
   b6a24:	6963      	ldr	r3, [r4, #20]
   b6a26:	6818      	ldr	r0, [r3, #0]
   b6a28:	f7fe fffe 	bl	b5a28 <sock_close>
   b6a2c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b6a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6a32:	601a      	str	r2, [r3, #0]
   b6a34:	e7d4      	b.n	b69e0 <_ZN9TCPClient9availableEv+0x54>
   b6a36:	bf00      	nop
   b6a38:	000b7aff 	.word	0x000b7aff
   b6a3c:	000b7af8 	.word	0x000b7af8

000b6a40 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b6a40:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b6a42:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b6a44:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b6a46:	6818      	ldr	r0, [r3, #0]
   b6a48:	2800      	cmp	r0, #0
   b6a4a:	db01      	blt.n	b6a50 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b6a4c:	f7fe ffec 	bl	b5a28 <sock_close>
   b6a50:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b6a52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6a56:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b6a58:	6960      	ldr	r0, [r4, #20]
   b6a5a:	2211      	movs	r2, #17
   b6a5c:	2100      	movs	r1, #0
   b6a5e:	308c      	adds	r0, #140	; 0x8c
   b6a60:	f000 fc52 	bl	b7308 <memset>
    flush_buffer();
   b6a64:	4620      	mov	r0, r4
}
   b6a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b6a6a:	f7ff bf0b 	b.w	b6884 <_ZN9TCPClient12flush_bufferEv>

000b6a6e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b6a6e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b6a70:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b6a72:	4604      	mov	r4, r0
          total(0) {
   b6a74:	6001      	str	r1, [r0, #0]
   b6a76:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b6a7a:	3088      	adds	r0, #136	; 0x88
   b6a7c:	f7ff fa8a 	bl	b5f94 <_ZN9IPAddressC1Ev>
}
   b6a80:	4620      	mov	r0, r4
   b6a82:	bd10      	pop	{r4, pc}

000b6a84 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b6a84:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6a86:	2300      	movs	r3, #0
   b6a88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6a8c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b6a90:	4a0e      	ldr	r2, [pc, #56]	; (b6acc <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b6a92:	6103      	str	r3, [r0, #16]
   b6a94:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b6a96:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b6a98:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b6a9a:	20ac      	movs	r0, #172	; 0xac
   b6a9c:	9101      	str	r1, [sp, #4]
   b6a9e:	f7fd faf8 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b6aa2:	1e05      	subs	r5, r0, #0
   b6aa4:	f105 060c 	add.w	r6, r5, #12
   b6aa8:	d008      	beq.n	b6abc <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b6aaa:	2301      	movs	r3, #1
   b6aac:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b6ab0:	4b07      	ldr	r3, [pc, #28]	; (b6ad0 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b6ab2:	9901      	ldr	r1, [sp, #4]
   b6ab4:	602b      	str	r3, [r5, #0]
   b6ab6:	4630      	mov	r0, r6
   b6ab8:	f7ff ffd9 	bl	b6a6e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b6abc:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b6abe:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b6ac2:	f7ff fedf 	bl	b6884 <_ZN9TCPClient12flush_bufferEv>
}
   b6ac6:	b002      	add	sp, #8
   b6ac8:	bd70      	pop	{r4, r5, r6, pc}
   b6aca:	bf00      	nop
   b6acc:	000b7b34 	.word	0x000b7b34
   b6ad0:	000b7b18 	.word	0x000b7b18

000b6ad4 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b6ad4:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b6ad6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b6ada:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b6adc:	f7ff ffd2 	bl	b6a84 <_ZN9TCPClientC1Ei>
}
   b6ae0:	4620      	mov	r0, r4
   b6ae2:	bd10      	pop	{r4, pc}

000b6ae4 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b6ae4:	b510      	push	{r4, lr}
   b6ae6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b6ae8:	6800      	ldr	r0, [r0, #0]
   b6aea:	2800      	cmp	r0, #0
   b6aec:	db01      	blt.n	b6af2 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b6aee:	f7fe ff9b 	bl	b5a28 <sock_close>
    }
}
   b6af2:	4620      	mov	r0, r4
   b6af4:	bd10      	pop	{r4, pc}

000b6af6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b6af6:	300c      	adds	r0, #12
   b6af8:	f7ff bff4 	b.w	b6ae4 <_ZN9TCPClient4DataD1Ev>

000b6afc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6afc:	4b02      	ldr	r3, [pc, #8]	; (b6b08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6afe:	681a      	ldr	r2, [r3, #0]
   b6b00:	4b02      	ldr	r3, [pc, #8]	; (b6b0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6b02:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6b04:	4770      	bx	lr
   b6b06:	bf00      	nop
   b6b08:	2003e5b4 	.word	0x2003e5b4
   b6b0c:	2003e6fc 	.word	0x2003e6fc

000b6b10 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6b10:	4770      	bx	lr

000b6b12 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6b12:	7441      	strb	r1, [r0, #17]
}
   b6b14:	4770      	bx	lr

000b6b16 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6b16:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6b18:	7c00      	ldrb	r0, [r0, #16]
   b6b1a:	f7ff f82d 	bl	b5b78 <hal_usart_available_data_for_write>
}
   b6b1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6b22:	bd08      	pop	{r3, pc}

000b6b24 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6b24:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6b26:	7c00      	ldrb	r0, [r0, #16]
   b6b28:	f7fe fffe 	bl	b5b28 <hal_usart_available>
}
   b6b2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6b30:	bd08      	pop	{r3, pc}

000b6b32 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6b32:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6b34:	7c00      	ldrb	r0, [r0, #16]
   b6b36:	f7ff f807 	bl	b5b48 <hal_usart_peek>
}
   b6b3a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6b3e:	bd08      	pop	{r3, pc}

000b6b40 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6b40:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6b42:	7c00      	ldrb	r0, [r0, #16]
   b6b44:	f7fe fff8 	bl	b5b38 <hal_usart_read>
}
   b6b48:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6b4c:	bd08      	pop	{r3, pc}

000b6b4e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6b4e:	7c00      	ldrb	r0, [r0, #16]
   b6b50:	f7ff b802 	b.w	b5b58 <hal_usart_flush>

000b6b54 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6b56:	7c45      	ldrb	r5, [r0, #17]
{
   b6b58:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6b5a:	b12d      	cbz	r5, b6b68 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6b5c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6b5e:	b003      	add	sp, #12
   b6b60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6b64:	f7fe bfd8 	b.w	b5b18 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6b68:	7c00      	ldrb	r0, [r0, #16]
   b6b6a:	9101      	str	r1, [sp, #4]
   b6b6c:	f7ff f804 	bl	b5b78 <hal_usart_available_data_for_write>
   b6b70:	2800      	cmp	r0, #0
   b6b72:	9901      	ldr	r1, [sp, #4]
   b6b74:	dcf2      	bgt.n	b6b5c <_ZN11USARTSerial5writeEh+0x8>
}
   b6b76:	4628      	mov	r0, r5
   b6b78:	b003      	add	sp, #12
   b6b7a:	bd30      	pop	{r4, r5, pc}

000b6b7c <_ZN11USARTSerialD0Ev>:
   b6b7c:	b510      	push	{r4, lr}
   b6b7e:	2114      	movs	r1, #20
   b6b80:	4604      	mov	r4, r0
   b6b82:	f7fd fa8a 	bl	b409a <_ZdlPvj>
   b6b86:	4620      	mov	r0, r4
   b6b88:	bd10      	pop	{r4, pc}
	...

000b6b8c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6b8c:	b510      	push	{r4, lr}
   b6b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6b92:	4604      	mov	r4, r0
   b6b94:	4608      	mov	r0, r1
   b6b96:	4611      	mov	r1, r2
   b6b98:	2200      	movs	r2, #0
   b6b9a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6b9e:	4b04      	ldr	r3, [pc, #16]	; (b6bb0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6ba0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6ba2:	2301      	movs	r3, #1
  _serial = serial;
   b6ba4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6ba6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6ba8:	f7fe ffee 	bl	b5b88 <hal_usart_init_ex>
}
   b6bac:	4620      	mov	r0, r4
   b6bae:	bd10      	pop	{r4, pc}
   b6bb0:	000b7b9c 	.word	0x000b7b9c

000b6bb4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6bb4:	7441      	strb	r1, [r0, #17]
}
   b6bb6:	4770      	bx	lr

000b6bb8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6bb8:	4770      	bx	lr

000b6bba <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6bba:	4770      	bx	lr

000b6bbc <_ZN9USBSerial4readEv>:
{
   b6bbc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6bbe:	2100      	movs	r1, #0
   b6bc0:	7c00      	ldrb	r0, [r0, #16]
   b6bc2:	f7ff f809 	bl	b5bd8 <HAL_USB_USART_Receive_Data>
}
   b6bc6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6bca:	bd08      	pop	{r3, pc}

000b6bcc <_ZN9USBSerial4peekEv>:
{
   b6bcc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6bce:	2101      	movs	r1, #1
   b6bd0:	7c00      	ldrb	r0, [r0, #16]
   b6bd2:	f7ff f801 	bl	b5bd8 <HAL_USB_USART_Receive_Data>
}
   b6bd6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6bda:	bd08      	pop	{r3, pc}

000b6bdc <_ZN9USBSerial17availableForWriteEv>:
{
   b6bdc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6bde:	7c00      	ldrb	r0, [r0, #16]
   b6be0:	f7fe fff2 	bl	b5bc8 <HAL_USB_USART_Available_Data_For_Write>
}
   b6be4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6be8:	bd08      	pop	{r3, pc}

000b6bea <_ZN9USBSerial9availableEv>:
{
   b6bea:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6bec:	7c00      	ldrb	r0, [r0, #16]
   b6bee:	f7fe ffe3 	bl	b5bb8 <HAL_USB_USART_Available_Data>
}
   b6bf2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6bf6:	bd08      	pop	{r3, pc}

000b6bf8 <_ZN9USBSerial5writeEh>:
{
   b6bf8:	b513      	push	{r0, r1, r4, lr}
   b6bfa:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6bfc:	7c00      	ldrb	r0, [r0, #16]
{
   b6bfe:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6c00:	f7fe ffe2 	bl	b5bc8 <HAL_USB_USART_Available_Data_For_Write>
   b6c04:	2800      	cmp	r0, #0
   b6c06:	9901      	ldr	r1, [sp, #4]
   b6c08:	dc01      	bgt.n	b6c0e <_ZN9USBSerial5writeEh+0x16>
   b6c0a:	7c60      	ldrb	r0, [r4, #17]
   b6c0c:	b120      	cbz	r0, b6c18 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6c0e:	7c20      	ldrb	r0, [r4, #16]
   b6c10:	f7fe ffea 	bl	b5be8 <HAL_USB_USART_Send_Data>
   b6c14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6c18:	b002      	add	sp, #8
   b6c1a:	bd10      	pop	{r4, pc}

000b6c1c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6c1c:	7c00      	ldrb	r0, [r0, #16]
   b6c1e:	f7fe bfeb 	b.w	b5bf8 <HAL_USB_USART_Flush_Data>

000b6c22 <_ZN9USBSerialD0Ev>:
   b6c22:	b510      	push	{r4, lr}
   b6c24:	2114      	movs	r1, #20
   b6c26:	4604      	mov	r4, r0
   b6c28:	f7fd fa37 	bl	b409a <_ZdlPvj>
   b6c2c:	4620      	mov	r0, r4
   b6c2e:	bd10      	pop	{r4, pc}

000b6c30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6c30:	b510      	push	{r4, lr}
   b6c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6c36:	4604      	mov	r4, r0
   b6c38:	4608      	mov	r0, r1
   b6c3a:	2100      	movs	r1, #0
   b6c3c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6c40:	4b04      	ldr	r3, [pc, #16]	; (b6c54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6c42:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6c44:	2301      	movs	r3, #1
  _serial = serial;
   b6c46:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6c48:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6c4a:	4611      	mov	r1, r2
   b6c4c:	f7fe ffa4 	bl	b5b98 <HAL_USB_USART_Init>
}
   b6c50:	4620      	mov	r0, r4
   b6c52:	bd10      	pop	{r4, pc}
   b6c54:	000b7bcc 	.word	0x000b7bcc

000b6c58 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6c58:	7c00      	ldrb	r0, [r0, #16]
   b6c5a:	2200      	movs	r2, #0
   b6c5c:	f7fe bfa4 	b.w	b5ba8 <HAL_USB_USART_Begin>

000b6c60 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b6c60:	7c00      	ldrb	r0, [r0, #16]
   b6c62:	f7fe bfd1 	b.w	b5c08 <HAL_USB_USART_Is_Connected>

000b6c66 <_Z19acquireSerialBufferv>:
{
   b6c66:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6c68:	2214      	movs	r2, #20
{
   b6c6a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6c6c:	2100      	movs	r1, #0
   b6c6e:	f000 fb4b 	bl	b7308 <memset>
}
   b6c72:	4620      	mov	r0, r4
   b6c74:	bd10      	pop	{r4, pc}
	...

000b6c78 <_Z16_fetch_usbserialv>:
{
   b6c78:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6c7a:	4c0f      	ldr	r4, [pc, #60]	; (b6cb8 <_Z16_fetch_usbserialv+0x40>)
{
   b6c7c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6c7e:	a803      	add	r0, sp, #12
   b6c80:	f7ff fff1 	bl	b6c66 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6c84:	7821      	ldrb	r1, [r4, #0]
   b6c86:	f3bf 8f5b 	dmb	ish
   b6c8a:	f011 0101 	ands.w	r1, r1, #1
   b6c8e:	d10f      	bne.n	b6cb0 <_Z16_fetch_usbserialv+0x38>
   b6c90:	4620      	mov	r0, r4
   b6c92:	9101      	str	r1, [sp, #4]
   b6c94:	f7fd fa10 	bl	b40b8 <__cxa_guard_acquire>
   b6c98:	9901      	ldr	r1, [sp, #4]
   b6c9a:	b148      	cbz	r0, b6cb0 <_Z16_fetch_usbserialv+0x38>
   b6c9c:	aa03      	add	r2, sp, #12
   b6c9e:	4807      	ldr	r0, [pc, #28]	; (b6cbc <_Z16_fetch_usbserialv+0x44>)
   b6ca0:	f7ff ffc6 	bl	b6c30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6ca4:	4620      	mov	r0, r4
   b6ca6:	f7fd fa0c 	bl	b40c2 <__cxa_guard_release>
   b6caa:	4805      	ldr	r0, [pc, #20]	; (b6cc0 <_Z16_fetch_usbserialv+0x48>)
   b6cac:	f000 fb18 	bl	b72e0 <atexit>
	return _usbserial;
}
   b6cb0:	4802      	ldr	r0, [pc, #8]	; (b6cbc <_Z16_fetch_usbserialv+0x44>)
   b6cb2:	b008      	add	sp, #32
   b6cb4:	bd10      	pop	{r4, pc}
   b6cb6:	bf00      	nop
   b6cb8:	2003e700 	.word	0x2003e700
   b6cbc:	2003e704 	.word	0x2003e704
   b6cc0:	000b6bb9 	.word	0x000b6bb9

000b6cc4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6cc4:	2200      	movs	r2, #0
   b6cc6:	6840      	ldr	r0, [r0, #4]
   b6cc8:	4611      	mov	r1, r2
   b6cca:	f7ff b801 	b.w	b5cd0 <network_ready>

000b6cce <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6cce:	2200      	movs	r2, #0
   b6cd0:	6840      	ldr	r0, [r0, #4]
   b6cd2:	4611      	mov	r1, r2
   b6cd4:	f7ff b81c 	b.w	b5d10 <network_listening>

000b6cd8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6cd8:	2200      	movs	r2, #0
   b6cda:	6840      	ldr	r0, [r0, #4]
   b6cdc:	4611      	mov	r1, r2
   b6cde:	f7ff b827 	b.w	b5d30 <network_get_listen_timeout>

000b6ce2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6ce2:	6840      	ldr	r0, [r0, #4]
   b6ce4:	2200      	movs	r2, #0
   b6ce6:	f7ff b81b 	b.w	b5d20 <network_set_listen_timeout>

000b6cea <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6cea:	6840      	ldr	r0, [r0, #4]
   b6cec:	2200      	movs	r2, #0
   b6cee:	f081 0101 	eor.w	r1, r1, #1
   b6cf2:	f7ff b805 	b.w	b5d00 <network_listen>

000b6cf6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6cf6:	2300      	movs	r3, #0
   b6cf8:	6840      	ldr	r0, [r0, #4]
   b6cfa:	461a      	mov	r2, r3
   b6cfc:	4619      	mov	r1, r3
   b6cfe:	f7fe bff7 	b.w	b5cf0 <network_off>

000b6d02 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6d02:	2300      	movs	r3, #0
   b6d04:	6840      	ldr	r0, [r0, #4]
   b6d06:	461a      	mov	r2, r3
   b6d08:	4619      	mov	r1, r3
   b6d0a:	f7fe bfe9 	b.w	b5ce0 <network_on>

000b6d0e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6d0e:	2200      	movs	r2, #0
   b6d10:	6840      	ldr	r0, [r0, #4]
   b6d12:	4611      	mov	r1, r2
   b6d14:	f7fe bfcc 	b.w	b5cb0 <network_connecting>

000b6d18 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6d18:	6840      	ldr	r0, [r0, #4]
   b6d1a:	2200      	movs	r2, #0
   b6d1c:	2102      	movs	r1, #2
   b6d1e:	f7fe bfcf 	b.w	b5cc0 <network_disconnect>

000b6d22 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6d22:	2300      	movs	r3, #0
   b6d24:	6840      	ldr	r0, [r0, #4]
   b6d26:	461a      	mov	r2, r3
   b6d28:	f7fe bfba 	b.w	b5ca0 <network_connect>

000b6d2c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6d2c:	4b02      	ldr	r3, [pc, #8]	; (b6d38 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6d2e:	2204      	movs	r2, #4
   b6d30:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6d32:	4a02      	ldr	r2, [pc, #8]	; (b6d3c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6d34:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6d36:	4770      	bx	lr
   b6d38:	2003e718 	.word	0x2003e718
   b6d3c:	000b7bfc 	.word	0x000b7bfc

000b6d40 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6d40:	4b01      	ldr	r3, [pc, #4]	; (b6d48 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6d42:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6d44:	4770      	bx	lr
   b6d46:	bf00      	nop
   b6d48:	2003e5b8 	.word	0x2003e5b8

000b6d4c <serialEventRun>:
{
   b6d4c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6d4e:	4b0b      	ldr	r3, [pc, #44]	; (b6d7c <serialEventRun+0x30>)
   b6d50:	b143      	cbz	r3, b6d64 <serialEventRun+0x18>
   b6d52:	f7ff ff91 	bl	b6c78 <_Z16_fetch_usbserialv>
   b6d56:	6803      	ldr	r3, [r0, #0]
   b6d58:	691b      	ldr	r3, [r3, #16]
   b6d5a:	4798      	blx	r3
   b6d5c:	2800      	cmp	r0, #0
   b6d5e:	dd01      	ble.n	b6d64 <serialEventRun+0x18>
        serialEvent();
   b6d60:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6d64:	4b06      	ldr	r3, [pc, #24]	; (b6d80 <serialEventRun+0x34>)
   b6d66:	b143      	cbz	r3, b6d7a <serialEventRun+0x2e>
   b6d68:	f000 f982 	bl	b7070 <_Z22__fetch_global_Serial1v>
   b6d6c:	6803      	ldr	r3, [r0, #0]
   b6d6e:	691b      	ldr	r3, [r3, #16]
   b6d70:	4798      	blx	r3
   b6d72:	2800      	cmp	r0, #0
   b6d74:	dd01      	ble.n	b6d7a <serialEventRun+0x2e>
        serialEvent1();
   b6d76:	f3af 8000 	nop.w
}
   b6d7a:	bd08      	pop	{r3, pc}
	...

000b6d84 <_post_loop>:
{
   b6d84:	b508      	push	{r3, lr}
	serialEventRun();
   b6d86:	f7ff ffe1 	bl	b6d4c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6d8a:	f7fe fd85 	bl	b5898 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6d8e:	4b01      	ldr	r3, [pc, #4]	; (b6d94 <_post_loop+0x10>)
   b6d90:	6018      	str	r0, [r3, #0]
}
   b6d92:	bd08      	pop	{r3, pc}
   b6d94:	2003e728 	.word	0x2003e728

000b6d98 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6d98:	4805      	ldr	r0, [pc, #20]	; (b6db0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b6d9a:	4a06      	ldr	r2, [pc, #24]	; (b6db4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6d9c:	4906      	ldr	r1, [pc, #24]	; (b6db8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6d9e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6da0:	1a12      	subs	r2, r2, r0
   b6da2:	f000 faa3 	bl	b72ec <memcpy>
    __backup_sram_signature = signature;
   b6da6:	4b05      	ldr	r3, [pc, #20]	; (b6dbc <_Z33system_initialize_user_backup_ramv+0x24>)
   b6da8:	4a05      	ldr	r2, [pc, #20]	; (b6dc0 <_Z33system_initialize_user_backup_ramv+0x28>)
   b6daa:	601a      	str	r2, [r3, #0]
}
   b6dac:	bd08      	pop	{r3, pc}
   b6dae:	bf00      	nop
   b6db0:	2003f400 	.word	0x2003f400
   b6db4:	2003f404 	.word	0x2003f404
   b6db8:	000b7de4 	.word	0x000b7de4
   b6dbc:	2003f400 	.word	0x2003f400
   b6dc0:	9a271c1e 	.word	0x9a271c1e

000b6dc4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6dc4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6dc6:	2300      	movs	r3, #0
   b6dc8:	9300      	str	r3, [sp, #0]
   b6dca:	461a      	mov	r2, r3
   b6dcc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6dd0:	f7fe ff4c 	bl	b5c6c <system_ctrl_set_result>
}
   b6dd4:	b003      	add	sp, #12
   b6dd6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6ddc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6ddc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6dde:	8843      	ldrh	r3, [r0, #2]
   b6de0:	2b0a      	cmp	r3, #10
   b6de2:	d008      	beq.n	b6df6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6de4:	2b50      	cmp	r3, #80	; 0x50
   b6de6:	d10b      	bne.n	b6e00 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6de8:	4b09      	ldr	r3, [pc, #36]	; (b6e10 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6dea:	681b      	ldr	r3, [r3, #0]
   b6dec:	b14b      	cbz	r3, b6e02 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6dee:	b003      	add	sp, #12
   b6df0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6df4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6df6:	f7ff ffe5 	bl	b6dc4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6dfa:	b003      	add	sp, #12
   b6dfc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6e00:	2300      	movs	r3, #0
   b6e02:	9300      	str	r3, [sp, #0]
   b6e04:	461a      	mov	r2, r3
   b6e06:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6e0a:	f7fe ff2f 	bl	b5c6c <system_ctrl_set_result>
}
   b6e0e:	e7f4      	b.n	b6dfa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6e10:	2003e724 	.word	0x2003e724

000b6e14 <module_user_init_hook>:
{
   b6e14:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6e16:	4812      	ldr	r0, [pc, #72]	; (b6e60 <module_user_init_hook+0x4c>)
   b6e18:	2100      	movs	r1, #0
   b6e1a:	f7fe ffd1 	bl	b5dc0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6e1e:	4b11      	ldr	r3, [pc, #68]	; (b6e64 <module_user_init_hook+0x50>)
   b6e20:	681a      	ldr	r2, [r3, #0]
   b6e22:	4b11      	ldr	r3, [pc, #68]	; (b6e68 <module_user_init_hook+0x54>)
   b6e24:	429a      	cmp	r2, r3
   b6e26:	4b11      	ldr	r3, [pc, #68]	; (b6e6c <module_user_init_hook+0x58>)
   b6e28:	bf0c      	ite	eq
   b6e2a:	2201      	moveq	r2, #1
   b6e2c:	2200      	movne	r2, #0
   b6e2e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6e30:	d001      	beq.n	b6e36 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6e32:	f7ff ffb1 	bl	b6d98 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6e36:	f7fe fd17 	bl	b5868 <HAL_RNG_GetRandomNumber>
   b6e3a:	4604      	mov	r4, r0
    srand(seed);
   b6e3c:	f000 fa6c 	bl	b7318 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6e40:	4b0b      	ldr	r3, [pc, #44]	; (b6e70 <module_user_init_hook+0x5c>)
   b6e42:	b113      	cbz	r3, b6e4a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6e44:	4620      	mov	r0, r4
   b6e46:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6e4a:	2100      	movs	r1, #0
   b6e4c:	4808      	ldr	r0, [pc, #32]	; (b6e70 <module_user_init_hook+0x5c>)
   b6e4e:	f7fe ff1f 	bl	b5c90 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6e56:	4807      	ldr	r0, [pc, #28]	; (b6e74 <module_user_init_hook+0x60>)
   b6e58:	2100      	movs	r1, #0
   b6e5a:	f7fe befd 	b.w	b5c58 <system_ctrl_set_app_request_handler>
   b6e5e:	bf00      	nop
   b6e60:	000b6d41 	.word	0x000b6d41
   b6e64:	2003f400 	.word	0x2003f400
   b6e68:	9a271c1e 	.word	0x9a271c1e
   b6e6c:	2003e720 	.word	0x2003e720
   b6e70:	00000000 	.word	0x00000000
   b6e74:	000b6ddd 	.word	0x000b6ddd

000b6e78 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6e78:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6e7a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6e7c:	d902      	bls.n	b6e84 <pinAvailable+0xc>
    return false;
   b6e7e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6e80:	b002      	add	sp, #8
   b6e82:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6e84:	f1a0 030b 	sub.w	r3, r0, #11
   b6e88:	2b02      	cmp	r3, #2
   b6e8a:	d81a      	bhi.n	b6ec2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6e8c:	4c17      	ldr	r4, [pc, #92]	; (b6eec <pinAvailable+0x74>)
   b6e8e:	7821      	ldrb	r1, [r4, #0]
   b6e90:	f3bf 8f5b 	dmb	ish
   b6e94:	f011 0101 	ands.w	r1, r1, #1
   b6e98:	d10b      	bne.n	b6eb2 <pinAvailable+0x3a>
   b6e9a:	4620      	mov	r0, r4
   b6e9c:	9101      	str	r1, [sp, #4]
   b6e9e:	f7fd f90b 	bl	b40b8 <__cxa_guard_acquire>
   b6ea2:	9901      	ldr	r1, [sp, #4]
   b6ea4:	b128      	cbz	r0, b6eb2 <pinAvailable+0x3a>
   b6ea6:	4812      	ldr	r0, [pc, #72]	; (b6ef0 <pinAvailable+0x78>)
   b6ea8:	f7ff fa14 	bl	b62d4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6eac:	4620      	mov	r0, r4
   b6eae:	f7fd f908 	bl	b40c2 <__cxa_guard_release>
   b6eb2:	4b0f      	ldr	r3, [pc, #60]	; (b6ef0 <pinAvailable+0x78>)
   b6eb4:	7818      	ldrb	r0, [r3, #0]
   b6eb6:	f7fe fe0f 	bl	b5ad8 <hal_spi_is_enabled>
   b6eba:	2800      	cmp	r0, #0
   b6ebc:	d1df      	bne.n	b6e7e <pinAvailable+0x6>
  return true; // 'pin' is available
   b6ebe:	2001      	movs	r0, #1
   b6ec0:	e7de      	b.n	b6e80 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6ec2:	2801      	cmp	r0, #1
   b6ec4:	d809      	bhi.n	b6eda <pinAvailable+0x62>
   b6ec6:	f000 f893 	bl	b6ff0 <_Z19__fetch_global_Wirev>
   b6eca:	2100      	movs	r1, #0
   b6ecc:	7c00      	ldrb	r0, [r0, #16]
   b6ece:	f7fe fd63 	bl	b5998 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6ed2:	f080 0001 	eor.w	r0, r0, #1
   b6ed6:	b2c0      	uxtb	r0, r0
   b6ed8:	e7d2      	b.n	b6e80 <pinAvailable+0x8>
   b6eda:	3809      	subs	r0, #9
   b6edc:	2801      	cmp	r0, #1
   b6ede:	d8ee      	bhi.n	b6ebe <pinAvailable+0x46>
   b6ee0:	f000 f8c6 	bl	b7070 <_Z22__fetch_global_Serial1v>
   b6ee4:	7c00      	ldrb	r0, [r0, #16]
   b6ee6:	f7fe fe3f 	bl	b5b68 <hal_usart_is_enabled>
   b6eea:	e7f2      	b.n	b6ed2 <pinAvailable+0x5a>
   b6eec:	2003e6b8 	.word	0x2003e6b8
   b6ef0:	2003e6bc 	.word	0x2003e6bc

000b6ef4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6ef4:	2823      	cmp	r0, #35	; 0x23
{
   b6ef6:	b538      	push	{r3, r4, r5, lr}
   b6ef8:	4604      	mov	r4, r0
   b6efa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6efc:	d80a      	bhi.n	b6f14 <pinMode+0x20>
   b6efe:	29ff      	cmp	r1, #255	; 0xff
   b6f00:	d008      	beq.n	b6f14 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6f02:	f7ff ffb9 	bl	b6e78 <pinAvailable>
   b6f06:	b128      	cbz	r0, b6f14 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6f08:	4629      	mov	r1, r5
   b6f0a:	4620      	mov	r0, r4
}
   b6f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6f10:	f7fe bce2 	b.w	b58d8 <HAL_Pin_Mode>
}
   b6f14:	bd38      	pop	{r3, r4, r5, pc}

000b6f16 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6f16:	b538      	push	{r3, r4, r5, lr}
   b6f18:	4604      	mov	r4, r0
   b6f1a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6f1c:	f7fe fce4 	bl	b58e8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6f20:	28ff      	cmp	r0, #255	; 0xff
   b6f22:	d010      	beq.n	b6f46 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6f24:	2806      	cmp	r0, #6
   b6f26:	d804      	bhi.n	b6f32 <digitalWrite+0x1c>
   b6f28:	234d      	movs	r3, #77	; 0x4d
   b6f2a:	fa23 f000 	lsr.w	r0, r3, r0
   b6f2e:	07c3      	lsls	r3, r0, #31
   b6f30:	d409      	bmi.n	b6f46 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6f32:	4620      	mov	r0, r4
   b6f34:	f7ff ffa0 	bl	b6e78 <pinAvailable>
   b6f38:	b128      	cbz	r0, b6f46 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b6f3a:	4629      	mov	r1, r5
   b6f3c:	4620      	mov	r0, r4
}
   b6f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b6f42:	f7fe bcd9 	b.w	b58f8 <HAL_GPIO_Write>
}
   b6f46:	bd38      	pop	{r3, r4, r5, pc}

000b6f48 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b6f48:	280d      	cmp	r0, #13
{
   b6f4a:	b510      	push	{r4, lr}
   b6f4c:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b6f4e:	bf9c      	itt	ls
   b6f50:	340e      	addls	r4, #14
   b6f52:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b6f54:	4620      	mov	r0, r4
   b6f56:	f7ff ff8f 	bl	b6e78 <pinAvailable>
   b6f5a:	b150      	cbz	r0, b6f72 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b6f5c:	2103      	movs	r1, #3
   b6f5e:	4620      	mov	r0, r4
   b6f60:	f7fe fcb2 	bl	b58c8 <HAL_Validate_Pin_Function>
   b6f64:	2803      	cmp	r0, #3
   b6f66:	d104      	bne.n	b6f72 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b6f68:	4620      	mov	r0, r4
}
   b6f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b6f6e:	f7fe bccb 	b.w	b5908 <hal_adc_read>
}
   b6f72:	2000      	movs	r0, #0
   b6f74:	bd10      	pop	{r4, pc}

000b6f76 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b6f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6f7a:	4690      	mov	r8, r2
   b6f7c:	461f      	mov	r7, r3
   b6f7e:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b6f80:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b6f82:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b6f84:	f1c4 0107 	rsb	r1, r4, #7
   b6f88:	f1b8 0f00 	cmp.w	r8, #0
   b6f8c:	d112      	bne.n	b6fb4 <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b6f8e:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b6f92:	f001 0101 	and.w	r1, r1, #1
   b6f96:	4630      	mov	r0, r6
   b6f98:	f7ff ffbd 	bl	b6f16 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b6f9c:	2101      	movs	r1, #1
   b6f9e:	4628      	mov	r0, r5
   b6fa0:	f7ff ffb9 	bl	b6f16 <digitalWrite>
    digitalWrite(clockPin, LOW);
   b6fa4:	2100      	movs	r1, #0
   b6fa6:	4628      	mov	r0, r5
   b6fa8:	f7ff ffb5 	bl	b6f16 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b6fac:	3c01      	subs	r4, #1
   b6fae:	d2e9      	bcs.n	b6f84 <shiftOut+0xe>
  }
}
   b6fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b6fb4:	fa47 f104 	asr.w	r1, r7, r4
   b6fb8:	e7eb      	b.n	b6f92 <shiftOut+0x1c>

000b6fba <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6fba:	4770      	bx	lr

000b6fbc <_Z17acquireWireBufferv>:
{
   b6fbc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6fbe:	4b0a      	ldr	r3, [pc, #40]	; (b6fe8 <_Z17acquireWireBufferv+0x2c>)
   b6fc0:	6003      	str	r3, [r0, #0]
   b6fc2:	2301      	movs	r3, #1
{
   b6fc4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6fc6:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6fc8:	4908      	ldr	r1, [pc, #32]	; (b6fec <_Z17acquireWireBufferv+0x30>)
   b6fca:	2020      	movs	r0, #32
   b6fcc:	f000 f874 	bl	b70b8 <_ZnajRKSt9nothrow_t>
	};
   b6fd0:	2520      	movs	r5, #32
   b6fd2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6fd4:	4905      	ldr	r1, [pc, #20]	; (b6fec <_Z17acquireWireBufferv+0x30>)
	};
   b6fd6:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b6fd8:	4628      	mov	r0, r5
   b6fda:	f000 f86d 	bl	b70b8 <_ZnajRKSt9nothrow_t>
	};
   b6fde:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b6fe2:	4620      	mov	r0, r4
   b6fe4:	bd38      	pop	{r3, r4, r5, pc}
   b6fe6:	bf00      	nop
   b6fe8:	00010018 	.word	0x00010018
   b6fec:	000b7c30 	.word	0x000b7c30

000b6ff0 <_Z19__fetch_global_Wirev>:
{
   b6ff0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6ff2:	4d0e      	ldr	r5, [pc, #56]	; (b702c <_Z19__fetch_global_Wirev+0x3c>)
   b6ff4:	7829      	ldrb	r1, [r5, #0]
   b6ff6:	f3bf 8f5b 	dmb	ish
   b6ffa:	f011 0401 	ands.w	r4, r1, #1
{
   b6ffe:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7000:	d111      	bne.n	b7026 <_Z19__fetch_global_Wirev+0x36>
   b7002:	4628      	mov	r0, r5
   b7004:	f7fd f858 	bl	b40b8 <__cxa_guard_acquire>
   b7008:	b168      	cbz	r0, b7026 <_Z19__fetch_global_Wirev+0x36>
   b700a:	4668      	mov	r0, sp
   b700c:	f7ff ffd6 	bl	b6fbc <_Z17acquireWireBufferv>
   b7010:	466a      	mov	r2, sp
   b7012:	4621      	mov	r1, r4
   b7014:	4806      	ldr	r0, [pc, #24]	; (b7030 <_Z19__fetch_global_Wirev+0x40>)
   b7016:	f7fe ff51 	bl	b5ebc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b701a:	4628      	mov	r0, r5
   b701c:	f7fd f851 	bl	b40c2 <__cxa_guard_release>
   b7020:	4804      	ldr	r0, [pc, #16]	; (b7034 <_Z19__fetch_global_Wirev+0x44>)
   b7022:	f000 f95d 	bl	b72e0 <atexit>
	return wire;
}
   b7026:	4802      	ldr	r0, [pc, #8]	; (b7030 <_Z19__fetch_global_Wirev+0x40>)
   b7028:	b007      	add	sp, #28
   b702a:	bd30      	pop	{r4, r5, pc}
   b702c:	2003e72c 	.word	0x2003e72c
   b7030:	2003e730 	.word	0x2003e730
   b7034:	000b6fbb 	.word	0x000b6fbb

000b7038 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7038:	4770      	bx	lr
	...

000b703c <_Z20acquireSerial1Bufferv>:
{
   b703c:	b538      	push	{r3, r4, r5, lr}
   b703e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7040:	2514      	movs	r5, #20
   b7042:	462a      	mov	r2, r5
   b7044:	2100      	movs	r1, #0
   b7046:	f000 f95f 	bl	b7308 <memset>
   b704a:	8025      	strh	r5, [r4, #0]
   b704c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b704e:	4907      	ldr	r1, [pc, #28]	; (b706c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7050:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7052:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7054:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7056:	f000 f82f 	bl	b70b8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b705a:	4904      	ldr	r1, [pc, #16]	; (b706c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b705c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b705e:	4628      	mov	r0, r5
   b7060:	f000 f82a 	bl	b70b8 <_ZnajRKSt9nothrow_t>
    };
   b7064:	60e0      	str	r0, [r4, #12]
}
   b7066:	4620      	mov	r0, r4
   b7068:	bd38      	pop	{r3, r4, r5, pc}
   b706a:	bf00      	nop
   b706c:	000b7c30 	.word	0x000b7c30

000b7070 <_Z22__fetch_global_Serial1v>:
{
   b7070:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7072:	4d0e      	ldr	r5, [pc, #56]	; (b70ac <_Z22__fetch_global_Serial1v+0x3c>)
   b7074:	7829      	ldrb	r1, [r5, #0]
   b7076:	f3bf 8f5b 	dmb	ish
   b707a:	f011 0401 	ands.w	r4, r1, #1
{
   b707e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7080:	d111      	bne.n	b70a6 <_Z22__fetch_global_Serial1v+0x36>
   b7082:	4628      	mov	r0, r5
   b7084:	f7fd f818 	bl	b40b8 <__cxa_guard_acquire>
   b7088:	b168      	cbz	r0, b70a6 <_Z22__fetch_global_Serial1v+0x36>
   b708a:	a801      	add	r0, sp, #4
   b708c:	f7ff ffd6 	bl	b703c <_Z20acquireSerial1Bufferv>
   b7090:	aa01      	add	r2, sp, #4
   b7092:	4621      	mov	r1, r4
   b7094:	4806      	ldr	r0, [pc, #24]	; (b70b0 <_Z22__fetch_global_Serial1v+0x40>)
   b7096:	f7ff fd79 	bl	b6b8c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b709a:	4628      	mov	r0, r5
   b709c:	f7fd f811 	bl	b40c2 <__cxa_guard_release>
   b70a0:	4804      	ldr	r0, [pc, #16]	; (b70b4 <_Z22__fetch_global_Serial1v+0x44>)
   b70a2:	f000 f91d 	bl	b72e0 <atexit>
    return serial1;
}
   b70a6:	4802      	ldr	r0, [pc, #8]	; (b70b0 <_Z22__fetch_global_Serial1v+0x40>)
   b70a8:	b007      	add	sp, #28
   b70aa:	bd30      	pop	{r4, r5, pc}
   b70ac:	2003e744 	.word	0x2003e744
   b70b0:	2003e748 	.word	0x2003e748
   b70b4:	000b7039 	.word	0x000b7039

000b70b8 <_ZnajRKSt9nothrow_t>:
   b70b8:	f7fc bfed 	b.w	b4096 <_Znaj>

000b70bc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b70bc:	4901      	ldr	r1, [pc, #4]	; (b70c4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b70be:	f000 b8f9 	b.w	b72b4 <_ZNKSt9type_infoeqERKS_>
   b70c2:	bf00      	nop
   b70c4:	000b7c4c 	.word	0x000b7c4c

000b70c8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b70c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b70ca:	2400      	movs	r4, #0
   b70cc:	2310      	movs	r3, #16
   b70ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b70d2:	6803      	ldr	r3, [r0, #0]
   b70d4:	4615      	mov	r5, r2
   b70d6:	699e      	ldr	r6, [r3, #24]
   b70d8:	6812      	ldr	r2, [r2, #0]
   b70da:	466b      	mov	r3, sp
   b70dc:	e9cd 4400 	strd	r4, r4, [sp]
   b70e0:	47b0      	blx	r6
   b70e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b70e6:	f003 0306 	and.w	r3, r3, #6
   b70ea:	2b06      	cmp	r3, #6
   b70ec:	bf03      	ittte	eq
   b70ee:	9b00      	ldreq	r3, [sp, #0]
   b70f0:	602b      	streq	r3, [r5, #0]
   b70f2:	2001      	moveq	r0, #1
   b70f4:	4620      	movne	r0, r4
   b70f6:	b004      	add	sp, #16
   b70f8:	bd70      	pop	{r4, r5, r6, pc}

000b70fa <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b70fa:	9800      	ldr	r0, [sp, #0]
   b70fc:	4290      	cmp	r0, r2
   b70fe:	bf14      	ite	ne
   b7100:	2001      	movne	r0, #1
   b7102:	2006      	moveq	r0, #6
   b7104:	4770      	bx	lr
	...

000b7108 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7108:	b510      	push	{r4, lr}
   b710a:	4b03      	ldr	r3, [pc, #12]	; (b7118 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b710c:	6003      	str	r3, [r0, #0]
   b710e:	4604      	mov	r4, r0
   b7110:	f000 f8cd 	bl	b72ae <_ZNSt9type_infoD1Ev>
   b7114:	4620      	mov	r0, r4
   b7116:	bd10      	pop	{r4, pc}
   b7118:	000b7c8c 	.word	0x000b7c8c

000b711c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b711c:	b510      	push	{r4, lr}
   b711e:	4604      	mov	r4, r0
   b7120:	f7ff fff2 	bl	b7108 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7124:	4620      	mov	r0, r4
   b7126:	2108      	movs	r1, #8
   b7128:	f7fc ffb7 	bl	b409a <_ZdlPvj>
   b712c:	4620      	mov	r0, r4
   b712e:	bd10      	pop	{r4, pc}

000b7130 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7134:	461f      	mov	r7, r3
   b7136:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b713a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b713e:	4598      	cmp	r8, r3
   b7140:	4606      	mov	r6, r0
   b7142:	4615      	mov	r5, r2
   b7144:	d107      	bne.n	b7156 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7146:	9907      	ldr	r1, [sp, #28]
   b7148:	f000 f8b4 	bl	b72b4 <_ZNKSt9type_infoeqERKS_>
   b714c:	b118      	cbz	r0, b7156 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b714e:	7165      	strb	r5, [r4, #5]
   b7150:	2000      	movs	r0, #0
   b7152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7156:	4639      	mov	r1, r7
   b7158:	4630      	mov	r0, r6
   b715a:	f000 f8ab 	bl	b72b4 <_ZNKSt9type_infoeqERKS_>
   b715e:	2800      	cmp	r0, #0
   b7160:	d0f6      	beq.n	b7150 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b7162:	2301      	movs	r3, #1
   b7164:	f8c4 8000 	str.w	r8, [r4]
   b7168:	7125      	strb	r5, [r4, #4]
   b716a:	71a3      	strb	r3, [r4, #6]
   b716c:	e7f0      	b.n	b7150 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b716e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b716e:	b538      	push	{r3, r4, r5, lr}
   b7170:	4615      	mov	r5, r2
   b7172:	461c      	mov	r4, r3
   b7174:	f000 f89e 	bl	b72b4 <_ZNKSt9type_infoeqERKS_>
   b7178:	b120      	cbz	r0, b7184 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b717a:	2308      	movs	r3, #8
   b717c:	60e3      	str	r3, [r4, #12]
   b717e:	2306      	movs	r3, #6
   b7180:	6025      	str	r5, [r4, #0]
   b7182:	7123      	strb	r3, [r4, #4]
   b7184:	bd38      	pop	{r3, r4, r5, pc}

000b7186 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b7186:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7188:	4605      	mov	r5, r0
   b718a:	460c      	mov	r4, r1
   b718c:	9201      	str	r2, [sp, #4]
   b718e:	461e      	mov	r6, r3
   b7190:	f000 f890 	bl	b72b4 <_ZNKSt9type_infoeqERKS_>
   b7194:	b950      	cbnz	r0, b71ac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7196:	2e03      	cmp	r6, #3
   b7198:	d808      	bhi.n	b71ac <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b719a:	6823      	ldr	r3, [r4, #0]
   b719c:	9a01      	ldr	r2, [sp, #4]
   b719e:	695b      	ldr	r3, [r3, #20]
   b71a0:	4629      	mov	r1, r5
   b71a2:	4620      	mov	r0, r4
   b71a4:	b002      	add	sp, #8
   b71a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b71aa:	4718      	bx	r3
   b71ac:	b002      	add	sp, #8
   b71ae:	bd70      	pop	{r4, r5, r6, pc}

000b71b0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b71b0:	b510      	push	{r4, lr}
   b71b2:	4b03      	ldr	r3, [pc, #12]	; (b71c0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b71b4:	6003      	str	r3, [r0, #0]
   b71b6:	4604      	mov	r4, r0
   b71b8:	f7ff ffa6 	bl	b7108 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b71bc:	4620      	mov	r0, r4
   b71be:	bd10      	pop	{r4, pc}
   b71c0:	000b7cec 	.word	0x000b7cec

000b71c4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b71c4:	b510      	push	{r4, lr}
   b71c6:	4604      	mov	r4, r0
   b71c8:	f7ff fff2 	bl	b71b0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b71cc:	4620      	mov	r0, r4
   b71ce:	210c      	movs	r1, #12
   b71d0:	f7fc ff63 	bl	b409a <_ZdlPvj>
   b71d4:	4620      	mov	r0, r4
   b71d6:	bd10      	pop	{r4, pc}

000b71d8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b71d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b71da:	9f08      	ldr	r7, [sp, #32]
   b71dc:	4297      	cmp	r7, r2
   b71de:	4605      	mov	r5, r0
   b71e0:	460e      	mov	r6, r1
   b71e2:	4614      	mov	r4, r2
   b71e4:	d00a      	beq.n	b71fc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b71e6:	68a8      	ldr	r0, [r5, #8]
   b71e8:	6802      	ldr	r2, [r0, #0]
   b71ea:	9708      	str	r7, [sp, #32]
   b71ec:	6a15      	ldr	r5, [r2, #32]
   b71ee:	4631      	mov	r1, r6
   b71f0:	4622      	mov	r2, r4
   b71f2:	46ac      	mov	ip, r5
   b71f4:	b003      	add	sp, #12
   b71f6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b71fa:	4760      	bx	ip
   b71fc:	4619      	mov	r1, r3
   b71fe:	9301      	str	r3, [sp, #4]
   b7200:	f000 f858 	bl	b72b4 <_ZNKSt9type_infoeqERKS_>
   b7204:	9b01      	ldr	r3, [sp, #4]
   b7206:	2800      	cmp	r0, #0
   b7208:	d0ed      	beq.n	b71e6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b720a:	2006      	movs	r0, #6
   b720c:	b003      	add	sp, #12
   b720e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7210 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7210:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7214:	460d      	mov	r5, r1
   b7216:	4619      	mov	r1, r3
   b7218:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b721c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7220:	4681      	mov	r9, r0
   b7222:	4617      	mov	r7, r2
   b7224:	4698      	mov	r8, r3
   b7226:	f000 f845 	bl	b72b4 <_ZNKSt9type_infoeqERKS_>
   b722a:	b190      	cbz	r0, b7252 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b722c:	2d00      	cmp	r5, #0
   b722e:	6034      	str	r4, [r6, #0]
   b7230:	7137      	strb	r7, [r6, #4]
   b7232:	db09      	blt.n	b7248 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7234:	1961      	adds	r1, r4, r5
   b7236:	458a      	cmp	sl, r1
   b7238:	bf0c      	ite	eq
   b723a:	2106      	moveq	r1, #6
   b723c:	2101      	movne	r1, #1
   b723e:	71b1      	strb	r1, [r6, #6]
   b7240:	2000      	movs	r0, #0
   b7242:	b001      	add	sp, #4
   b7244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7248:	3502      	adds	r5, #2
   b724a:	d1f9      	bne.n	b7240 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b724c:	2301      	movs	r3, #1
   b724e:	71b3      	strb	r3, [r6, #6]
   b7250:	e7f6      	b.n	b7240 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7252:	4554      	cmp	r4, sl
   b7254:	d106      	bne.n	b7264 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7256:	4659      	mov	r1, fp
   b7258:	4648      	mov	r0, r9
   b725a:	f000 f82b 	bl	b72b4 <_ZNKSt9type_infoeqERKS_>
   b725e:	b108      	cbz	r0, b7264 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7260:	7177      	strb	r7, [r6, #5]
   b7262:	e7ed      	b.n	b7240 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7264:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7268:	6803      	ldr	r3, [r0, #0]
   b726a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b726e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7272:	69dc      	ldr	r4, [r3, #28]
   b7274:	463a      	mov	r2, r7
   b7276:	4643      	mov	r3, r8
   b7278:	4629      	mov	r1, r5
   b727a:	46a4      	mov	ip, r4
   b727c:	b001      	add	sp, #4
   b727e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7282:	4760      	bx	ip

000b7284 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7288:	4607      	mov	r7, r0
   b728a:	460c      	mov	r4, r1
   b728c:	4615      	mov	r5, r2
   b728e:	461e      	mov	r6, r3
   b7290:	f7ff ff6d 	bl	b716e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7294:	b948      	cbnz	r0, b72aa <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7296:	68b8      	ldr	r0, [r7, #8]
   b7298:	6803      	ldr	r3, [r0, #0]
   b729a:	699f      	ldr	r7, [r3, #24]
   b729c:	462a      	mov	r2, r5
   b729e:	4633      	mov	r3, r6
   b72a0:	4621      	mov	r1, r4
   b72a2:	46bc      	mov	ip, r7
   b72a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b72a8:	4760      	bx	ip
   b72aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b72ae <_ZNSt9type_infoD1Ev>:
   b72ae:	4770      	bx	lr

000b72b0 <_ZNKSt9type_info14__is_pointer_pEv>:
   b72b0:	2000      	movs	r0, #0
   b72b2:	4770      	bx	lr

000b72b4 <_ZNKSt9type_infoeqERKS_>:
   b72b4:	4281      	cmp	r1, r0
   b72b6:	b508      	push	{r3, lr}
   b72b8:	d00e      	beq.n	b72d8 <_ZNKSt9type_infoeqERKS_+0x24>
   b72ba:	6840      	ldr	r0, [r0, #4]
   b72bc:	7803      	ldrb	r3, [r0, #0]
   b72be:	2b2a      	cmp	r3, #42	; 0x2a
   b72c0:	d00c      	beq.n	b72dc <_ZNKSt9type_infoeqERKS_+0x28>
   b72c2:	6849      	ldr	r1, [r1, #4]
   b72c4:	780b      	ldrb	r3, [r1, #0]
   b72c6:	2b2a      	cmp	r3, #42	; 0x2a
   b72c8:	bf08      	it	eq
   b72ca:	3101      	addeq	r1, #1
   b72cc:	f000 f852 	bl	b7374 <strcmp>
   b72d0:	fab0 f080 	clz	r0, r0
   b72d4:	0940      	lsrs	r0, r0, #5
   b72d6:	bd08      	pop	{r3, pc}
   b72d8:	2001      	movs	r0, #1
   b72da:	e7fc      	b.n	b72d6 <_ZNKSt9type_infoeqERKS_+0x22>
   b72dc:	2000      	movs	r0, #0
   b72de:	e7fa      	b.n	b72d6 <_ZNKSt9type_infoeqERKS_+0x22>

000b72e0 <atexit>:
   b72e0:	2300      	movs	r3, #0
   b72e2:	4601      	mov	r1, r0
   b72e4:	461a      	mov	r2, r3
   b72e6:	4618      	mov	r0, r3
   b72e8:	f000 b856 	b.w	b7398 <__register_exitproc>

000b72ec <memcpy>:
   b72ec:	440a      	add	r2, r1
   b72ee:	4291      	cmp	r1, r2
   b72f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b72f4:	d100      	bne.n	b72f8 <memcpy+0xc>
   b72f6:	4770      	bx	lr
   b72f8:	b510      	push	{r4, lr}
   b72fa:	f811 4b01 	ldrb.w	r4, [r1], #1
   b72fe:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7302:	4291      	cmp	r1, r2
   b7304:	d1f9      	bne.n	b72fa <memcpy+0xe>
   b7306:	bd10      	pop	{r4, pc}

000b7308 <memset>:
   b7308:	4402      	add	r2, r0
   b730a:	4603      	mov	r3, r0
   b730c:	4293      	cmp	r3, r2
   b730e:	d100      	bne.n	b7312 <memset+0xa>
   b7310:	4770      	bx	lr
   b7312:	f803 1b01 	strb.w	r1, [r3], #1
   b7316:	e7f9      	b.n	b730c <memset+0x4>

000b7318 <srand>:
   b7318:	b538      	push	{r3, r4, r5, lr}
   b731a:	4b10      	ldr	r3, [pc, #64]	; (b735c <srand+0x44>)
   b731c:	681d      	ldr	r5, [r3, #0]
   b731e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7320:	4604      	mov	r4, r0
   b7322:	b9b3      	cbnz	r3, b7352 <srand+0x3a>
   b7324:	2018      	movs	r0, #24
   b7326:	f7fe fd1b 	bl	b5d60 <malloc>
   b732a:	4602      	mov	r2, r0
   b732c:	63a8      	str	r0, [r5, #56]	; 0x38
   b732e:	b920      	cbnz	r0, b733a <srand+0x22>
   b7330:	4b0b      	ldr	r3, [pc, #44]	; (b7360 <srand+0x48>)
   b7332:	480c      	ldr	r0, [pc, #48]	; (b7364 <srand+0x4c>)
   b7334:	2142      	movs	r1, #66	; 0x42
   b7336:	f7fe fd3b 	bl	b5db0 <__assert_func>
   b733a:	490b      	ldr	r1, [pc, #44]	; (b7368 <srand+0x50>)
   b733c:	4b0b      	ldr	r3, [pc, #44]	; (b736c <srand+0x54>)
   b733e:	e9c0 1300 	strd	r1, r3, [r0]
   b7342:	4b0b      	ldr	r3, [pc, #44]	; (b7370 <srand+0x58>)
   b7344:	6083      	str	r3, [r0, #8]
   b7346:	230b      	movs	r3, #11
   b7348:	8183      	strh	r3, [r0, #12]
   b734a:	2100      	movs	r1, #0
   b734c:	2001      	movs	r0, #1
   b734e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7352:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7354:	2200      	movs	r2, #0
   b7356:	611c      	str	r4, [r3, #16]
   b7358:	615a      	str	r2, [r3, #20]
   b735a:	bd38      	pop	{r3, r4, r5, pc}
   b735c:	2003e5b8 	.word	0x2003e5b8
   b7360:	000b7d25 	.word	0x000b7d25
   b7364:	000b7d3c 	.word	0x000b7d3c
   b7368:	abcd330e 	.word	0xabcd330e
   b736c:	e66d1234 	.word	0xe66d1234
   b7370:	0005deec 	.word	0x0005deec

000b7374 <strcmp>:
   b7374:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7378:	f811 3b01 	ldrb.w	r3, [r1], #1
   b737c:	2a01      	cmp	r2, #1
   b737e:	bf28      	it	cs
   b7380:	429a      	cmpcs	r2, r3
   b7382:	d0f7      	beq.n	b7374 <strcmp>
   b7384:	1ad0      	subs	r0, r2, r3
   b7386:	4770      	bx	lr

000b7388 <strlen>:
   b7388:	4603      	mov	r3, r0
   b738a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b738e:	2a00      	cmp	r2, #0
   b7390:	d1fb      	bne.n	b738a <strlen+0x2>
   b7392:	1a18      	subs	r0, r3, r0
   b7394:	3801      	subs	r0, #1
   b7396:	4770      	bx	lr

000b7398 <__register_exitproc>:
   b7398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b739c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b7458 <__register_exitproc+0xc0>
   b73a0:	4606      	mov	r6, r0
   b73a2:	f8d8 0000 	ldr.w	r0, [r8]
   b73a6:	461f      	mov	r7, r3
   b73a8:	460d      	mov	r5, r1
   b73aa:	4691      	mov	r9, r2
   b73ac:	f000 f856 	bl	b745c <__retarget_lock_acquire_recursive>
   b73b0:	4b25      	ldr	r3, [pc, #148]	; (b7448 <__register_exitproc+0xb0>)
   b73b2:	681c      	ldr	r4, [r3, #0]
   b73b4:	b934      	cbnz	r4, b73c4 <__register_exitproc+0x2c>
   b73b6:	4c25      	ldr	r4, [pc, #148]	; (b744c <__register_exitproc+0xb4>)
   b73b8:	601c      	str	r4, [r3, #0]
   b73ba:	4b25      	ldr	r3, [pc, #148]	; (b7450 <__register_exitproc+0xb8>)
   b73bc:	b113      	cbz	r3, b73c4 <__register_exitproc+0x2c>
   b73be:	681b      	ldr	r3, [r3, #0]
   b73c0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b73c4:	6863      	ldr	r3, [r4, #4]
   b73c6:	2b1f      	cmp	r3, #31
   b73c8:	dd07      	ble.n	b73da <__register_exitproc+0x42>
   b73ca:	f8d8 0000 	ldr.w	r0, [r8]
   b73ce:	f000 f847 	bl	b7460 <__retarget_lock_release_recursive>
   b73d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b73d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b73da:	b34e      	cbz	r6, b7430 <__register_exitproc+0x98>
   b73dc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b73e0:	b988      	cbnz	r0, b7406 <__register_exitproc+0x6e>
   b73e2:	4b1c      	ldr	r3, [pc, #112]	; (b7454 <__register_exitproc+0xbc>)
   b73e4:	b923      	cbnz	r3, b73f0 <__register_exitproc+0x58>
   b73e6:	f8d8 0000 	ldr.w	r0, [r8]
   b73ea:	f000 f838 	bl	b745e <__retarget_lock_release>
   b73ee:	e7f0      	b.n	b73d2 <__register_exitproc+0x3a>
   b73f0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b73f4:	f7fe fcb4 	bl	b5d60 <malloc>
   b73f8:	2800      	cmp	r0, #0
   b73fa:	d0f4      	beq.n	b73e6 <__register_exitproc+0x4e>
   b73fc:	2300      	movs	r3, #0
   b73fe:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7402:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7406:	6863      	ldr	r3, [r4, #4]
   b7408:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b740c:	2201      	movs	r2, #1
   b740e:	409a      	lsls	r2, r3
   b7410:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7414:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7418:	4313      	orrs	r3, r2
   b741a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b741e:	2e02      	cmp	r6, #2
   b7420:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7424:	bf02      	ittt	eq
   b7426:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b742a:	4313      	orreq	r3, r2
   b742c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7430:	6863      	ldr	r3, [r4, #4]
   b7432:	f8d8 0000 	ldr.w	r0, [r8]
   b7436:	1c5a      	adds	r2, r3, #1
   b7438:	3302      	adds	r3, #2
   b743a:	6062      	str	r2, [r4, #4]
   b743c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7440:	f000 f80e 	bl	b7460 <__retarget_lock_release_recursive>
   b7444:	2000      	movs	r0, #0
   b7446:	e7c6      	b.n	b73d6 <__register_exitproc+0x3e>
   b7448:	2003e7e8 	.word	0x2003e7e8
   b744c:	2003e75c 	.word	0x2003e75c
   b7450:	00000000 	.word	0x00000000
   b7454:	000b5d61 	.word	0x000b5d61
   b7458:	2003e61c 	.word	0x2003e61c

000b745c <__retarget_lock_acquire_recursive>:
   b745c:	4770      	bx	lr

000b745e <__retarget_lock_release>:
   b745e:	4770      	bx	lr

000b7460 <__retarget_lock_release_recursive>:
   b7460:	4770      	bx	lr

000b7462 <link_code_end>:
	...

000b7464 <dynalib_user>:
   b7464:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b7474:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b7484:	7620 7269 7574 6c61 4400 7369 6174 636e      virtual.Distanc
   b7494:	2065 203d 6925 000a 654c 6576 206c 6925     e = %i..Level %i
   b74a4:	200a 6156 756c 2065 6925 000a               . Value %i..

000b74b0 <CSWTCH.88>:
   b74b0:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   b74c0:	0050 0000                                   P...

000b74c4 <_ZL4font>:
   b74c4:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b74d4:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b74e4:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b74f4:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b7504:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b7514:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b7524:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b7534:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b7544:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b7554:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b7564:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b7574:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b7584:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b7594:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b75a4:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b75b4:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b75c4:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b75d4:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b75e4:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b75f4:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b7604:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b7614:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b7624:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b7634:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b7644:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b7654:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b7664:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b7674:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b7684:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b7694:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b76a4:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b76b4:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b76c4:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b76d4:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b76e4:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b76f4:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b7704:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b7714:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b7724:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b7734:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b7744:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b7754:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b7764:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b7774:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b7784:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b7794:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b77a4:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b77b4:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b77c4:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b77d4:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b77e4:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b77f4:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b7804:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b7814:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b7824:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b7834:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b7844:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b7854:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b7864:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b7874:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b7884:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b7894:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b78a4:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b78b4:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b78c4:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b78d4:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b78e4:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b78f4:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b7904:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b7914:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b7924:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b7934:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b7944:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b7954:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b7964:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b7974:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b7984:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b7994:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b79a4:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b79b4:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000b79c0 <_ZTV12Adafruit_GFX>:
	...
   b79d0:	5081 000b 61b1 000b 40a1 000b 4d99 000b     .P...a...@...M..
   b79e0:	4ebf 000b 4edb 000b 4e57 000b 4ef5 000b     .N...N..WN...N..
   b79f0:	4f2b 000b 4f47 000b                         +O..GO..

000b79f8 <_ZTV16Adafruit_SSD1306>:
	...
   b7a00:	540d 000b 549d 000b 5081 000b 61b1 000b     .T...T...P...a..
   b7a10:	5411 000b 4d99 000b 5299 000b 5129 000b     .T...M...R..)Q..
   b7a20:	4e57 000b 4ef5 000b 4f2b 000b 4f47 000b     WN...N..+O..GO..

000b7a30 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b7a38 <_ZTVN5spark13EthernetClassE>:
	...
   b7a40:	5e47 000b 5e3d 000b 5e33 000b 5e29 000b     G^..=^..3^..)^..
   b7a50:	5e1d 000b 5e11 000b 608d 000b 6095 000b     .^...^...`...`..
   b7a60:	5e05 000b 5dfd 000b 5df3 000b 5de9 000b     .^...]...]...]..
   b7a70:	60c5 000b                                   .`..

000b7a74 <_ZTV7TwoWire>:
	...
   b7a7c:	5e65 000b 5eaf 000b 5e87 000b 5e67 000b     e^...^...^..g^..
   b7a8c:	5e8f 000b 5e97 000b 5e9f 000b 5ea7 000b     .^...^...^...^..

000b7a9c <_ZTV9IPAddress>:
	...
   b7aa4:	5f31 000b 5f21 000b 5f23 000b 7061 0070     1_..!_..#_..app.

000b7ab4 <_ZTVN5spark12NetworkClassE>:
	...
   b7abc:	604d 000b 6057 000b 6061 000b 606b 000b     M`..W`..a`..k`..
   b7acc:	6075 000b 6081 000b 608d 000b 6095 000b     u`...`...`...`..
   b7adc:	609d 000b 60a9 000b 60b1 000b 60bb 000b     .`...`...`...`..
   b7aec:	60c5 000b                                   .`..

000b7af0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b7af0:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   b7b00:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000b7b10 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7b18:	65a1 000b 65c5 000b 6af7 000b 65d3 000b     .e...e...j...e..
   b7b28:	65a5 000b                                   .e..

000b7b2c <_ZTV9TCPClient>:
	...
   b7b34:	6651 000b 6685 000b 651d 000b 6537 000b     Qf...f...e..7e..
   b7b44:	698d 000b 6561 000b 6803 000b 6595 000b     .i..ae...h...e..
   b7b54:	6895 000b 66d5 000b 6831 000b 6a41 000b     .h...f..1h..Aj..
   b7b64:	67d1 000b 6597 000b 6549 000b 65d9 000b     .g...e..Ie...e..
   b7b74:	66b5 000b 5925 252d 2d6d 6425 2554 3a48     .f..%Y-%m-%dT%H:
   b7b84:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b7b94 <_ZTV11USARTSerial>:
	...
   b7b9c:	6b11 000b 6b7d 000b 6b55 000b 61b1 000b     .k..}k..Uk...a..
   b7bac:	6b25 000b 6b41 000b 6b33 000b 6b4f 000b     %k..Ak..3k..Ok..
   b7bbc:	6b13 000b 6b17 000b                         .k...k..

000b7bc4 <_ZTV9USBSerial>:
	...
   b7bcc:	6bbb 000b 6c23 000b 6bf9 000b 61b1 000b     .k..#l...k...a..
   b7bdc:	6beb 000b 6bbd 000b 6bcd 000b 6c1d 000b     .k...k...k...l..
   b7bec:	6bdd 000b 6bb5 000b                         .k...k..

000b7bf4 <_ZTVN5spark9WiFiClassE>:
	...
   b7bfc:	6d23 000b 6d19 000b 6d0f 000b 6cc5 000b     #m...m...m...l..
   b7c0c:	6d03 000b 6cf7 000b 608d 000b 6095 000b     .m...l...`...`..
   b7c1c:	6ceb 000b 6ce3 000b 6cd9 000b 6ccf 000b     .l...l...l...l..
   b7c2c:	60c5 000b                                   .`..

000b7c30 <_ZSt7nothrow>:
	...

000b7c31 <_ZTSSt19_Sp_make_shared_tag>:
   b7c31:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b7c41:	6572 5f64 6174 0067 0000                     red_tag....

000b7c4c <_ZTISt19_Sp_make_shared_tag>:
   b7c4c:	7c8c 000b 7c31 000b                         .|..1|..

000b7c54 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b7c54:	7cec 000b 7c60 000b 7d10 000b               .|..`|...}..

000b7c60 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b7c60:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b7c70:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b7c80:	0045 0000                                   E...

000b7c84 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b7c84:	0000 0000 7c54 000b 7109 000b 711d 000b     ....T|...q...q..
   b7c94:	72b1 000b 72b1 000b 7187 000b 70c9 000b     .r...r...q...p..
   b7ca4:	716f 000b 7131 000b 70fb 000b               oq..1q...p..

000b7cb0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b7cb0:	7cec 000b 7cbc 000b 7c54 000b               .|...|..T|..

000b7cbc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b7cbc:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b7ccc:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b7cdc:	666e 456f 0000 0000                         nfoE....

000b7ce4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b7ce4:	0000 0000 7cb0 000b 71b1 000b 71c5 000b     .....|...q...q..
   b7cf4:	72b1 000b 72b1 000b 7187 000b 70c9 000b     .r...r...q...p..
   b7d04:	7285 000b 7211 000b 71d9 000b               .r...r...q..

000b7d10 <_ZTISt9type_info>:
   b7d10:	7c8c 000b 7d18 000b                         .|...}..

000b7d18 <_ZTSSt9type_info>:
   b7d18:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b7d28:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b7d38:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b7d48:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b7d58:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b7d68:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b7d78:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b7d88:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b7d95 <link_const_variable_data_end>:
   b7d95:	00          	.byte	0x00
	...

000b7d98 <link_constructors_location>:
   b7d98:	000b4851 	.word	0x000b4851
   b7d9c:	000b4d89 	.word	0x000b4d89
   b7da0:	000b5dd9 	.word	0x000b5dd9
   b7da4:	000b5e51 	.word	0x000b5e51
   b7da8:	000b603d 	.word	0x000b603d
   b7dac:	000b619d 	.word	0x000b619d
   b7db0:	000b62bd 	.word	0x000b62bd
   b7db4:	000b64f9 	.word	0x000b64f9
   b7db8:	000b6afd 	.word	0x000b6afd
   b7dbc:	000b6d2d 	.word	0x000b6d2d
