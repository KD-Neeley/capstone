
/Users/kdneeley/Documents/IoT/capstone/prototype_solarPoweredParkBench/target/4.0.2/argon/prototype_solarPoweredParkBench.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005684  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b96a0  000b96a0  000096a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b96c4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000484  2003d7e0  000b96c8  0001d7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b8c  2003dc64  2003dc64  0002dc64  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b9b4c  000b9b4c  00029b4c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b9b74  000b9b74  00029b74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001322d8  00000000  00000000  00029b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00015966  00000000  00000000  0015be50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00040e4a  00000000  00000000  001717b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000032f0  00000000  00000000  001b2600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b068  00000000  00000000  001b58f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d0c8  00000000  00000000  001c0958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004ad09  00000000  00000000  001fda20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00136c11  00000000  00000000  00248729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00009460  00000000  00000000  0037f33c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f004 fbd5 	bl	b87dc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f004 fbdd 	bl	b87f8 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003d7e0 	.word	0x2003d7e0
   b4048:	000b96c8 	.word	0x000b96c8
   b404c:	2003dc64 	.word	0x2003dc64
   b4050:	2003dc64 	.word	0x2003dc64
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 fc99 	bl	b7994 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b9670 	.word	0x000b9670
   b407c:	000b9698 	.word	0x000b9698

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b846 	b.w	b4110 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f8f5 	bl	b4274 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 bc39 	b.w	b7904 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f002 bab3 	b.w	b65fc <malloc>

000b4096 <_Znaj>:
   b4096:	f002 bab1 	b.w	b65fc <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f002 bab7 	b.w	b660c <free>
	...

000b40a0 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f002 fa04 	bl	b64b4 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b6115 	.word	0x000b6115
   b40b4:	000b8abc 	.word	0x000b8abc

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <_ZN16JsonParserStaticILj1024ELj20EED1Ev>:
 *
 * @param MAX_TOKENS The maximum number of tokens you expect. Each object has a token and two for each key/value pair.
 * Each array is a token and one for each element in the array.
 */
template <size_t BUFFER_SIZE, size_t MAX_TOKENS>
class JsonParserStatic : public JsonParser {
   b40c8:	b510      	push	{r4, lr}
   b40ca:	4b03      	ldr	r3, [pc, #12]	; (b40d8 <_ZN16JsonParserStaticILj1024ELj20EED1Ev+0x10>)
   b40cc:	6003      	str	r3, [r0, #0]
   b40ce:	4604      	mov	r4, r0
   b40d0:	f001 fc5c 	bl	b598c <_ZN10JsonParserD1Ev>
   b40d4:	4620      	mov	r0, r4
   b40d6:	bd10      	pop	{r4, pc}
   b40d8:	000b8bdc 	.word	0x000b8bdc

000b40dc <_ZN16JsonParserStaticILj1024ELj20EED0Ev>:
   b40dc:	b510      	push	{r4, lr}
   b40de:	4604      	mov	r4, r0
   b40e0:	f7ff fff2 	bl	b40c8 <_ZN16JsonParserStaticILj1024ELj20EED1Ev>
   b40e4:	4620      	mov	r0, r4
   b40e6:	f240 516c 	movw	r1, #1388	; 0x56c
   b40ea:	f7ff ffd6 	bl	b409a <_ZdlPvj>
   b40ee:	4620      	mov	r0, r4
   b40f0:	bd10      	pop	{r4, pc}

000b40f2 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40f2:	b40e      	push	{r1, r2, r3}
   b40f4:	b503      	push	{r0, r1, lr}
   b40f6:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b40f8:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b40fa:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b40fe:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4100:	f002 fdea 	bl	b6cd8 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4104:	b002      	add	sp, #8
   b4106:	f85d eb04 	ldr.w	lr, [sp], #4
   b410a:	b003      	add	sp, #12
   b410c:	4770      	bx	lr
	...

000b4110 <setup>:
JsonParserStatic<1024, 20> jsonParser;
http_header_t headers;

SYSTEM_MODE(AUTOMATIC);

void setup() {
   b4110:	b570      	push	{r4, r5, r6, lr}
    Serial.begin(9600);
   b4112:	f003 fb71 	bl	b77f8 <_Z16_fetch_usbserialv>
   b4116:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b411a:	f003 fb5d 	bl	b77d8 <_ZN9USBSerial5beginEl>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   b411e:	2000      	movs	r0, #0
   b4120:	f002 f810 	bl	b6144 <hal_timer_millis>
        while (_while() && !_condition()) {
   b4124:	f643 2598 	movw	r5, #15000	; 0x3a98
        return hal_timer_millis(nullptr);
   b4128:	4604      	mov	r4, r0
   b412a:	2000      	movs	r0, #0
   b412c:	f002 f80a 	bl	b6144 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   b4130:	1b00      	subs	r0, r0, r4
   b4132:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
   b4136:	42a8      	cmp	r0, r5
   b4138:	f171 0300 	sbcs.w	r3, r1, #0
   b413c:	d207      	bcs.n	b414e <setup+0x3e>
    waitFor(Serial.isConnected, 15000);
   b413e:	f003 fb5b 	bl	b77f8 <_Z16_fetch_usbserialv>
   b4142:	f003 fb4d 	bl	b77e0 <_ZN9USBSerial11isConnectedEv>
   b4146:	b910      	cbnz	r0, b414e <setup+0x3e>
            spark_process();
   b4148:	f002 f9e8 	bl	b651c <spark_process>
        while (_while() && !_condition()) {
   b414c:	e7ed      	b.n	b412a <setup+0x1a>
   b414e:	f003 fb53 	bl	b77f8 <_Z16_fetch_usbserialv>
   b4152:	f003 fb45 	bl	b77e0 <_ZN9USBSerial11isConnectedEv>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b4156:	4d2d      	ldr	r5, [pc, #180]	; (b420c <setup+0xfc>)
    pixel.begin();
   b4158:	482d      	ldr	r0, [pc, #180]	; (b4210 <setup+0x100>)

    //Connect to Internet but not Particle Cloud
    WiFi.on();
    WiFi.connect();
    while(WiFi.connecting()) {
        Serial.printf(".");
   b415a:	4e2e      	ldr	r6, [pc, #184]	; (b4214 <setup+0x104>)
    pixel.begin();
   b415c:	f000 fc41 	bl	b49e2 <_ZN17Adafruit_NeoPixel5beginEv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b4160:	2300      	movs	r3, #0
   b4162:	461a      	mov	r2, r3
   b4164:	4619      	mov	r1, r3
   b4166:	6868      	ldr	r0, [r5, #4]
   b4168:	f002 fa08 	bl	b657c <network_on>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   b416c:	2300      	movs	r3, #0
   b416e:	6868      	ldr	r0, [r5, #4]
   b4170:	461a      	mov	r2, r3
   b4172:	4619      	mov	r1, r3
   b4174:	f002 f9e2 	bl	b653c <network_connect>
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   b4178:	2200      	movs	r2, #0
   b417a:	6868      	ldr	r0, [r5, #4]
   b417c:	4611      	mov	r1, r2
   b417e:	f002 f9e5 	bl	b654c <network_connecting>
    while(WiFi.connecting()) {
   b4182:	4604      	mov	r4, r0
   b4184:	b128      	cbz	r0, b4192 <setup+0x82>
        Serial.printf(".");
   b4186:	f003 fb37 	bl	b77f8 <_Z16_fetch_usbserialv>
   b418a:	4631      	mov	r1, r6
   b418c:	f7ff ffb1 	bl	b40f2 <_ZN5Print6printfEPKcz>
    while(WiFi.connecting()) {
   b4190:	e7f2      	b.n	b4178 <setup+0x68>
    }
    Serial.printf("\n\n");
   b4192:	f003 fb31 	bl	b77f8 <_Z16_fetch_usbserialv>
   b4196:	4920      	ldr	r1, [pc, #128]	; (b4218 <setup+0x108>)
   b4198:	f7ff ffab 	bl	b40f2 <_ZN5Print6printfEPKcz>


    //initialize Sound Input
   // Define our pin modes
    pinMode(STROBE, OUTPUT);
   b419c:	2101      	movs	r1, #1
   b419e:	2010      	movs	r0, #16
   b41a0:	f003 fc68 	bl	b7a74 <pinMode>
    pinMode(RESETPIN, OUTPUT);
   b41a4:	2101      	movs	r1, #1
   b41a6:	2011      	movs	r0, #17
   b41a8:	f003 fc64 	bl	b7a74 <pinMode>
    pinMode(OUT, INPUT);
   b41ac:	4621      	mov	r1, r4
   b41ae:	200f      	movs	r0, #15
   b41b0:	f003 fc60 	bl	b7a74 <pinMode>
 
// Initialize the Sound Sensor Pins
    digitalWrite(RESETPIN, LOW);
   b41b4:	4621      	mov	r1, r4
   b41b6:	2011      	movs	r0, #17
   b41b8:	f003 fc6d 	bl	b7a96 <digitalWrite>
    digitalWrite(STROBE, LOW);
   b41bc:	4621      	mov	r1, r4
   b41be:	2010      	movs	r0, #16
   b41c0:	f003 fc69 	bl	b7a96 <digitalWrite>
    delay(1);
   b41c4:	2001      	movs	r0, #1
   b41c6:	f002 fa51 	bl	b666c <delay>
 
  // Reset MSGEQ7 
    digitalWrite(RESETPIN, HIGH);
   b41ca:	2101      	movs	r1, #1
   b41cc:	2011      	movs	r0, #17
   b41ce:	f003 fc62 	bl	b7a96 <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b41d2:	4620      	mov	r0, r4
   b41d4:	f001 ff9e 	bl	b6114 <HAL_Delay_Microseconds>
    delayMicroseconds(.1);
    digitalWrite(RESETPIN, LOW);
   b41d8:	4621      	mov	r1, r4
   b41da:	2011      	movs	r0, #17
   b41dc:	f003 fc5b 	bl	b7a96 <digitalWrite>
    digitalWrite(STROBE, HIGH); 
   b41e0:	2101      	movs	r1, #1
   b41e2:	2010      	movs	r0, #16
   b41e4:	f003 fc57 	bl	b7a96 <digitalWrite>
   b41e8:	2048      	movs	r0, #72	; 0x48
   b41ea:	f001 ff93 	bl	b6114 <HAL_Delay_Microseconds>
    delayMicroseconds(72);

//Initialize the OLED
    myDisplay.begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b41ee:	2102      	movs	r1, #2
   b41f0:	480a      	ldr	r0, [pc, #40]	; (b421c <setup+0x10c>)
   b41f2:	223c      	movs	r2, #60	; 0x3c
   b41f4:	f001 fada 	bl	b57ac <_ZN16Adafruit_SSD13065beginEhh>
    myDisplay.clearDisplay();
   b41f8:	4808      	ldr	r0, [pc, #32]	; (b421c <setup+0x10c>)
   b41fa:	f001 f9ef 	bl	b55dc <_ZN16Adafruit_SSD130612clearDisplayEv>

//Initialize the IR Distance Sensor
    pinMode(MOTIONSENSOR, INPUT);
   b41fe:	4621      	mov	r1, r4
   b4200:	2012      	movs	r0, #18
}
   b4202:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pinMode(MOTIONSENSOR, INPUT);
   b4206:	f003 bc35 	b.w	b7a74 <pinMode>
   b420a:	bf00      	nop
   b420c:	2003e718 	.word	0x2003e718
   b4210:	2003e624 	.word	0x2003e624
   b4214:	000b8ad1 	.word	0x000b8ad1
   b4218:	000b8ad3 	.word	0x000b8ad3
   b421c:	2003e600 	.word	0x2003e600

000b4220 <_Z9pixelFilliiii>:
    
}
}
////FUNCTION DEFINITIONS
//NEOPIXEL FUNCTIONS
int pixelFill(int startPixel, int endPixel, int brightness, int hexColor) {
   b4220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4222:	4604      	mov	r4, r0
            pixel.clear();
   b4224:	4812      	ldr	r0, [pc, #72]	; (b4270 <_Z9pixelFilliiii+0x50>)
int pixelFill(int startPixel, int endPixel, int brightness, int hexColor) {
   b4226:	4617      	mov	r7, r2
   b4228:	460d      	mov	r5, r1
   b422a:	461e      	mov	r6, r3
            pixel.clear();
   b422c:	f000 fe28 	bl	b4e80 <_ZN17Adafruit_NeoPixel5clearEv>
            pixel.show();
   b4230:	480f      	ldr	r0, [pc, #60]	; (b4270 <_Z9pixelFilliiii+0x50>)
   b4232:	f000 fc0f 	bl	b4a54 <_ZN17Adafruit_NeoPixel4showEv>
            pixel.setBrightness(brightness);
   b4236:	b2f9      	uxtb	r1, r7
   b4238:	480d      	ldr	r0, [pc, #52]	; (b4270 <_Z9pixelFilliiii+0x50>)
            for(int i = startPixel; i < endPixel; i++) {
                pixel.setPixelColor(i, hexColor);
   b423a:	4f0d      	ldr	r7, [pc, #52]	; (b4270 <_Z9pixelFilliiii+0x50>)
            pixel.setBrightness(brightness);
   b423c:	f000 fdf9 	bl	b4e32 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
            for(int i = startPixel; i < endPixel; i++) {
   b4240:	42ac      	cmp	r4, r5
   b4242:	da06      	bge.n	b4252 <_Z9pixelFilliiii+0x32>
                pixel.setPixelColor(i, hexColor);
   b4244:	b2a1      	uxth	r1, r4
   b4246:	4632      	mov	r2, r6
   b4248:	4638      	mov	r0, r7
   b424a:	f000 fdaf 	bl	b4dac <_ZN17Adafruit_NeoPixel13setPixelColorEtm>
            for(int i = startPixel; i < endPixel; i++) {
   b424e:	3401      	adds	r4, #1
   b4250:	e7f6      	b.n	b4240 <_Z9pixelFilliiii+0x20>
            }
            pixel.show();
   b4252:	4807      	ldr	r0, [pc, #28]	; (b4270 <_Z9pixelFilliiii+0x50>)
   b4254:	f000 fbfe 	bl	b4a54 <_ZN17Adafruit_NeoPixel4showEv>
            delay(100);
   b4258:	2064      	movs	r0, #100	; 0x64
   b425a:	f002 fa07 	bl	b666c <delay>
            pixel.clear();
   b425e:	4804      	ldr	r0, [pc, #16]	; (b4270 <_Z9pixelFilliiii+0x50>)
   b4260:	f000 fe0e 	bl	b4e80 <_ZN17Adafruit_NeoPixel5clearEv>
            pixel.show();
   b4264:	4802      	ldr	r0, [pc, #8]	; (b4270 <_Z9pixelFilliiii+0x50>)
   b4266:	f000 fbf5 	bl	b4a54 <_ZN17Adafruit_NeoPixel4showEv>

            return(endPixel);
}
   b426a:	4628      	mov	r0, r5
   b426c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b426e:	bf00      	nop
   b4270:	2003e624 	.word	0x2003e624

000b4274 <loop>:
void loop() {
   b4274:	b570      	push	{r4, r5, r6, lr}
   b4276:	ed2d 8b04 	vpush	{d8-d9}
    distance = analogRead(MOTIONSENSOR); //Get Distance to determine if the program will run given a presence
   b427a:	2012      	movs	r0, #18
void loop() {
   b427c:	b082      	sub	sp, #8
    distance = analogRead(MOTIONSENSOR); //Get Distance to determine if the program will run given a presence
   b427e:	f003 fc23 	bl	b7ac8 <analogRead>
   b4282:	4cc8      	ldr	r4, [pc, #800]	; (b45a4 <loop+0x330>)
   b4284:	6020      	str	r0, [r4, #0]
    Serial.printf("Distance Read is %i\n", distance);
   b4286:	f003 fab7 	bl	b77f8 <_Z16_fetch_usbserialv>
   b428a:	6822      	ldr	r2, [r4, #0]
   b428c:	49c6      	ldr	r1, [pc, #792]	; (b45a8 <loop+0x334>)
   b428e:	f7ff ff30 	bl	b40f2 <_ZN5Print6printfEPKcz>
    if(distance > distanceThreshold) { //if a presence is sensed run the program
   b4292:	4bc6      	ldr	r3, [pc, #792]	; (b45ac <loop+0x338>)
   b4294:	6822      	ldr	r2, [r4, #0]
   b4296:	681b      	ldr	r3, [r3, #0]
   b4298:	429a      	cmp	r2, r3
   b429a:	f340 831c 	ble.w	b48d6 <loop+0x662>
   b429e:	4bc4      	ldr	r3, [pc, #784]	; (b45b0 <loop+0x33c>)
   b42a0:	2200      	movs	r2, #0
   b42a2:	6858      	ldr	r0, [r3, #4]
   b42a4:	4611      	mov	r1, r2
   b42a6:	f002 f951 	bl	b654c <network_connecting>
       if(WiFi.connecting() == false) {
   b42aa:	4606      	mov	r6, r0
   b42ac:	2800      	cmp	r0, #0
   b42ae:	d159      	bne.n	b4364 <loop+0xf0>
            request.hostname = host;
   b42b0:	4dc0      	ldr	r5, [pc, #768]	; (b45b4 <loop+0x340>)
   b42b2:	4bc1      	ldr	r3, [pc, #772]	; (b45b8 <loop+0x344>)
    * HTTP request methods.
    * Can't use 'delete' as name since it's a C++ keyword.
    */
    void get(http_request_t &aRequest, http_response_t &aResponse)
    {
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_GET);
   b42b4:	4cc1      	ldr	r4, [pc, #772]	; (b45bc <loop+0x348>)
   b42b6:	6819      	ldr	r1, [r3, #0]
   b42b8:	4628      	mov	r0, r5
   b42ba:	f002 fe64 	bl	b6f86 <_ZN6StringaSEPKc>
            request.port = PORT;
   b42be:	f240 13bb 	movw	r3, #443	; 0x1bb
            request.path = "/api/1.1/wf/weatherreport";
   b42c2:	49bf      	ldr	r1, [pc, #764]	; (b45c0 <loop+0x34c>)
            request.port = PORT;
   b42c4:	63ab      	str	r3, [r5, #56]	; 0x38
            request.path = "/api/1.1/wf/weatherreport";
   b42c6:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b42ca:	f002 fe5c 	bl	b6f86 <_ZN6StringaSEPKc>
   b42ce:	4bbd      	ldr	r3, [pc, #756]	; (b45c4 <loop+0x350>)
   b42d0:	9300      	str	r3, [sp, #0]
   b42d2:	48bd      	ldr	r0, [pc, #756]	; (b45c8 <loop+0x354>)
   b42d4:	4633      	mov	r3, r6
   b42d6:	4622      	mov	r2, r4
   b42d8:	4629      	mov	r1, r5
   b42da:	f001 fde3 	bl	b5ea4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
            if (response.status == 200) {
   b42de:	6823      	ldr	r3, [r4, #0]
   b42e0:	2bc8      	cmp	r3, #200	; 0xc8
   b42e2:	f040 82da 	bne.w	b489a <loop+0x626>
                 Serial.println(response.body);
   b42e6:	f003 fa87 	bl	b77f8 <_Z16_fetch_usbserialv>
   b42ea:	6861      	ldr	r1, [r4, #4]
   b42ec:	f002 fbe9 	bl	b6ac2 <_ZN5Print7printlnEPKc>
                int result = jsonParser.parse();
   b42f0:	48b6      	ldr	r0, [pc, #728]	; (b45cc <loop+0x358>)
   b42f2:	f001 fd53 	bl	b5d9c <_ZN10JsonParser5parseEv>
                    float mainTemp = jsonParser.parse();
   b42f6:	48b5      	ldr	r0, [pc, #724]	; (b45cc <loop+0x358>)
   b42f8:	f001 fd50 	bl	b5d9c <_ZN10JsonParser5parseEv>
   b42fc:	ee09 0a10 	vmov	s18, r0
                    float lowTemp = jsonParser.parse();
   b4300:	48b2      	ldr	r0, [pc, #712]	; (b45cc <loop+0x358>)
   b4302:	f001 fd4b 	bl	b5d9c <_ZN10JsonParser5parseEv>
   b4306:	ee08 0a90 	vmov	s17, r0
                    float highTemp = jsonParser.parse();
   b430a:	48b0      	ldr	r0, [pc, #704]	; (b45cc <loop+0x358>)
   b430c:	f001 fd46 	bl	b5d9c <_ZN10JsonParser5parseEv>
   b4310:	ee08 0a10 	vmov	s16, r0
                    Serial.print("Main Temp: ");
   b4314:	f003 fa70 	bl	b77f8 <_Z16_fetch_usbserialv>
   b4318:	49ad      	ldr	r1, [pc, #692]	; (b45d0 <loop+0x35c>)
   b431a:	f002 fbbf 	bl	b6a9c <_ZN5Print5printEPKc>
                    Serial.println(mainTemp);
   b431e:	f003 fa6b 	bl	b77f8 <_Z16_fetch_usbserialv>
   b4322:	eeb8 0a49 	vcvt.f32.u32	s0, s18
   b4326:	2102      	movs	r1, #2
   b4328:	f002 fcc7 	bl	b6cba <_ZN5Print7printlnEfi>
                    Serial.print("Low Temp: ");
   b432c:	f003 fa64 	bl	b77f8 <_Z16_fetch_usbserialv>
   b4330:	49a8      	ldr	r1, [pc, #672]	; (b45d4 <loop+0x360>)
   b4332:	f002 fbb3 	bl	b6a9c <_ZN5Print5printEPKc>
                    Serial.println(lowTemp);
   b4336:	f003 fa5f 	bl	b77f8 <_Z16_fetch_usbserialv>
   b433a:	eeb8 0a68 	vcvt.f32.u32	s0, s17
   b433e:	2102      	movs	r1, #2
   b4340:	f002 fcbb 	bl	b6cba <_ZN5Print7printlnEfi>
                    Serial.print("High Temp: ");
   b4344:	f003 fa58 	bl	b77f8 <_Z16_fetch_usbserialv>
   b4348:	49a3      	ldr	r1, [pc, #652]	; (b45d8 <loop+0x364>)
   b434a:	f002 fba7 	bl	b6a9c <_ZN5Print5printEPKc>
                    Serial.println(highTemp);
   b434e:	f003 fa53 	bl	b77f8 <_Z16_fetch_usbserialv>
   b4352:	eeb8 0a48 	vcvt.f32.u32	s0, s16
   b4356:	2102      	movs	r1, #2
   b4358:	f002 fcaf 	bl	b6cba <_ZN5Print7printlnEfi>
            delay(5000);
   b435c:	f241 3088 	movw	r0, #5000	; 0x1388
   b4360:	f002 f984 	bl	b666c <delay>
        myDisplay.clearDisplay();
   b4364:	489d      	ldr	r0, [pc, #628]	; (b45dc <loop+0x368>)
        soundLevel[0] = analogRead(OUT);
   b4366:	4c9e      	ldr	r4, [pc, #632]	; (b45e0 <loop+0x36c>)
        myDisplay.clearDisplay();
   b4368:	f001 f938 	bl	b55dc <_ZN16Adafruit_SSD130612clearDisplayEv>
        myDisplay.display();
   b436c:	489b      	ldr	r0, [pc, #620]	; (b45dc <loop+0x368>)
   b436e:	f001 f9ad 	bl	b56cc <_ZN16Adafruit_SSD13067displayEv>
        myDisplay.setRotation(2);
   b4372:	489a      	ldr	r0, [pc, #616]	; (b45dc <loop+0x368>)
   b4374:	2102      	movs	r1, #2
   b4376:	f000 ff44 	bl	b5202 <_ZN12Adafruit_GFX11setRotationEh>
        myDisplay.setCursor (1,1);
   b437a:	2201      	movs	r2, #1
   b437c:	4611      	mov	r1, r2
   b437e:	4897      	ldr	r0, [pc, #604]	; (b45dc <loop+0x368>)
   b4380:	f000 ff32 	bl	b51e8 <_ZN12Adafruit_GFX9setCursorEss>
        myDisplay.setTextSize(2);
   b4384:	4895      	ldr	r0, [pc, #596]	; (b45dc <loop+0x368>)
   b4386:	2102      	movs	r1, #2
   b4388:	f000 ff31 	bl	b51ee <_ZN12Adafruit_GFX11setTextSizeEh>
        myDisplay.setTextColor(WHITE);
   b438c:	4893      	ldr	r0, [pc, #588]	; (b45dc <loop+0x368>)
   b438e:	2101      	movs	r1, #1
   b4390:	f000 ff32 	bl	b51f8 <_ZN12Adafruit_GFX12setTextColorEt>
        myDisplay.printf("%i\n", mainTemp);
   b4394:	4b93      	ldr	r3, [pc, #588]	; (b45e4 <loop+0x370>)
   b4396:	4994      	ldr	r1, [pc, #592]	; (b45e8 <loop+0x374>)
   b4398:	681a      	ldr	r2, [r3, #0]
   b439a:	4890      	ldr	r0, [pc, #576]	; (b45dc <loop+0x368>)
   b439c:	f7ff fea9 	bl	b40f2 <_ZN5Print6printfEPKcz>
        myDisplay.display();
   b43a0:	488e      	ldr	r0, [pc, #568]	; (b45dc <loop+0x368>)
   b43a2:	f001 f993 	bl	b56cc <_ZN16Adafruit_SSD13067displayEv>
        digitalWrite(STROBE, LOW);
   b43a6:	2100      	movs	r1, #0
   b43a8:	2010      	movs	r0, #16
   b43aa:	f003 fb74 	bl	b7a96 <digitalWrite>
   b43ae:	2048      	movs	r0, #72	; 0x48
   b43b0:	f001 feb0 	bl	b6114 <HAL_Delay_Microseconds>
        soundLevel[0] = analogRead(OUT);
   b43b4:	200f      	movs	r0, #15
   b43b6:	f003 fb87 	bl	b7ac8 <analogRead>
   b43ba:	6020      	str	r0, [r4, #0]
        Serial.printf("Level 0\n Value %i\n", soundLevel[0]);
   b43bc:	f003 fa1c 	bl	b77f8 <_Z16_fetch_usbserialv>
   b43c0:	6822      	ldr	r2, [r4, #0]
   b43c2:	498a      	ldr	r1, [pc, #552]	; (b45ec <loop+0x378>)
   b43c4:	f7ff fe95 	bl	b40f2 <_ZN5Print6printfEPKcz>
        digitalWrite(STROBE, HIGH);
   b43c8:	2101      	movs	r1, #1
   b43ca:	2010      	movs	r0, #16
   b43cc:	f003 fb63 	bl	b7a96 <digitalWrite>
   b43d0:	2048      	movs	r0, #72	; 0x48
   b43d2:	f001 fe9f 	bl	b6114 <HAL_Delay_Microseconds>
        if(soundLevel[0] < 400) {
   b43d6:	6823      	ldr	r3, [r4, #0]
   b43d8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b43dc:	da06      	bge.n	b43ec <loop+0x178>
            pixelFill(0, 2, 50, fullred);
   b43de:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   b43e2:	2232      	movs	r2, #50	; 0x32
   b43e4:	2102      	movs	r1, #2
   b43e6:	2000      	movs	r0, #0
   b43e8:	f7ff ff1a 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[0] >= 400 && soundLevel[0] < 1000) {
   b43ec:	6823      	ldr	r3, [r4, #0]
   b43ee:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
   b43f2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b43f6:	d206      	bcs.n	b4406 <loop+0x192>
            pixelFill(0, 2, 100, fullred);
   b43f8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   b43fc:	2264      	movs	r2, #100	; 0x64
   b43fe:	2102      	movs	r1, #2
   b4400:	2000      	movs	r0, #0
   b4402:	f7ff ff0d 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[0] >= 1000 && soundLevel[0] < 2000) {
   b4406:	6823      	ldr	r3, [r4, #0]
   b4408:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   b440c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b4410:	d206      	bcs.n	b4420 <loop+0x1ac>
            pixelFill(0, 2, 150, fullred);
   b4412:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   b4416:	2296      	movs	r2, #150	; 0x96
   b4418:	2102      	movs	r1, #2
   b441a:	2000      	movs	r0, #0
   b441c:	f7ff ff00 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[0] >= 2000 && soundLevel[0] < 3000) {
   b4420:	6823      	ldr	r3, [r4, #0]
   b4422:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
   b4426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b442a:	d206      	bcs.n	b443a <loop+0x1c6>
            pixelFill(0, 2, 200, fullred);
   b442c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   b4430:	22c8      	movs	r2, #200	; 0xc8
   b4432:	2102      	movs	r1, #2
   b4434:	2000      	movs	r0, #0
   b4436:	f7ff fef3 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[0] >= 3000) {
   b443a:	6822      	ldr	r2, [r4, #0]
   b443c:	f640 33b7 	movw	r3, #2999	; 0xbb7
   b4440:	429a      	cmp	r2, r3
   b4442:	dd06      	ble.n	b4452 <loop+0x1de>
            pixelFill(0, 2, 255, fullred);
   b4444:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
   b4448:	22ff      	movs	r2, #255	; 0xff
   b444a:	2102      	movs	r1, #2
   b444c:	2000      	movs	r0, #0
   b444e:	f7ff fee7 	bl	b4220 <_Z9pixelFilliiii>
        digitalWrite(STROBE, LOW);
   b4452:	2100      	movs	r1, #0
   b4454:	2010      	movs	r0, #16
   b4456:	f003 fb1e 	bl	b7a96 <digitalWrite>
   b445a:	2048      	movs	r0, #72	; 0x48
   b445c:	f001 fe5a 	bl	b6114 <HAL_Delay_Microseconds>
        soundLevel[1] = analogRead(OUT);
   b4460:	200f      	movs	r0, #15
   b4462:	f003 fb31 	bl	b7ac8 <analogRead>
   b4466:	6060      	str	r0, [r4, #4]
        Serial.printf("Level 1\n Value %i\n", soundLevel[1]);
   b4468:	f003 f9c6 	bl	b77f8 <_Z16_fetch_usbserialv>
   b446c:	6862      	ldr	r2, [r4, #4]
   b446e:	4960      	ldr	r1, [pc, #384]	; (b45f0 <loop+0x37c>)
   b4470:	f7ff fe3f 	bl	b40f2 <_ZN5Print6printfEPKcz>
        digitalWrite(STROBE, HIGH);
   b4474:	2101      	movs	r1, #1
   b4476:	2010      	movs	r0, #16
   b4478:	f003 fb0d 	bl	b7a96 <digitalWrite>
   b447c:	2048      	movs	r0, #72	; 0x48
   b447e:	f001 fe49 	bl	b6114 <HAL_Delay_Microseconds>
        if(soundLevel[1] < 400) {
   b4482:	6863      	ldr	r3, [r4, #4]
   b4484:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b4488:	da06      	bge.n	b4498 <loop+0x224>
            pixelFill(3, 5, 50, fullmagenta);
   b448a:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
   b448e:	2232      	movs	r2, #50	; 0x32
   b4490:	2105      	movs	r1, #5
   b4492:	2003      	movs	r0, #3
   b4494:	f7ff fec4 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[1] >= 400 && soundLevel[1] < 1000) {
   b4498:	6863      	ldr	r3, [r4, #4]
   b449a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
   b449e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b44a2:	d206      	bcs.n	b44b2 <loop+0x23e>
            pixelFill(3, 5, 100, fullmagenta);
   b44a4:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
   b44a8:	2264      	movs	r2, #100	; 0x64
   b44aa:	2105      	movs	r1, #5
   b44ac:	2003      	movs	r0, #3
   b44ae:	f7ff feb7 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[1] >= 1000 && soundLevel[1] < 2000) {
   b44b2:	6863      	ldr	r3, [r4, #4]
   b44b4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   b44b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b44bc:	d206      	bcs.n	b44cc <loop+0x258>
            pixelFill(3, 5, 150, fullmagenta);
   b44be:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
   b44c2:	2296      	movs	r2, #150	; 0x96
   b44c4:	2105      	movs	r1, #5
   b44c6:	2003      	movs	r0, #3
   b44c8:	f7ff feaa 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[1] >= 2000 && soundLevel[1] < 3000) {
   b44cc:	6863      	ldr	r3, [r4, #4]
   b44ce:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
   b44d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b44d6:	d206      	bcs.n	b44e6 <loop+0x272>
            pixelFill(3, 5, 200, fullmagenta);
   b44d8:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
   b44dc:	22c8      	movs	r2, #200	; 0xc8
   b44de:	2105      	movs	r1, #5
   b44e0:	2003      	movs	r0, #3
   b44e2:	f7ff fe9d 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[1] >= 3000) {
   b44e6:	6862      	ldr	r2, [r4, #4]
   b44e8:	f640 33b7 	movw	r3, #2999	; 0xbb7
   b44ec:	429a      	cmp	r2, r3
   b44ee:	dd06      	ble.n	b44fe <loop+0x28a>
            pixelFill(3, 5, 255, fullmagenta);
   b44f0:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
   b44f4:	22ff      	movs	r2, #255	; 0xff
   b44f6:	2105      	movs	r1, #5
   b44f8:	2003      	movs	r0, #3
   b44fa:	f7ff fe91 	bl	b4220 <_Z9pixelFilliiii>
        digitalWrite(STROBE, LOW);
   b44fe:	2100      	movs	r1, #0
   b4500:	2010      	movs	r0, #16
   b4502:	f003 fac8 	bl	b7a96 <digitalWrite>
   b4506:	2048      	movs	r0, #72	; 0x48
   b4508:	f001 fe04 	bl	b6114 <HAL_Delay_Microseconds>
        soundLevel[2] = analogRead(OUT);
   b450c:	200f      	movs	r0, #15
   b450e:	f003 fadb 	bl	b7ac8 <analogRead>
   b4512:	60a0      	str	r0, [r4, #8]
        Serial.printf("Level 2\n Value %i\n", soundLevel[2]);
   b4514:	f003 f970 	bl	b77f8 <_Z16_fetch_usbserialv>
   b4518:	68a2      	ldr	r2, [r4, #8]
   b451a:	4936      	ldr	r1, [pc, #216]	; (b45f4 <loop+0x380>)
   b451c:	f7ff fde9 	bl	b40f2 <_ZN5Print6printfEPKcz>
        digitalWrite(STROBE, HIGH);
   b4520:	2101      	movs	r1, #1
   b4522:	2010      	movs	r0, #16
   b4524:	f003 fab7 	bl	b7a96 <digitalWrite>
   b4528:	2048      	movs	r0, #72	; 0x48
   b452a:	f001 fdf3 	bl	b6114 <HAL_Delay_Microseconds>
        if(soundLevel[2] < 400) {
   b452e:	68a3      	ldr	r3, [r4, #8]
   b4530:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b4534:	da05      	bge.n	b4542 <loop+0x2ce>
            pixelFill(6, 8, 50, purple);
   b4536:	4b30      	ldr	r3, [pc, #192]	; (b45f8 <loop+0x384>)
   b4538:	2232      	movs	r2, #50	; 0x32
   b453a:	2108      	movs	r1, #8
   b453c:	2006      	movs	r0, #6
   b453e:	f7ff fe6f 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[2] >= 400 && soundLevel[2] < 1000) {
   b4542:	68a3      	ldr	r3, [r4, #8]
   b4544:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
   b4548:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b454c:	d205      	bcs.n	b455a <loop+0x2e6>
            pixelFill(6, 8, 100, purple);
   b454e:	4b2a      	ldr	r3, [pc, #168]	; (b45f8 <loop+0x384>)
   b4550:	2264      	movs	r2, #100	; 0x64
   b4552:	2108      	movs	r1, #8
   b4554:	2006      	movs	r0, #6
   b4556:	f7ff fe63 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[2] >= 1000 && soundLevel[2] < 2000) {
   b455a:	68a3      	ldr	r3, [r4, #8]
   b455c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   b4560:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b4564:	d205      	bcs.n	b4572 <loop+0x2fe>
            pixelFill(6, 8, 150, purple);
   b4566:	4b24      	ldr	r3, [pc, #144]	; (b45f8 <loop+0x384>)
   b4568:	2296      	movs	r2, #150	; 0x96
   b456a:	2108      	movs	r1, #8
   b456c:	2006      	movs	r0, #6
   b456e:	f7ff fe57 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[2] >= 2000 && soundLevel[2] < 3000) {
   b4572:	68a3      	ldr	r3, [r4, #8]
   b4574:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
   b4578:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b457c:	d205      	bcs.n	b458a <loop+0x316>
            pixelFill(6, 8, 200, purple);
   b457e:	4b1e      	ldr	r3, [pc, #120]	; (b45f8 <loop+0x384>)
   b4580:	22c8      	movs	r2, #200	; 0xc8
   b4582:	2108      	movs	r1, #8
   b4584:	2006      	movs	r0, #6
   b4586:	f7ff fe4b 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[2] >= 3000) {
   b458a:	68a2      	ldr	r2, [r4, #8]
   b458c:	f640 33b7 	movw	r3, #2999	; 0xbb7
   b4590:	429a      	cmp	r2, r3
   b4592:	dd33      	ble.n	b45fc <loop+0x388>
            pixelFill(6, 8, 255, purple);
   b4594:	4b18      	ldr	r3, [pc, #96]	; (b45f8 <loop+0x384>)
   b4596:	22ff      	movs	r2, #255	; 0xff
   b4598:	2108      	movs	r1, #8
   b459a:	2006      	movs	r0, #6
   b459c:	f7ff fe40 	bl	b4220 <_Z9pixelFilliiii>
   b45a0:	e02c      	b.n	b45fc <loop+0x388>
   b45a2:	bf00      	nop
   b45a4:	2003dc70 	.word	0x2003dc70
   b45a8:	000b8ad6 	.word	0x000b8ad6
   b45ac:	2003d7e0 	.word	0x2003d7e0
   b45b0:	2003e718 	.word	0x2003e718
   b45b4:	2003e638 	.word	0x2003e638
   b45b8:	2003d7e4 	.word	0x2003d7e4
   b45bc:	2003e684 	.word	0x2003e684
   b45c0:	000b8aeb 	.word	0x000b8aeb
   b45c4:	000b8b05 	.word	0x000b8b05
   b45c8:	2003dc74 	.word	0x2003dc74
   b45cc:	2003e090 	.word	0x2003e090
   b45d0:	000b8b09 	.word	0x000b8b09
   b45d4:	000b8b15 	.word	0x000b8b15
   b45d8:	000b8b20 	.word	0x000b8b20
   b45dc:	2003e600 	.word	0x2003e600
   b45e0:	2003e698 	.word	0x2003e698
   b45e4:	2003e5fc 	.word	0x2003e5fc
   b45e8:	000b8b5c 	.word	0x000b8b5c
   b45ec:	000b8b4d 	.word	0x000b8b4d
   b45f0:	000b8b60 	.word	0x000b8b60
   b45f4:	000b8b73 	.word	0x000b8b73
   b45f8:	007700ff 	.word	0x007700ff
        digitalWrite(STROBE, LOW);
   b45fc:	2100      	movs	r1, #0
   b45fe:	2010      	movs	r0, #16
   b4600:	f003 fa49 	bl	b7a96 <digitalWrite>
   b4604:	2048      	movs	r0, #72	; 0x48
   b4606:	f001 fd85 	bl	b6114 <HAL_Delay_Microseconds>
        soundLevel[3] = analogRead(OUT);
   b460a:	200f      	movs	r0, #15
   b460c:	f003 fa5c 	bl	b7ac8 <analogRead>
   b4610:	60e0      	str	r0, [r4, #12]
        Serial.printf("Level 3\n Value %i\n", soundLevel[3]);
   b4612:	f003 f8f1 	bl	b77f8 <_Z16_fetch_usbserialv>
   b4616:	68e2      	ldr	r2, [r4, #12]
   b4618:	49b1      	ldr	r1, [pc, #708]	; (b48e0 <loop+0x66c>)
   b461a:	f7ff fd6a 	bl	b40f2 <_ZN5Print6printfEPKcz>
        digitalWrite(STROBE, HIGH);
   b461e:	2101      	movs	r1, #1
   b4620:	2010      	movs	r0, #16
   b4622:	f003 fa38 	bl	b7a96 <digitalWrite>
   b4626:	2048      	movs	r0, #72	; 0x48
   b4628:	f001 fd74 	bl	b6114 <HAL_Delay_Microseconds>
        if(soundLevel[3] < 400) {
   b462c:	68e3      	ldr	r3, [r4, #12]
   b462e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b4632:	da05      	bge.n	b4640 <loop+0x3cc>
            pixelFill(9, 11, 50, fullblue);
   b4634:	23ff      	movs	r3, #255	; 0xff
   b4636:	2232      	movs	r2, #50	; 0x32
   b4638:	210b      	movs	r1, #11
   b463a:	2009      	movs	r0, #9
   b463c:	f7ff fdf0 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[3] >= 400 && soundLevel[3] < 1000) {
   b4640:	68e3      	ldr	r3, [r4, #12]
   b4642:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
   b4646:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b464a:	d205      	bcs.n	b4658 <loop+0x3e4>
            pixelFill(9, 11, 100, fullblue);
   b464c:	23ff      	movs	r3, #255	; 0xff
   b464e:	2264      	movs	r2, #100	; 0x64
   b4650:	210b      	movs	r1, #11
   b4652:	2009      	movs	r0, #9
   b4654:	f7ff fde4 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[3] >= 1000 && soundLevel[3] < 2000) {
   b4658:	68e3      	ldr	r3, [r4, #12]
   b465a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   b465e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b4662:	d205      	bcs.n	b4670 <loop+0x3fc>
            pixelFill(9, 11, 150, fullblue);
   b4664:	23ff      	movs	r3, #255	; 0xff
   b4666:	2296      	movs	r2, #150	; 0x96
   b4668:	210b      	movs	r1, #11
   b466a:	2009      	movs	r0, #9
   b466c:	f7ff fdd8 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[3] >= 2000 && soundLevel[3] < 3000) {
   b4670:	68e3      	ldr	r3, [r4, #12]
   b4672:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
   b4676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b467a:	d205      	bcs.n	b4688 <loop+0x414>
            pixelFill(9, 11, 200, fullblue);
   b467c:	23ff      	movs	r3, #255	; 0xff
   b467e:	22c8      	movs	r2, #200	; 0xc8
   b4680:	210b      	movs	r1, #11
   b4682:	2009      	movs	r0, #9
   b4684:	f7ff fdcc 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[3] >= 3000) {
   b4688:	68e2      	ldr	r2, [r4, #12]
   b468a:	f640 33b7 	movw	r3, #2999	; 0xbb7
   b468e:	429a      	cmp	r2, r3
   b4690:	dd05      	ble.n	b469e <loop+0x42a>
            pixelFill(9, 11, 255, fullblue);
   b4692:	23ff      	movs	r3, #255	; 0xff
   b4694:	461a      	mov	r2, r3
   b4696:	210b      	movs	r1, #11
   b4698:	2009      	movs	r0, #9
   b469a:	f7ff fdc1 	bl	b4220 <_Z9pixelFilliiii>
        digitalWrite(STROBE, LOW);
   b469e:	2100      	movs	r1, #0
   b46a0:	2010      	movs	r0, #16
   b46a2:	f003 f9f8 	bl	b7a96 <digitalWrite>
   b46a6:	2048      	movs	r0, #72	; 0x48
   b46a8:	f001 fd34 	bl	b6114 <HAL_Delay_Microseconds>
        soundLevel[4] = analogRead(OUT);
   b46ac:	200f      	movs	r0, #15
   b46ae:	f003 fa0b 	bl	b7ac8 <analogRead>
   b46b2:	6120      	str	r0, [r4, #16]
        Serial.printf("Level 4\n Value %i\n", soundLevel[4]);
   b46b4:	f003 f8a0 	bl	b77f8 <_Z16_fetch_usbserialv>
   b46b8:	6922      	ldr	r2, [r4, #16]
   b46ba:	498a      	ldr	r1, [pc, #552]	; (b48e4 <loop+0x670>)
   b46bc:	f7ff fd19 	bl	b40f2 <_ZN5Print6printfEPKcz>
        digitalWrite(STROBE, HIGH);
   b46c0:	2101      	movs	r1, #1
   b46c2:	2010      	movs	r0, #16
   b46c4:	f003 f9e7 	bl	b7a96 <digitalWrite>
   b46c8:	2048      	movs	r0, #72	; 0x48
   b46ca:	f001 fd23 	bl	b6114 <HAL_Delay_Microseconds>
        if(soundLevel[4] < 400) {
   b46ce:	6923      	ldr	r3, [r4, #16]
   b46d0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b46d4:	da06      	bge.n	b46e4 <loop+0x470>
            pixelFill(12, 13, 50, fullgreen);
   b46d6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b46da:	2232      	movs	r2, #50	; 0x32
   b46dc:	210d      	movs	r1, #13
   b46de:	200c      	movs	r0, #12
   b46e0:	f7ff fd9e 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[4] >= 400 && soundLevel[4] < 1000) {
   b46e4:	6923      	ldr	r3, [r4, #16]
   b46e6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
   b46ea:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b46ee:	d206      	bcs.n	b46fe <loop+0x48a>
            pixelFill(12, 13, 100, fullgreen);
   b46f0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b46f4:	2264      	movs	r2, #100	; 0x64
   b46f6:	210d      	movs	r1, #13
   b46f8:	200c      	movs	r0, #12
   b46fa:	f7ff fd91 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[4] >= 1000 && soundLevel[4] < 2000) {
   b46fe:	6923      	ldr	r3, [r4, #16]
   b4700:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   b4704:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b4708:	d206      	bcs.n	b4718 <loop+0x4a4>
            pixelFill(12, 13, 150, fullgreen);
   b470a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b470e:	2296      	movs	r2, #150	; 0x96
   b4710:	210d      	movs	r1, #13
   b4712:	200c      	movs	r0, #12
   b4714:	f7ff fd84 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[4] >= 2000 && soundLevel[4] < 3000) {
   b4718:	6923      	ldr	r3, [r4, #16]
   b471a:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
   b471e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b4722:	d206      	bcs.n	b4732 <loop+0x4be>
            pixelFill(12, 13, 200, fullgreen);
   b4724:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b4728:	22c8      	movs	r2, #200	; 0xc8
   b472a:	210d      	movs	r1, #13
   b472c:	200c      	movs	r0, #12
   b472e:	f7ff fd77 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[4] >= 3000) {
   b4732:	6922      	ldr	r2, [r4, #16]
   b4734:	f640 33b7 	movw	r3, #2999	; 0xbb7
   b4738:	429a      	cmp	r2, r3
   b473a:	dd06      	ble.n	b474a <loop+0x4d6>
            pixelFill(12, 13, 255, fullgreen);
   b473c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   b4740:	22ff      	movs	r2, #255	; 0xff
   b4742:	210d      	movs	r1, #13
   b4744:	200c      	movs	r0, #12
   b4746:	f7ff fd6b 	bl	b4220 <_Z9pixelFilliiii>
        digitalWrite(STROBE, LOW);
   b474a:	2100      	movs	r1, #0
   b474c:	2010      	movs	r0, #16
   b474e:	f003 f9a2 	bl	b7a96 <digitalWrite>
   b4752:	2048      	movs	r0, #72	; 0x48
   b4754:	f001 fcde 	bl	b6114 <HAL_Delay_Microseconds>
        soundLevel[5] = analogRead(OUT);
   b4758:	200f      	movs	r0, #15
   b475a:	f003 f9b5 	bl	b7ac8 <analogRead>
   b475e:	6160      	str	r0, [r4, #20]
        Serial.printf("Level 5\n Value %i\n", soundLevel[5]);
   b4760:	f003 f84a 	bl	b77f8 <_Z16_fetch_usbserialv>
   b4764:	6962      	ldr	r2, [r4, #20]
   b4766:	4960      	ldr	r1, [pc, #384]	; (b48e8 <loop+0x674>)
   b4768:	f7ff fcc3 	bl	b40f2 <_ZN5Print6printfEPKcz>
        digitalWrite(STROBE, HIGH);
   b476c:	2101      	movs	r1, #1
   b476e:	2010      	movs	r0, #16
   b4770:	f003 f991 	bl	b7a96 <digitalWrite>
   b4774:	2048      	movs	r0, #72	; 0x48
   b4776:	f001 fccd 	bl	b6114 <HAL_Delay_Microseconds>
        if(soundLevel[4] < 400) {
   b477a:	6923      	ldr	r3, [r4, #16]
   b477c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b4780:	da05      	bge.n	b478e <loop+0x51a>
            pixelFill(14, 15, 50, fullyellow);
   b4782:	4b5a      	ldr	r3, [pc, #360]	; (b48ec <loop+0x678>)
   b4784:	2232      	movs	r2, #50	; 0x32
   b4786:	210f      	movs	r1, #15
   b4788:	200e      	movs	r0, #14
   b478a:	f7ff fd49 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[5] >= 400 && soundLevel[5] < 1000) {
   b478e:	6963      	ldr	r3, [r4, #20]
   b4790:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
   b4794:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b4798:	d205      	bcs.n	b47a6 <loop+0x532>
            pixelFill(14, 15, 100, fullyellow);
   b479a:	4b54      	ldr	r3, [pc, #336]	; (b48ec <loop+0x678>)
   b479c:	2264      	movs	r2, #100	; 0x64
   b479e:	210f      	movs	r1, #15
   b47a0:	200e      	movs	r0, #14
   b47a2:	f7ff fd3d 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[5] >= 1000 && soundLevel[5] < 2000) {
   b47a6:	6963      	ldr	r3, [r4, #20]
   b47a8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   b47ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b47b0:	d205      	bcs.n	b47be <loop+0x54a>
            pixelFill(14, 15, 150, fullyellow);
   b47b2:	4b4e      	ldr	r3, [pc, #312]	; (b48ec <loop+0x678>)
   b47b4:	2296      	movs	r2, #150	; 0x96
   b47b6:	210f      	movs	r1, #15
   b47b8:	200e      	movs	r0, #14
   b47ba:	f7ff fd31 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[5] >= 2000 && soundLevel[5] < 3000) {
   b47be:	6963      	ldr	r3, [r4, #20]
   b47c0:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
   b47c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b47c8:	d205      	bcs.n	b47d6 <loop+0x562>
            pixelFill(14, 15, 200, fullyellow);
   b47ca:	4b48      	ldr	r3, [pc, #288]	; (b48ec <loop+0x678>)
   b47cc:	22c8      	movs	r2, #200	; 0xc8
   b47ce:	210f      	movs	r1, #15
   b47d0:	200e      	movs	r0, #14
   b47d2:	f7ff fd25 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[5] >= 3000) {
   b47d6:	6962      	ldr	r2, [r4, #20]
   b47d8:	f640 33b7 	movw	r3, #2999	; 0xbb7
   b47dc:	429a      	cmp	r2, r3
   b47de:	dd05      	ble.n	b47ec <loop+0x578>
            pixelFill(14, 15, 255, fullyellow);
   b47e0:	4b42      	ldr	r3, [pc, #264]	; (b48ec <loop+0x678>)
   b47e2:	22ff      	movs	r2, #255	; 0xff
   b47e4:	210f      	movs	r1, #15
   b47e6:	200e      	movs	r0, #14
   b47e8:	f7ff fd1a 	bl	b4220 <_Z9pixelFilliiii>
        digitalWrite(STROBE, LOW);
   b47ec:	2100      	movs	r1, #0
   b47ee:	2010      	movs	r0, #16
   b47f0:	f003 f951 	bl	b7a96 <digitalWrite>
   b47f4:	2048      	movs	r0, #72	; 0x48
   b47f6:	f001 fc8d 	bl	b6114 <HAL_Delay_Microseconds>
        soundLevel[6] = analogRead(OUT);
   b47fa:	200f      	movs	r0, #15
   b47fc:	f003 f964 	bl	b7ac8 <analogRead>
   b4800:	61a0      	str	r0, [r4, #24]
        Serial.printf("Level 6\n Value %i\n", soundLevel[6]);
   b4802:	f002 fff9 	bl	b77f8 <_Z16_fetch_usbserialv>
   b4806:	69a2      	ldr	r2, [r4, #24]
   b4808:	4939      	ldr	r1, [pc, #228]	; (b48f0 <loop+0x67c>)
   b480a:	f7ff fc72 	bl	b40f2 <_ZN5Print6printfEPKcz>
        digitalWrite(STROBE, HIGH);
   b480e:	2101      	movs	r1, #1
   b4810:	2010      	movs	r0, #16
   b4812:	f003 f940 	bl	b7a96 <digitalWrite>
   b4816:	2048      	movs	r0, #72	; 0x48
   b4818:	f001 fc7c 	bl	b6114 <HAL_Delay_Microseconds>
        if(soundLevel[6] < 400) {
   b481c:	69a3      	ldr	r3, [r4, #24]
   b481e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   b4822:	da05      	bge.n	b4830 <loop+0x5bc>
            pixelFill(14, 15, 50, orange);
   b4824:	4b33      	ldr	r3, [pc, #204]	; (b48f4 <loop+0x680>)
   b4826:	2232      	movs	r2, #50	; 0x32
   b4828:	210f      	movs	r1, #15
   b482a:	200e      	movs	r0, #14
   b482c:	f7ff fcf8 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[6] >= 400 && soundLevel[6] < 1000) {
   b4830:	4c31      	ldr	r4, [pc, #196]	; (b48f8 <loop+0x684>)
   b4832:	69a3      	ldr	r3, [r4, #24]
   b4834:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
   b4838:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   b483c:	d205      	bcs.n	b484a <loop+0x5d6>
            pixelFill(16, 16, 100, orange);
   b483e:	2110      	movs	r1, #16
   b4840:	4b2c      	ldr	r3, [pc, #176]	; (b48f4 <loop+0x680>)
   b4842:	2264      	movs	r2, #100	; 0x64
   b4844:	4608      	mov	r0, r1
   b4846:	f7ff fceb 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[6] >= 1000 && soundLevel[6] < 2000) {
   b484a:	69a3      	ldr	r3, [r4, #24]
   b484c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   b4850:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b4854:	d205      	bcs.n	b4862 <loop+0x5ee>
            pixelFill(16, 16, 150, orange);
   b4856:	2110      	movs	r1, #16
   b4858:	4b26      	ldr	r3, [pc, #152]	; (b48f4 <loop+0x680>)
   b485a:	2296      	movs	r2, #150	; 0x96
   b485c:	4608      	mov	r0, r1
   b485e:	f7ff fcdf 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[6] >= 2000 && soundLevel[6] < 3000) {
   b4862:	69a3      	ldr	r3, [r4, #24]
   b4864:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
   b4868:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   b486c:	d205      	bcs.n	b487a <loop+0x606>
            pixelFill(16, 16, 200, orange);
   b486e:	2110      	movs	r1, #16
   b4870:	4b20      	ldr	r3, [pc, #128]	; (b48f4 <loop+0x680>)
   b4872:	22c8      	movs	r2, #200	; 0xc8
   b4874:	4608      	mov	r0, r1
   b4876:	f7ff fcd3 	bl	b4220 <_Z9pixelFilliiii>
        if(soundLevel[6] >= 3000) {
   b487a:	69a2      	ldr	r2, [r4, #24]
   b487c:	f640 33b7 	movw	r3, #2999	; 0xbb7
   b4880:	429a      	cmp	r2, r3
   b4882:	dd23      	ble.n	b48cc <loop+0x658>
            pixelFill(16, 16, 255, orange);
   b4884:	2110      	movs	r1, #16
   b4886:	4b1b      	ldr	r3, [pc, #108]	; (b48f4 <loop+0x680>)
   b4888:	22ff      	movs	r2, #255	; 0xff
   b488a:	4608      	mov	r0, r1
}
   b488c:	b002      	add	sp, #8
   b488e:	ecbd 8b04 	vpop	{d8-d9}
   b4892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            pixelFill(16, 16, 255, orange);
   b4896:	f7ff bcc3 	b.w	b4220 <_Z9pixelFilliiii>
            Serial.print("HTTP GET request failed, error: ");
   b489a:	f002 ffad 	bl	b77f8 <_Z16_fetch_usbserialv>
   b489e:	4917      	ldr	r1, [pc, #92]	; (b48fc <loop+0x688>)
   b48a0:	f002 f8fc 	bl	b6a9c <_ZN5Print5printEPKc>
            Serial.println(response.status);
   b48a4:	f002 ffa8 	bl	b77f8 <_Z16_fetch_usbserialv>
   b48a8:	6824      	ldr	r4, [r4, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b48aa:	2c00      	cmp	r4, #0
   b48ac:	4605      	mov	r5, r0
   b48ae:	da0b      	bge.n	b48c8 <loop+0x654>
            t = print('-');
   b48b0:	212d      	movs	r1, #45	; 0x2d
   b48b2:	f002 f8f7 	bl	b6aa4 <_ZN5Print5printEc>
            val = -n;
   b48b6:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b48b8:	220a      	movs	r2, #10
   b48ba:	4628      	mov	r0, r5
   b48bc:	f002 f90b 	bl	b6ad6 <_ZN5Print11printNumberEmh>
        n += println();
   b48c0:	4628      	mov	r0, r5
   b48c2:	f002 f8f2 	bl	b6aaa <_ZN5Print7printlnEv>
        return n;
   b48c6:	e549      	b.n	b435c <loop+0xe8>
            val = n;
   b48c8:	4621      	mov	r1, r4
   b48ca:	e7f5      	b.n	b48b8 <loop+0x644>
        distance = analogRead(MOTIONSENSOR);
   b48cc:	2012      	movs	r0, #18
   b48ce:	f003 f8fb 	bl	b7ac8 <analogRead>
   b48d2:	4b0b      	ldr	r3, [pc, #44]	; (b4900 <loop+0x68c>)
   b48d4:	6018      	str	r0, [r3, #0]
}
   b48d6:	b002      	add	sp, #8
   b48d8:	ecbd 8b04 	vpop	{d8-d9}
   b48dc:	bd70      	pop	{r4, r5, r6, pc}
   b48de:	bf00      	nop
   b48e0:	000b8b86 	.word	0x000b8b86
   b48e4:	000b8b99 	.word	0x000b8b99
   b48e8:	000b8bac 	.word	0x000b8bac
   b48ec:	00ffff00 	.word	0x00ffff00
   b48f0:	000b8bbf 	.word	0x000b8bbf
   b48f4:	00ff7700 	.word	0x00ff7700
   b48f8:	2003e698 	.word	0x2003e698
   b48fc:	000b8b2c 	.word	0x000b8b2c
   b4900:	2003dc70 	.word	0x2003dc70

000b4904 <_GLOBAL__sub_I_getWeather>:
}
   b4904:	b513      	push	{r0, r1, r4, lr}
Adafruit_NeoPixel pixel(PIXELCOUNT, PIXELPIN, WS2812B);
   b4906:	2302      	movs	r3, #2
   b4908:	2208      	movs	r2, #8
   b490a:	2110      	movs	r1, #16
   b490c:	481d      	ldr	r0, [pc, #116]	; (b4984 <_GLOBAL__sub_I_getWeather+0x80>)
} http_request_t;
   b490e:	4c1e      	ldr	r4, [pc, #120]	; (b4988 <_GLOBAL__sub_I_getWeather+0x84>)
   b4910:	f000 f88e 	bl	b4a30 <_ZN17Adafruit_NeoPixelC1Ethh>
Adafruit_SSD1306 myDisplay(OLED_RESET); 
   b4914:	2104      	movs	r1, #4
   b4916:	481d      	ldr	r0, [pc, #116]	; (b498c <_GLOBAL__sub_I_getWeather+0x88>)
   b4918:	f000 fe4a 	bl	b55b0 <_ZN16Adafruit_SSD1306C1Ea>
HttpClient http;
   b491c:	481c      	ldr	r0, [pc, #112]	; (b4990 <_GLOBAL__sub_I_getWeather+0x8c>)
   b491e:	f001 fa8a 	bl	b5e36 <_ZN10HttpClientC1Ev>
   b4922:	491c      	ldr	r1, [pc, #112]	; (b4994 <_GLOBAL__sub_I_getWeather+0x90>)
   b4924:	4620      	mov	r0, r4
   b4926:	f002 fb1a 	bl	b6f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b492a:	f104 0010 	add.w	r0, r4, #16
   b492e:	f001 ff7f 	bl	b6830 <_ZN9IPAddressC1Ev>
   b4932:	4918      	ldr	r1, [pc, #96]	; (b4994 <_GLOBAL__sub_I_getWeather+0x90>)
   b4934:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b4938:	f002 fb11 	bl	b6f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b493c:	4915      	ldr	r1, [pc, #84]	; (b4994 <_GLOBAL__sub_I_getWeather+0x90>)
   b493e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b4942:	f002 fb0c 	bl	b6f5e <_ZN6StringC1EPK19__FlashStringHelper>
public:
	/**
	 * @brief Construct a JsonParser using a static buffer and static maximum number of tokens.
	 */
	explicit JsonParserStatic() : JsonParser(staticBuffer, BUFFER_SIZE, staticTokens, MAX_TOKENS) {};
   b4946:	4c14      	ldr	r4, [pc, #80]	; (b4998 <_GLOBAL__sub_I_getWeather+0x94>)
} http_response_t;
   b4948:	4912      	ldr	r1, [pc, #72]	; (b4994 <_GLOBAL__sub_I_getWeather+0x90>)
   b494a:	4814      	ldr	r0, [pc, #80]	; (b499c <_GLOBAL__sub_I_getWeather+0x98>)
   b494c:	f002 fb07 	bl	b6f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b4950:	2314      	movs	r3, #20
   b4952:	9300      	str	r3, [sp, #0]
   b4954:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b4958:	f204 432c 	addw	r3, r4, #1068	; 0x42c
   b495c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   b4960:	4620      	mov	r0, r4
   b4962:	f001 f82f 	bl	b59c4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>
   b4966:	4b0e      	ldr	r3, [pc, #56]	; (b49a0 <_GLOBAL__sub_I_getWeather+0x9c>)
   b4968:	6023      	str	r3, [r4, #0]
              error_(SYSTEM_ERROR_NONE) {
   b496a:	4b0e      	ldr	r3, [pc, #56]	; (b49a4 <_GLOBAL__sub_I_getWeather+0xa0>)
   b496c:	2200      	movs	r2, #0
   b496e:	e9c3 2200 	strd	r2, r2, [r3]
        set_system_mode(mode);
   b4972:	2001      	movs	r0, #1
    SleepResult() {}
   b4974:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4978:	609a      	str	r2, [r3, #8]
}
   b497a:	b002      	add	sp, #8
   b497c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        set_system_mode(mode);
   b4980:	f001 bda8 	b.w	b64d4 <set_system_mode>
   b4984:	2003e624 	.word	0x2003e624
   b4988:	2003e638 	.word	0x2003e638
   b498c:	2003e600 	.word	0x2003e600
   b4990:	2003dc74 	.word	0x2003dc74
   b4994:	000b8ad5 	.word	0x000b8ad5
   b4998:	2003e090 	.word	0x2003e090
   b499c:	2003e688 	.word	0x2003e688
   b49a0:	000b8bdc 	.word	0x000b8bdc
   b49a4:	2003dc64 	.word	0x2003dc64

000b49a8 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b49a8:	b538      	push	{r3, r4, r5, lr}
   b49aa:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   b49ac:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
   b49ae:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   b49b0:	b108      	cbz	r0, b49b6 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   b49b2:	f001 fe2b 	bl	b660c <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   b49b6:	79a3      	ldrb	r3, [r4, #6]
   b49b8:	2b06      	cmp	r3, #6
   b49ba:	bf0c      	ite	eq
   b49bc:	2004      	moveq	r0, #4
   b49be:	2003      	movne	r0, #3
   b49c0:	fb10 f005 	smulbb	r0, r0, r5
   b49c4:	b280      	uxth	r0, r0
   b49c6:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   b49c8:	f001 fe18 	bl	b65fc <malloc>
   b49cc:	60e0      	str	r0, [r4, #12]
   b49ce:	b128      	cbz	r0, b49dc <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   b49d0:	88a2      	ldrh	r2, [r4, #4]
   b49d2:	2100      	movs	r1, #0
   b49d4:	f003 ff10 	bl	b87f8 <memset>
    numLEDs = n;
   b49d8:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
   b49da:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
   b49dc:	80a0      	strh	r0, [r4, #4]
   b49de:	8060      	strh	r0, [r4, #2]
}
   b49e0:	e7fb      	b.n	b49da <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

000b49e2 <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
   b49e2:	b510      	push	{r4, lr}
   b49e4:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   b49e6:	2101      	movs	r1, #1
   b49e8:	79c0      	ldrb	r0, [r0, #7]
   b49ea:	f003 f843 	bl	b7a74 <pinMode>
  digitalWrite(pin, LOW);
   b49ee:	79e0      	ldrb	r0, [r4, #7]
   b49f0:	2100      	movs	r1, #0
   b49f2:	f003 f850 	bl	b7a96 <digitalWrite>
  begun = true;
   b49f6:	2301      	movs	r3, #1
   b49f8:	7023      	strb	r3, [r4, #0]
}
   b49fa:	bd10      	pop	{r4, pc}

000b49fc <_ZN17Adafruit_NeoPixel6setPinEh>:

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b49fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (begun) {
   b49fe:	7803      	ldrb	r3, [r0, #0]
void Adafruit_NeoPixel::setPin(uint8_t p) {
   b4a00:	4605      	mov	r5, r0
   b4a02:	460c      	mov	r4, r1
    if (begun) {
   b4a04:	b11b      	cbz	r3, b4a0e <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   b4a06:	79c0      	ldrb	r0, [r0, #7]
   b4a08:	2100      	movs	r1, #0
   b4a0a:	f003 f833 	bl	b7a74 <pinMode>
    }
    pin = p;
    if (begun) {
   b4a0e:	782b      	ldrb	r3, [r5, #0]
    pin = p;
   b4a10:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   b4a12:	b15b      	cbz	r3, b4a2c <_ZN17Adafruit_NeoPixel6setPinEh+0x30>
        pinMode(p, OUTPUT);
   b4a14:	b2a0      	uxth	r0, r4
   b4a16:	2101      	movs	r1, #1
   b4a18:	9001      	str	r0, [sp, #4]
   b4a1a:	f003 f82b 	bl	b7a74 <pinMode>
        digitalWrite(p, LOW);
   b4a1e:	9801      	ldr	r0, [sp, #4]
   b4a20:	2100      	movs	r1, #0
    }
}
   b4a22:	b003      	add	sp, #12
   b4a24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        digitalWrite(p, LOW);
   b4a28:	f003 b835 	b.w	b7a96 <digitalWrite>
}
   b4a2c:	b003      	add	sp, #12
   b4a2e:	bd30      	pop	{r4, r5, pc}

000b4a30 <_ZN17Adafruit_NeoPixelC1Ethh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4a30:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4a32:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   b4a34:	4604      	mov	r4, r0
   b4a36:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   b4a38:	7183      	strb	r3, [r0, #6]
   b4a3a:	e9c0 5503 	strd	r5, r5, [r0, #12]
   b4a3e:	7005      	strb	r5, [r0, #0]
   b4a40:	7205      	strb	r5, [r0, #8]
  updateLength(n);
   b4a42:	f7ff ffb1 	bl	b49a8 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   b4a46:	4620      	mov	r0, r4
   b4a48:	4631      	mov	r1, r6
   b4a4a:	f7ff ffd7 	bl	b49fc <_ZN17Adafruit_NeoPixel6setPinEh>
}
   b4a4e:	4620      	mov	r0, r4
   b4a50:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4a54 <_ZN17Adafruit_NeoPixel4showEv>:

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   b4a54:	68c3      	ldr	r3, [r0, #12]
   b4a56:	2b00      	cmp	r3, #0
   b4a58:	f000 81a4 	beq.w	b4da4 <_ZN17Adafruit_NeoPixel4showEv+0x350>
void Adafruit_NeoPixel::show(void) {
   b4a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4a60:	7983      	ldrb	r3, [r0, #6]
   b4a62:	3b02      	subs	r3, #2
   b4a64:	b2db      	uxtb	r3, r3
   b4a66:	2b04      	cmp	r3, #4
   b4a68:	bf9c      	itt	ls
   b4a6a:	4abf      	ldrls	r2, [pc, #764]	; (b4d68 <_ZN17Adafruit_NeoPixel4showEv+0x314>)
   b4a6c:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   b4a70:	b085      	sub	sp, #20
   b4a72:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   b4a74:	bf88      	it	hi
   b4a76:	2432      	movhi	r4, #50	; 0x32
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4a78:	f001 fb54 	bl	b6124 <HAL_Timer_Get_Micro_Seconds>
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   b4a7c:	692b      	ldr	r3, [r5, #16]
   b4a7e:	1ac0      	subs	r0, r0, r3
   b4a80:	42a0      	cmp	r0, r4
   b4a82:	d3f9      	bcc.n	b4a78 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   b4a84:	4cb9      	ldr	r4, [pc, #740]	; (b4d6c <_ZN17Adafruit_NeoPixel4showEv+0x318>)
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4a86:	88ae      	ldrh	r6, [r5, #4]
    if( (PWM[device]->ENABLE == 0)                            &&
   b4a88:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4a8c:	b91b      	cbnz	r3, b4a96 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4a8e:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4a92:	2b00      	cmp	r3, #0
   b4a94:	db7e      	blt.n	b4b94 <_ZN17Adafruit_NeoPixel4showEv+0x140>
   b4a96:	4cb6      	ldr	r4, [pc, #728]	; (b4d70 <_ZN17Adafruit_NeoPixel4showEv+0x31c>)
   b4a98:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4a9c:	b923      	cbnz	r3, b4aa8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4a9e:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4aa2:	2b00      	cmp	r3, #0
   b4aa4:	f2c0 816e 	blt.w	b4d84 <_ZN17Adafruit_NeoPixel4showEv+0x330>
   b4aa8:	4cb2      	ldr	r4, [pc, #712]	; (b4d74 <_ZN17Adafruit_NeoPixel4showEv+0x320>)
   b4aaa:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4aae:	2b00      	cmp	r3, #0
   b4ab0:	f000 8144 	beq.w	b4d3c <_ZN17Adafruit_NeoPixel4showEv+0x2e8>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4ab4:	79eb      	ldrb	r3, [r5, #7]
   b4ab6:	4ab0      	ldr	r2, [pc, #704]	; (b4d78 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4ab8:	4cb0      	ldr	r4, [pc, #704]	; (b4d7c <_ZN17Adafruit_NeoPixel4showEv+0x328>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4aba:	6812      	ldr	r2, [r2, #0]
   b4abc:	0119      	lsls	r1, r3, #4
   b4abe:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   b4ac2:	5c57      	ldrb	r7, [r2, r1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b4ac4:	49ae      	ldr	r1, [pc, #696]	; (b4d80 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4ac6:	785b      	ldrb	r3, [r3, #1]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   b4ac8:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   b4acc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   b4ad0:	f8c1 20fc 	str.w	r2, [r1, #252]	; 0xfc
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4ad4:	6822      	ldr	r2, [r4, #0]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4ad6:	f003 031f 	and.w	r3, r3, #31
   b4ada:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   b4ade:	2701      	movs	r7, #1
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   b4ae0:	433a      	orrs	r2, r7
   b4ae2:	6022      	str	r2, [r4, #0]
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   b4ae4:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b4ae6:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b4aea:	f8d4 9004 	ldr.w	r9, [r4, #4]
    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4aee:	409f      	lsls	r7, r3
      for(uint16_t n=0; n<numBytes; n++) {
   b4af0:	2900      	cmp	r1, #0
   b4af2:	d044      	beq.n	b4b7e <_ZN17Adafruit_NeoPixel4showEv+0x12a>
   b4af4:	f04f 0e00 	mov.w	lr, #0
      uint32_t cyc = 0;
   b4af8:	4672      	mov	r2, lr

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   b4afa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
        uint8_t pix = *p++;
   b4afe:	f818 cb01 	ldrb.w	ip, [r8], #1
   b4b02:	2008      	movs	r0, #8
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4b04:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   b4b06:	6863      	ldr	r3, [r4, #4]
   b4b08:	1a9b      	subs	r3, r3, r2
   b4b0a:	2b46      	cmp	r3, #70	; 0x46
   b4b0c:	d9fb      	bls.n	b4b06 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
          cyc  = DWT->CYCCNT;
   b4b0e:	6862      	ldr	r2, [r4, #4]
          NRF_GPIO->OUTSET |= pinMask;
   b4b10:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   b4b14:	ea1c 0f06 	tst.w	ip, r6
          NRF_GPIO->OUTSET |= pinMask;
   b4b18:	ea43 0307 	orr.w	r3, r3, r7
   b4b1c:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
          if(pix & mask) {
   b4b20:	d02f      	beq.n	b4b82 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   b4b22:	6863      	ldr	r3, [r4, #4]
   b4b24:	1a9b      	subs	r3, r3, r2
   b4b26:	2b28      	cmp	r3, #40	; 0x28
   b4b28:	d9fb      	bls.n	b4b22 <_ZN17Adafruit_NeoPixel4showEv+0xce>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   b4b2a:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4b2e:	3801      	subs	r0, #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4b30:	ea43 0307 	orr.w	r3, r3, r7
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4b34:	ea4f 0656 	mov.w	r6, r6, lsr #1
          NRF_GPIO->OUTCLR |= pinMask;
   b4b38:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   b4b3c:	d1e3      	bne.n	b4b06 <_ZN17Adafruit_NeoPixel4showEv+0xb2>
      for(uint16_t n=0; n<numBytes; n++) {
   b4b3e:	88ab      	ldrh	r3, [r5, #4]
   b4b40:	f10e 0e01 	add.w	lr, lr, #1
   b4b44:	fa1f fe8e 	uxth.w	lr, lr
   b4b48:	4573      	cmp	r3, lr
   b4b4a:	d8d8      	bhi.n	b4afe <_ZN17Adafruit_NeoPixel4showEv+0xaa>
      while(DWT->CYCCNT - cyc < CYCLES_X00);


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b4b4c:	f44f 7130 	mov.w	r1, #704	; 0x2c0
   b4b50:	fb03 f101 	mul.w	r1, r3, r1
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   b4b54:	6863      	ldr	r3, [r4, #4]
   b4b56:	1a9b      	subs	r3, r3, r2
   b4b58:	2b46      	cmp	r3, #70	; 0x46
   b4b5a:	d9fb      	bls.n	b4b54 <_ZN17Adafruit_NeoPixel4showEv+0x100>
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   b4b5c:	6863      	ldr	r3, [r4, #4]
   b4b5e:	eba3 0909 	sub.w	r9, r3, r9
   b4b62:	4589      	cmp	r9, r1
   b4b64:	f0c0 80e4 	bcc.w	b4d30 <_ZN17Adafruit_NeoPixel4showEv+0x2dc>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4b68:	f44f 7096 	mov.w	r0, #300	; 0x12c
   b4b6c:	f001 fad2 	bl	b6114 <HAL_Delay_Microseconds>
      for(uint16_t n=0; n<numBytes; n++) {
   b4b70:	88a9      	ldrh	r1, [r5, #4]
      uint8_t *p = pixels;
   b4b72:	f8d5 800c 	ldr.w	r8, [r5, #12]
      uint32_t cycStart = DWT->CYCCNT;
   b4b76:	f8d4 9004 	ldr.w	r9, [r4, #4]
      for(uint16_t n=0; n<numBytes; n++) {
   b4b7a:	2900      	cmp	r1, #0
   b4b7c:	d1ba      	bne.n	b4af4 <_ZN17Adafruit_NeoPixel4showEv+0xa0>
      uint32_t cyc = 0;
   b4b7e:	460a      	mov	r2, r1
   b4b80:	e7e8      	b.n	b4b54 <_ZN17Adafruit_NeoPixel4showEv+0x100>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   b4b82:	6863      	ldr	r3, [r4, #4]
   b4b84:	1a9b      	subs	r3, r3, r2
   b4b86:	2b11      	cmp	r3, #17
   b4b88:	d8cf      	bhi.n	b4b2a <_ZN17Adafruit_NeoPixel4showEv+0xd6>
   b4b8a:	6863      	ldr	r3, [r4, #4]
   b4b8c:	1a9b      	subs	r3, r3, r2
   b4b8e:	2b11      	cmp	r3, #17
   b4b90:	d9f7      	bls.n	b4b82 <_ZN17Adafruit_NeoPixel4showEv+0x12e>
   b4b92:	e7ca      	b.n	b4b2a <_ZN17Adafruit_NeoPixel4showEv+0xd6>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b94:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b98:	2b00      	cmp	r3, #0
   b4b9a:	f6bf af7c 	bge.w	b4a96 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4b9e:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4ba2:	2b00      	cmp	r3, #0
   b4ba4:	f6bf af77 	bge.w	b4a96 <_ZN17Adafruit_NeoPixel4showEv+0x42>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4ba8:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4bac:	2b00      	cmp	r3, #0
   b4bae:	f6bf af72 	bge.w	b4a96 <_ZN17Adafruit_NeoPixel4showEv+0x42>
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4bb2:	0136      	lsls	r6, r6, #4
   b4bb4:	1d33      	adds	r3, r6, #4
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b4bb6:	4618      	mov	r0, r3
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   b4bb8:	9300      	str	r3, [sp, #0]
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   b4bba:	f001 fd1f 	bl	b65fc <malloc>
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   b4bbe:	2800      	cmp	r0, #0
   b4bc0:	f43f af78 	beq.w	b4ab4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
    for(uint16_t n=0; n<numBytes; n++) {
   b4bc4:	88ab      	ldrh	r3, [r5, #4]
   b4bc6:	2b00      	cmp	r3, #0
   b4bc8:	f000 80ed 	beq.w	b4da6 <_ZN17Adafruit_NeoPixel4showEv+0x352>
      uint8_t pix = pixels[n];
   b4bcc:	68ea      	ldr	r2, [r5, #12]
   b4bce:	3b01      	subs	r3, #1
   b4bd0:	fa12 f783 	uxtah	r7, r2, r3
   b4bd4:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
    uint16_t pos = 0; // bit position
   b4bd8:	2300      	movs	r3, #0
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4bda:	f248 0206 	movw	r2, #32774	; 0x8006
   b4bde:	f248 010d 	movw	r1, #32781	; 0x800d
      uint8_t pix = pixels[n];
   b4be2:	f81e cf01 	ldrb.w	ip, [lr, #1]!
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4be6:	f01c 0f80 	tst.w	ip, #128	; 0x80
   b4bea:	bf0c      	ite	eq
   b4bec:	4693      	moveq	fp, r2
   b4bee:	468b      	movne	fp, r1
   b4bf0:	f01c 0f40 	tst.w	ip, #64	; 0x40
   b4bf4:	bf0c      	ite	eq
   b4bf6:	4616      	moveq	r6, r2
   b4bf8:	460e      	movne	r6, r1
   b4bfa:	f01c 0f20 	tst.w	ip, #32
   b4bfe:	bf0c      	ite	eq
   b4c00:	4690      	moveq	r8, r2
   b4c02:	4688      	movne	r8, r1
        pos++;
   b4c04:	f103 0901 	add.w	r9, r3, #1
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4c08:	f8cd 8008 	str.w	r8, [sp, #8]
   b4c0c:	9601      	str	r6, [sp, #4]
        pos++;
   b4c0e:	f103 0802 	add.w	r8, r3, #2
   b4c12:	fa1f f989 	uxth.w	r9, r9
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4c16:	9e01      	ldr	r6, [sp, #4]
   b4c18:	f820 b013 	strh.w	fp, [r0, r3, lsl #1]
        pos++;
   b4c1c:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4c20:	f820 6019 	strh.w	r6, [r0, r9, lsl #1]
   b4c24:	9e02      	ldr	r6, [sp, #8]
   b4c26:	f820 6018 	strh.w	r6, [r0, r8, lsl #1]
        pos++;
   b4c2a:	f103 0803 	add.w	r8, r3, #3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4c2e:	f01c 0f10 	tst.w	ip, #16
        pos++;
   b4c32:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4c36:	bf0c      	ite	eq
   b4c38:	4693      	moveq	fp, r2
   b4c3a:	468b      	movne	fp, r1
   b4c3c:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4c40:	f103 0804 	add.w	r8, r3, #4
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4c44:	f01c 0f08 	tst.w	ip, #8
        pos++;
   b4c48:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4c4c:	bf0c      	ite	eq
   b4c4e:	4693      	moveq	fp, r2
   b4c50:	468b      	movne	fp, r1
   b4c52:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4c56:	f103 0805 	add.w	r8, r3, #5
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4c5a:	f01c 0f04 	tst.w	ip, #4
        pos++;
   b4c5e:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4c62:	bf0c      	ite	eq
   b4c64:	4693      	moveq	fp, r2
   b4c66:	468b      	movne	fp, r1
   b4c68:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
        pos++;
   b4c6c:	f103 0a08 	add.w	sl, r3, #8
   b4c70:	f103 0806 	add.w	r8, r3, #6
   b4c74:	3307      	adds	r3, #7
   b4c76:	b29b      	uxth	r3, r3
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4c78:	f01c 0f02 	tst.w	ip, #2
        pos++;
   b4c7c:	fa1f f888 	uxth.w	r8, r8
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4c80:	bf0c      	ite	eq
   b4c82:	4693      	moveq	fp, r2
   b4c84:	468b      	movne	fp, r1
        pos++;
   b4c86:	f8cd a00c 	str.w	sl, [sp, #12]
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   b4c8a:	f01c 0f01 	tst.w	ip, #1
   b4c8e:	f820 b018 	strh.w	fp, [r0, r8, lsl #1]
   b4c92:	bf15      	itete	ne
   b4c94:	f820 1013 	strhne.w	r1, [r0, r3, lsl #1]
   b4c98:	f820 2013 	strheq.w	r2, [r0, r3, lsl #1]
        pos++;
   b4c9c:	fa1f f38a 	uxthne.w	r3, sl
   b4ca0:	f8bd 300c 	ldrheq.w	r3, [sp, #12]
    for(uint16_t n=0; n<numBytes; n++) {
   b4ca4:	4577      	cmp	r7, lr
   b4ca6:	d19c      	bne.n	b4be2 <_ZN17Adafruit_NeoPixel4showEv+0x18e>
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4ca8:	1c59      	adds	r1, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4caa:	3302      	adds	r3, #2
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4cac:	b289      	uxth	r1, r1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4cae:	b29b      	uxth	r3, r3
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4cb0:	0049      	lsls	r1, r1, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4cb2:	005b      	lsls	r3, r3, #1
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4cb4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   b4cb8:	5247      	strh	r7, [r0, r1]
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4cba:	9a00      	ldr	r2, [sp, #0]
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   b4cbc:	52c7      	strh	r7, [r0, r3]
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4cbe:	4b2e      	ldr	r3, [pc, #184]	; (b4d78 <_ZN17Adafruit_NeoPixel4showEv+0x324>)
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4cc0:	0856      	lsrs	r6, r2, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4cc2:	681f      	ldr	r7, [r3, #0]
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4cc4:	2200      	movs	r2, #0
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4cc6:	2314      	movs	r3, #20
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   b4cc8:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   b4ccc:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   b4cd0:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   b4cd4:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
   b4cd8:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   b4cdc:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   b4ce0:	f8c4 6524 	str.w	r6, [r4, #1316]	; 0x524
    pwm->SEQ[0].REFRESH  = 0;
   b4ce4:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   b4ce8:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4cec:	79eb      	ldrb	r3, [r5, #7]
   b4cee:	eb07 1c03 	add.w	ip, r7, r3, lsl #4
   b4cf2:	011b      	lsls	r3, r3, #4
    pwm->ENABLE = 1;
   b4cf4:	2101      	movs	r1, #1
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   b4cf6:	5cfe      	ldrb	r6, [r7, r3]
   b4cf8:	f89c 3001 	ldrb.w	r3, [ip, #1]
   b4cfc:	f003 031f 	and.w	r3, r3, #31
   b4d00:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   b4d04:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
    pwm->ENABLE = 1;
   b4d08:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    pwm->EVENTS_SEQEND[0]  = 0;
   b4d0c:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   b4d10:	60a1      	str	r1, [r4, #8]
    while(!pwm->EVENTS_SEQEND[0])
   b4d12:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   b4d16:	2b00      	cmp	r3, #0
   b4d18:	d0fb      	beq.n	b4d12 <_ZN17Adafruit_NeoPixel4showEv+0x2be>
    pwm->EVENTS_SEQEND[0] = 0;
   b4d1a:	2300      	movs	r3, #0
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4d1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    pwm->EVENTS_SEQEND[0] = 0;
   b4d20:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    pwm->ENABLE = 0;
   b4d24:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   b4d28:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560
      free(pixels_pattern);
   b4d2c:	f001 fc6e 	bl	b660c <free>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b4d30:	f001 f9f8 	bl	b6124 <HAL_Timer_Get_Micro_Seconds>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   b4d34:	6128      	str	r0, [r5, #16]
}
   b4d36:	b005      	add	sp, #20
   b4d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d3c:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560
    if( (PWM[device]->ENABLE == 0)                            &&
   b4d40:	2b00      	cmp	r3, #0
   b4d42:	f6bf aeb7 	bge.w	b4ab4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d46:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d4a:	2b00      	cmp	r3, #0
   b4d4c:	f6bf aeb2 	bge.w	b4ab4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d50:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d54:	2b00      	cmp	r3, #0
   b4d56:	f6bf aead 	bge.w	b4ab4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4d5a:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d5e:	2b00      	cmp	r3, #0
   b4d60:	f6bf aea8 	bge.w	b4ab4 <_ZN17Adafruit_NeoPixel4showEv+0x60>
   b4d64:	e725      	b.n	b4bb2 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b4d66:	bf00      	nop
   b4d68:	000b8c20 	.word	0x000b8c20
   b4d6c:	4001c000 	.word	0x4001c000
   b4d70:	40021000 	.word	0x40021000
   b4d74:	40022000 	.word	0x40022000
   b4d78:	2003e6b4 	.word	0x2003e6b4
   b4d7c:	e0001000 	.word	0xe0001000
   b4d80:	e000ed00 	.word	0xe000ed00
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d84:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d88:	2b00      	cmp	r3, #0
   b4d8a:	f6bf ae8d 	bge.w	b4aa8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d8e:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d92:	2b00      	cmp	r3, #0
   b4d94:	f6bf ae88 	bge.w	b4aa8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   b4d98:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   b4d9c:	2b00      	cmp	r3, #0
   b4d9e:	f6bf ae83 	bge.w	b4aa8 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   b4da2:	e706      	b.n	b4bb2 <_ZN17Adafruit_NeoPixel4showEv+0x15e>
   b4da4:	4770      	bx	lr
    for(uint16_t n=0; n<numBytes; n++) {
   b4da6:	2304      	movs	r3, #4
   b4da8:	2102      	movs	r1, #2
   b4daa:	e783      	b.n	b4cb4 <_ZN17Adafruit_NeoPixel4showEv+0x260>

000b4dac <_ZN17Adafruit_NeoPixel13setPixelColorEtm>:
}

// Set pixel color from 'packed' 32-bit RGB color:
// If RGB+W color, order of bytes is WRGB in packed 32-bit form
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
  if(n < numLEDs) {
   b4dac:	8843      	ldrh	r3, [r0, #2]
   b4dae:	428b      	cmp	r3, r1
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
   b4db0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   b4db2:	d92d      	bls.n	b4e10 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
    uint8_t
      r = (uint8_t)(c >> 16),
      g = (uint8_t)(c >>  8),
      b = (uint8_t)c;
    if(brightness) { // See notes in setBrightness()
   b4db4:	7a06      	ldrb	r6, [r0, #8]
   b4db6:	f3c2 4307 	ubfx	r3, r2, #16, #8
   b4dba:	f3c2 2407 	ubfx	r4, r2, #8, #8
   b4dbe:	b2d5      	uxtb	r5, r2
   b4dc0:	b13e      	cbz	r6, b4dd2 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x26>
      r = (r * brightness) >> 8;
   b4dc2:	4373      	muls	r3, r6
      g = (g * brightness) >> 8;
   b4dc4:	4374      	muls	r4, r6
      b = (b * brightness) >> 8;
   b4dc6:	4375      	muls	r5, r6
      r = (r * brightness) >> 8;
   b4dc8:	f3c3 2307 	ubfx	r3, r3, #8, #8
      g = (g * brightness) >> 8;
   b4dcc:	f3c4 2407 	ubfx	r4, r4, #8, #8
      b = (b * brightness) >> 8;
   b4dd0:	0a2d      	lsrs	r5, r5, #8
    }
    uint8_t *p = &pixels[n * (type==SK6812RGBW?4:3)];
   b4dd2:	f890 c006 	ldrb.w	ip, [r0, #6]
   b4dd6:	68c7      	ldr	r7, [r0, #12]
   b4dd8:	f1bc 0f06 	cmp.w	ip, #6
   b4ddc:	bf0c      	ite	eq
   b4dde:	2604      	moveq	r6, #4
   b4de0:	2603      	movne	r6, #3
   b4de2:	434e      	muls	r6, r1
   b4de4:	f1ac 0c02 	sub.w	ip, ip, #2
   b4de8:	19b9      	adds	r1, r7, r6
    switch(type) {
   b4dea:	f1bc 0f06 	cmp.w	ip, #6
   b4dee:	d81d      	bhi.n	b4e2c <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x80>
   b4df0:	e8df f00c 	tbb	[pc, ip]
   b4df4:	04081c04 	.word	0x04081c04
   b4df8:	040f      	.short	0x040f
   b4dfa:	04          	.byte	0x04
   b4dfb:	00          	.byte	0x00
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   b4dfc:	55bc      	strb	r4, [r7, r6]
          *p++ = r;
   b4dfe:	704b      	strb	r3, [r1, #1]
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
          *p++ = g;
          *p = b;
   b4e00:	708d      	strb	r5, [r1, #2]
        } break;
    }
  }
}
   b4e02:	e005      	b.n	b4e10 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p++ = r;
   b4e04:	2bfe      	cmp	r3, #254	; 0xfe
   b4e06:	bf28      	it	cs
   b4e08:	23fe      	movcs	r3, #254	; 0xfe
   b4e0a:	55bb      	strb	r3, [r7, r6]
          *p++ = b;
   b4e0c:	704d      	strb	r5, [r1, #1]
          *p = g;
   b4e0e:	708c      	strb	r4, [r1, #2]
}
   b4e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p++ = r;
   b4e12:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b4e14:	704c      	strb	r4, [r1, #1]
          *p++ = b;
   b4e16:	708d      	strb	r5, [r1, #2]
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4e18:	7a03      	ldrb	r3, [r0, #8]
          uint8_t w = (uint8_t)(c >> 24);
   b4e1a:	0e12      	lsrs	r2, r2, #24
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4e1c:	b913      	cbnz	r3, b4e24 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x78>
          uint8_t w = (uint8_t)(c >> 24);
   b4e1e:	b2d2      	uxtb	r2, r2
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4e20:	70ca      	strb	r2, [r1, #3]
        } break;
   b4e22:	e7f5      	b.n	b4e10 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x64>
          *p = brightness ? ((w * brightness) >> 8) : w;
   b4e24:	435a      	muls	r2, r3
   b4e26:	f3c2 2207 	ubfx	r2, r2, #8, #8
   b4e2a:	e7f9      	b.n	b4e20 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x74>
          *p++ = r;
   b4e2c:	55bb      	strb	r3, [r7, r6]
          *p++ = g;
   b4e2e:	704c      	strb	r4, [r1, #1]
   b4e30:	e7e6      	b.n	b4e00 <_ZN17Adafruit_NeoPixel13setPixelColorEtm+0x54>

000b4e32 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
   b4e32:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
   b4e34:	1c4a      	adds	r2, r1, #1
   b4e36:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
   b4e38:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
   b4e3a:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
   b4e3c:	d01f      	beq.n	b4e7e <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4c>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
   b4e3e:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b4e40:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
   b4e44:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
   b4e46:	d00c      	beq.n	b4e62 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
   b4e48:	29ff      	cmp	r1, #255	; 0xff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
   b4e4a:	bf1f      	itttt	ne
   b4e4c:	0211      	lslne	r1, r2, #8
   b4e4e:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
   b4e52:	fbb1 f3f3 	udivne	r3, r1, r3
   b4e56:	b29b      	uxthne	r3, r3
    else if(b == 255) scale = 65535 / oldBrightness;
   b4e58:	bf04      	itt	eq
   b4e5a:	f64f 71ff 	movweq	r1, #65535	; 0xffff
   b4e5e:	fbb1 f3f3 	udiveq	r3, r1, r3
            *ptr           = pixels,
   b4e62:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
   b4e64:	8886      	ldrh	r6, [r0, #4]
   b4e66:	1b29      	subs	r1, r5, r4
   b4e68:	b289      	uxth	r1, r1
   b4e6a:	428e      	cmp	r6, r1
   b4e6c:	d906      	bls.n	b4e7c <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
   b4e6e:	7829      	ldrb	r1, [r5, #0]
   b4e70:	4359      	muls	r1, r3
   b4e72:	f3c1 2107 	ubfx	r1, r1, #8, #8
   b4e76:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
   b4e7a:	e7f3      	b.n	b4e64 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
   b4e7c:	7202      	strb	r2, [r0, #8]
  }
}
   b4e7e:	bd70      	pop	{r4, r5, r6, pc}

000b4e80 <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   b4e80:	8882      	ldrh	r2, [r0, #4]
   b4e82:	68c0      	ldr	r0, [r0, #12]
   b4e84:	2100      	movs	r1, #0
   b4e86:	f003 bcb7 	b.w	b87f8 <memset>
	...

000b4e8c <_GLOBAL__sub_I_PIN_MAP2>:
}
   b4e8c:	b508      	push	{r3, lr}
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   b4e8e:	f001 f961 	bl	b6154 <HAL_Pin_Map>
   b4e92:	4b01      	ldr	r3, [pc, #4]	; (b4e98 <_GLOBAL__sub_I_PIN_MAP2+0xc>)
   b4e94:	6018      	str	r0, [r3, #0]
}
   b4e96:	bd08      	pop	{r3, pc}
   b4e98:	2003e6b4 	.word	0x2003e6b4

000b4e9c <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
   b4e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4ea0:	b085      	sub	sp, #20
   b4ea2:	461f      	mov	r7, r3
   b4ea4:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4ea8:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4eac:	eba8 0902 	sub.w	r9, r8, r2
   b4eb0:	eba7 0a01 	sub.w	sl, r7, r1
   b4eb4:	f1b9 0f00 	cmp.w	r9, #0
   b4eb8:	bfb8      	it	lt
   b4eba:	f1c9 0900 	rsblt	r9, r9, #0
   b4ebe:	f1ba 0f00 	cmp.w	sl, #0
   b4ec2:	bfb8      	it	lt
   b4ec4:	f1ca 0a00 	rsblt	sl, sl, #0
  if (steep) {
   b4ec8:	45d1      	cmp	r9, sl
			    uint16_t color) {
   b4eca:	4683      	mov	fp, r0
   b4ecc:	460c      	mov	r4, r1
   b4ece:	4615      	mov	r5, r2
  if (steep) {
   b4ed0:	dd04      	ble.n	b4edc <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
   b4ed2:	463a      	mov	r2, r7
    swap(x0, y0);
   b4ed4:	462c      	mov	r4, r5
    swap(x1, y1);
   b4ed6:	4647      	mov	r7, r8
    swap(x0, y0);
   b4ed8:	460d      	mov	r5, r1
    swap(x1, y1);
   b4eda:	4690      	mov	r8, r2
  }

  if (x0 > x1) {
   b4edc:	42bc      	cmp	r4, r7
   b4ede:	dd05      	ble.n	b4eec <_ZN12Adafruit_GFX8drawLineEsssst+0x50>
   b4ee0:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
   b4ee2:	4645      	mov	r5, r8
   b4ee4:	4690      	mov	r8, r2
  if (x0 > x1) {
   b4ee6:	4622      	mov	r2, r4
   b4ee8:	463c      	mov	r4, r7
   b4eea:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
   b4eec:	1b3e      	subs	r6, r7, r4
   b4eee:	b2b2      	uxth	r2, r6
   b4ef0:	9200      	str	r2, [sp, #0]
  dy = abs(y1 - y0);
   b4ef2:	eba8 0205 	sub.w	r2, r8, r5
   b4ef6:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4efa:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

  int16_t err = dx / 2;
   b4efe:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b4f02:	fa02 f686 	sxtah	r6, r2, r6
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
   b4f06:	4545      	cmp	r5, r8
   b4f08:	bfb4      	ite	lt
   b4f0a:	2201      	movlt	r2, #1
   b4f0c:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
  dy = abs(y1 - y0);
   b4f10:	9101      	str	r1, [sp, #4]
  int16_t err = dx / 2;
   b4f12:	1076      	asrs	r6, r6, #1
    ystep = -1;
   b4f14:	9202      	str	r2, [sp, #8]
  }

  for (; x0<=x1; x0++) {
   b4f16:	42bc      	cmp	r4, r7
   b4f18:	dc1c      	bgt.n	b4f54 <_ZN12Adafruit_GFX8drawLineEsssst+0xb8>
    if (steep) {
      drawPixel(y0, x0, color);
   b4f1a:	f8db 2000 	ldr.w	r2, [fp]
   b4f1e:	9303      	str	r3, [sp, #12]
    if (steep) {
   b4f20:	45d1      	cmp	r9, sl
      drawPixel(y0, x0, color);
   b4f22:	f8d2 8010 	ldr.w	r8, [r2, #16]
   b4f26:	bfc7      	ittee	gt
   b4f28:	4629      	movgt	r1, r5
   b4f2a:	4622      	movgt	r2, r4
    } else {
      drawPixel(x0, y0, color);
   b4f2c:	462a      	movle	r2, r5
   b4f2e:	4621      	movle	r1, r4
   b4f30:	4658      	mov	r0, fp
   b4f32:	47c0      	blx	r8
    }
    err -= dy;
   b4f34:	9a01      	ldr	r2, [sp, #4]
      drawPixel(x0, y0, color);
   b4f36:	9b03      	ldr	r3, [sp, #12]
    err -= dy;
   b4f38:	1ab6      	subs	r6, r6, r2
   b4f3a:	b2b1      	uxth	r1, r6
   b4f3c:	b236      	sxth	r6, r6
    if (err < 0) {
   b4f3e:	2e00      	cmp	r6, #0
   b4f40:	da05      	bge.n	b4f4e <_ZN12Adafruit_GFX8drawLineEsssst+0xb2>
      y0 += ystep;
   b4f42:	9a02      	ldr	r2, [sp, #8]
   b4f44:	4415      	add	r5, r2
      err += dx;
   b4f46:	9a00      	ldr	r2, [sp, #0]
   b4f48:	1856      	adds	r6, r2, r1
      y0 += ystep;
   b4f4a:	b22d      	sxth	r5, r5
      err += dx;
   b4f4c:	b236      	sxth	r6, r6
  for (; x0<=x1; x0++) {
   b4f4e:	3401      	adds	r4, #1
   b4f50:	b224      	sxth	r4, r4
   b4f52:	e7e0      	b.n	b4f16 <_ZN12Adafruit_GFX8drawLineEsssst+0x7a>
    }
  }
}
   b4f54:	b005      	add	sp, #20
   b4f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4f5a <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
   b4f5a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4f5e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
   b4f62:	6807      	ldr	r7, [r0, #0]
			    uint16_t color) {
   b4f64:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
   b4f68:	f8cd 8000 	str.w	r8, [sp]
			    uint16_t color) {
   b4f6c:	4604      	mov	r4, r0
  drawFastHLine(x, y, w, color);
   b4f6e:	69ff      	ldr	r7, [r7, #28]
			    uint16_t color) {
   b4f70:	4616      	mov	r6, r2
   b4f72:	468a      	mov	sl, r1
   b4f74:	461d      	mov	r5, r3
  drawFastHLine(x, y, w, color);
   b4f76:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
   b4f78:	6823      	ldr	r3, [r4, #0]
   b4f7a:	f8cd 8000 	str.w	r8, [sp]
   b4f7e:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b4f82:	4432      	add	r2, r6
   b4f84:	69df      	ldr	r7, [r3, #28]
   b4f86:	4651      	mov	r1, sl
   b4f88:	462b      	mov	r3, r5
   b4f8a:	4620      	mov	r0, r4
   b4f8c:	b212      	sxth	r2, r2
   b4f8e:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
   b4f90:	6823      	ldr	r3, [r4, #0]
   b4f92:	f8cd 8000 	str.w	r8, [sp]
   b4f96:	699f      	ldr	r7, [r3, #24]
   b4f98:	4632      	mov	r2, r6
   b4f9a:	464b      	mov	r3, r9
   b4f9c:	4651      	mov	r1, sl
   b4f9e:	4620      	mov	r0, r4
   b4fa0:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
   b4fa2:	1e6b      	subs	r3, r5, #1
   b4fa4:	eb03 010a 	add.w	r1, r3, sl
   b4fa8:	6823      	ldr	r3, [r4, #0]
   b4faa:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   b4fae:	699d      	ldr	r5, [r3, #24]
   b4fb0:	4632      	mov	r2, r6
   b4fb2:	464b      	mov	r3, r9
   b4fb4:	b209      	sxth	r1, r1
   b4fb6:	4620      	mov	r0, r4
   b4fb8:	46ac      	mov	ip, r5
}
   b4fba:	b002      	add	sp, #8
   b4fbc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawFastVLine(x+w-1, y, h, color);
   b4fc0:	4760      	bx	ip

000b4fc2 <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
   b4fc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
   b4fc4:	3b01      	subs	r3, #1
   b4fc6:	4413      	add	r3, r2
   b4fc8:	6804      	ldr	r4, [r0, #0]
   b4fca:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b4fce:	9501      	str	r5, [sp, #4]
   b4fd0:	b21b      	sxth	r3, r3
   b4fd2:	9300      	str	r3, [sp, #0]
   b4fd4:	6964      	ldr	r4, [r4, #20]
   b4fd6:	460b      	mov	r3, r1
   b4fd8:	47a0      	blx	r4
}
   b4fda:	b003      	add	sp, #12
   b4fdc:	bd30      	pop	{r4, r5, pc}

000b4fde <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
   b4fde:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
   b4fe0:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   b4fe4:	6804      	ldr	r4, [r0, #0]
   b4fe6:	e9cd 2500 	strd	r2, r5, [sp]
   b4fea:	3b01      	subs	r3, #1
   b4fec:	440b      	add	r3, r1
   b4fee:	6964      	ldr	r4, [r4, #20]
   b4ff0:	b21b      	sxth	r3, r3
   b4ff2:	47a0      	blx	r4
}
   b4ff4:	b003      	add	sp, #12
   b4ff6:	bd30      	pop	{r4, r5, pc}

000b4ff8 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
   b4ff8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4ffc:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5000:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5004:	4605      	mov	r5, r0
   b5006:	4692      	mov	sl, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
   b5008:	460c      	mov	r4, r1
   b500a:	18ce      	adds	r6, r1, r3
   b500c:	42b4      	cmp	r4, r6
   b500e:	da0b      	bge.n	b5028 <_ZN12Adafruit_GFX8fillRectEsssst+0x30>
    drawFastVLine(i, y, h, color);
   b5010:	682b      	ldr	r3, [r5, #0]
   b5012:	f8cd 8000 	str.w	r8, [sp]
   b5016:	699f      	ldr	r7, [r3, #24]
   b5018:	4621      	mov	r1, r4
   b501a:	464b      	mov	r3, r9
   b501c:	4652      	mov	r2, sl
   b501e:	4628      	mov	r0, r5
   b5020:	3401      	adds	r4, #1
   b5022:	47b8      	blx	r7
  for (int16_t i=x; i<x+w; i++) {
   b5024:	b224      	sxth	r4, r4
   b5026:	e7f1      	b.n	b500c <_ZN12Adafruit_GFX8fillRectEsssst+0x14>
  }
}
   b5028:	b002      	add	sp, #8
   b502a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b502e <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
   b502e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
   b5030:	6802      	ldr	r2, [r0, #0]
   b5032:	9101      	str	r1, [sp, #4]
   b5034:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5038:	9100      	str	r1, [sp, #0]
   b503a:	6a54      	ldr	r4, [r2, #36]	; 0x24
   b503c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5040:	2200      	movs	r2, #0
   b5042:	4611      	mov	r1, r2
   b5044:	47a0      	blx	r4
}
   b5046:	b002      	add	sp, #8
   b5048:	bd10      	pop	{r4, pc}

000b504a <_ZN12Adafruit_GFX13invertDisplayEb>:
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
  // Do nothing, must be subclassed if supported
}
   b504a:	4770      	bx	lr

000b504c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b504c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
   b504e:	8142      	strh	r2, [r0, #10]
  _height   = HEIGHT;
   b5050:	81c2      	strh	r2, [r0, #14]
  textcolor = textbgcolor = 0xFFFF;
   b5052:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    Print() : write_error(0) {}
   b5056:	2400      	movs	r4, #0
  WIDTH(w), HEIGHT(h)
   b5058:	4d05      	ldr	r5, [pc, #20]	; (b5070 <_ZN12Adafruit_GFXC1Ess+0x24>)
  textcolor = textbgcolor = 0xFFFF;
   b505a:	6142      	str	r2, [r0, #20]
  textsize  = 1;
   b505c:	2201      	movs	r2, #1
   b505e:	6044      	str	r4, [r0, #4]
  WIDTH(w), HEIGHT(h)
   b5060:	6005      	str	r5, [r0, #0]
   b5062:	8101      	strh	r1, [r0, #8]
  _width    = WIDTH;
   b5064:	8181      	strh	r1, [r0, #12]
  cursor_y  = cursor_x    = 0;
   b5066:	6104      	str	r4, [r0, #16]
  textsize  = 1;
   b5068:	8302      	strh	r2, [r0, #24]
  wrap      = true;
   b506a:	7682      	strb	r2, [r0, #26]
}
   b506c:	bd30      	pop	{r4, r5, pc}
   b506e:	bf00      	nop
   b5070:	000b9138 	.word	0x000b9138

000b5074 <_ZN12Adafruit_GFX8drawCharEsshtth>:
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5078:	ed2d 8b02 	vpush	{d8}
   b507c:	b08d      	sub	sp, #52	; 0x34
   b507e:	4607      	mov	r7, r0
   b5080:	9104      	str	r1, [sp, #16]
   b5082:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
   b5086:	9105      	str	r1, [sp, #20]
   b5088:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
   b508c:	9106      	str	r1, [sp, #24]
  if((x >= _width)            || // Clip right
   b508e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   b5092:	9804      	ldr	r0, [sp, #16]
			    uint16_t color, uint16_t bg, uint8_t size) {
   b5094:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
  if((x >= _width)            || // Clip right
   b5098:	4281      	cmp	r1, r0
   b509a:	dd52      	ble.n	b5142 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
   b509c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
   b50a0:	4291      	cmp	r1, r2
   b50a2:	dd4e      	ble.n	b5142 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((x + 6 * size - 1) < 0) || // Clip left
   b50a4:	2106      	movs	r1, #6
   b50a6:	fb11 0405 	smlabb	r4, r1, r5, r0
     (y >= _height)           || // Clip bottom
   b50aa:	2c00      	cmp	r4, #0
   b50ac:	dd49      	ble.n	b5142 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
     ((y + 8 * size - 1) < 0))   // Clip top
   b50ae:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
     ((x + 6 * size - 1) < 0) || // Clip left
   b50b2:	2c00      	cmp	r4, #0
   b50b4:	dd45      	ble.n	b5142 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
      line = pgm_read_byte(font+(c*5)+i);
   b50b6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   b50ba:	930b      	str	r3, [sp, #44]	; 0x2c
   b50bc:	b293      	uxth	r3, r2
   b50be:	9307      	str	r3, [sp, #28]
   b50c0:	3308      	adds	r3, #8
   b50c2:	b29b      	uxth	r3, r3
   b50c4:	9108      	str	r1, [sp, #32]
  for (int8_t i=0; i<6; i++ ) {
   b50c6:	2400      	movs	r4, #0
   b50c8:	9309      	str	r3, [sp, #36]	; 0x24
    if (i == 5) 
   b50ca:	2c05      	cmp	r4, #5
      line = pgm_read_byte(font+(c*5)+i);
   b50cc:	bf1c      	itt	ne
   b50ce:	4b2c      	ldrne	r3, [pc, #176]	; (b5180 <_ZN12Adafruit_GFX8drawCharEsshtth+0x10c>)
   b50d0:	9a0b      	ldrne	r2, [sp, #44]	; 0x2c
   b50d2:	9e07      	ldr	r6, [sp, #28]
   b50d4:	bf16      	itet	ne
   b50d6:	191b      	addne	r3, r3, r4
      line = 0x0;
   b50d8:	2300      	moveq	r3, #0
      line = pgm_read_byte(font+(c*5)+i);
   b50da:	5c9b      	ldrbne	r3, [r3, r2]
      line = 0x0;
   b50dc:	9303      	str	r3, [sp, #12]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b50de:	9a04      	ldr	r2, [sp, #16]
   b50e0:	b2ab      	uxth	r3, r5
   b50e2:	930a      	str	r3, [sp, #40]	; 0x28
   b50e4:	fb04 f305 	mul.w	r3, r4, r5
   b50e8:	fa13 f382 	uxtah	r3, r3, r2
   b50ec:	b21b      	sxth	r3, r3
          drawPixel(x+i, y+j, bg);
   b50ee:	eb04 0a02 	add.w	sl, r4, r2
          fillRect(x+i*size, y+j*size, size, size, bg);
   b50f2:	ee08 3a10 	vmov	s16, r3
   b50f6:	46b0      	mov	r8, r6
   b50f8:	fa0f f985 	sxth.w	r9, r5
          drawPixel(x+i, y+j, bg);
   b50fc:	fa0f fa8a 	sxth.w	sl, sl
      if (line & 0x1) {
   b5100:	9b03      	ldr	r3, [sp, #12]
   b5102:	07db      	lsls	r3, r3, #31
   b5104:	d52f      	bpl.n	b5166 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf2>
        if (size == 1) // default size
   b5106:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5108:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b510a:	d11f      	bne.n	b514c <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, color);
   b510c:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5110:	9b05      	ldr	r3, [sp, #20]
          drawPixel(x+i, y+j, bg);
   b5112:	b232      	sxth	r2, r6
   b5114:	4651      	mov	r1, sl
   b5116:	4638      	mov	r0, r7
   b5118:	47d8      	blx	fp
      line >>= 1;
   b511a:	9b03      	ldr	r3, [sp, #12]
   b511c:	085b      	lsrs	r3, r3, #1
   b511e:	9303      	str	r3, [sp, #12]
    for (int8_t j = 0; j<8; j++) {
   b5120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5122:	3601      	adds	r6, #1
   b5124:	4498      	add	r8, r3
   b5126:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5128:	b2b6      	uxth	r6, r6
   b512a:	42b3      	cmp	r3, r6
   b512c:	fa1f f888 	uxth.w	r8, r8
   b5130:	d1e6      	bne.n	b5100 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8c>
  for (int8_t i=0; i<6; i++ ) {
   b5132:	9b08      	ldr	r3, [sp, #32]
   b5134:	3b01      	subs	r3, #1
   b5136:	3401      	adds	r4, #1
   b5138:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b513c:	b264      	sxtb	r4, r4
   b513e:	9308      	str	r3, [sp, #32]
   b5140:	d1c3      	bne.n	b50ca <_ZN12Adafruit_GFX8drawCharEsshtth+0x56>
}
   b5142:	b00d      	add	sp, #52	; 0x34
   b5144:	ecbd 8b02 	vpop	{d8}
   b5148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fillRect(x+(i*size), y+(j*size), size, size, color);
   b514c:	9a05      	ldr	r2, [sp, #20]
          fillRect(x+i*size, y+j*size, size, size, bg);
   b514e:	e9cd 9200 	strd	r9, r2, [sp]
   b5152:	ee18 1a10 	vmov	r1, s16
   b5156:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   b515a:	fa0f f288 	sxth.w	r2, r8
   b515e:	464b      	mov	r3, r9
   b5160:	4638      	mov	r0, r7
   b5162:	47d8      	blx	fp
   b5164:	e7d9      	b.n	b511a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
      } else if (bg != color) {
   b5166:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   b516a:	4293      	cmp	r3, r2
   b516c:	d0d5      	beq.n	b511a <_ZN12Adafruit_GFX8drawCharEsshtth+0xa6>
        if (size == 1) // default size
   b516e:	2d01      	cmp	r5, #1
          drawPixel(x+i, y+j, color);
   b5170:	683b      	ldr	r3, [r7, #0]
        if (size == 1) // default size
   b5172:	d103      	bne.n	b517c <_ZN12Adafruit_GFX8drawCharEsshtth+0x108>
          drawPixel(x+i, y+j, bg);
   b5174:	f8d3 b010 	ldr.w	fp, [r3, #16]
   b5178:	9b06      	ldr	r3, [sp, #24]
   b517a:	e7ca      	b.n	b5112 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9e>
          fillRect(x+i*size, y+j*size, size, size, bg);
   b517c:	9a06      	ldr	r2, [sp, #24]
   b517e:	e7e6      	b.n	b514e <_ZN12Adafruit_GFX8drawCharEsshtth+0xda>
   b5180:	000b8c34 	.word	0x000b8c34

000b5184 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5184:	b530      	push	{r4, r5, lr}
  if (c == '\n') {
   b5186:	290a      	cmp	r1, #10
size_t Adafruit_GFX::write(uint8_t c) {
   b5188:	b085      	sub	sp, #20
   b518a:	4604      	mov	r4, r0
  if (c == '\n') {
   b518c:	d107      	bne.n	b519e <_ZN12Adafruit_GFX5writeEh+0x1a>
    cursor_y += textsize*8;
   b518e:	7e02      	ldrb	r2, [r0, #24]
      cursor_y += textsize*8;
   b5190:	8a63      	ldrh	r3, [r4, #18]
   b5192:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b5196:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
   b5198:	2300      	movs	r3, #0
   b519a:	8223      	strh	r3, [r4, #16]
   b519c:	e021      	b.n	b51e2 <_ZN12Adafruit_GFX5writeEh+0x5e>
  } else if (c == '\r') {
   b519e:	290d      	cmp	r1, #13
   b51a0:	d01f      	beq.n	b51e2 <_ZN12Adafruit_GFX5writeEh+0x5e>
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
   b51a2:	7e03      	ldrb	r3, [r0, #24]
   b51a4:	9302      	str	r3, [sp, #8]
   b51a6:	8ac3      	ldrh	r3, [r0, #22]
   b51a8:	9301      	str	r3, [sp, #4]
   b51aa:	8a83      	ldrh	r3, [r0, #20]
   b51ac:	9300      	str	r3, [sp, #0]
   b51ae:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
   b51b2:	460b      	mov	r3, r1
   b51b4:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
   b51b8:	f7ff ff5c 	bl	b5074 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
   b51bc:	7e20      	ldrb	r0, [r4, #24]
   b51be:	8a23      	ldrh	r3, [r4, #16]
   b51c0:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   b51c4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b51c8:	7ea1      	ldrb	r1, [r4, #26]
    cursor_x += textsize*6;
   b51ca:	b21b      	sxth	r3, r3
   b51cc:	4602      	mov	r2, r0
   b51ce:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
   b51d0:	b139      	cbz	r1, b51e2 <_ZN12Adafruit_GFX5writeEh+0x5e>
   b51d2:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   b51d6:	f06f 0505 	mvn.w	r5, #5
   b51da:	fb05 1100 	mla	r1, r5, r0, r1
   b51de:	428b      	cmp	r3, r1
   b51e0:	dcd6      	bgt.n	b5190 <_ZN12Adafruit_GFX5writeEh+0xc>
}
   b51e2:	2001      	movs	r0, #1
   b51e4:	b005      	add	sp, #20
   b51e6:	bd30      	pop	{r4, r5, pc}

000b51e8 <_ZN12Adafruit_GFX9setCursorEss>:
  cursor_x = x;
   b51e8:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
   b51ea:	8242      	strh	r2, [r0, #18]
}
   b51ec:	4770      	bx	lr

000b51ee <_ZN12Adafruit_GFX11setTextSizeEh>:
  textsize = (s > 0) ? s : 1;
   b51ee:	2901      	cmp	r1, #1
   b51f0:	bf38      	it	cc
   b51f2:	2101      	movcc	r1, #1
   b51f4:	7601      	strb	r1, [r0, #24]
}
   b51f6:	4770      	bx	lr

000b51f8 <_ZN12Adafruit_GFX12setTextColorEt>:
  textcolor = textbgcolor = c;
   b51f8:	82c1      	strh	r1, [r0, #22]
   b51fa:	8281      	strh	r1, [r0, #20]
}
   b51fc:	4770      	bx	lr

000b51fe <_ZN12Adafruit_GFX11getRotationEv>:
}
   b51fe:	7e40      	ldrb	r0, [r0, #25]
   b5200:	4770      	bx	lr

000b5202 <_ZN12Adafruit_GFX11setRotationEh>:
  rotation = (x & 3);
   b5202:	f001 0303 	and.w	r3, r1, #3
    _height = HEIGHT;
   b5206:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
  rotation = (x & 3);
   b520a:	7643      	strb	r3, [r0, #25]
  switch(rotation) {
   b520c:	07c9      	lsls	r1, r1, #31
    _width  = WIDTH;
   b520e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5212:	bf59      	ittee	pl
   b5214:	8183      	strhpl	r3, [r0, #12]
    _height = HEIGHT;
   b5216:	81c2      	strhpl	r2, [r0, #14]
    _width  = HEIGHT;
   b5218:	8182      	strhmi	r2, [r0, #12]
    _height = WIDTH;
   b521a:	81c3      	strhmi	r3, [r0, #14]
}
   b521c:	4770      	bx	lr

000b521e <_ZN12Adafruit_GFX5widthEv>:
}
   b521e:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
   b5222:	4770      	bx	lr

000b5224 <_ZN12Adafruit_GFX6heightEv>:
}
   b5224:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
   b5228:	4770      	bx	lr
	...

000b522c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b522c:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
   b522e:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5230:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b5234:	2d02      	cmp	r5, #2
   b5236:	d069      	beq.n	b530c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xe0>
   b5238:	2d03      	cmp	r5, #3
   b523a:	f000 8099 	beq.w	b5370 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x144>
   b523e:	2d01      	cmp	r5, #1
   b5240:	d16c      	bne.n	b531c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf0>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
   b5242:	8905      	ldrh	r5, [r0, #8]
   b5244:	43d2      	mvns	r2, r2
   b5246:	442a      	add	r2, r5
   b5248:	b212      	sxth	r2, r2


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
   b524a:	2a00      	cmp	r2, #0
   b524c:	db5d      	blt.n	b530a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b524e:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b5252:	4295      	cmp	r5, r2
   b5254:	dd59      	ble.n	b530a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
   b5256:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
   b5258:	bfbe      	ittt	lt
   b525a:	185b      	addlt	r3, r3, r1
   b525c:	b21b      	sxthlt	r3, r3
    __y = 0;
   b525e:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
   b5260:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b5264:	18cd      	adds	r5, r1, r3
   b5266:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b5268:	bfc4      	itt	gt
   b526a:	1a43      	subgt	r3, r0, r1
   b526c:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
   b526e:	2b00      	cmp	r3, #0
   b5270:	dd4b      	ble.n	b530a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
   b5272:	f3c1 00c4 	ubfx	r0, r1, #3, #5
   b5276:	f8df c120 	ldr.w	ip, [pc, #288]	; b5398 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>
   b527a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
   b527e:	f011 0107 	ands.w	r1, r1, #7
  register uint8_t h = __h;
   b5282:	b2db      	uxtb	r3, r3
  pBuf += x;
   b5284:	eb0c 0002 	add.w	r0, ip, r2
  if(mod) {
   b5288:	d01a      	beq.n	b52c0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x94>
    // mask off the high n bits we want to set 
    mod = 8-mod;
   b528a:	f1c1 0508 	rsb	r5, r1, #8

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
   b528e:	4e40      	ldr	r6, [pc, #256]	; (b5390 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x164>)
    mod = 8-mod;
   b5290:	b2ed      	uxtb	r5, r5

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
   b5292:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b5294:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b5296:	bf3f      	itttt	cc
   b5298:	eba5 0e03 	subcc.w	lr, r5, r3
   b529c:	26ff      	movcc	r6, #255	; 0xff
   b529e:	fa46 f60e 	asrcc.w	r6, r6, lr
   b52a2:	4037      	andcc	r7, r6
    }

    if(color == WHITE) { 
      *pBuf |= mask;
   b52a4:	f81c 6002 	ldrb.w	r6, [ip, r2]
    if(color == WHITE) { 
   b52a8:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b52aa:	bf0c      	ite	eq
   b52ac:	433e      	orreq	r6, r7
    } else {
      *pBuf &= ~mask;
   b52ae:	43be      	bicne	r6, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
   b52b0:	42ab      	cmp	r3, r5
   b52b2:	f80c 6002 	strb.w	r6, [ip, r2]
   b52b6:	d328      	bcc.n	b530a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>

    h -= mod;
   b52b8:	3908      	subs	r1, #8
   b52ba:	440b      	add	r3, r1
   b52bc:	b2db      	uxtb	r3, r3

    pBuf += SSD1306_LCDWIDTH;
   b52be:	3080      	adds	r0, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
   b52c0:	2b07      	cmp	r3, #7
   b52c2:	d919      	bls.n	b52f8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xcc>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b52c4:	2c01      	cmp	r4, #1
   b52c6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b52ca:	bf18      	it	ne
   b52cc:	2500      	movne	r5, #0
   b52ce:	b2ed      	uxtb	r5, r5
   b52d0:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b52d4:	461a      	mov	r2, r3

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
   b52d6:	3a08      	subs	r2, #8
   b52d8:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b52da:	2a07      	cmp	r2, #7
      *pBuf = val;
   b52dc:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b52e0:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b52e4:	d8f7      	bhi.n	b52d6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
      pBuf += SSD1306_LCDWIDTH;
   b52e6:	f1a3 0208 	sub.w	r2, r3, #8
   b52ea:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b52ee:	3201      	adds	r2, #1
   b52f0:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b52f4:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
   b52f8:	b13b      	cbz	r3, b530a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
   b52fa:	4a26      	ldr	r2, [pc, #152]	; (b5394 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
   b52fc:	5cd2      	ldrb	r2, [r2, r3]
    if(color == WHITE) { 
      *pBuf |= mask;
   b52fe:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b5300:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5302:	bf0c      	ite	eq
   b5304:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
   b5306:	4393      	bicne	r3, r2
   b5308:	7003      	strb	r3, [r0, #0]
}
   b530a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b530c:	8945      	ldrh	r5, [r0, #10]
   b530e:	43d2      	mvns	r2, r2
   b5310:	442a      	add	r2, r5
      x -= (w-1);
   b5312:	18cd      	adds	r5, r1, r3
   b5314:	8901      	ldrh	r1, [r0, #8]
   b5316:	1b49      	subs	r1, r1, r5
      y = HEIGHT - y - 1;
   b5318:	b212      	sxth	r2, r2
      x -= (w-1);
   b531a:	b209      	sxth	r1, r1
  if(y < 0 || y >= HEIGHT) { return; }
   b531c:	2a00      	cmp	r2, #0
   b531e:	dbf4      	blt.n	b530a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5320:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b5324:	4295      	cmp	r5, r2
   b5326:	ddf0      	ble.n	b530a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  if(x < 0) { 
   b5328:	2900      	cmp	r1, #0
    w += x;
   b532a:	bfbe      	ittt	lt
   b532c:	185b      	addlt	r3, r3, r1
   b532e:	b21b      	sxthlt	r3, r3
    x = 0;
   b5330:	2100      	movlt	r1, #0
  if( (x + w) > WIDTH) { 
   b5332:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b5336:	18ce      	adds	r6, r1, r3
   b5338:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b533a:	bfc4      	itt	gt
   b533c:	1a6b      	subgt	r3, r5, r1
   b533e:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b5340:	2b00      	cmp	r3, #0
   b5342:	dde2      	ble.n	b530a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b5344:	10d0      	asrs	r0, r2, #3
  pBuf += x;
   b5346:	2580      	movs	r5, #128	; 0x80
   b5348:	fb10 1105 	smlabb	r1, r0, r5, r1
   b534c:	4812      	ldr	r0, [pc, #72]	; (b5398 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)
   b534e:	4401      	add	r1, r0
  register uint8_t mask = 1 << (y&7);
   b5350:	f002 0007 	and.w	r0, r2, #7
   b5354:	2201      	movs	r2, #1
   b5356:	4082      	lsls	r2, r0
  if(color == WHITE) { 
   b5358:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b535a:	b2d2      	uxtb	r2, r2
  if(color == WHITE) { 
   b535c:	440b      	add	r3, r1
   b535e:	d10c      	bne.n	b537a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
    while(w--) { *pBuf++ |= mask; }
   b5360:	428b      	cmp	r3, r1
   b5362:	d0d2      	beq.n	b530a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5364:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5368:	4310      	orrs	r0, r2
   b536a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b536e:	e7f7      	b.n	b5360 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x134>
      y -= (w-1);
   b5370:	18cd      	adds	r5, r1, r3
   b5372:	8941      	ldrh	r1, [r0, #10]
   b5374:	1b49      	subs	r1, r1, r5
   b5376:	b209      	sxth	r1, r1
      break;
   b5378:	e767      	b.n	b524a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
    mask = ~mask;
   b537a:	43d2      	mvns	r2, r2
   b537c:	b2d2      	uxtb	r2, r2
    while(w--) { *pBuf++ &= mask; }
   b537e:	428b      	cmp	r3, r1
   b5380:	d0c3      	beq.n	b530a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
   b5382:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5386:	4010      	ands	r0, r2
   b5388:	f801 0c01 	strb.w	r0, [r1, #-1]
   b538c:	e7f7      	b.n	b537e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
   b538e:	bf00      	nop
   b5390:	2003d7f0 	.word	0x2003d7f0
   b5394:	2003d7e8 	.word	0x2003d7e8
   b5398:	2003d7f8 	.word	0x2003d7f8

000b539c <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b539c:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(rotation) { 
   b539e:	7e45      	ldrb	r5, [r0, #25]
void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
   b53a0:	f8bd 4014 	ldrh.w	r4, [sp, #20]
  switch(rotation) { 
   b53a4:	2d02      	cmp	r5, #2
   b53a6:	d034      	beq.n	b5412 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x76>
   b53a8:	2d03      	cmp	r5, #3
   b53aa:	f000 809b 	beq.w	b54e4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x148>
   b53ae:	2d01      	cmp	r5, #1
   b53b0:	d137      	bne.n	b5422 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x86>
      x -= (h-1);
   b53b2:	18d5      	adds	r5, r2, r3
   b53b4:	8902      	ldrh	r2, [r0, #8]
   b53b6:	1b52      	subs	r2, r2, r5
   b53b8:	b212      	sxth	r2, r2
  if(y < 0 || y >= HEIGHT) { return; }
   b53ba:	2900      	cmp	r1, #0
   b53bc:	f2c0 8091 	blt.w	b54e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b53c0:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
   b53c4:	428d      	cmp	r5, r1
   b53c6:	f340 808c 	ble.w	b54e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(x < 0) { 
   b53ca:	2a00      	cmp	r2, #0
    w += x;
   b53cc:	bfbe      	ittt	lt
   b53ce:	189b      	addlt	r3, r3, r2
   b53d0:	b21b      	sxthlt	r3, r3
    x = 0;
   b53d2:	2200      	movlt	r2, #0
  if( (x + w) > WIDTH) { 
   b53d4:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
   b53d8:	18d6      	adds	r6, r2, r3
   b53da:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
   b53dc:	bfc4      	itt	gt
   b53de:	1aab      	subgt	r3, r5, r2
   b53e0:	b21b      	sxthgt	r3, r3
  if(w <= 0) { return; }
   b53e2:	2b00      	cmp	r3, #0
   b53e4:	dd7d      	ble.n	b54e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
   b53e6:	10c8      	asrs	r0, r1, #3
  pBuf += x;
   b53e8:	2580      	movs	r5, #128	; 0x80
   b53ea:	fb10 2205 	smlabb	r2, r0, r5, r2
   b53ee:	4845      	ldr	r0, [pc, #276]	; (b5504 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>)
   b53f0:	4402      	add	r2, r0
  register uint8_t mask = 1 << (y&7);
   b53f2:	f001 0007 	and.w	r0, r1, #7
   b53f6:	2101      	movs	r1, #1
   b53f8:	4081      	lsls	r1, r0
  if(color == WHITE) { 
   b53fa:	2c01      	cmp	r4, #1
  register uint8_t mask = 1 << (y&7);
   b53fc:	b2c9      	uxtb	r1, r1
  if(color == WHITE) { 
   b53fe:	4413      	add	r3, r2
   b5400:	d175      	bne.n	b54ee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
    while(w--) { *pBuf++ |= mask; }
   b5402:	429a      	cmp	r2, r3
   b5404:	d06d      	beq.n	b54e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5406:	f812 0b01 	ldrb.w	r0, [r2], #1
   b540a:	4308      	orrs	r0, r1
   b540c:	f802 0c01 	strb.w	r0, [r2, #-1]
   b5410:	e7f7      	b.n	b5402 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x66>
      x = WIDTH - x - 1;
   b5412:	8905      	ldrh	r5, [r0, #8]
   b5414:	43c9      	mvns	r1, r1
   b5416:	4429      	add	r1, r5
      y -= (h-1);
   b5418:	18d5      	adds	r5, r2, r3
   b541a:	8942      	ldrh	r2, [r0, #10]
   b541c:	1b52      	subs	r2, r2, r5
      x = WIDTH - x - 1;
   b541e:	b209      	sxth	r1, r1
      y -= (h-1);
   b5420:	b212      	sxth	r2, r2
  if(x < 0 || x >= WIDTH) { return; }
   b5422:	2900      	cmp	r1, #0
   b5424:	db5d      	blt.n	b54e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b5426:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
   b542a:	428d      	cmp	r5, r1
   b542c:	dd59      	ble.n	b54e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  if(__y < 0) { 
   b542e:	2a00      	cmp	r2, #0
    __h += __y;
   b5430:	bfbe      	ittt	lt
   b5432:	189b      	addlt	r3, r3, r2
   b5434:	b21b      	sxthlt	r3, r3
    __y = 0;
   b5436:	2200      	movlt	r2, #0
  if( (__y + __h) > HEIGHT) { 
   b5438:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
   b543c:	18d5      	adds	r5, r2, r3
   b543e:	4285      	cmp	r5, r0
    __h = (HEIGHT - __y);
   b5440:	bfc4      	itt	gt
   b5442:	1a83      	subgt	r3, r0, r2
   b5444:	b21b      	sxthgt	r3, r3
  if(__h <= 0) { 
   b5446:	2b00      	cmp	r3, #0
   b5448:	dd4b      	ble.n	b54e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
  pBuf += x;
   b544a:	f3c2 00c4 	ubfx	r0, r2, #3, #5
   b544e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b5504 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x168>
   b5452:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
  if(mod) {
   b5456:	f012 0207 	ands.w	r2, r2, #7
  register uint8_t h = __h;
   b545a:	b2db      	uxtb	r3, r3
  pBuf += x;
   b545c:	eb0c 0001 	add.w	r0, ip, r1
  if(mod) {
   b5460:	d01a      	beq.n	b5498 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfc>
    mod = 8-mod;
   b5462:	f1c2 0508 	rsb	r5, r2, #8
    register uint8_t mask = premask[mod];
   b5466:	4e28      	ldr	r6, [pc, #160]	; (b5508 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    mod = 8-mod;
   b5468:	b2ed      	uxtb	r5, r5
    if( h < mod) { 
   b546a:	42ab      	cmp	r3, r5
    register uint8_t mask = premask[mod];
   b546c:	5d77      	ldrb	r7, [r6, r5]
      mask &= (0XFF >> (mod-h));
   b546e:	bf3f      	itttt	cc
   b5470:	eba5 0e03 	subcc.w	lr, r5, r3
   b5474:	26ff      	movcc	r6, #255	; 0xff
   b5476:	fa46 f60e 	asrcc.w	r6, r6, lr
   b547a:	4037      	andcc	r7, r6
      *pBuf |= mask;
   b547c:	f81c 6001 	ldrb.w	r6, [ip, r1]
    if(color == WHITE) { 
   b5480:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b5482:	bf0c      	ite	eq
   b5484:	433e      	orreq	r6, r7
      *pBuf &= ~mask;
   b5486:	43be      	bicne	r6, r7
    if(h<mod) { return; }
   b5488:	42ab      	cmp	r3, r5
   b548a:	f80c 6001 	strb.w	r6, [ip, r1]
   b548e:	d328      	bcc.n	b54e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    h -= mod;
   b5490:	3a08      	subs	r2, #8
   b5492:	4413      	add	r3, r2
   b5494:	b2db      	uxtb	r3, r3
    pBuf += SSD1306_LCDWIDTH;
   b5496:	3080      	adds	r0, #128	; 0x80
  if(h >= 8) { 
   b5498:	2b07      	cmp	r3, #7
   b549a:	d919      	bls.n	b54d0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x134>
    register uint8_t val = (color == WHITE) ? 255 : 0;
   b549c:	2c01      	cmp	r4, #1
   b549e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   b54a2:	bf18      	it	ne
   b54a4:	2500      	movne	r5, #0
   b54a6:	b2ed      	uxtb	r5, r5
   b54a8:	f100 0180 	add.w	r1, r0, #128	; 0x80
   b54ac:	461a      	mov	r2, r3
      h -= 8;
   b54ae:	3a08      	subs	r2, #8
   b54b0:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
   b54b2:	2a07      	cmp	r2, #7
      *pBuf = val;
   b54b4:	f801 5c80 	strb.w	r5, [r1, #-128]
    } while(h >= 8);
   b54b8:	f101 0180 	add.w	r1, r1, #128	; 0x80
   b54bc:	d8f7      	bhi.n	b54ae <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x112>
      pBuf += SSD1306_LCDWIDTH;
   b54be:	f1a3 0208 	sub.w	r2, r3, #8
   b54c2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   b54c6:	3201      	adds	r2, #1
   b54c8:	eb00 10c2 	add.w	r0, r0, r2, lsl #7
      h -= 8;
   b54cc:	f003 0307 	and.w	r3, r3, #7
  if(h) {
   b54d0:	b13b      	cbz	r3, b54e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
    register uint8_t mask = postmask[mod];
   b54d2:	4a0e      	ldr	r2, [pc, #56]	; (b550c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)
   b54d4:	5cd2      	ldrb	r2, [r2, r3]
      *pBuf |= mask;
   b54d6:	7803      	ldrb	r3, [r0, #0]
    if(color == WHITE) { 
   b54d8:	2c01      	cmp	r4, #1
      *pBuf |= mask;
   b54da:	bf0c      	ite	eq
   b54dc:	4313      	orreq	r3, r2
      *pBuf &= ~mask;
   b54de:	4393      	bicne	r3, r2
   b54e0:	7003      	strb	r3, [r0, #0]
}
   b54e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      y = HEIGHT - y - 1;
   b54e4:	8945      	ldrh	r5, [r0, #10]
   b54e6:	43c9      	mvns	r1, r1
   b54e8:	4429      	add	r1, r5
   b54ea:	b209      	sxth	r1, r1
      break;
   b54ec:	e765      	b.n	b53ba <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
    mask = ~mask;
   b54ee:	43c9      	mvns	r1, r1
   b54f0:	b2c9      	uxtb	r1, r1
    while(w--) { *pBuf++ &= mask; }
   b54f2:	429a      	cmp	r2, r3
   b54f4:	d0f5      	beq.n	b54e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x146>
   b54f6:	f812 0b01 	ldrb.w	r0, [r2], #1
   b54fa:	4008      	ands	r0, r1
   b54fc:	f802 0c01 	strb.w	r0, [r2, #-1]
   b5500:	e7f7      	b.n	b54f2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
   b5502:	bf00      	nop
   b5504:	2003d7f8 	.word	0x2003d7f8
   b5508:	2003d7f0 	.word	0x2003d7f0
   b550c:	2003d7e8 	.word	0x2003d7e8

000b5510 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
   b5510:	4770      	bx	lr
	...

000b5514 <_ZN16Adafruit_SSD13069drawPixelEsst>:
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b5516:	1e0d      	subs	r5, r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5518:	4606      	mov	r6, r0
   b551a:	4614      	mov	r4, r2
   b551c:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
   b551e:	db2d      	blt.n	b557c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5520:	f7ff fe7d 	bl	b521e <_ZN12Adafruit_GFX5widthEv>
   b5524:	42a8      	cmp	r0, r5
   b5526:	dd29      	ble.n	b557c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b5528:	2c00      	cmp	r4, #0
   b552a:	db27      	blt.n	b557c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
   b552c:	4630      	mov	r0, r6
   b552e:	f7ff fe79 	bl	b5224 <_ZN12Adafruit_GFX6heightEv>
   b5532:	42a0      	cmp	r0, r4
   b5534:	dd22      	ble.n	b557c <_ZN16Adafruit_SSD13069drawPixelEsst+0x68>
  switch (getRotation()) {
   b5536:	4630      	mov	r0, r6
   b5538:	f7ff fe61 	bl	b51fe <_ZN12Adafruit_GFX11getRotationEv>
   b553c:	2802      	cmp	r0, #2
   b553e:	d01e      	beq.n	b557e <_ZN16Adafruit_SSD13069drawPixelEsst+0x6a>
   b5540:	2803      	cmp	r0, #3
   b5542:	d025      	beq.n	b5590 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
   b5544:	2801      	cmp	r0, #1
   b5546:	d104      	bne.n	b5552 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
   b5548:	8933      	ldrh	r3, [r6, #8]
   b554a:	43e2      	mvns	r2, r4
   b554c:	441a      	add	r2, r3
    break;
   b554e:	462c      	mov	r4, r5
    x = WIDTH - x - 1;
   b5550:	b215      	sxth	r5, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b5552:	2c00      	cmp	r4, #0
   b5554:	4622      	mov	r2, r4
   b5556:	bfb8      	it	lt
   b5558:	1de2      	addlt	r2, r4, #7
   b555a:	10d2      	asrs	r2, r2, #3
   b555c:	2180      	movs	r1, #128	; 0x80
   b555e:	fb12 5501 	smlabb	r5, r2, r1, r5
   b5562:	490e      	ldr	r1, [pc, #56]	; (b559c <_ZN16Adafruit_SSD13069drawPixelEsst+0x88>)
   b5564:	2201      	movs	r2, #1
   b5566:	f004 0407 	and.w	r4, r4, #7
   b556a:	574b      	ldrsb	r3, [r1, r5]
   b556c:	fa02 f404 	lsl.w	r4, r2, r4
   b5570:	b264      	sxtb	r4, r4
  if (color == WHITE) 
   b5572:	4297      	cmp	r7, r2
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
   b5574:	bf0c      	ite	eq
   b5576:	4323      	orreq	r3, r4
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
   b5578:	43a3      	bicne	r3, r4
   b557a:	554b      	strb	r3, [r1, r5]
}
   b557c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    x = WIDTH - x - 1;
   b557e:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
   b5580:	8972      	ldrh	r2, [r6, #10]
    x = WIDTH - x - 1;
   b5582:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
   b5584:	43e4      	mvns	r4, r4
    x = WIDTH - x - 1;
   b5586:	1b4d      	subs	r5, r1, r5
    y = HEIGHT - y - 1;
   b5588:	4414      	add	r4, r2
    x = WIDTH - x - 1;
   b558a:	b22d      	sxth	r5, r5
    y = HEIGHT - y - 1;
   b558c:	b224      	sxth	r4, r4
    break;
   b558e:	e7e0      	b.n	b5552 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    y = HEIGHT - y - 1;
   b5590:	8973      	ldrh	r3, [r6, #10]
   b5592:	3b01      	subs	r3, #1
   b5594:	1b5b      	subs	r3, r3, r5
    break;
   b5596:	4625      	mov	r5, r4
    y = HEIGHT - y - 1;
   b5598:	b21c      	sxth	r4, r3
    break;
   b559a:	e7da      	b.n	b5552 <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
   b559c:	2003d7f8 	.word	0x2003d7f8

000b55a0 <_ZN16Adafruit_SSD1306D0Ev>:
   b55a0:	b510      	push	{r4, lr}
   b55a2:	2124      	movs	r1, #36	; 0x24
   b55a4:	4604      	mov	r4, r0
   b55a6:	f7fe fd78 	bl	b409a <_ZdlPvj>
   b55aa:	4620      	mov	r0, r4
   b55ac:	bd10      	pop	{r4, pc}
	...

000b55b0 <_ZN16Adafruit_SSD1306C1Ea>:
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b55b0:	b538      	push	{r3, r4, r5, lr}
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b55b2:	2240      	movs	r2, #64	; 0x40
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
   b55b4:	4604      	mov	r4, r0
   b55b6:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
   b55b8:	2180      	movs	r1, #128	; 0x80
   b55ba:	f7ff fd47 	bl	b504c <_ZN12Adafruit_GFXC1Ess>
   b55be:	4b06      	ldr	r3, [pc, #24]	; (b55d8 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
   b55c0:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
   b55c2:	23ff      	movs	r3, #255	; 0xff
   b55c4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
   b55c8:	7763      	strb	r3, [r4, #29]
   b55ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b55ce:	83e3      	strh	r3, [r4, #30]
  rst = reset;
   b55d0:	f884 5020 	strb.w	r5, [r4, #32]
}
   b55d4:	4620      	mov	r0, r4
   b55d6:	bd38      	pop	{r3, r4, r5, pc}
   b55d8:	000b9170 	.word	0x000b9170

000b55dc <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   b55dc:	4802      	ldr	r0, [pc, #8]	; (b55e8 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
   b55de:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b55e2:	2100      	movs	r1, #0
   b55e4:	f003 b908 	b.w	b87f8 <memset>
   b55e8:	2003d7f8 	.word	0x2003d7f8

000b55ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   b55ec:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   b55ee:	4c0b      	ldr	r4, [pc, #44]	; (b561c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   b55f0:	7821      	ldrb	r1, [r4, #0]
   b55f2:	f3bf 8f5b 	dmb	ish
   b55f6:	f011 0101 	ands.w	r1, r1, #1
   b55fa:	d10b      	bne.n	b5614 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b55fc:	4620      	mov	r0, r4
   b55fe:	9101      	str	r1, [sp, #4]
   b5600:	f7fe fd5a 	bl	b40b8 <__cxa_guard_acquire>
   b5604:	9901      	ldr	r1, [sp, #4]
   b5606:	b128      	cbz	r0, b5614 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   b5608:	4805      	ldr	r0, [pc, #20]	; (b5620 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b560a:	f001 fba3 	bl	b6d54 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b560e:	4620      	mov	r0, r4
   b5610:	f7fe fd57 	bl	b40c2 <__cxa_guard_release>
        return instance;
    }
   b5614:	4802      	ldr	r0, [pc, #8]	; (b5620 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   b5616:	b002      	add	sp, #8
   b5618:	bd10      	pop	{r4, pc}
   b561a:	bf00      	nop
   b561c:	2003e6b8 	.word	0x2003e6b8
   b5620:	2003e6bc 	.word	0x2003e6bc

000b5624 <_ZN16Adafruit_SSD130612fastSPIwriteEh>:
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
   b5624:	b507      	push	{r0, r1, r2, lr}
  if(hwSPI) {
   b5626:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   b562a:	b143      	cbz	r3, b563e <_ZN16Adafruit_SSD130612fastSPIwriteEh+0x1a>
   b562c:	9101      	str	r1, [sp, #4]
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   b562e:	f7ff ffdd 	bl	b55ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5632:	9901      	ldr	r1, [sp, #4]
}
   b5634:	b003      	add	sp, #12
   b5636:	f85d eb04 	ldr.w	lr, [sp], #4
   b563a:	f001 bc3f 	b.w	b6ebc <_ZN8SPIClass8transferEh>
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b563e:	460b      	mov	r3, r1
   b5640:	7f81      	ldrb	r1, [r0, #30]
   b5642:	7f40      	ldrb	r0, [r0, #29]
   b5644:	2201      	movs	r2, #1
}
   b5646:	b003      	add	sp, #12
   b5648:	f85d eb04 	ldr.w	lr, [sp], #4
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
   b564c:	f002 ba53 	b.w	b7af6 <shiftOut>

000b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b5650:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
   b5652:	f990 301d 	ldrsb.w	r3, [r0, #29]
   b5656:	3301      	adds	r3, #1
void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
   b5658:	4604      	mov	r4, r0
   b565a:	460d      	mov	r5, r1
  if (sid != -1)
   b565c:	d01d      	beq.n	b569a <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x4a>
    digitalWrite(cs, HIGH);
   b565e:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
   b5662:	2101      	movs	r1, #1
   b5664:	b280      	uxth	r0, r0
   b5666:	f002 fa16 	bl	b7a96 <digitalWrite>
    digitalWrite(dc, LOW);
   b566a:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b566e:	2100      	movs	r1, #0
   b5670:	b280      	uxth	r0, r0
   b5672:	f002 fa10 	bl	b7a96 <digitalWrite>
    digitalWrite(cs, LOW);
   b5676:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b567a:	2100      	movs	r1, #0
   b567c:	b280      	uxth	r0, r0
   b567e:	f002 fa0a 	bl	b7a96 <digitalWrite>
    fastSPIwrite(c);
   b5682:	4629      	mov	r1, r5
   b5684:	4620      	mov	r0, r4
   b5686:	f7ff ffcd 	bl	b5624 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    digitalWrite(cs, HIGH);
   b568a:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b568e:	2101      	movs	r1, #1
}
   b5690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    digitalWrite(cs, HIGH);
   b5694:	b280      	uxth	r0, r0
   b5696:	f002 b9fe 	b.w	b7a96 <digitalWrite>
    Wire.beginTransmission(_i2caddr);
   b569a:	f002 fa69 	bl	b7b70 <_Z19__fetch_global_Wirev>
   b569e:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b56a2:	f001 f881 	bl	b67a8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
   b56a6:	f002 fa63 	bl	b7b70 <_Z19__fetch_global_Wirev>
   b56aa:	6803      	ldr	r3, [r0, #0]
   b56ac:	2100      	movs	r1, #0
   b56ae:	689b      	ldr	r3, [r3, #8]
   b56b0:	4798      	blx	r3
    Wire.write(c);
   b56b2:	f002 fa5d 	bl	b7b70 <_Z19__fetch_global_Wirev>
   b56b6:	6803      	ldr	r3, [r0, #0]
   b56b8:	4629      	mov	r1, r5
   b56ba:	689b      	ldr	r3, [r3, #8]
   b56bc:	4798      	blx	r3
    Wire.endTransmission();
   b56be:	f002 fa57 	bl	b7b70 <_Z19__fetch_global_Wirev>
}
   b56c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.endTransmission();
   b56c6:	f001 b876 	b.w	b67b6 <_ZN7TwoWire15endTransmissionEv>
	...

000b56cc <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b56cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ssd1306_command(SSD1306_COLUMNADDR);
   b56ce:	2121      	movs	r1, #33	; 0x21
void Adafruit_SSD1306::display(void) {
   b56d0:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
   b56d2:	f7ff ffbd 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
   b56d6:	2100      	movs	r1, #0
   b56d8:	4620      	mov	r0, r4
   b56da:	f7ff ffb9 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
   b56de:	217f      	movs	r1, #127	; 0x7f
   b56e0:	4620      	mov	r0, r4
   b56e2:	f7ff ffb5 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_PAGEADDR);
   b56e6:	2122      	movs	r1, #34	; 0x22
   b56e8:	4620      	mov	r0, r4
   b56ea:	f7ff ffb1 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
   b56ee:	2100      	movs	r1, #0
   b56f0:	4620      	mov	r0, r4
   b56f2:	f7ff ffad 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
   b56f6:	2107      	movs	r1, #7
   b56f8:	4620      	mov	r0, r4
   b56fa:	f7ff ffa9 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (sid != -1)
   b56fe:	f994 301d 	ldrsb.w	r3, [r4, #29]
   b5702:	4f29      	ldr	r7, [pc, #164]	; (b57a8 <_ZN16Adafruit_SSD13067displayEv+0xdc>)
   b5704:	3301      	adds	r3, #1
   b5706:	d02a      	beq.n	b575e <_ZN16Adafruit_SSD13067displayEv+0x92>
    digitalWrite(cs, HIGH);
   b5708:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b570c:	2101      	movs	r1, #1
   b570e:	b280      	uxth	r0, r0
   b5710:	f002 f9c1 	bl	b7a96 <digitalWrite>
    digitalWrite(dc, HIGH);
   b5714:	f994 001f 	ldrsb.w	r0, [r4, #31]
   b5718:	2101      	movs	r1, #1
   b571a:	b280      	uxth	r0, r0
   b571c:	f002 f9bb 	bl	b7a96 <digitalWrite>
    digitalWrite(cs, LOW);
   b5720:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5724:	2100      	movs	r1, #0
   b5726:	b280      	uxth	r0, r0
   b5728:	f002 f9b5 	bl	b7a96 <digitalWrite>
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b572c:	2001      	movs	r0, #1
   b572e:	f000 fcf1 	bl	b6114 <HAL_Delay_Microseconds>
   b5732:	f44f 6580 	mov.w	r5, #1024	; 0x400
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5736:	3d01      	subs	r5, #1
      fastSPIwrite(buffer[i]);
   b5738:	f817 1b01 	ldrb.w	r1, [r7], #1
   b573c:	4620      	mov	r0, r4
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b573e:	b2ad      	uxth	r5, r5
      fastSPIwrite(buffer[i]);
   b5740:	f7ff ff70 	bl	b5624 <_ZN16Adafruit_SSD130612fastSPIwriteEh>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b5744:	2d00      	cmp	r5, #0
   b5746:	d1f6      	bne.n	b5736 <_ZN16Adafruit_SSD13067displayEv+0x6a>
   b5748:	2001      	movs	r0, #1
   b574a:	f000 fce3 	bl	b6114 <HAL_Delay_Microseconds>
    digitalWrite(cs, HIGH);
   b574e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b5752:	2101      	movs	r1, #1
}
   b5754:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    digitalWrite(cs, HIGH);
   b5758:	b280      	uxth	r0, r0
   b575a:	f002 b99c 	b.w	b7a96 <digitalWrite>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b575e:	2500      	movs	r5, #0
      Wire.beginTransmission(_i2caddr);
   b5760:	f002 fa06 	bl	b7b70 <_Z19__fetch_global_Wirev>
   b5764:	f994 101b 	ldrsb.w	r1, [r4, #27]
   b5768:	f001 f81e 	bl	b67a8 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
   b576c:	f002 fa00 	bl	b7b70 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   b5770:	6803      	ldr	r3, [r0, #0]
   b5772:	2140      	movs	r1, #64	; 0x40
   b5774:	689b      	ldr	r3, [r3, #8]
   b5776:	4798      	blx	r3
      for (uint8_t x=0; x<16; x++) {
   b5778:	f105 0610 	add.w	r6, r5, #16
   b577c:	b2b6      	uxth	r6, r6
		Wire.write(buffer[i]);
   b577e:	f002 f9f7 	bl	b7b70 <_Z19__fetch_global_Wirev>
   b5782:	6803      	ldr	r3, [r0, #0]
   b5784:	5d79      	ldrb	r1, [r7, r5]
   b5786:	689b      	ldr	r3, [r3, #8]
   b5788:	4798      	blx	r3
		i++;
   b578a:	1c6b      	adds	r3, r5, #1
   b578c:	b29d      	uxth	r5, r3
      for (uint8_t x=0; x<16; x++) {
   b578e:	42ae      	cmp	r6, r5
   b5790:	d1f5      	bne.n	b577e <_ZN16Adafruit_SSD13067displayEv+0xb2>
	Wire.endTransmission();
   b5792:	f002 f9ed 	bl	b7b70 <_Z19__fetch_global_Wirev>
   b5796:	f001 f80e 	bl	b67b6 <_ZN7TwoWire15endTransmissionEv>
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
   b579a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b579e:	d100      	bne.n	b57a2 <_ZN16Adafruit_SSD13067displayEv+0xd6>
}
   b57a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b57a2:	4635      	mov	r5, r6
   b57a4:	e7dc      	b.n	b5760 <_ZN16Adafruit_SSD13067displayEv+0x94>
   b57a6:	bf00      	nop
   b57a8:	2003d7f8 	.word	0x2003d7f8

000b57ac <_ZN16Adafruit_SSD13065beginEhh>:
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b57ac:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1){
   b57ae:	f990 301d 	ldrsb.w	r3, [r0, #29]
  _vccstate = vccstate;
   b57b2:	7701      	strb	r1, [r0, #28]
  if (sid != -1){
   b57b4:	3301      	adds	r3, #1
void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
   b57b6:	4604      	mov	r4, r0
   b57b8:	460d      	mov	r5, r1
  _i2caddr = i2caddr;
   b57ba:	76c2      	strb	r2, [r0, #27]
  if (sid != -1){
   b57bc:	f000 80c9 	beq.w	b5952 <_ZN16Adafruit_SSD13065beginEhh+0x1a6>
    pinMode(dc, OUTPUT);
   b57c0:	f990 001f 	ldrsb.w	r0, [r0, #31]
   b57c4:	2101      	movs	r1, #1
   b57c6:	b280      	uxth	r0, r0
   b57c8:	f002 f954 	bl	b7a74 <pinMode>
    pinMode(cs, OUTPUT);
   b57cc:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b57d0:	2101      	movs	r1, #1
   b57d2:	b280      	uxth	r0, r0
   b57d4:	f002 f94e 	bl	b7a74 <pinMode>
    if (!hwSPI){
   b57d8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b57dc:	2b00      	cmp	r3, #0
   b57de:	f000 80a6 	beq.w	b592e <_ZN16Adafruit_SSD13065beginEhh+0x182>
        digitalWrite(cs, HIGH);
   b57e2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
   b57e6:	2101      	movs	r1, #1
   b57e8:	b280      	uxth	r0, r0
   b57ea:	f002 f954 	bl	b7a96 <digitalWrite>
        instance().setBitOrder(order);
   b57ee:	f7ff fefd 	bl	b55ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b57f2:	2101      	movs	r1, #1
   b57f4:	f001 facc 	bl	b6d90 <_ZN8SPIClass11setBitOrderEh>
        instance().setClockDivider(divider);
   b57f8:	f7ff fef8 	bl	b55ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b57fc:	2110      	movs	r1, #16
   b57fe:	f001 fb37 	bl	b6e70 <_ZN8SPIClass15setClockDividerEh>
        instance().setDataMode(mode);
   b5802:	f7ff fef3 	bl	b55ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5806:	2100      	movs	r1, #0
   b5808:	f001 fad6 	bl	b6db8 <_ZN8SPIClass11setDataModeEh>
        instance().begin();
   b580c:	f7ff feee 	bl	b55ec <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   b5810:	f001 faaa 	bl	b6d68 <_ZN8SPIClass5beginEv>
  pinMode(rst, OUTPUT);
   b5814:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5818:	2101      	movs	r1, #1
   b581a:	b280      	uxth	r0, r0
   b581c:	f002 f92a 	bl	b7a74 <pinMode>
  digitalWrite(rst, HIGH);
   b5820:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5824:	2101      	movs	r1, #1
   b5826:	b280      	uxth	r0, r0
   b5828:	f002 f935 	bl	b7a96 <digitalWrite>
  delay(1);
   b582c:	2001      	movs	r0, #1
   b582e:	f000 ff1d 	bl	b666c <delay>
  digitalWrite(rst, LOW);
   b5832:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5836:	2100      	movs	r1, #0
   b5838:	b280      	uxth	r0, r0
   b583a:	f002 f92c 	bl	b7a96 <digitalWrite>
  delay(10);
   b583e:	200a      	movs	r0, #10
   b5840:	f000 ff14 	bl	b666c <delay>
  digitalWrite(rst, HIGH);
   b5844:	f994 0020 	ldrsb.w	r0, [r4, #32]
   b5848:	2101      	movs	r1, #1
   b584a:	b280      	uxth	r0, r0
   b584c:	f002 f923 	bl	b7a96 <digitalWrite>
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   b5850:	4620      	mov	r0, r4
   b5852:	21ae      	movs	r1, #174	; 0xae
   b5854:	f7ff fefc 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   b5858:	4620      	mov	r0, r4
   b585a:	21d5      	movs	r1, #213	; 0xd5
   b585c:	f7ff fef8 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
   b5860:	4620      	mov	r0, r4
   b5862:	2180      	movs	r1, #128	; 0x80
   b5864:	f7ff fef4 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   b5868:	4620      	mov	r0, r4
   b586a:	21a8      	movs	r1, #168	; 0xa8
   b586c:	f7ff fef0 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
   b5870:	4620      	mov	r0, r4
   b5872:	213f      	movs	r1, #63	; 0x3f
   b5874:	f7ff feec 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   b5878:	4620      	mov	r0, r4
   b587a:	21d3      	movs	r1, #211	; 0xd3
   b587c:	f7ff fee8 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
   b5880:	4620      	mov	r0, r4
   b5882:	2100      	movs	r1, #0
   b5884:	f7ff fee4 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   b5888:	4620      	mov	r0, r4
   b588a:	2140      	movs	r1, #64	; 0x40
   b588c:	f7ff fee0 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   b5890:	218d      	movs	r1, #141	; 0x8d
   b5892:	4620      	mov	r0, r4
   b5894:	f7ff fedc 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b5898:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
   b589a:	bf0c      	ite	eq
   b589c:	2110      	moveq	r1, #16
      { ssd1306_command(0x14); }
   b589e:	2114      	movne	r1, #20
   b58a0:	4620      	mov	r0, r4
   b58a2:	f7ff fed5 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   b58a6:	4620      	mov	r0, r4
   b58a8:	2120      	movs	r1, #32
   b58aa:	f7ff fed1 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
   b58ae:	4620      	mov	r0, r4
   b58b0:	2100      	movs	r1, #0
   b58b2:	f7ff fecd 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
   b58b6:	4620      	mov	r0, r4
   b58b8:	21a1      	movs	r1, #161	; 0xa1
   b58ba:	f7ff fec9 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
   b58be:	4620      	mov	r0, r4
   b58c0:	21c8      	movs	r1, #200	; 0xc8
   b58c2:	f7ff fec5 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   b58c6:	4620      	mov	r0, r4
   b58c8:	21da      	movs	r1, #218	; 0xda
   b58ca:	f7ff fec1 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
   b58ce:	4620      	mov	r0, r4
   b58d0:	2112      	movs	r1, #18
   b58d2:	f7ff febd 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   b58d6:	2181      	movs	r1, #129	; 0x81
   b58d8:	4620      	mov	r0, r4
   b58da:	f7ff feb9 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b58de:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
   b58e0:	bf0c      	ite	eq
   b58e2:	219f      	moveq	r1, #159	; 0x9f
      { ssd1306_command(0xCF); }
   b58e4:	21cf      	movne	r1, #207	; 0xcf
   b58e6:	4620      	mov	r0, r4
   b58e8:	f7ff feb2 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   b58ec:	21d9      	movs	r1, #217	; 0xd9
   b58ee:	4620      	mov	r0, r4
   b58f0:	f7ff feae 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
   b58f4:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
   b58f6:	bf0c      	ite	eq
   b58f8:	2122      	moveq	r1, #34	; 0x22
      { ssd1306_command(0xF1); }
   b58fa:	21f1      	movne	r1, #241	; 0xf1
   b58fc:	4620      	mov	r0, r4
   b58fe:	f7ff fea7 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   b5902:	4620      	mov	r0, r4
   b5904:	21db      	movs	r1, #219	; 0xdb
   b5906:	f7ff fea3 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
   b590a:	4620      	mov	r0, r4
   b590c:	2140      	movs	r1, #64	; 0x40
   b590e:	f7ff fe9f 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   b5912:	4620      	mov	r0, r4
   b5914:	21a4      	movs	r1, #164	; 0xa4
   b5916:	f7ff fe9b 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   b591a:	4620      	mov	r0, r4
   b591c:	21a6      	movs	r1, #166	; 0xa6
   b591e:	f7ff fe97 	bl	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b5922:	4620      	mov	r0, r4
   b5924:	21af      	movs	r1, #175	; 0xaf
}
   b5926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   b592a:	f7ff be91 	b.w	b5650 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    	pinMode(sid, OUTPUT);
   b592e:	f994 001d 	ldrsb.w	r0, [r4, #29]
   b5932:	2101      	movs	r1, #1
   b5934:	b280      	uxth	r0, r0
   b5936:	f002 f89d 	bl	b7a74 <pinMode>
    	pinMode(sclk, OUTPUT);
   b593a:	f994 001e 	ldrsb.w	r0, [r4, #30]
   b593e:	2101      	movs	r1, #1
   b5940:	b280      	uxth	r0, r0
   b5942:	f002 f897 	bl	b7a74 <pinMode>
    if (hwSPI){
   b5946:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   b594a:	2b00      	cmp	r3, #0
   b594c:	f43f af62 	beq.w	b5814 <_ZN16Adafruit_SSD13065beginEhh+0x68>
   b5950:	e747      	b.n	b57e2 <_ZN16Adafruit_SSD13065beginEhh+0x36>
    Wire.begin();
   b5952:	f002 f90d 	bl	b7b70 <_Z19__fetch_global_Wirev>
   b5956:	f000 ff1d 	bl	b6794 <_ZN7TwoWire5beginEv>
   b595a:	e75b      	b.n	b5814 <_ZN16Adafruit_SSD13065beginEhh+0x68>

000b595c <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
   b595c:	b510      	push	{r4, lr}
   b595e:	4b05      	ldr	r3, [pc, #20]	; (b5974 <_ZN10JsonBufferD1Ev+0x18>)
   b5960:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
   b5962:	7c03      	ldrb	r3, [r0, #16]
JsonBuffer::~JsonBuffer() {
   b5964:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
   b5966:	b91b      	cbnz	r3, b5970 <_ZN10JsonBufferD1Ev+0x14>
   b5968:	6840      	ldr	r0, [r0, #4]
   b596a:	b108      	cbz	r0, b5970 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
   b596c:	f000 fe4e 	bl	b660c <free>
	}
}
   b5970:	4620      	mov	r0, r4
   b5972:	bd10      	pop	{r4, pc}
   b5974:	000b91a8 	.word	0x000b91a8

000b5978 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
   b5978:	b510      	push	{r4, lr}
   b597a:	4604      	mov	r4, r0
}
   b597c:	f7ff ffee 	bl	b595c <_ZN10JsonBufferD1Ev>
   b5980:	4620      	mov	r0, r4
   b5982:	2114      	movs	r1, #20
   b5984:	f7fe fb89 	bl	b409a <_ZdlPvj>
   b5988:	4620      	mov	r0, r4
   b598a:	bd10      	pop	{r4, pc}

000b598c <_ZN10JsonParserD1Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
   b598c:	b510      	push	{r4, lr}
   b598e:	4b07      	ldr	r3, [pc, #28]	; (b59ac <_ZN10JsonParserD1Ev+0x20>)
   b5990:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
   b5992:	7c03      	ldrb	r3, [r0, #16]
JsonParser::~JsonParser() {
   b5994:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
   b5996:	b91b      	cbnz	r3, b59a0 <_ZN10JsonParserD1Ev+0x14>
   b5998:	6940      	ldr	r0, [r0, #20]
   b599a:	b108      	cbz	r0, b59a0 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
   b599c:	f000 fe36 	bl	b660c <free>
JsonParser::~JsonParser() {
   b59a0:	4620      	mov	r0, r4
   b59a2:	f7ff ffdb 	bl	b595c <_ZN10JsonBufferD1Ev>
	}
}
   b59a6:	4620      	mov	r0, r4
   b59a8:	bd10      	pop	{r4, pc}
   b59aa:	bf00      	nop
   b59ac:	000b91b8 	.word	0x000b91b8

000b59b0 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
   b59b0:	b510      	push	{r4, lr}
   b59b2:	4604      	mov	r4, r0
}
   b59b4:	f7ff ffea 	bl	b598c <_ZN10JsonParserD1Ev>
   b59b8:	4620      	mov	r0, r4
   b59ba:	212c      	movs	r1, #44	; 0x2c
   b59bc:	f7fe fb6d 	bl	b409a <_ZdlPvj>
   b59c0:	4620      	mov	r0, r4
   b59c2:	bd10      	pop	{r4, pc}

000b59c4 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj>:
JsonParser::JsonParser(char *buffer, size_t bufferLen, JsonParserGeneratorRK::jsmntok_t *tokens, size_t maxTokens) :
   b59c4:	b510      	push	{r4, lr}
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
   b59c6:	e9c0 1201 	strd	r1, r2, [r0, #4]
   b59ca:	2200      	movs	r2, #0
   b59cc:	60c2      	str	r2, [r0, #12]
   b59ce:	2201      	movs	r2, #1
   b59d0:	7402      	strb	r2, [r0, #16]
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {
   b59d2:	6143      	str	r3, [r0, #20]
   b59d4:	4a02      	ldr	r2, [pc, #8]	; (b59e0 <_ZN10JsonParserC1EPcjPN21JsonParserGeneratorRK9jsmntok_tEj+0x1c>)
   b59d6:	9b02      	ldr	r3, [sp, #8]
   b59d8:	6002      	str	r2, [r0, #0]
   b59da:	61c3      	str	r3, [r0, #28]
}
   b59dc:	bd10      	pop	{r4, pc}
   b59de:	bf00      	nop
   b59e0:	000b91b8 	.word	0x000b91b8

000b59e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
   b59e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
   b59e8:	6844      	ldr	r4, [r0, #4]
   b59ea:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
   b59ee:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b59f2:	f8d0 e000 	ldr.w	lr, [r0]
   b59f6:	4596      	cmp	lr, r2
   b59f8:	f080 81b9 	bcs.w	b5d6e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
   b59fc:	f811 800e 	ldrb.w	r8, [r1, lr]
   b5a00:	f1b8 0f00 	cmp.w	r8, #0
   b5a04:	f000 81b3 	beq.w	b5d6e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38a>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
   b5a08:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
   b5a0c:	f000 8098 	beq.w	b5b40 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15c>
   b5a10:	d833      	bhi.n	b5a7a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x96>
   b5a12:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
   b5a16:	f000 80a6 	beq.w	b5b66 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
   b5a1a:	d810      	bhi.n	b5a3e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5a>
   b5a1c:	f1a8 0809 	sub.w	r8, r8, #9
   b5a20:	fa5f f888 	uxtb.w	r8, r8
   b5a24:	f1b8 0f17 	cmp.w	r8, #23
   b5a28:	d80d      	bhi.n	b5a46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
   b5a2a:	4d9f      	ldr	r5, [pc, #636]	; (b5ca8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c4>)
   b5a2c:	fa0c f808 	lsl.w	r8, ip, r8
   b5a30:	ea18 0f05 	tst.w	r8, r5
   b5a34:	d007      	beq.n	b5a46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5a36:	6805      	ldr	r5, [r0, #0]
   b5a38:	3501      	adds	r5, #1
   b5a3a:	6005      	str	r5, [r0, #0]
   b5a3c:	e7d9      	b.n	b59f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
		switch (c) {
   b5a3e:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
   b5a42:	f000 8133 	beq.w	b5cac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c8>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5a46:	f8d0 8000 	ldr.w	r8, [r0]
   b5a4a:	4542      	cmp	r2, r8
   b5a4c:	d90e      	bls.n	b5a6c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b5a4e:	f811 5008 	ldrb.w	r5, [r1, r8]
   b5a52:	b15d      	cbz	r5, b5a6c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		switch (js[parser->pos]) {
   b5a54:	2d3a      	cmp	r5, #58	; 0x3a
   b5a56:	f200 8169 	bhi.w	b5d2c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
   b5a5a:	2d1f      	cmp	r5, #31
   b5a5c:	f200 8151 	bhi.w	b5d02 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x31e>
   b5a60:	2d0a      	cmp	r5, #10
   b5a62:	f200 8160 	bhi.w	b5d26 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x342>
   b5a66:	2d08      	cmp	r5, #8
   b5a68:	f240 8156 	bls.w	b5d18 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
	if (tokens == NULL) {
   b5a6c:	2b00      	cmp	r3, #0
   b5a6e:	f040 8162 	bne.w	b5d36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		parser->pos--;
   b5a72:	f108 35ff 	add.w	r5, r8, #4294967295	; 0xffffffff
	parser->pos--;
   b5a76:	6005      	str	r5, [r0, #0]
   b5a78:	e0a5      	b.n	b5bc6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
		switch (c) {
   b5a7a:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b5a7e:	d037      	beq.n	b5af0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b5a80:	d82e      	bhi.n	b5ae0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfc>
   b5a82:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
   b5a86:	d033      	beq.n	b5af0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10c>
   b5a88:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   b5a8c:	d1db      	bne.n	b5a46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
   b5a8e:	2b00      	cmp	r3, #0
   b5a90:	d0d1      	beq.n	b5a36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b5a92:	f04f 0902 	mov.w	r9, #2
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
   b5a96:	6845      	ldr	r5, [r0, #4]
   b5a98:	3d01      	subs	r5, #1
   b5a9a:	eb03 1805 	add.w	r8, r3, r5, lsl #4
   b5a9e:	2d00      	cmp	r5, #0
   b5aa0:	db55      	blt.n	b5b4e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b5aa2:	f8d8 7004 	ldr.w	r7, [r8, #4]
   b5aa6:	3701      	adds	r7, #1
   b5aa8:	d04d      	beq.n	b5b46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
   b5aaa:	f8d8 a008 	ldr.w	sl, [r8, #8]
   b5aae:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
   b5ab2:	d148      	bne.n	b5b46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x162>
						if (token->type != type) {
   b5ab4:	f898 b000 	ldrb.w	fp, [r8]
   b5ab8:	45cb      	cmp	fp, r9
   b5aba:	d14b      	bne.n	b5b54 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
						token->end = parser->pos + 1;
   b5abc:	f10e 0e01 	add.w	lr, lr, #1
						parser->toksuper = -1;
   b5ac0:	f8c0 a008 	str.w	sl, [r0, #8]
						token->end = parser->pos + 1;
   b5ac4:	f8c8 e008 	str.w	lr, [r8, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
   b5ac8:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
   b5acc:	f8de 7004 	ldr.w	r7, [lr, #4]
   b5ad0:	3701      	adds	r7, #1
   b5ad2:	d042      	beq.n	b5b5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
   b5ad4:	f8de 7008 	ldr.w	r7, [lr, #8]
   b5ad8:	3701      	adds	r7, #1
   b5ada:	d13e      	bne.n	b5b5a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x176>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
   b5adc:	6085      	str	r5, [r0, #8]
				break;
   b5ade:	e7aa      	b.n	b5a36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		switch (c) {
   b5ae0:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
   b5ae4:	d1af      	bne.n	b5a46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
				if (tokens == NULL)
   b5ae6:	2b00      	cmp	r3, #0
   b5ae8:	d0a5      	beq.n	b5a36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
   b5aea:	f04f 0901 	mov.w	r9, #1
   b5aee:	e7d2      	b.n	b5a96 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb2>
				count++;
   b5af0:	3401      	adds	r4, #1
				if (tokens == NULL) {
   b5af2:	2b00      	cmp	r3, #0
   b5af4:	d09f      	beq.n	b5a36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	if (parser->toknext >= num_tokens) {
   b5af6:	6845      	ldr	r5, [r0, #4]
   b5af8:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b5afa:	42af      	cmp	r7, r5
   b5afc:	d94a      	bls.n	b5b94 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b0>
	tok = &tokens[parser->toknext++];
   b5afe:	f105 0e01 	add.w	lr, r5, #1
   b5b02:	f8c0 e004 	str.w	lr, [r0, #4]
   b5b06:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
	tok->start = tok->end = -1;
   b5b0a:	e9ce 6601 	strd	r6, r6, [lr, #4]
	tok = &tokens[parser->toknext++];
   b5b0e:	ea4f 1a05 	mov.w	sl, r5, lsl #4
	tok->size = 0;
   b5b12:	2500      	movs	r5, #0
   b5b14:	f8ce 500c 	str.w	r5, [lr, #12]
				if (parser->toksuper != -1) {
   b5b18:	6885      	ldr	r5, [r0, #8]
   b5b1a:	1c6f      	adds	r7, r5, #1
					tokens[parser->toksuper].size++;
   b5b1c:	bf1f      	itttt	ne
   b5b1e:	eb03 1905 	addne.w	r9, r3, r5, lsl #4
   b5b22:	f8d9 500c 	ldrne.w	r5, [r9, #12]
   b5b26:	3501      	addne	r5, #1
   b5b28:	f8c9 500c 	strne.w	r5, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
   b5b2c:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
   b5b30:	bf0c      	ite	eq
   b5b32:	2501      	moveq	r5, #1
   b5b34:	2502      	movne	r5, #2
   b5b36:	f803 500a 	strb.w	r5, [r3, sl]
				token->start = parser->pos;
   b5b3a:	6805      	ldr	r5, [r0, #0]
   b5b3c:	f8ce 5004 	str.w	r5, [lr, #4]
				parser->toksuper = parser->toknext - 1;
   b5b40:	6845      	ldr	r5, [r0, #4]
   b5b42:	3d01      	subs	r5, #1
   b5b44:	e7ca      	b.n	b5adc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xf8>
				for (i = parser->toknext - 1; i >= 0; i--) {
   b5b46:	3d01      	subs	r5, #1
   b5b48:	f1a8 0810 	sub.w	r8, r8, #16
   b5b4c:	e7a7      	b.n	b5a9e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xba>
				if (i == -1) return JSMN_ERROR_INVAL;
   b5b4e:	3501      	adds	r5, #1
   b5b50:	f47f af71 	bne.w	b5a36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
							return JSMN_ERROR_INVAL;
   b5b54:	f06f 0401 	mvn.w	r4, #1
   b5b58:	e01e      	b.n	b5b98 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
				for (; i >= 0; i--) {
   b5b5a:	3d01      	subs	r5, #1
   b5b5c:	1c6f      	adds	r7, r5, #1
   b5b5e:	f1ae 0e10 	sub.w	lr, lr, #16
   b5b62:	d1b3      	bne.n	b5acc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe8>
   b5b64:	e767      	b.n	b5a36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
	parser->pos++;
   b5b66:	f10e 0901 	add.w	r9, lr, #1
   b5b6a:	f8c0 9000 	str.w	r9, [r0]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5b6e:	f8d0 8000 	ldr.w	r8, [r0]
   b5b72:	4542      	cmp	r2, r8
   b5b74:	f240 8093 	bls.w	b5c9e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
   b5b78:	f811 5008 	ldrb.w	r5, [r1, r8]
   b5b7c:	2d00      	cmp	r5, #0
   b5b7e:	f000 808e 	beq.w	b5c9e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ba>
		if (c == '\"') {
   b5b82:	2d22      	cmp	r5, #34	; 0x22
   b5b84:	d130      	bne.n	b5be8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x204>
			if (tokens == NULL) {
   b5b86:	b1f3      	cbz	r3, b5bc6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1e2>
	if (parser->toknext >= num_tokens) {
   b5b88:	6845      	ldr	r5, [r0, #4]
   b5b8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b5b8c:	42af      	cmp	r7, r5
   b5b8e:	d806      	bhi.n	b5b9e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ba>
		parser->pos = start;
   b5b90:	f8c0 e000 	str.w	lr, [r0]
					return JSMN_ERROR_NOMEM;
   b5b94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
			}
		}
	}

	return count;
}
   b5b98:	4620      	mov	r0, r4
   b5b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok = &tokens[parser->toknext++];
   b5b9e:	f105 0e01 	add.w	lr, r5, #1
   b5ba2:	ea4f 1805 	mov.w	r8, r5, lsl #4
   b5ba6:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b5baa:	f8c0 e004 	str.w	lr, [r0, #4]
	tok->start = tok->end = -1;
   b5bae:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b5bb2:	2700      	movs	r7, #0
   b5bb4:	60ef      	str	r7, [r5, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
   b5bb6:	f8d0 e000 	ldr.w	lr, [r0]
	token->type = type;
   b5bba:	f04f 0a03 	mov.w	sl, #3
   b5bbe:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
   b5bc2:	e9c5 9e01 	strd	r9, lr, [r5, #4]
				if (parser->toksuper != -1 && tokens != NULL)
   b5bc6:	6885      	ldr	r5, [r0, #8]
   b5bc8:	1c6f      	adds	r7, r5, #1
				count++;
   b5bca:	f104 0401 	add.w	r4, r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
   b5bce:	f43f af32 	beq.w	b5a36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b5bd2:	2b00      	cmp	r3, #0
   b5bd4:	f43f af2f 	beq.w	b5a36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					tokens[parser->toksuper].size++;
   b5bd8:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b5bdc:	f8de 500c 	ldr.w	r5, [lr, #12]
   b5be0:	3501      	adds	r5, #1
   b5be2:	f8ce 500c 	str.w	r5, [lr, #12]
   b5be6:	e726      	b.n	b5a36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
		if (c == '\\' && parser->pos + 1 < len) {
   b5be8:	2d5c      	cmp	r5, #92	; 0x5c
   b5bea:	d111      	bne.n	b5c10 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b5bec:	f108 0501 	add.w	r5, r8, #1
   b5bf0:	42aa      	cmp	r2, r5
   b5bf2:	d90d      	bls.n	b5c10 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos++;
   b5bf4:	6005      	str	r5, [r0, #0]
			switch (js[parser->pos]) {
   b5bf6:	5d4d      	ldrb	r5, [r1, r5]
   b5bf8:	2d75      	cmp	r5, #117	; 0x75
   b5bfa:	d82b      	bhi.n	b5c54 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b5bfc:	2d6d      	cmp	r5, #109	; 0x6d
   b5bfe:	d80b      	bhi.n	b5c18 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x234>
   b5c00:	2d66      	cmp	r5, #102	; 0x66
   b5c02:	d827      	bhi.n	b5c54 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b5c04:	2d5b      	cmp	r5, #91	; 0x5b
   b5c06:	d81d      	bhi.n	b5c44 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x260>
   b5c08:	2d22      	cmp	r5, #34	; 0x22
   b5c0a:	d001      	beq.n	b5c10 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
   b5c0c:	2d2f      	cmp	r5, #47	; 0x2f
   b5c0e:	d121      	bne.n	b5c54 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5c10:	6805      	ldr	r5, [r0, #0]
   b5c12:	3501      	adds	r5, #1
   b5c14:	6005      	str	r5, [r0, #0]
   b5c16:	e7aa      	b.n	b5b6e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x18a>
   b5c18:	3d6e      	subs	r5, #110	; 0x6e
   b5c1a:	2d07      	cmp	r5, #7
   b5c1c:	d81a      	bhi.n	b5c54 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
   b5c1e:	a701      	add	r7, pc, #4	; (adr r7, b5c24 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>)
   b5c20:	f857 f025 	ldr.w	pc, [r7, r5, lsl #2]
   b5c24:	000b5c11 	.word	0x000b5c11
   b5c28:	000b5c55 	.word	0x000b5c55
   b5c2c:	000b5c55 	.word	0x000b5c55
   b5c30:	000b5c55 	.word	0x000b5c55
   b5c34:	000b5c11 	.word	0x000b5c11
   b5c38:	000b5c55 	.word	0x000b5c55
   b5c3c:	000b5c11 	.word	0x000b5c11
   b5c40:	000b5c5b 	.word	0x000b5c5b
   b5c44:	3d5c      	subs	r5, #92	; 0x5c
   b5c46:	b2ed      	uxtb	r5, r5
   b5c48:	fa0c f505 	lsl.w	r5, ip, r5
   b5c4c:	f240 4741 	movw	r7, #1089	; 0x441
   b5c50:	423d      	tst	r5, r7
   b5c52:	d1dd      	bne.n	b5c10 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
			parser->pos = start;
   b5c54:	f8c0 e000 	str.w	lr, [r0]
				if (r < 0) return r;
   b5c58:	e77c      	b.n	b5b54 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
					parser->pos++;
   b5c5a:	f108 0502 	add.w	r5, r8, #2
   b5c5e:	6005      	str	r5, [r0, #0]
   b5c60:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b5c64:	f8d0 8000 	ldr.w	r8, [r0]
   b5c68:	4542      	cmp	r2, r8
   b5c6a:	d803      	bhi.n	b5c74 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x290>
					parser->pos--;
   b5c6c:	6805      	ldr	r5, [r0, #0]
   b5c6e:	3d01      	subs	r5, #1
   b5c70:	6005      	str	r5, [r0, #0]
					break;
   b5c72:	e7cd      	b.n	b5c10 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x22c>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b5c74:	f811 5008 	ldrb.w	r5, [r1, r8]
   b5c78:	2d00      	cmp	r5, #0
   b5c7a:	d0f7      	beq.n	b5c6c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
   b5c7c:	f1a5 0b30 	sub.w	fp, r5, #48	; 0x30
   b5c80:	f1bb 0f09 	cmp.w	fp, #9
   b5c84:	d904      	bls.n	b5c90 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ac>
   b5c86:	f025 0520 	bic.w	r5, r5, #32
   b5c8a:	3d41      	subs	r5, #65	; 0x41
   b5c8c:	2d05      	cmp	r5, #5
   b5c8e:	d8e1      	bhi.n	b5c54 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
						parser->pos++;
   b5c90:	f108 0501 	add.w	r5, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b5c94:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
   b5c98:	6005      	str	r5, [r0, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
   b5c9a:	d1e3      	bne.n	b5c64 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x280>
   b5c9c:	e7e6      	b.n	b5c6c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x288>
	parser->pos = start;
   b5c9e:	f8c0 e000 	str.w	lr, [r0]
				return JSMN_ERROR_PART;
   b5ca2:	f06f 0402 	mvn.w	r4, #2
   b5ca6:	e777      	b.n	b5b98 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
   b5ca8:	00800013 	.word	0x00800013
				if (tokens != NULL && parser->toksuper != -1 &&
   b5cac:	2b00      	cmp	r3, #0
   b5cae:	f43f aec2 	beq.w	b5a36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
   b5cb2:	6885      	ldr	r5, [r0, #8]
   b5cb4:	1c6f      	adds	r7, r5, #1
   b5cb6:	f43f aebe 	beq.w	b5a36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
   b5cba:	012d      	lsls	r5, r5, #4
   b5cbc:	5d5d      	ldrb	r5, [r3, r5]
   b5cbe:	3d01      	subs	r5, #1
   b5cc0:	2d01      	cmp	r5, #1
   b5cc2:	f67f aeb8 	bls.w	b5a36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b5cc6:	6845      	ldr	r5, [r0, #4]
   b5cc8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   b5ccc:	eb03 1e05 	add.w	lr, r3, r5, lsl #4
   b5cd0:	f1b8 0f00 	cmp.w	r8, #0
   b5cd4:	f6ff aeaf 	blt.w	b5a36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
   b5cd8:	f81e 5c10 	ldrb.w	r5, [lr, #-16]
   b5cdc:	3d01      	subs	r5, #1
   b5cde:	2d01      	cmp	r5, #1
   b5ce0:	d80a      	bhi.n	b5cf8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
   b5ce2:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   b5ce6:	3501      	adds	r5, #1
   b5ce8:	d006      	beq.n	b5cf8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
   b5cea:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   b5cee:	3501      	adds	r5, #1
   b5cf0:	d102      	bne.n	b5cf8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x314>
								parser->toksuper = i;
   b5cf2:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
   b5cf6:	e69e      	b.n	b5a36 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x52>
					for (i = parser->toknext - 1; i >= 0; i--) {
   b5cf8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b5cfc:	f1ae 0e10 	sub.w	lr, lr, #16
   b5d00:	e7e6      	b.n	b5cd0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ec>
   b5d02:	f1a5 0920 	sub.w	r9, r5, #32
   b5d06:	4f24      	ldr	r7, [pc, #144]	; (b5d98 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3b4>)
   b5d08:	fa5f f989 	uxtb.w	r9, r9
   b5d0c:	fa0c f909 	lsl.w	r9, ip, r9
   b5d10:	ea19 0f07 	tst.w	r9, r7
   b5d14:	f47f aeaa 	bne.w	b5a6c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
   b5d18:	3d20      	subs	r5, #32
   b5d1a:	2d5e      	cmp	r5, #94	; 0x5e
   b5d1c:	d89a      	bhi.n	b5c54 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x270>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
   b5d1e:	f108 0501 	add.w	r5, r8, #1
   b5d22:	6005      	str	r5, [r0, #0]
   b5d24:	e68f      	b.n	b5a46 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x62>
		switch (js[parser->pos]) {
   b5d26:	2d0d      	cmp	r5, #13
   b5d28:	d1f6      	bne.n	b5d18 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x334>
   b5d2a:	e69f      	b.n	b5a6c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x88>
   b5d2c:	f005 09df 	and.w	r9, r5, #223	; 0xdf
   b5d30:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   b5d34:	e7f8      	b.n	b5d28 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x344>
	if (parser->toknext >= num_tokens) {
   b5d36:	6845      	ldr	r5, [r0, #4]
   b5d38:	9f09      	ldr	r7, [sp, #36]	; 0x24
   b5d3a:	42af      	cmp	r7, r5
   b5d3c:	f67f af28 	bls.w	b5b90 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ac>
	tok = &tokens[parser->toknext++];
   b5d40:	f105 0801 	add.w	r8, r5, #1
   b5d44:	ea4f 1905 	mov.w	r9, r5, lsl #4
   b5d48:	eb03 1505 	add.w	r5, r3, r5, lsl #4
   b5d4c:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
   b5d50:	e9c5 6601 	strd	r6, r6, [r5, #4]
	tok->size = 0;
   b5d54:	2700      	movs	r7, #0
   b5d56:	60ef      	str	r7, [r5, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
   b5d58:	f8d0 8000 	ldr.w	r8, [r0]
	token->type = type;
   b5d5c:	f04f 0a04 	mov.w	sl, #4
   b5d60:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
   b5d64:	e9c5 e801 	strd	lr, r8, [r5, #4]
	parser->pos--;
   b5d68:	6805      	ldr	r5, [r0, #0]
   b5d6a:	3d01      	subs	r5, #1
   b5d6c:	e683      	b.n	b5a76 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x92>
	if (tokens != NULL) {
   b5d6e:	2b00      	cmp	r3, #0
   b5d70:	f43f af12 	beq.w	b5b98 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b5d74:	6842      	ldr	r2, [r0, #4]
   b5d76:	1e51      	subs	r1, r2, #1
   b5d78:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   b5d7c:	2900      	cmp	r1, #0
   b5d7e:	f6ff af0b 	blt.w	b5b98 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1b4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
   b5d82:	f853 2c0c 	ldr.w	r2, [r3, #-12]
   b5d86:	3201      	adds	r2, #1
   b5d88:	d003      	beq.n	b5d92 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ae>
   b5d8a:	f853 2c08 	ldr.w	r2, [r3, #-8]
   b5d8e:	3201      	adds	r2, #1
   b5d90:	d087      	beq.n	b5ca2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2be>
		for (i = parser->toknext - 1; i >= 0; i--) {
   b5d92:	3901      	subs	r1, #1
   b5d94:	3b10      	subs	r3, #16
   b5d96:	e7f1      	b.n	b5d7c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x398>
   b5d98:	04001001 	.word	0x04001001

000b5d9c <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
   b5d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
   b5d9e:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
   b5da0:	4604      	mov	r4, r0
	if (offset == 0) {
   b5da2:	b912      	cbnz	r2, b5daa <_ZN10JsonParser5parseEv+0xe>
		return false;
   b5da4:	2000      	movs	r0, #0
}
   b5da6:	b003      	add	sp, #12
   b5da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
   b5daa:	6943      	ldr	r3, [r0, #20]
		JsonParserGeneratorRK::jsmn_init(&parser);
   b5dac:	f100 0620 	add.w	r6, r0, #32
	if (tokens) {
   b5db0:	b1ab      	cbz	r3, b5dde <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
   b5db2:	2100      	movs	r1, #0
	parser->toknext = 0;
   b5db4:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
   b5db8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5dbc:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5dbe:	69c1      	ldr	r1, [r0, #28]
   b5dc0:	9100      	str	r1, [sp, #0]
   b5dc2:	6841      	ldr	r1, [r0, #4]
   b5dc4:	4630      	mov	r0, r6
   b5dc6:	f7ff fe0d 	bl	b59e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
   b5dca:	1c43      	adds	r3, r0, #1
   b5dcc:	d128      	bne.n	b5e20 <_ZN10JsonParser5parseEv+0x84>
			if (staticBuffers) {
   b5dce:	7c25      	ldrb	r5, [r4, #16]
   b5dd0:	2d00      	cmp	r5, #0
   b5dd2:	d1e7      	bne.n	b5da4 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
   b5dd4:	6960      	ldr	r0, [r4, #20]
   b5dd6:	f000 fc19 	bl	b660c <free>
			tokens = 0;
   b5dda:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
   b5ddc:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
   b5dde:	2500      	movs	r5, #0
	parser->toksuper = -1;
   b5de0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
	parser->toknext = 0;
   b5de4:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b5de8:	68e2      	ldr	r2, [r4, #12]
   b5dea:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b5dec:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
   b5dee:	9500      	str	r5, [sp, #0]
   b5df0:	462b      	mov	r3, r5
   b5df2:	4630      	mov	r0, r6
   b5df4:	f7ff fdf6 	bl	b59e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
   b5df8:	2800      	cmp	r0, #0
   b5dfa:	dbd3      	blt.n	b5da4 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
   b5dfc:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
   b5dfe:	d017      	beq.n	b5e30 <_ZN10JsonParser5parseEv+0x94>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b5e00:	0100      	lsls	r0, r0, #4
   b5e02:	f000 fbfb 	bl	b65fc <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5e06:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
   b5e08:	6160      	str	r0, [r4, #20]
   b5e0a:	4603      	mov	r3, r0
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5e0c:	9200      	str	r2, [sp, #0]
	parser->toknext = 0;
   b5e0e:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5e12:	68e2      	ldr	r2, [r4, #12]
   b5e14:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
   b5e16:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
   b5e18:	4630      	mov	r0, r6
   b5e1a:	f7ff fde3 	bl	b59e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
   b5e1e:	e001      	b.n	b5e24 <_ZN10JsonParser5parseEv+0x88>
		if (result < 0) {
   b5e20:	2800      	cmp	r0, #0
   b5e22:	dbbf      	blt.n	b5da4 <_ZN10JsonParser5parseEv+0x8>
		tokensEnd = &tokens[result];
   b5e24:	6963      	ldr	r3, [r4, #20]
   b5e26:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   b5e2a:	61a0      	str	r0, [r4, #24]
	return true;
   b5e2c:	2001      	movs	r0, #1
   b5e2e:	e7ba      	b.n	b5da6 <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
   b5e30:	6963      	ldr	r3, [r4, #20]
   b5e32:	61a3      	str	r3, [r4, #24]
   b5e34:	e7fa      	b.n	b5e2c <_ZN10JsonParser5parseEv+0x90>

000b5e36 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   b5e36:	b510      	push	{r4, lr}
   b5e38:	4604      	mov	r4, r0
   b5e3a:	f001 fc0b 	bl	b7654 <_ZN9TCPClientC1Ev>
{

}
   b5e3e:	4620      	mov	r0, r4
   b5e40:	bd10      	pop	{r4, pc}
	...

000b5e44 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   b5e44:	b538      	push	{r3, r4, r5, lr}
   b5e46:	4604      	mov	r4, r0
   b5e48:	4615      	mov	r5, r2
    client.print(aHeaderName);
   b5e4a:	f000 fe27 	bl	b6a9c <_ZN5Print5printEPKc>
    client.print(": ");
   b5e4e:	4905      	ldr	r1, [pc, #20]	; (b5e64 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   b5e50:	4620      	mov	r0, r4
   b5e52:	f000 fe23 	bl	b6a9c <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   b5e56:	4629      	mov	r1, r5
   b5e58:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b5e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    client.println(aHeaderValue);
   b5e5e:	f000 be30 	b.w	b6ac2 <_ZN5Print7printlnEPKc>
   b5e62:	bf00      	nop
   b5e64:	000b8b29 	.word	0x000b8b29

000b5e68 <_ZN10HttpClient10sendHeaderEPKci>:

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   b5e68:	b538      	push	{r3, r4, r5, lr}
   b5e6a:	4605      	mov	r5, r0
   b5e6c:	4614      	mov	r4, r2
    client.print(aHeaderName);
   b5e6e:	f000 fe15 	bl	b6a9c <_ZN5Print5printEPKc>
    client.print(": ");
   b5e72:	490b      	ldr	r1, [pc, #44]	; (b5ea0 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   b5e74:	4628      	mov	r0, r5
   b5e76:	f000 fe11 	bl	b6a9c <_ZN5Print5printEPKc>
        if (n < 0 && base == 10) {
   b5e7a:	2c00      	cmp	r4, #0
   b5e7c:	da0d      	bge.n	b5e9a <_ZN10HttpClient10sendHeaderEPKci+0x32>
            t = print('-');
   b5e7e:	212d      	movs	r1, #45	; 0x2d
   b5e80:	4628      	mov	r0, r5
   b5e82:	f000 fe0f 	bl	b6aa4 <_ZN5Print5printEc>
            val = -n;
   b5e86:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b5e88:	4628      	mov	r0, r5
   b5e8a:	220a      	movs	r2, #10
   b5e8c:	f000 fe23 	bl	b6ad6 <_ZN5Print11printNumberEmh>
        n += println();
   b5e90:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   b5e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5e96:	f000 be08 	b.w	b6aaa <_ZN5Print7printlnEv>
            val = n;
   b5e9a:	4621      	mov	r1, r4
   b5e9c:	e7f4      	b.n	b5e88 <_ZN10HttpClient10sendHeaderEPKci+0x20>
   b5e9e:	bf00      	nop
   b5ea0:	000b8b29 	.word	0x000b8b29

000b5ea4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   b5ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5ea8:	460e      	mov	r6, r1
   b5eaa:	b091      	sub	sp, #68	; 0x44
   b5eac:	4698      	mov	r8, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   b5eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b5eb2:	6013      	str	r3, [r2, #0]
{
   b5eb4:	4604      	mov	r4, r0
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5eb6:	2100      	movs	r1, #0
   b5eb8:	4630      	mov	r0, r6
   b5eba:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
   b5ebe:	4617      	mov	r7, r2
   b5ec0:	f001 f88e 	bl	b6fe0 <_ZNK6String6equalsEPKc>
   b5ec4:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   b5ec8:	4603      	mov	r3, r0
   b5eca:	b998      	cbnz	r0, b5ef4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x50>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b5ecc:	f1be 0f00 	cmp.w	lr, #0
   b5ed0:	bf14      	ite	ne
   b5ed2:	4672      	movne	r2, lr
   b5ed4:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   b5ed6:	6831      	ldr	r1, [r6, #0]
   b5ed8:	b292      	uxth	r2, r2
   b5eda:	4620      	mov	r0, r4
   b5edc:	f001 f9ba 	bl	b7254 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   b5ee0:	1e05      	subs	r5, r0, #0
   b5ee2:	bf18      	it	ne
   b5ee4:	2501      	movne	r5, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   b5ee6:	b9c5      	cbnz	r5, b5f1a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   b5ee8:	4620      	mov	r0, r4
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   b5eea:	b011      	add	sp, #68	; 0x44
   b5eec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        client.stop();
   b5ef0:	f001 bb66 	b.w	b75c0 <_ZN9TCPClient4stopEv>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b5ef4:	4b75      	ldr	r3, [pc, #468]	; (b60cc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x228>)
   b5ef6:	930a      	str	r3, [sp, #40]	; 0x28
   b5ef8:	f106 0c14 	add.w	ip, r6, #20
   b5efc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b5f00:	ad0b      	add	r5, sp, #44	; 0x2c
   b5f02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b5f04:	f8dc 3000 	ldr.w	r3, [ip]
   b5f08:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   b5f0a:	fa1f f28e 	uxth.w	r2, lr
   b5f0e:	2300      	movs	r3, #0
   b5f10:	a90a      	add	r1, sp, #40	; 0x28
   b5f12:	4620      	mov	r0, r4
   b5f14:	f001 fa7e 	bl	b7414 <_ZN9TCPClient7connectE9IPAddresstm>
   b5f18:	e7e2      	b.n	b5ee0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
    client.print(aHttpMethod);
   b5f1a:	4649      	mov	r1, r9
   b5f1c:	4620      	mov	r0, r4
   b5f1e:	f000 fdbd 	bl	b6a9c <_ZN5Print5printEPKc>
    client.print(" ");
   b5f22:	496b      	ldr	r1, [pc, #428]	; (b60d0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   b5f24:	4620      	mov	r0, r4
   b5f26:	f000 fdb9 	bl	b6a9c <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   b5f2a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   b5f2c:	4620      	mov	r0, r4
   b5f2e:	f000 fdb5 	bl	b6a9c <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   b5f32:	4968      	ldr	r1, [pc, #416]	; (b60d4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   b5f34:	4620      	mov	r0, r4
   b5f36:	f000 fdb1 	bl	b6a9c <_ZN5Print5printEPKc>
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   b5f3a:	4967      	ldr	r1, [pc, #412]	; (b60d8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   b5f3c:	4a67      	ldr	r2, [pc, #412]	; (b60dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x238>)
   b5f3e:	4620      	mov	r0, r4
   b5f40:	f7ff ff80 	bl	b5e44 <_ZN10HttpClient10sendHeaderEPKcS1_>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   b5f44:	2100      	movs	r1, #0
   b5f46:	4630      	mov	r0, r6
   b5f48:	f001 f84a 	bl	b6fe0 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   b5f4c:	b920      	cbnz	r0, b5f58 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   b5f4e:	6832      	ldr	r2, [r6, #0]
   b5f50:	4963      	ldr	r1, [pc, #396]	; (b60e0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23c>)
   b5f52:	4620      	mov	r0, r4
   b5f54:	f7ff ff76 	bl	b5e44 <_ZN10HttpClient10sendHeaderEPKcS1_>
    if (aRequest.body != NULL) {
   b5f58:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   b5f5c:	2100      	movs	r1, #0
   b5f5e:	4650      	mov	r0, sl
   b5f60:	f001 f83e 	bl	b6fe0 <_ZNK6String6equalsEPKc>
   b5f64:	b928      	cbnz	r0, b5f72 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xce>
        sendHeader("Content-Length", (aRequest.body).length());
   b5f66:	6c72      	ldr	r2, [r6, #68]	; 0x44
        sendHeader("Content-Length", 0);
   b5f68:	495e      	ldr	r1, [pc, #376]	; (b60e4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x240>)
   b5f6a:	4620      	mov	r0, r4
   b5f6c:	f7ff ff7c 	bl	b5e68 <_ZN10HttpClient10sendHeaderEPKci>
   b5f70:	e006      	b.n	b5f80 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   b5f72:	495d      	ldr	r1, [pc, #372]	; (b60e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x244>)
   b5f74:	4648      	mov	r0, r9
   b5f76:	f002 fc75 	bl	b8864 <strcmp>
   b5f7a:	4602      	mov	r2, r0
   b5f7c:	2800      	cmp	r0, #0
   b5f7e:	d0f3      	beq.n	b5f68 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc4>
    if (headers != NULL)
   b5f80:	f1b8 0f00 	cmp.w	r8, #0
   b5f84:	d00e      	beq.n	b5fa4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
        while (headers[i].header != NULL)
   b5f86:	f8d8 1000 	ldr.w	r1, [r8]
   b5f8a:	b159      	cbz	r1, b5fa4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x100>
            if (headers[i].value != NULL) {
   b5f8c:	f8d8 2004 	ldr.w	r2, [r8, #4]
                sendHeader(headers[i].header, headers[i].value);
   b5f90:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   b5f92:	b122      	cbz	r2, b5f9e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfa>
                sendHeader(headers[i].header, headers[i].value);
   b5f94:	f7ff ff56 	bl	b5e44 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   b5f98:	f108 0808 	add.w	r8, r8, #8
        while (headers[i].header != NULL)
   b5f9c:	e7f3      	b.n	b5f86 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xe2>
    client.println(aHeaderName);
   b5f9e:	f000 fd90 	bl	b6ac2 <_ZN5Print7printlnEPKc>
}
   b5fa2:	e7f9      	b.n	b5f98 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    client.println();
   b5fa4:	4620      	mov	r0, r4
   b5fa6:	f000 fd80 	bl	b6aaa <_ZN5Print7printlnEv>
    client.flush();
   b5faa:	4620      	mov	r0, r4
   b5fac:	f001 f8b2 	bl	b7114 <_ZN9TCPClient5flushEv>
   b5fb0:	2100      	movs	r1, #0
   b5fb2:	4650      	mov	r0, sl
   b5fb4:	f001 f814 	bl	b6fe0 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   b5fb8:	b918      	cbnz	r0, b5fc2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x11e>
        client.println(aRequest.body);
   b5fba:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   b5fbc:	4620      	mov	r0, r4
   b5fbe:	f000 fd80 	bl	b6ac2 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   b5fc2:	f104 0a1c 	add.w	sl, r4, #28
   b5fc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   b5fca:	2100      	movs	r1, #0
   b5fcc:	4650      	mov	r0, sl
   b5fce:	f002 fc13 	bl	b87f8 <memset>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5fd2:	f000 f8af 	bl	b6134 <HAL_Timer_Get_Milli_Seconds>
   b5fd6:	9001      	str	r0, [sp, #4]
   b5fd8:	f000 f8ac 	bl	b6134 <HAL_Timer_Get_Milli_Seconds>
    bool error = false;
   b5fdc:	f04f 0800 	mov.w	r8, #0
    unsigned int bufferPosition = 0;
   b5fe0:	4646      	mov	r6, r8
    } while (client.connected() && !timeout && !error);
   b5fe2:	f241 3b88 	movw	fp, #5000	; 0x1388
        while (client.available()) {
   b5fe6:	4620      	mov	r0, r4
   b5fe8:	f001 fa90 	bl	b750c <_ZN9TCPClient9availableEv>
   b5fec:	b1d8      	cbz	r0, b6026 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x182>
            char c = client.read();
   b5fee:	4620      	mov	r0, r4
   b5ff0:	f001 f876 	bl	b70e0 <_ZN9TCPClient4readEv>
   b5ff4:	4681      	mov	r9, r0
   b5ff6:	f000 f89d 	bl	b6134 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   b5ffa:	f240 33fe 	movw	r3, #1022	; 0x3fe
   b5ffe:	429e      	cmp	r6, r3
   b6000:	9001      	str	r0, [sp, #4]
   b6002:	d804      	bhi.n	b600e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>
                buffer[bufferPosition] = c;
   b6004:	19a3      	adds	r3, r4, r6
            char c = client.read();
   b6006:	f883 901c 	strb.w	r9, [r3, #28]
            bufferPosition++;
   b600a:	3601      	adds	r6, #1
        while (client.available()) {
   b600c:	e7eb      	b.n	b5fe6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   b600e:	f240 33ff 	movw	r3, #1023	; 0x3ff
   b6012:	429e      	cmp	r6, r3
   b6014:	d1f9      	bne.n	b600a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b6016:	2300      	movs	r3, #0
   b6018:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   b601c:	4620      	mov	r0, r4
   b601e:	f001 facf 	bl	b75c0 <_ZN9TCPClient4stopEv>
                error = true;
   b6022:	46a8      	mov	r8, r5
   b6024:	e7f1      	b.n	b600a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x166>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   b6026:	19a3      	adds	r3, r4, r6
   b6028:	7718      	strb	r0, [r3, #28]
   b602a:	f000 f883 	bl	b6134 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   b602e:	9b01      	ldr	r3, [sp, #4]
   b6030:	eba0 0903 	sub.w	r9, r0, r3
        if (!error && !timeout) {
   b6034:	f1b8 0f00 	cmp.w	r8, #0
   b6038:	d104      	bne.n	b6044 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a0>
   b603a:	45d9      	cmp	r9, fp
   b603c:	d802      	bhi.n	b6044 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1a0>
            delay(200);
   b603e:	20c8      	movs	r0, #200	; 0xc8
   b6040:	f000 fb14 	bl	b666c <delay>
    } while (client.connected() && !timeout && !error);
   b6044:	4620      	mov	r0, r4
   b6046:	f001 f983 	bl	b7350 <_ZN9TCPClient9connectedEv>
   b604a:	b120      	cbz	r0, b6056 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b2>
   b604c:	45d9      	cmp	r9, fp
   b604e:	d802      	bhi.n	b6056 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1b2>
   b6050:	f1b8 0f00 	cmp.w	r8, #0
   b6054:	d0c7      	beq.n	b5fe6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x142>
    client.stop();
   b6056:	4620      	mov	r0, r4
   b6058:	f001 fab2 	bl	b75c0 <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   b605c:	4651      	mov	r1, sl
   b605e:	a802      	add	r0, sp, #8
   b6060:	f000 ff7d 	bl	b6f5e <_ZN6StringC1EPK19__FlashStringHelper>
    String statusCode = raw_response.substring(9,12);
   b6064:	230c      	movs	r3, #12
   b6066:	2209      	movs	r2, #9
   b6068:	a902      	add	r1, sp, #8
   b606a:	a806      	add	r0, sp, #24
   b606c:	f000 ffdc 	bl	b7028 <_ZNK6String9substringEjj>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   b6070:	491e      	ldr	r1, [pc, #120]	; (b60ec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x248>)
   b6072:	a80a      	add	r0, sp, #40	; 0x28
   b6074:	f000 ff73 	bl	b6f5e <_ZN6StringC1EPK19__FlashStringHelper>
   b6078:	a90a      	add	r1, sp, #40	; 0x28
   b607a:	a802      	add	r0, sp, #8
   b607c:	f000 ffd1 	bl	b7022 <_ZNK6String7indexOfERKS_>
   b6080:	4604      	mov	r4, r0
   b6082:	a80a      	add	r0, sp, #40	; 0x28
   b6084:	f000 ff20 	bl	b6ec8 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   b6088:	1c63      	adds	r3, r4, #1
   b608a:	d108      	bne.n	b609e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fa>
    String statusCode = raw_response.substring(9,12);
   b608c:	a806      	add	r0, sp, #24
   b608e:	f000 ff1b 	bl	b6ec8 <_ZN6StringD1Ev>
    String raw_response(buffer);
   b6092:	a802      	add	r0, sp, #8
   b6094:	f000 ff18 	bl	b6ec8 <_ZN6StringD1Ev>
}
   b6098:	b011      	add	sp, #68	; 0x44
   b609a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aResponse.body = "";
   b609e:	1d3d      	adds	r5, r7, #4
   b60a0:	4913      	ldr	r1, [pc, #76]	; (b60f0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x24c>)
   b60a2:	4628      	mov	r0, r5
   b60a4:	f000 ff6f 	bl	b6f86 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   b60a8:	1d22      	adds	r2, r4, #4
   b60aa:	a902      	add	r1, sp, #8
   b60ac:	a80a      	add	r0, sp, #40	; 0x28
   b60ae:	f000 ffdb 	bl	b7068 <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   b60b2:	a90a      	add	r1, sp, #40	; 0x28
   b60b4:	4628      	mov	r0, r5
   b60b6:	f000 ff8f 	bl	b6fd8 <_ZN6String6concatERKS_>
   b60ba:	a80a      	add	r0, sp, #40	; 0x28
   b60bc:	f000 ff04 	bl	b6ec8 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   b60c0:	9806      	ldr	r0, [sp, #24]
   b60c2:	f002 fb87 	bl	b87d4 <atoi>
   b60c6:	6038      	str	r0, [r7, #0]
   b60c8:	e7e0      	b.n	b608c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1e8>
   b60ca:	bf00      	nop
   b60cc:	000b9270 	.word	0x000b9270
   b60d0:	000b8b2a 	.word	0x000b8b2a
   b60d4:	000b91c0 	.word	0x000b91c0
   b60d8:	000b91d2 	.word	0x000b91d2
   b60dc:	000b91cc 	.word	0x000b91cc
   b60e0:	000b91dd 	.word	0x000b91dd
   b60e4:	000b91e2 	.word	0x000b91e2
   b60e8:	000b91f1 	.word	0x000b91f1
   b60ec:	000b91f6 	.word	0x000b91f6
   b60f0:	000b8ad5 	.word	0x000b8ad5

000b60f4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b60f4:	b508      	push	{r3, lr}
   b60f6:	4b02      	ldr	r3, [pc, #8]	; (b6100 <os_mutex_recursive_create+0xc>)
   b60f8:	681b      	ldr	r3, [r3, #0]
   b60fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b60fc:	9301      	str	r3, [sp, #4]
   b60fe:	bd08      	pop	{r3, pc}
   b6100:	00030248 	.word	0x00030248

000b6104 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6104:	b508      	push	{r3, lr}
   b6106:	4b02      	ldr	r3, [pc, #8]	; (b6110 <HAL_RNG_GetRandomNumber+0xc>)
   b6108:	681b      	ldr	r3, [r3, #0]
   b610a:	685b      	ldr	r3, [r3, #4]
   b610c:	9301      	str	r3, [sp, #4]
   b610e:	bd08      	pop	{r3, pc}
   b6110:	00030218 	.word	0x00030218

000b6114 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6114:	b508      	push	{r3, lr}
   b6116:	4b02      	ldr	r3, [pc, #8]	; (b6120 <HAL_Delay_Microseconds+0xc>)
   b6118:	681b      	ldr	r3, [r3, #0]
   b611a:	68db      	ldr	r3, [r3, #12]
   b611c:	9301      	str	r3, [sp, #4]
   b611e:	bd08      	pop	{r3, pc}
   b6120:	00030218 	.word	0x00030218

000b6124 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b6124:	b508      	push	{r3, lr}
   b6126:	4b02      	ldr	r3, [pc, #8]	; (b6130 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b6128:	681b      	ldr	r3, [r3, #0]
   b612a:	691b      	ldr	r3, [r3, #16]
   b612c:	9301      	str	r3, [sp, #4]
   b612e:	bd08      	pop	{r3, pc}
   b6130:	00030218 	.word	0x00030218

000b6134 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6134:	b508      	push	{r3, lr}
   b6136:	4b02      	ldr	r3, [pc, #8]	; (b6140 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6138:	681b      	ldr	r3, [r3, #0]
   b613a:	695b      	ldr	r3, [r3, #20]
   b613c:	9301      	str	r3, [sp, #4]
   b613e:	bd08      	pop	{r3, pc}
   b6140:	00030218 	.word	0x00030218

000b6144 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   b6144:	b508      	push	{r3, lr}
   b6146:	4b02      	ldr	r3, [pc, #8]	; (b6150 <hal_timer_millis+0xc>)
   b6148:	681b      	ldr	r3, [r3, #0]
   b614a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   b614c:	9301      	str	r3, [sp, #4]
   b614e:	bd08      	pop	{r3, pc}
   b6150:	00030218 	.word	0x00030218

000b6154 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   b6154:	b508      	push	{r3, lr}
   b6156:	4b02      	ldr	r3, [pc, #8]	; (b6160 <HAL_Pin_Map+0xc>)
   b6158:	681b      	ldr	r3, [r3, #0]
   b615a:	681b      	ldr	r3, [r3, #0]
   b615c:	9301      	str	r3, [sp, #4]
   b615e:	bd08      	pop	{r3, pc}
   b6160:	0003022c 	.word	0x0003022c

000b6164 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b6164:	b508      	push	{r3, lr}
   b6166:	4b02      	ldr	r3, [pc, #8]	; (b6170 <HAL_Validate_Pin_Function+0xc>)
   b6168:	681b      	ldr	r3, [r3, #0]
   b616a:	685b      	ldr	r3, [r3, #4]
   b616c:	9301      	str	r3, [sp, #4]
   b616e:	bd08      	pop	{r3, pc}
   b6170:	0003022c 	.word	0x0003022c

000b6174 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6174:	b508      	push	{r3, lr}
   b6176:	4b02      	ldr	r3, [pc, #8]	; (b6180 <HAL_Pin_Mode+0xc>)
   b6178:	681b      	ldr	r3, [r3, #0]
   b617a:	689b      	ldr	r3, [r3, #8]
   b617c:	9301      	str	r3, [sp, #4]
   b617e:	bd08      	pop	{r3, pc}
   b6180:	0003022c 	.word	0x0003022c

000b6184 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6184:	b508      	push	{r3, lr}
   b6186:	4b02      	ldr	r3, [pc, #8]	; (b6190 <HAL_Get_Pin_Mode+0xc>)
   b6188:	681b      	ldr	r3, [r3, #0]
   b618a:	68db      	ldr	r3, [r3, #12]
   b618c:	9301      	str	r3, [sp, #4]
   b618e:	bd08      	pop	{r3, pc}
   b6190:	0003022c 	.word	0x0003022c

000b6194 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6194:	b508      	push	{r3, lr}
   b6196:	4b02      	ldr	r3, [pc, #8]	; (b61a0 <HAL_GPIO_Write+0xc>)
   b6198:	681b      	ldr	r3, [r3, #0]
   b619a:	691b      	ldr	r3, [r3, #16]
   b619c:	9301      	str	r3, [sp, #4]
   b619e:	bd08      	pop	{r3, pc}
   b61a0:	0003022c 	.word	0x0003022c

000b61a4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b61a4:	b508      	push	{r3, lr}
   b61a6:	4b02      	ldr	r3, [pc, #8]	; (b61b0 <hal_adc_read+0xc>)
   b61a8:	681b      	ldr	r3, [r3, #0]
   b61aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b61ac:	9301      	str	r3, [sp, #4]
   b61ae:	bd08      	pop	{r3, pc}
   b61b0:	0003022c 	.word	0x0003022c

000b61b4 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b61b4:	b508      	push	{r3, lr}
   b61b6:	4b02      	ldr	r3, [pc, #8]	; (b61c0 <hal_i2c_begin+0xc>)
   b61b8:	681b      	ldr	r3, [r3, #0]
   b61ba:	68db      	ldr	r3, [r3, #12]
   b61bc:	9301      	str	r3, [sp, #4]
   b61be:	bd08      	pop	{r3, pc}
   b61c0:	00030228 	.word	0x00030228

000b61c4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b61c4:	b508      	push	{r3, lr}
   b61c6:	4b02      	ldr	r3, [pc, #8]	; (b61d0 <hal_i2c_begin_transmission+0xc>)
   b61c8:	681b      	ldr	r3, [r3, #0]
   b61ca:	699b      	ldr	r3, [r3, #24]
   b61cc:	9301      	str	r3, [sp, #4]
   b61ce:	bd08      	pop	{r3, pc}
   b61d0:	00030228 	.word	0x00030228

000b61d4 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b61d4:	b508      	push	{r3, lr}
   b61d6:	4b02      	ldr	r3, [pc, #8]	; (b61e0 <hal_i2c_end_transmission+0xc>)
   b61d8:	681b      	ldr	r3, [r3, #0]
   b61da:	69db      	ldr	r3, [r3, #28]
   b61dc:	9301      	str	r3, [sp, #4]
   b61de:	bd08      	pop	{r3, pc}
   b61e0:	00030228 	.word	0x00030228

000b61e4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b61e4:	b508      	push	{r3, lr}
   b61e6:	4b02      	ldr	r3, [pc, #8]	; (b61f0 <hal_i2c_write+0xc>)
   b61e8:	681b      	ldr	r3, [r3, #0]
   b61ea:	6a1b      	ldr	r3, [r3, #32]
   b61ec:	9301      	str	r3, [sp, #4]
   b61ee:	bd08      	pop	{r3, pc}
   b61f0:	00030228 	.word	0x00030228

000b61f4 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b61f4:	b508      	push	{r3, lr}
   b61f6:	4b02      	ldr	r3, [pc, #8]	; (b6200 <hal_i2c_available+0xc>)
   b61f8:	681b      	ldr	r3, [r3, #0]
   b61fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b61fc:	9301      	str	r3, [sp, #4]
   b61fe:	bd08      	pop	{r3, pc}
   b6200:	00030228 	.word	0x00030228

000b6204 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6204:	b508      	push	{r3, lr}
   b6206:	4b02      	ldr	r3, [pc, #8]	; (b6210 <hal_i2c_read+0xc>)
   b6208:	681b      	ldr	r3, [r3, #0]
   b620a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b620c:	9301      	str	r3, [sp, #4]
   b620e:	bd08      	pop	{r3, pc}
   b6210:	00030228 	.word	0x00030228

000b6214 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6214:	b508      	push	{r3, lr}
   b6216:	4b02      	ldr	r3, [pc, #8]	; (b6220 <hal_i2c_peek+0xc>)
   b6218:	681b      	ldr	r3, [r3, #0]
   b621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b621c:	9301      	str	r3, [sp, #4]
   b621e:	bd08      	pop	{r3, pc}
   b6220:	00030228 	.word	0x00030228

000b6224 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6224:	b508      	push	{r3, lr}
   b6226:	4b02      	ldr	r3, [pc, #8]	; (b6230 <hal_i2c_flush+0xc>)
   b6228:	681b      	ldr	r3, [r3, #0]
   b622a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b622c:	9301      	str	r3, [sp, #4]
   b622e:	bd08      	pop	{r3, pc}
   b6230:	00030228 	.word	0x00030228

000b6234 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6234:	b508      	push	{r3, lr}
   b6236:	4b02      	ldr	r3, [pc, #8]	; (b6240 <hal_i2c_is_enabled+0xc>)
   b6238:	681b      	ldr	r3, [r3, #0]
   b623a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b623c:	9301      	str	r3, [sp, #4]
   b623e:	bd08      	pop	{r3, pc}
   b6240:	00030228 	.word	0x00030228

000b6244 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6244:	b508      	push	{r3, lr}
   b6246:	4b02      	ldr	r3, [pc, #8]	; (b6250 <hal_i2c_init+0xc>)
   b6248:	681b      	ldr	r3, [r3, #0]
   b624a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b624c:	9301      	str	r3, [sp, #4]
   b624e:	bd08      	pop	{r3, pc}
   b6250:	00030228 	.word	0x00030228

000b6254 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6254:	b508      	push	{r3, lr}
   b6256:	4b02      	ldr	r3, [pc, #8]	; (b6260 <if_index_to_name+0xc>)
   b6258:	681b      	ldr	r3, [r3, #0]
   b625a:	695b      	ldr	r3, [r3, #20]
   b625c:	9301      	str	r3, [sp, #4]
   b625e:	bd08      	pop	{r3, pc}
   b6260:	0003026c 	.word	0x0003026c

000b6264 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6264:	b508      	push	{r3, lr}
   b6266:	4b02      	ldr	r3, [pc, #8]	; (b6270 <inet_inet_ntop+0xc>)
   b6268:	681b      	ldr	r3, [r3, #0]
   b626a:	695b      	ldr	r3, [r3, #20]
   b626c:	9301      	str	r3, [sp, #4]
   b626e:	bd08      	pop	{r3, pc}
   b6270:	00030264 	.word	0x00030264

000b6274 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6274:	b508      	push	{r3, lr}
   b6276:	4b02      	ldr	r3, [pc, #8]	; (b6280 <inet_htonl+0xc>)
   b6278:	681b      	ldr	r3, [r3, #0]
   b627a:	6a1b      	ldr	r3, [r3, #32]
   b627c:	9301      	str	r3, [sp, #4]
   b627e:	bd08      	pop	{r3, pc}
   b6280:	00030264 	.word	0x00030264

000b6284 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6284:	b508      	push	{r3, lr}
   b6286:	4b02      	ldr	r3, [pc, #8]	; (b6290 <inet_htons+0xc>)
   b6288:	681b      	ldr	r3, [r3, #0]
   b628a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b628c:	9301      	str	r3, [sp, #4]
   b628e:	bd08      	pop	{r3, pc}
   b6290:	00030264 	.word	0x00030264

000b6294 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6294:	b508      	push	{r3, lr}
   b6296:	4b02      	ldr	r3, [pc, #8]	; (b62a0 <netdb_freeaddrinfo+0xc>)
   b6298:	681b      	ldr	r3, [r3, #0]
   b629a:	689b      	ldr	r3, [r3, #8]
   b629c:	9301      	str	r3, [sp, #4]
   b629e:	bd08      	pop	{r3, pc}
   b62a0:	00030268 	.word	0x00030268

000b62a4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b62a4:	b508      	push	{r3, lr}
   b62a6:	4b02      	ldr	r3, [pc, #8]	; (b62b0 <netdb_getaddrinfo+0xc>)
   b62a8:	681b      	ldr	r3, [r3, #0]
   b62aa:	68db      	ldr	r3, [r3, #12]
   b62ac:	9301      	str	r3, [sp, #4]
   b62ae:	bd08      	pop	{r3, pc}
   b62b0:	00030268 	.word	0x00030268

000b62b4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b62b4:	b508      	push	{r3, lr}
   b62b6:	4b02      	ldr	r3, [pc, #8]	; (b62c0 <sock_setsockopt+0xc>)
   b62b8:	681b      	ldr	r3, [r3, #0]
   b62ba:	699b      	ldr	r3, [r3, #24]
   b62bc:	9301      	str	r3, [sp, #4]
   b62be:	bd08      	pop	{r3, pc}
   b62c0:	00030238 	.word	0x00030238

000b62c4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b62c4:	b508      	push	{r3, lr}
   b62c6:	4b02      	ldr	r3, [pc, #8]	; (b62d0 <sock_close+0xc>)
   b62c8:	681b      	ldr	r3, [r3, #0]
   b62ca:	69db      	ldr	r3, [r3, #28]
   b62cc:	9301      	str	r3, [sp, #4]
   b62ce:	bd08      	pop	{r3, pc}
   b62d0:	00030238 	.word	0x00030238

000b62d4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b62d4:	b508      	push	{r3, lr}
   b62d6:	4b02      	ldr	r3, [pc, #8]	; (b62e0 <sock_connect+0xc>)
   b62d8:	681b      	ldr	r3, [r3, #0]
   b62da:	6a1b      	ldr	r3, [r3, #32]
   b62dc:	9301      	str	r3, [sp, #4]
   b62de:	bd08      	pop	{r3, pc}
   b62e0:	00030238 	.word	0x00030238

000b62e4 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b62e4:	b508      	push	{r3, lr}
   b62e6:	4b02      	ldr	r3, [pc, #8]	; (b62f0 <sock_recv+0xc>)
   b62e8:	681b      	ldr	r3, [r3, #0]
   b62ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b62ec:	9301      	str	r3, [sp, #4]
   b62ee:	bd08      	pop	{r3, pc}
   b62f0:	00030238 	.word	0x00030238

000b62f4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b62f4:	b508      	push	{r3, lr}
   b62f6:	4b02      	ldr	r3, [pc, #8]	; (b6300 <sock_send+0xc>)
   b62f8:	681b      	ldr	r3, [r3, #0]
   b62fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b62fc:	9301      	str	r3, [sp, #4]
   b62fe:	bd08      	pop	{r3, pc}
   b6300:	00030238 	.word	0x00030238

000b6304 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6304:	b508      	push	{r3, lr}
   b6306:	4b02      	ldr	r3, [pc, #8]	; (b6310 <sock_socket+0xc>)
   b6308:	681b      	ldr	r3, [r3, #0]
   b630a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b630c:	9301      	str	r3, [sp, #4]
   b630e:	bd08      	pop	{r3, pc}
   b6310:	00030238 	.word	0x00030238

000b6314 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6314:	b508      	push	{r3, lr}
   b6316:	4b02      	ldr	r3, [pc, #8]	; (b6320 <hal_spi_begin+0xc>)
   b6318:	681b      	ldr	r3, [r3, #0]
   b631a:	681b      	ldr	r3, [r3, #0]
   b631c:	9301      	str	r3, [sp, #4]
   b631e:	bd08      	pop	{r3, pc}
   b6320:	00030230 	.word	0x00030230

000b6324 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   b6324:	b508      	push	{r3, lr}
   b6326:	4b02      	ldr	r3, [pc, #8]	; (b6330 <hal_spi_set_bit_order+0xc>)
   b6328:	681b      	ldr	r3, [r3, #0]
   b632a:	689b      	ldr	r3, [r3, #8]
   b632c:	9301      	str	r3, [sp, #4]
   b632e:	bd08      	pop	{r3, pc}
   b6330:	00030230 	.word	0x00030230

000b6334 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   b6334:	b508      	push	{r3, lr}
   b6336:	4b02      	ldr	r3, [pc, #8]	; (b6340 <hal_spi_set_data_mode+0xc>)
   b6338:	681b      	ldr	r3, [r3, #0]
   b633a:	68db      	ldr	r3, [r3, #12]
   b633c:	9301      	str	r3, [sp, #4]
   b633e:	bd08      	pop	{r3, pc}
   b6340:	00030230 	.word	0x00030230

000b6344 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   b6344:	b508      	push	{r3, lr}
   b6346:	4b02      	ldr	r3, [pc, #8]	; (b6350 <hal_spi_set_clock_divider+0xc>)
   b6348:	681b      	ldr	r3, [r3, #0]
   b634a:	691b      	ldr	r3, [r3, #16]
   b634c:	9301      	str	r3, [sp, #4]
   b634e:	bd08      	pop	{r3, pc}
   b6350:	00030230 	.word	0x00030230

000b6354 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6354:	b508      	push	{r3, lr}
   b6356:	4b02      	ldr	r3, [pc, #8]	; (b6360 <hal_spi_transfer+0xc>)
   b6358:	681b      	ldr	r3, [r3, #0]
   b635a:	695b      	ldr	r3, [r3, #20]
   b635c:	9301      	str	r3, [sp, #4]
   b635e:	bd08      	pop	{r3, pc}
   b6360:	00030230 	.word	0x00030230

000b6364 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6364:	b508      	push	{r3, lr}
   b6366:	4b02      	ldr	r3, [pc, #8]	; (b6370 <hal_spi_init+0xc>)
   b6368:	681b      	ldr	r3, [r3, #0]
   b636a:	69db      	ldr	r3, [r3, #28]
   b636c:	9301      	str	r3, [sp, #4]
   b636e:	bd08      	pop	{r3, pc}
   b6370:	00030230 	.word	0x00030230

000b6374 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6374:	b508      	push	{r3, lr}
   b6376:	4b02      	ldr	r3, [pc, #8]	; (b6380 <hal_spi_is_enabled+0xc>)
   b6378:	681b      	ldr	r3, [r3, #0]
   b637a:	6a1b      	ldr	r3, [r3, #32]
   b637c:	9301      	str	r3, [sp, #4]
   b637e:	bd08      	pop	{r3, pc}
   b6380:	00030230 	.word	0x00030230

000b6384 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6384:	b508      	push	{r3, lr}
   b6386:	4b02      	ldr	r3, [pc, #8]	; (b6390 <hal_spi_info+0xc>)
   b6388:	681b      	ldr	r3, [r3, #0]
   b638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b638c:	9301      	str	r3, [sp, #4]
   b638e:	bd08      	pop	{r3, pc}
   b6390:	00030230 	.word	0x00030230

000b6394 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6394:	b508      	push	{r3, lr}
   b6396:	4b02      	ldr	r3, [pc, #8]	; (b63a0 <hal_spi_acquire+0xc>)
   b6398:	681b      	ldr	r3, [r3, #0]
   b639a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b639c:	9301      	str	r3, [sp, #4]
   b639e:	bd08      	pop	{r3, pc}
   b63a0:	00030230 	.word	0x00030230

000b63a4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b63a4:	b508      	push	{r3, lr}
   b63a6:	4b02      	ldr	r3, [pc, #8]	; (b63b0 <hal_spi_release+0xc>)
   b63a8:	681b      	ldr	r3, [r3, #0]
   b63aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b63ac:	9301      	str	r3, [sp, #4]
   b63ae:	bd08      	pop	{r3, pc}
   b63b0:	00030230 	.word	0x00030230

000b63b4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b63b4:	b508      	push	{r3, lr}
   b63b6:	4b02      	ldr	r3, [pc, #8]	; (b63c0 <hal_usart_write+0xc>)
   b63b8:	681b      	ldr	r3, [r3, #0]
   b63ba:	68db      	ldr	r3, [r3, #12]
   b63bc:	9301      	str	r3, [sp, #4]
   b63be:	bd08      	pop	{r3, pc}
   b63c0:	0003023c 	.word	0x0003023c

000b63c4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b63c4:	b508      	push	{r3, lr}
   b63c6:	4b02      	ldr	r3, [pc, #8]	; (b63d0 <hal_usart_available+0xc>)
   b63c8:	681b      	ldr	r3, [r3, #0]
   b63ca:	691b      	ldr	r3, [r3, #16]
   b63cc:	9301      	str	r3, [sp, #4]
   b63ce:	bd08      	pop	{r3, pc}
   b63d0:	0003023c 	.word	0x0003023c

000b63d4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b63d4:	b508      	push	{r3, lr}
   b63d6:	4b02      	ldr	r3, [pc, #8]	; (b63e0 <hal_usart_read+0xc>)
   b63d8:	681b      	ldr	r3, [r3, #0]
   b63da:	695b      	ldr	r3, [r3, #20]
   b63dc:	9301      	str	r3, [sp, #4]
   b63de:	bd08      	pop	{r3, pc}
   b63e0:	0003023c 	.word	0x0003023c

000b63e4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b63e4:	b508      	push	{r3, lr}
   b63e6:	4b02      	ldr	r3, [pc, #8]	; (b63f0 <hal_usart_peek+0xc>)
   b63e8:	681b      	ldr	r3, [r3, #0]
   b63ea:	699b      	ldr	r3, [r3, #24]
   b63ec:	9301      	str	r3, [sp, #4]
   b63ee:	bd08      	pop	{r3, pc}
   b63f0:	0003023c 	.word	0x0003023c

000b63f4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b63f4:	b508      	push	{r3, lr}
   b63f6:	4b02      	ldr	r3, [pc, #8]	; (b6400 <hal_usart_flush+0xc>)
   b63f8:	681b      	ldr	r3, [r3, #0]
   b63fa:	69db      	ldr	r3, [r3, #28]
   b63fc:	9301      	str	r3, [sp, #4]
   b63fe:	bd08      	pop	{r3, pc}
   b6400:	0003023c 	.word	0x0003023c

000b6404 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6404:	b508      	push	{r3, lr}
   b6406:	4b02      	ldr	r3, [pc, #8]	; (b6410 <hal_usart_is_enabled+0xc>)
   b6408:	681b      	ldr	r3, [r3, #0]
   b640a:	6a1b      	ldr	r3, [r3, #32]
   b640c:	9301      	str	r3, [sp, #4]
   b640e:	bd08      	pop	{r3, pc}
   b6410:	0003023c 	.word	0x0003023c

000b6414 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6414:	b508      	push	{r3, lr}
   b6416:	4b02      	ldr	r3, [pc, #8]	; (b6420 <hal_usart_available_data_for_write+0xc>)
   b6418:	681b      	ldr	r3, [r3, #0]
   b641a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b641c:	9301      	str	r3, [sp, #4]
   b641e:	bd08      	pop	{r3, pc}
   b6420:	0003023c 	.word	0x0003023c

000b6424 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6424:	b508      	push	{r3, lr}
   b6426:	4b02      	ldr	r3, [pc, #8]	; (b6430 <hal_usart_init_ex+0xc>)
   b6428:	681b      	ldr	r3, [r3, #0]
   b642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b642c:	9301      	str	r3, [sp, #4]
   b642e:	bd08      	pop	{r3, pc}
   b6430:	0003023c 	.word	0x0003023c

000b6434 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6434:	b508      	push	{r3, lr}
   b6436:	4b02      	ldr	r3, [pc, #8]	; (b6440 <HAL_USB_USART_Init+0xc>)
   b6438:	681b      	ldr	r3, [r3, #0]
   b643a:	681b      	ldr	r3, [r3, #0]
   b643c:	9301      	str	r3, [sp, #4]
   b643e:	bd08      	pop	{r3, pc}
   b6440:	0003024c 	.word	0x0003024c

000b6444 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6444:	b508      	push	{r3, lr}
   b6446:	4b02      	ldr	r3, [pc, #8]	; (b6450 <HAL_USB_USART_Begin+0xc>)
   b6448:	681b      	ldr	r3, [r3, #0]
   b644a:	685b      	ldr	r3, [r3, #4]
   b644c:	9301      	str	r3, [sp, #4]
   b644e:	bd08      	pop	{r3, pc}
   b6450:	0003024c 	.word	0x0003024c

000b6454 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6454:	b508      	push	{r3, lr}
   b6456:	4b02      	ldr	r3, [pc, #8]	; (b6460 <HAL_USB_USART_Available_Data+0xc>)
   b6458:	681b      	ldr	r3, [r3, #0]
   b645a:	691b      	ldr	r3, [r3, #16]
   b645c:	9301      	str	r3, [sp, #4]
   b645e:	bd08      	pop	{r3, pc}
   b6460:	0003024c 	.word	0x0003024c

000b6464 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6464:	b508      	push	{r3, lr}
   b6466:	4b02      	ldr	r3, [pc, #8]	; (b6470 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6468:	681b      	ldr	r3, [r3, #0]
   b646a:	695b      	ldr	r3, [r3, #20]
   b646c:	9301      	str	r3, [sp, #4]
   b646e:	bd08      	pop	{r3, pc}
   b6470:	0003024c 	.word	0x0003024c

000b6474 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6474:	b508      	push	{r3, lr}
   b6476:	4b02      	ldr	r3, [pc, #8]	; (b6480 <HAL_USB_USART_Receive_Data+0xc>)
   b6478:	681b      	ldr	r3, [r3, #0]
   b647a:	699b      	ldr	r3, [r3, #24]
   b647c:	9301      	str	r3, [sp, #4]
   b647e:	bd08      	pop	{r3, pc}
   b6480:	0003024c 	.word	0x0003024c

000b6484 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6484:	b508      	push	{r3, lr}
   b6486:	4b02      	ldr	r3, [pc, #8]	; (b6490 <HAL_USB_USART_Send_Data+0xc>)
   b6488:	681b      	ldr	r3, [r3, #0]
   b648a:	69db      	ldr	r3, [r3, #28]
   b648c:	9301      	str	r3, [sp, #4]
   b648e:	bd08      	pop	{r3, pc}
   b6490:	0003024c 	.word	0x0003024c

000b6494 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6494:	b508      	push	{r3, lr}
   b6496:	4b02      	ldr	r3, [pc, #8]	; (b64a0 <HAL_USB_USART_Flush_Data+0xc>)
   b6498:	681b      	ldr	r3, [r3, #0]
   b649a:	6a1b      	ldr	r3, [r3, #32]
   b649c:	9301      	str	r3, [sp, #4]
   b649e:	bd08      	pop	{r3, pc}
   b64a0:	0003024c 	.word	0x0003024c

000b64a4 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
   b64a4:	b508      	push	{r3, lr}
   b64a6:	4b02      	ldr	r3, [pc, #8]	; (b64b0 <HAL_USB_USART_Is_Connected+0xc>)
   b64a8:	681b      	ldr	r3, [r3, #0]
   b64aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b64ac:	9301      	str	r3, [sp, #4]
   b64ae:	bd08      	pop	{r3, pc}
   b64b0:	0003024c 	.word	0x0003024c

000b64b4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b64b4:	b508      	push	{r3, lr}
   b64b6:	4b02      	ldr	r3, [pc, #8]	; (b64c0 <panic_+0xc>)
   b64b8:	681b      	ldr	r3, [r3, #0]
   b64ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b64bc:	9301      	str	r3, [sp, #4]
   b64be:	bd08      	pop	{r3, pc}
   b64c0:	00030260 	.word	0x00030260

000b64c4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b64c4:	b508      	push	{r3, lr}
   b64c6:	4b02      	ldr	r3, [pc, #8]	; (b64d0 <log_message+0xc>)
   b64c8:	681b      	ldr	r3, [r3, #0]
   b64ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b64cc:	9301      	str	r3, [sp, #4]
   b64ce:	bd08      	pop	{r3, pc}
   b64d0:	00030260 	.word	0x00030260

000b64d4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b64d4:	b508      	push	{r3, lr}
   b64d6:	4b02      	ldr	r3, [pc, #8]	; (b64e0 <set_system_mode+0xc>)
   b64d8:	681b      	ldr	r3, [r3, #0]
   b64da:	685b      	ldr	r3, [r3, #4]
   b64dc:	9301      	str	r3, [sp, #4]
   b64de:	bd08      	pop	{r3, pc}
   b64e0:	00030220 	.word	0x00030220

000b64e4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b64e4:	b508      	push	{r3, lr}
   b64e6:	4b02      	ldr	r3, [pc, #8]	; (b64f0 <system_delay_ms+0xc>)
   b64e8:	681b      	ldr	r3, [r3, #0]
   b64ea:	695b      	ldr	r3, [r3, #20]
   b64ec:	9301      	str	r3, [sp, #4]
   b64ee:	bd08      	pop	{r3, pc}
   b64f0:	00030220 	.word	0x00030220

000b64f4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b64f4:	b508      	push	{r3, lr}
   b64f6:	4b03      	ldr	r3, [pc, #12]	; (b6504 <system_ctrl_set_app_request_handler+0x10>)
   b64f8:	681b      	ldr	r3, [r3, #0]
   b64fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b64fe:	9301      	str	r3, [sp, #4]
   b6500:	bd08      	pop	{r3, pc}
   b6502:	0000      	.short	0x0000
   b6504:	00030220 	.word	0x00030220

000b6508 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6508:	b508      	push	{r3, lr}
   b650a:	4b03      	ldr	r3, [pc, #12]	; (b6518 <system_ctrl_set_result+0x10>)
   b650c:	681b      	ldr	r3, [r3, #0]
   b650e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6512:	9301      	str	r3, [sp, #4]
   b6514:	bd08      	pop	{r3, pc}
   b6516:	0000      	.short	0x0000
   b6518:	00030220 	.word	0x00030220

000b651c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b651c:	b508      	push	{r3, lr}
   b651e:	4b02      	ldr	r3, [pc, #8]	; (b6528 <spark_process+0xc>)
   b6520:	681b      	ldr	r3, [r3, #0]
   b6522:	689b      	ldr	r3, [r3, #8]
   b6524:	9301      	str	r3, [sp, #4]
   b6526:	bd08      	pop	{r3, pc}
   b6528:	00030244 	.word	0x00030244

000b652c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b652c:	b508      	push	{r3, lr}
   b652e:	4b02      	ldr	r3, [pc, #8]	; (b6538 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6530:	681b      	ldr	r3, [r3, #0]
   b6532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6534:	9301      	str	r3, [sp, #4]
   b6536:	bd08      	pop	{r3, pc}
   b6538:	00030244 	.word	0x00030244

000b653c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b653c:	b508      	push	{r3, lr}
   b653e:	4b02      	ldr	r3, [pc, #8]	; (b6548 <network_connect+0xc>)
   b6540:	681b      	ldr	r3, [r3, #0]
   b6542:	685b      	ldr	r3, [r3, #4]
   b6544:	9301      	str	r3, [sp, #4]
   b6546:	bd08      	pop	{r3, pc}
   b6548:	00030240 	.word	0x00030240

000b654c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b654c:	b508      	push	{r3, lr}
   b654e:	4b02      	ldr	r3, [pc, #8]	; (b6558 <network_connecting+0xc>)
   b6550:	681b      	ldr	r3, [r3, #0]
   b6552:	689b      	ldr	r3, [r3, #8]
   b6554:	9301      	str	r3, [sp, #4]
   b6556:	bd08      	pop	{r3, pc}
   b6558:	00030240 	.word	0x00030240

000b655c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b655c:	b508      	push	{r3, lr}
   b655e:	4b02      	ldr	r3, [pc, #8]	; (b6568 <network_disconnect+0xc>)
   b6560:	681b      	ldr	r3, [r3, #0]
   b6562:	68db      	ldr	r3, [r3, #12]
   b6564:	9301      	str	r3, [sp, #4]
   b6566:	bd08      	pop	{r3, pc}
   b6568:	00030240 	.word	0x00030240

000b656c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b656c:	b508      	push	{r3, lr}
   b656e:	4b02      	ldr	r3, [pc, #8]	; (b6578 <network_ready+0xc>)
   b6570:	681b      	ldr	r3, [r3, #0]
   b6572:	691b      	ldr	r3, [r3, #16]
   b6574:	9301      	str	r3, [sp, #4]
   b6576:	bd08      	pop	{r3, pc}
   b6578:	00030240 	.word	0x00030240

000b657c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b657c:	b508      	push	{r3, lr}
   b657e:	4b02      	ldr	r3, [pc, #8]	; (b6588 <network_on+0xc>)
   b6580:	681b      	ldr	r3, [r3, #0]
   b6582:	695b      	ldr	r3, [r3, #20]
   b6584:	9301      	str	r3, [sp, #4]
   b6586:	bd08      	pop	{r3, pc}
   b6588:	00030240 	.word	0x00030240

000b658c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b658c:	b508      	push	{r3, lr}
   b658e:	4b02      	ldr	r3, [pc, #8]	; (b6598 <network_off+0xc>)
   b6590:	681b      	ldr	r3, [r3, #0]
   b6592:	699b      	ldr	r3, [r3, #24]
   b6594:	9301      	str	r3, [sp, #4]
   b6596:	bd08      	pop	{r3, pc}
   b6598:	00030240 	.word	0x00030240

000b659c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b659c:	b508      	push	{r3, lr}
   b659e:	4b02      	ldr	r3, [pc, #8]	; (b65a8 <network_listen+0xc>)
   b65a0:	681b      	ldr	r3, [r3, #0]
   b65a2:	69db      	ldr	r3, [r3, #28]
   b65a4:	9301      	str	r3, [sp, #4]
   b65a6:	bd08      	pop	{r3, pc}
   b65a8:	00030240 	.word	0x00030240

000b65ac <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b65ac:	b508      	push	{r3, lr}
   b65ae:	4b02      	ldr	r3, [pc, #8]	; (b65b8 <network_listening+0xc>)
   b65b0:	681b      	ldr	r3, [r3, #0]
   b65b2:	6a1b      	ldr	r3, [r3, #32]
   b65b4:	9301      	str	r3, [sp, #4]
   b65b6:	bd08      	pop	{r3, pc}
   b65b8:	00030240 	.word	0x00030240

000b65bc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b65bc:	b508      	push	{r3, lr}
   b65be:	4b02      	ldr	r3, [pc, #8]	; (b65c8 <network_set_listen_timeout+0xc>)
   b65c0:	681b      	ldr	r3, [r3, #0]
   b65c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b65c4:	9301      	str	r3, [sp, #4]
   b65c6:	bd08      	pop	{r3, pc}
   b65c8:	00030240 	.word	0x00030240

000b65cc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b65cc:	b508      	push	{r3, lr}
   b65ce:	4b02      	ldr	r3, [pc, #8]	; (b65d8 <network_get_listen_timeout+0xc>)
   b65d0:	681b      	ldr	r3, [r3, #0]
   b65d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b65d4:	9301      	str	r3, [sp, #4]
   b65d6:	bd08      	pop	{r3, pc}
   b65d8:	00030240 	.word	0x00030240

000b65dc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b65dc:	b508      	push	{r3, lr}
   b65de:	4b02      	ldr	r3, [pc, #8]	; (b65e8 <network_is_on+0xc>)
   b65e0:	681b      	ldr	r3, [r3, #0]
   b65e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b65e4:	9301      	str	r3, [sp, #4]
   b65e6:	bd08      	pop	{r3, pc}
   b65e8:	00030240 	.word	0x00030240

000b65ec <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b65ec:	b508      	push	{r3, lr}
   b65ee:	4b02      	ldr	r3, [pc, #8]	; (b65f8 <network_is_off+0xc>)
   b65f0:	681b      	ldr	r3, [r3, #0]
   b65f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b65f4:	9301      	str	r3, [sp, #4]
   b65f6:	bd08      	pop	{r3, pc}
   b65f8:	00030240 	.word	0x00030240

000b65fc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b65fc:	b508      	push	{r3, lr}
   b65fe:	4b02      	ldr	r3, [pc, #8]	; (b6608 <malloc+0xc>)
   b6600:	681b      	ldr	r3, [r3, #0]
   b6602:	681b      	ldr	r3, [r3, #0]
   b6604:	9301      	str	r3, [sp, #4]
   b6606:	bd08      	pop	{r3, pc}
   b6608:	0003021c 	.word	0x0003021c

000b660c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b660c:	b508      	push	{r3, lr}
   b660e:	4b02      	ldr	r3, [pc, #8]	; (b6618 <free+0xc>)
   b6610:	681b      	ldr	r3, [r3, #0]
   b6612:	685b      	ldr	r3, [r3, #4]
   b6614:	9301      	str	r3, [sp, #4]
   b6616:	bd08      	pop	{r3, pc}
   b6618:	0003021c 	.word	0x0003021c

000b661c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b661c:	b508      	push	{r3, lr}
   b661e:	4b02      	ldr	r3, [pc, #8]	; (b6628 <realloc+0xc>)
   b6620:	681b      	ldr	r3, [r3, #0]
   b6622:	689b      	ldr	r3, [r3, #8]
   b6624:	9301      	str	r3, [sp, #4]
   b6626:	bd08      	pop	{r3, pc}
   b6628:	0003021c 	.word	0x0003021c

000b662c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b662c:	b508      	push	{r3, lr}
   b662e:	4b02      	ldr	r3, [pc, #8]	; (b6638 <vsnprintf+0xc>)
   b6630:	681b      	ldr	r3, [r3, #0]
   b6632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6634:	9301      	str	r3, [sp, #4]
   b6636:	bd08      	pop	{r3, pc}
   b6638:	0003021c 	.word	0x0003021c

000b663c <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b663c:	b508      	push	{r3, lr}
   b663e:	4b02      	ldr	r3, [pc, #8]	; (b6648 <__errno+0xc>)
   b6640:	681b      	ldr	r3, [r3, #0]
   b6642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6644:	9301      	str	r3, [sp, #4]
   b6646:	bd08      	pop	{r3, pc}
   b6648:	0003021c 	.word	0x0003021c

000b664c <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b664c:	b508      	push	{r3, lr}
   b664e:	4b02      	ldr	r3, [pc, #8]	; (b6658 <__assert_func+0xc>)
   b6650:	681b      	ldr	r3, [r3, #0]
   b6652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6654:	9301      	str	r3, [sp, #4]
   b6656:	bd08      	pop	{r3, pc}
   b6658:	0003021c 	.word	0x0003021c

000b665c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b665c:	b508      	push	{r3, lr}
   b665e:	4b02      	ldr	r3, [pc, #8]	; (b6668 <newlib_impure_ptr_callback+0xc>)
   b6660:	681b      	ldr	r3, [r3, #0]
   b6662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6664:	9301      	str	r3, [sp, #4]
   b6666:	bd08      	pop	{r3, pc}
   b6668:	0003021c 	.word	0x0003021c

000b666c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b666c:	2100      	movs	r1, #0
   b666e:	f7ff bf39 	b.w	b64e4 <system_delay_ms>
	...

000b6674 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6674:	4802      	ldr	r0, [pc, #8]	; (b6680 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6676:	2300      	movs	r3, #0
   b6678:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b667a:	f7ff bd3b 	b.w	b60f4 <os_mutex_recursive_create>
   b667e:	bf00      	nop
   b6680:	2003e6c4 	.word	0x2003e6c4

000b6684 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6684:	2200      	movs	r2, #0
   b6686:	6840      	ldr	r0, [r0, #4]
   b6688:	4611      	mov	r1, r2
   b668a:	f7ff bf8f 	b.w	b65ac <network_listening>

000b668e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b668e:	2200      	movs	r2, #0
   b6690:	6840      	ldr	r0, [r0, #4]
   b6692:	4611      	mov	r1, r2
   b6694:	f7ff bf9a 	b.w	b65cc <network_get_listen_timeout>

000b6698 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6698:	6840      	ldr	r0, [r0, #4]
   b669a:	2200      	movs	r2, #0
   b669c:	f7ff bf8e 	b.w	b65bc <network_set_listen_timeout>

000b66a0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b66a0:	6840      	ldr	r0, [r0, #4]
   b66a2:	2200      	movs	r2, #0
   b66a4:	f081 0101 	eor.w	r1, r1, #1
   b66a8:	f7ff bf78 	b.w	b659c <network_listen>

000b66ac <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b66ac:	2300      	movs	r3, #0
   b66ae:	6840      	ldr	r0, [r0, #4]
   b66b0:	461a      	mov	r2, r3
   b66b2:	4619      	mov	r1, r3
   b66b4:	f7ff bf6a 	b.w	b658c <network_off>

000b66b8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b66b8:	2300      	movs	r3, #0
   b66ba:	6840      	ldr	r0, [r0, #4]
   b66bc:	461a      	mov	r2, r3
   b66be:	4619      	mov	r1, r3
   b66c0:	f7ff bf5c 	b.w	b657c <network_on>

000b66c4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b66c4:	2200      	movs	r2, #0
   b66c6:	6840      	ldr	r0, [r0, #4]
   b66c8:	4611      	mov	r1, r2
   b66ca:	f7ff bf4f 	b.w	b656c <network_ready>

000b66ce <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b66ce:	2200      	movs	r2, #0
   b66d0:	6840      	ldr	r0, [r0, #4]
   b66d2:	4611      	mov	r1, r2
   b66d4:	f7ff bf3a 	b.w	b654c <network_connecting>

000b66d8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b66d8:	6840      	ldr	r0, [r0, #4]
   b66da:	2200      	movs	r2, #0
   b66dc:	2102      	movs	r1, #2
   b66de:	f7ff bf3d 	b.w	b655c <network_disconnect>

000b66e2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b66e2:	2300      	movs	r3, #0
   b66e4:	6840      	ldr	r0, [r0, #4]
   b66e6:	461a      	mov	r2, r3
   b66e8:	f7ff bf28 	b.w	b653c <network_connect>

000b66ec <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b66ec:	4b02      	ldr	r3, [pc, #8]	; (b66f8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b66ee:	2203      	movs	r2, #3
   b66f0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b66f2:	4a02      	ldr	r2, [pc, #8]	; (b66fc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b66f4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b66f6:	4770      	bx	lr
   b66f8:	2003e6c8 	.word	0x2003e6c8
   b66fc:	000b920c 	.word	0x000b920c

000b6700 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6700:	4770      	bx	lr

000b6702 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6704:	4606      	mov	r6, r0
   b6706:	4615      	mov	r5, r2
   b6708:	460c      	mov	r4, r1
   b670a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b670c:	42bc      	cmp	r4, r7
   b670e:	d006      	beq.n	b671e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6710:	6833      	ldr	r3, [r6, #0]
   b6712:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6716:	689b      	ldr	r3, [r3, #8]
   b6718:	4630      	mov	r0, r6
   b671a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b671c:	e7f6      	b.n	b670c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b671e:	4628      	mov	r0, r5
   b6720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6722 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6722:	7c00      	ldrb	r0, [r0, #16]
   b6724:	2200      	movs	r2, #0
   b6726:	f7ff bd5d 	b.w	b61e4 <hal_i2c_write>

000b672a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b672a:	7c00      	ldrb	r0, [r0, #16]
   b672c:	2100      	movs	r1, #0
   b672e:	f7ff bd61 	b.w	b61f4 <hal_i2c_available>

000b6732 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6732:	7c00      	ldrb	r0, [r0, #16]
   b6734:	2100      	movs	r1, #0
   b6736:	f7ff bd65 	b.w	b6204 <hal_i2c_read>

000b673a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b673a:	7c00      	ldrb	r0, [r0, #16]
   b673c:	2100      	movs	r1, #0
   b673e:	f7ff bd69 	b.w	b6214 <hal_i2c_peek>

000b6742 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6742:	7c00      	ldrb	r0, [r0, #16]
   b6744:	2100      	movs	r1, #0
   b6746:	f7ff bd6d 	b.w	b6224 <hal_i2c_flush>

000b674a <_ZN7TwoWireD0Ev>:
   b674a:	b510      	push	{r4, lr}
   b674c:	2114      	movs	r1, #20
   b674e:	4604      	mov	r4, r0
   b6750:	f7fd fca3 	bl	b409a <_ZdlPvj>
   b6754:	4620      	mov	r0, r4
   b6756:	bd10      	pop	{r4, pc}

000b6758 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6758:	b538      	push	{r3, r4, r5, lr}
   b675a:	4604      	mov	r4, r0
   b675c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b675e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6762:	2200      	movs	r2, #0
   b6764:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6768:	4b09      	ldr	r3, [pc, #36]	; (b6790 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b676a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b676c:	4608      	mov	r0, r1
   b676e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6770:	4629      	mov	r1, r5
   b6772:	f7ff fd67 	bl	b6244 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6776:	30bf      	adds	r0, #191	; 0xbf
   b6778:	d108      	bne.n	b678c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b677a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b677c:	07db      	lsls	r3, r3, #31
   b677e:	d505      	bpl.n	b678c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6780:	6868      	ldr	r0, [r5, #4]
   b6782:	f7ff ff43 	bl	b660c <free>
    free(conf.tx_buffer);
   b6786:	68e8      	ldr	r0, [r5, #12]
   b6788:	f7ff ff40 	bl	b660c <free>
}
   b678c:	4620      	mov	r0, r4
   b678e:	bd38      	pop	{r3, r4, r5, pc}
   b6790:	000b9248 	.word	0x000b9248

000b6794 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6794:	2300      	movs	r3, #0
   b6796:	7c00      	ldrb	r0, [r0, #16]
   b6798:	461a      	mov	r2, r3
   b679a:	4619      	mov	r1, r3
   b679c:	f7ff bd0a 	b.w	b61b4 <hal_i2c_begin>

000b67a0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b67a0:	7c00      	ldrb	r0, [r0, #16]
   b67a2:	2200      	movs	r2, #0
   b67a4:	f7ff bd0e 	b.w	b61c4 <hal_i2c_begin_transmission>

000b67a8 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b67a8:	b2c9      	uxtb	r1, r1
   b67aa:	f7ff bff9 	b.w	b67a0 <_ZN7TwoWire17beginTransmissionEh>

000b67ae <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b67ae:	7c00      	ldrb	r0, [r0, #16]
   b67b0:	2200      	movs	r2, #0
   b67b2:	f7ff bd0f 	b.w	b61d4 <hal_i2c_end_transmission>

000b67b6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b67b6:	2101      	movs	r1, #1
   b67b8:	f7ff bff9 	b.w	b67ae <_ZN7TwoWire15endTransmissionEh>

000b67bc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b67bc:	4770      	bx	lr

000b67be <_ZN9IPAddressD0Ev>:
   b67be:	b510      	push	{r4, lr}
   b67c0:	2118      	movs	r1, #24
   b67c2:	4604      	mov	r4, r0
   b67c4:	f7fd fc69 	bl	b409a <_ZdlPvj>
   b67c8:	4620      	mov	r0, r4
   b67ca:	bd10      	pop	{r4, pc}

000b67cc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b67cc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b67ce:	7d03      	ldrb	r3, [r0, #20]
   b67d0:	2b06      	cmp	r3, #6
{
   b67d2:	b08d      	sub	sp, #52	; 0x34
   b67d4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b67d6:	f100 0704 	add.w	r7, r0, #4
   b67da:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b67de:	d012      	beq.n	b6806 <_ZNK9IPAddress7printToER5Print+0x3a>
   b67e0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b67e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b67e8:	220a      	movs	r2, #10
   b67ea:	4630      	mov	r0, r6
   b67ec:	f000 f973 	bl	b6ad6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b67f0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b67f2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b67f4:	d019      	beq.n	b682a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b67f6:	2c00      	cmp	r4, #0
   b67f8:	d0f4      	beq.n	b67e4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b67fa:	212e      	movs	r1, #46	; 0x2e
   b67fc:	4630      	mov	r0, r6
   b67fe:	f000 f951 	bl	b6aa4 <_ZN5Print5printEc>
   b6802:	4404      	add	r4, r0
   b6804:	e7ee      	b.n	b67e4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6806:	232f      	movs	r3, #47	; 0x2f
   b6808:	466a      	mov	r2, sp
   b680a:	4639      	mov	r1, r7
   b680c:	200a      	movs	r0, #10
		buf[0] = 0;
   b680e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6812:	f7ff fd27 	bl	b6264 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6816:	4668      	mov	r0, sp
   b6818:	f002 f836 	bl	b8888 <strlen>
   b681c:	6833      	ldr	r3, [r6, #0]
   b681e:	4602      	mov	r2, r0
   b6820:	68db      	ldr	r3, [r3, #12]
   b6822:	4669      	mov	r1, sp
   b6824:	4630      	mov	r0, r6
   b6826:	4798      	blx	r3
   b6828:	4604      	mov	r4, r0
    }
    return n;
}
   b682a:	4620      	mov	r0, r4
   b682c:	b00d      	add	sp, #52	; 0x34
   b682e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6830 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6830:	b510      	push	{r4, lr}
   b6832:	4b05      	ldr	r3, [pc, #20]	; (b6848 <_ZN9IPAddressC1Ev+0x18>)
   b6834:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6836:	2211      	movs	r2, #17
   b6838:	f840 3b04 	str.w	r3, [r0], #4
   b683c:	2100      	movs	r1, #0
   b683e:	f001 ffdb 	bl	b87f8 <memset>
}
   b6842:	4620      	mov	r0, r4
   b6844:	bd10      	pop	{r4, pc}
   b6846:	bf00      	nop
   b6848:	000b9270 	.word	0x000b9270

000b684c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b684c:	4603      	mov	r3, r0
   b684e:	4a07      	ldr	r2, [pc, #28]	; (b686c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6850:	b510      	push	{r4, lr}
   b6852:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6856:	f101 0210 	add.w	r2, r1, #16
   b685a:	f851 4b04 	ldr.w	r4, [r1], #4
   b685e:	f843 4b04 	str.w	r4, [r3], #4
   b6862:	4291      	cmp	r1, r2
   b6864:	d1f9      	bne.n	b685a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6866:	780a      	ldrb	r2, [r1, #0]
   b6868:	701a      	strb	r2, [r3, #0]
}
   b686a:	bd10      	pop	{r4, pc}
   b686c:	000b9270 	.word	0x000b9270

000b6870 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b6870:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b6872:	2b04      	cmp	r3, #4
   b6874:	d104      	bne.n	b6880 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b6876:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6878:	3800      	subs	r0, #0
   b687a:	bf18      	it	ne
   b687c:	2001      	movne	r0, #1
   b687e:	4770      	bx	lr
    } else if (version() == 6) {
   b6880:	2b06      	cmp	r3, #6
   b6882:	d107      	bne.n	b6894 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6884:	6843      	ldr	r3, [r0, #4]
   b6886:	b93b      	cbnz	r3, b6898 <_ZNK9IPAddresscvbEv+0x28>
   b6888:	6883      	ldr	r3, [r0, #8]
   b688a:	b92b      	cbnz	r3, b6898 <_ZNK9IPAddresscvbEv+0x28>
   b688c:	68c3      	ldr	r3, [r0, #12]
   b688e:	b91b      	cbnz	r3, b6898 <_ZNK9IPAddresscvbEv+0x28>
   b6890:	6900      	ldr	r0, [r0, #16]
   b6892:	e7f1      	b.n	b6878 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b6894:	2000      	movs	r0, #0
   b6896:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b6898:	2001      	movs	r0, #1
}
   b689a:	4770      	bx	lr

000b689c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b689c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b689e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b68a2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b68a6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b68aa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b68ae:	2304      	movs	r3, #4
   b68b0:	6041      	str	r1, [r0, #4]
   b68b2:	7503      	strb	r3, [r0, #20]
}
   b68b4:	bd10      	pop	{r4, pc}
	...

000b68b8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b68b8:	b507      	push	{r0, r1, r2, lr}
   b68ba:	4b06      	ldr	r3, [pc, #24]	; (b68d4 <_ZN9IPAddressC1EPKh+0x1c>)
   b68bc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b68be:	78cb      	ldrb	r3, [r1, #3]
   b68c0:	9300      	str	r3, [sp, #0]
   b68c2:	788b      	ldrb	r3, [r1, #2]
   b68c4:	784a      	ldrb	r2, [r1, #1]
   b68c6:	7809      	ldrb	r1, [r1, #0]
   b68c8:	f7ff ffe8 	bl	b689c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b68cc:	b003      	add	sp, #12
   b68ce:	f85d fb04 	ldr.w	pc, [sp], #4
   b68d2:	bf00      	nop
   b68d4:	000b9270 	.word	0x000b9270

000b68d8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b68d8:	4b01      	ldr	r3, [pc, #4]	; (b68e0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b68da:	4a02      	ldr	r2, [pc, #8]	; (b68e4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b68dc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b68de:	4770      	bx	lr
   b68e0:	2003e6d0 	.word	0x2003e6d0
   b68e4:	000b927c 	.word	0x000b927c

000b68e8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b68e8:	2300      	movs	r3, #0
   b68ea:	6840      	ldr	r0, [r0, #4]
   b68ec:	461a      	mov	r2, r3
   b68ee:	f7ff be25 	b.w	b653c <network_connect>

000b68f2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b68f2:	6840      	ldr	r0, [r0, #4]
   b68f4:	2200      	movs	r2, #0
   b68f6:	2102      	movs	r1, #2
   b68f8:	f7ff be30 	b.w	b655c <network_disconnect>

000b68fc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b68fc:	2200      	movs	r2, #0
   b68fe:	6840      	ldr	r0, [r0, #4]
   b6900:	4611      	mov	r1, r2
   b6902:	f7ff be23 	b.w	b654c <network_connecting>

000b6906 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6906:	2200      	movs	r2, #0
   b6908:	6840      	ldr	r0, [r0, #4]
   b690a:	4611      	mov	r1, r2
   b690c:	f7ff be2e 	b.w	b656c <network_ready>

000b6910 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6910:	2300      	movs	r3, #0
   b6912:	6840      	ldr	r0, [r0, #4]
   b6914:	461a      	mov	r2, r3
   b6916:	4619      	mov	r1, r3
   b6918:	f7ff be30 	b.w	b657c <network_on>

000b691c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b691c:	2300      	movs	r3, #0
   b691e:	6840      	ldr	r0, [r0, #4]
   b6920:	461a      	mov	r2, r3
   b6922:	4619      	mov	r1, r3
   b6924:	f7ff be32 	b.w	b658c <network_off>

000b6928 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6928:	6840      	ldr	r0, [r0, #4]
   b692a:	2100      	movs	r1, #0
   b692c:	f7ff be56 	b.w	b65dc <network_is_on>

000b6930 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6930:	6840      	ldr	r0, [r0, #4]
   b6932:	2100      	movs	r1, #0
   b6934:	f7ff be5a 	b.w	b65ec <network_is_off>

000b6938 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6938:	6840      	ldr	r0, [r0, #4]
   b693a:	2200      	movs	r2, #0
   b693c:	f081 0101 	eor.w	r1, r1, #1
   b6940:	f7ff be2c 	b.w	b659c <network_listen>

000b6944 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6944:	6840      	ldr	r0, [r0, #4]
   b6946:	2200      	movs	r2, #0
   b6948:	f7ff be38 	b.w	b65bc <network_set_listen_timeout>

000b694c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b694c:	2200      	movs	r2, #0
   b694e:	6840      	ldr	r0, [r0, #4]
   b6950:	4611      	mov	r1, r2
   b6952:	f7ff be3b 	b.w	b65cc <network_get_listen_timeout>

000b6956 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6956:	2200      	movs	r2, #0
   b6958:	6840      	ldr	r0, [r0, #4]
   b695a:	4611      	mov	r1, r2
   b695c:	f7ff be26 	b.w	b65ac <network_listening>

000b6960 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6964:	b095      	sub	sp, #84	; 0x54
   b6966:	4614      	mov	r4, r2
   b6968:	460d      	mov	r5, r1
   b696a:	4607      	mov	r7, r0
    IPAddress addr;
   b696c:	f7ff ff60 	bl	b6830 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6970:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6972:	221c      	movs	r2, #28
   b6974:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6976:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6978:	f001 ff3e 	bl	b87f8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b697c:	2340      	movs	r3, #64	; 0x40
   b697e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6980:	4620      	mov	r0, r4
   b6982:	466b      	mov	r3, sp
   b6984:	aa0c      	add	r2, sp, #48	; 0x30
   b6986:	2100      	movs	r1, #0
   b6988:	f7ff fc8c 	bl	b62a4 <netdb_getaddrinfo>
    if (!r) {
   b698c:	4604      	mov	r4, r0
   b698e:	2800      	cmp	r0, #0
   b6990:	d14b      	bne.n	b6a2a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6992:	4602      	mov	r2, r0
   b6994:	2101      	movs	r1, #1
   b6996:	6868      	ldr	r0, [r5, #4]
   b6998:	f7ff fde8 	bl	b656c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b699c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b699e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b69a0:	4622      	mov	r2, r4
   b69a2:	6868      	ldr	r0, [r5, #4]
   b69a4:	f7ff fde2 	bl	b656c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b69a8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b69aa:	4681      	mov	r9, r0
        bool ok = false;
   b69ac:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b69ae:	2e00      	cmp	r6, #0
   b69b0:	d03b      	beq.n	b6a2a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b69b2:	2900      	cmp	r1, #0
   b69b4:	d139      	bne.n	b6a2a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b69b6:	6873      	ldr	r3, [r6, #4]
   b69b8:	2b02      	cmp	r3, #2
   b69ba:	d003      	beq.n	b69c4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b69bc:	2b0a      	cmp	r3, #10
   b69be:	d011      	beq.n	b69e4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b69c0:	69f6      	ldr	r6, [r6, #28]
   b69c2:	e7f4      	b.n	b69ae <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b69c4:	f1b8 0f00 	cmp.w	r8, #0
   b69c8:	d0fa      	beq.n	b69c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b69ca:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b69cc:	a806      	add	r0, sp, #24
   b69ce:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b69d0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b69d2:	f7ff ff71 	bl	b68b8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b69d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b69d8:	1d3c      	adds	r4, r7, #4
   b69da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b69dc:	682b      	ldr	r3, [r5, #0]
   b69de:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b69e0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b69e2:	e7ed      	b.n	b69c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b69e4:	f1b9 0f00 	cmp.w	r9, #0
   b69e8:	d0ea      	beq.n	b69c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b69ea:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b69ec:	2210      	movs	r2, #16
   b69ee:	a801      	add	r0, sp, #4
   b69f0:	f001 ff02 	bl	b87f8 <memset>
                    a.v = 6;
   b69f4:	2306      	movs	r3, #6
   b69f6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b69fa:	ad01      	add	r5, sp, #4
   b69fc:	f104 0308 	add.w	r3, r4, #8
   b6a00:	3418      	adds	r4, #24
   b6a02:	6818      	ldr	r0, [r3, #0]
   b6a04:	6859      	ldr	r1, [r3, #4]
   b6a06:	462a      	mov	r2, r5
   b6a08:	c203      	stmia	r2!, {r0, r1}
   b6a0a:	3308      	adds	r3, #8
   b6a0c:	42a3      	cmp	r3, r4
   b6a0e:	4615      	mov	r5, r2
   b6a10:	d1f7      	bne.n	b6a02 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6a12:	a901      	add	r1, sp, #4
   b6a14:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6a16:	ad07      	add	r5, sp, #28
   b6a18:	f7ff ff18 	bl	b684c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6a1e:	1d3c      	adds	r4, r7, #4
   b6a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6a22:	682b      	ldr	r3, [r5, #0]
   b6a24:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6a26:	4649      	mov	r1, r9
   b6a28:	e7ca      	b.n	b69c0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6a2a:	9800      	ldr	r0, [sp, #0]
   b6a2c:	f7ff fc32 	bl	b6294 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6a30:	4638      	mov	r0, r7
   b6a32:	b015      	add	sp, #84	; 0x54
   b6a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6a38 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6a38:	4b02      	ldr	r3, [pc, #8]	; (b6a44 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6a3a:	4a03      	ldr	r2, [pc, #12]	; (b6a48 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6a3c:	601a      	str	r2, [r3, #0]
   b6a3e:	2200      	movs	r2, #0
   b6a40:	605a      	str	r2, [r3, #4]

} // spark
   b6a42:	4770      	bx	lr
   b6a44:	2003e6d4 	.word	0x2003e6d4
   b6a48:	000b9288 	.word	0x000b9288

000b6a4c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6a4e:	4606      	mov	r6, r0
   b6a50:	460d      	mov	r5, r1
  size_t n = 0;
   b6a52:	188f      	adds	r7, r1, r2
   b6a54:	2400      	movs	r4, #0
  while (size--) {
   b6a56:	42bd      	cmp	r5, r7
   b6a58:	d00c      	beq.n	b6a74 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6a5a:	6833      	ldr	r3, [r6, #0]
   b6a5c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6a60:	689b      	ldr	r3, [r3, #8]
   b6a62:	4630      	mov	r0, r6
   b6a64:	4798      	blx	r3
     if (chunk>=0)
   b6a66:	1e03      	subs	r3, r0, #0
   b6a68:	db01      	blt.n	b6a6e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6a6a:	441c      	add	r4, r3
  while (size--) {
   b6a6c:	e7f3      	b.n	b6a56 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6a6e:	2c00      	cmp	r4, #0
   b6a70:	bf08      	it	eq
   b6a72:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6a74:	4620      	mov	r0, r4
   b6a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6a78 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6a78:	b513      	push	{r0, r1, r4, lr}
   b6a7a:	4604      	mov	r4, r0
    }
   b6a7c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6a7e:	b159      	cbz	r1, b6a98 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6a80:	9101      	str	r1, [sp, #4]
   b6a82:	f001 ff01 	bl	b8888 <strlen>
   b6a86:	6823      	ldr	r3, [r4, #0]
   b6a88:	9901      	ldr	r1, [sp, #4]
   b6a8a:	68db      	ldr	r3, [r3, #12]
   b6a8c:	4602      	mov	r2, r0
   b6a8e:	4620      	mov	r0, r4
    }
   b6a90:	b002      	add	sp, #8
   b6a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6a96:	4718      	bx	r3
    }
   b6a98:	b002      	add	sp, #8
   b6a9a:	bd10      	pop	{r4, pc}

000b6a9c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6a9c:	b508      	push	{r3, lr}
  return write(str);
   b6a9e:	f7ff ffeb 	bl	b6a78 <_ZN5Print5writeEPKc>
}
   b6aa2:	bd08      	pop	{r3, pc}

000b6aa4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6aa4:	6803      	ldr	r3, [r0, #0]
   b6aa6:	689b      	ldr	r3, [r3, #8]
   b6aa8:	4718      	bx	r3

000b6aaa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6aaa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6aac:	210d      	movs	r1, #13
{
   b6aae:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6ab0:	f7ff fff8 	bl	b6aa4 <_ZN5Print5printEc>
  n += print('\n');
   b6ab4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6ab6:	4604      	mov	r4, r0
  n += print('\n');
   b6ab8:	4628      	mov	r0, r5
   b6aba:	f7ff fff3 	bl	b6aa4 <_ZN5Print5printEc>
  return n;
}
   b6abe:	4420      	add	r0, r4
   b6ac0:	bd38      	pop	{r3, r4, r5, pc}

000b6ac2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b6ac2:	b538      	push	{r3, r4, r5, lr}
   b6ac4:	4605      	mov	r5, r0
  return write(str);
   b6ac6:	f7ff ffd7 	bl	b6a78 <_ZN5Print5writeEPKc>
   b6aca:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6acc:	4628      	mov	r0, r5
   b6ace:	f7ff ffec 	bl	b6aaa <_ZN5Print7printlnEv>
  return n;
}
   b6ad2:	4420      	add	r0, r4
   b6ad4:	bd38      	pop	{r3, r4, r5, pc}

000b6ad6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6ad6:	b530      	push	{r4, r5, lr}
   b6ad8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6ada:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6adc:	2a01      	cmp	r2, #1
  *str = '\0';
   b6ade:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6ae2:	bf98      	it	ls
   b6ae4:	220a      	movls	r2, #10
   b6ae6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6ae8:	460d      	mov	r5, r1
   b6aea:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6aee:	fb01 5312 	mls	r3, r1, r2, r5
   b6af2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6af6:	2b09      	cmp	r3, #9
   b6af8:	bf94      	ite	ls
   b6afa:	3330      	addls	r3, #48	; 0x30
   b6afc:	3337      	addhi	r3, #55	; 0x37
   b6afe:	b2db      	uxtb	r3, r3
  } while(n);
   b6b00:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6b02:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6b06:	d9ef      	bls.n	b6ae8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6b08:	4621      	mov	r1, r4
   b6b0a:	f7ff ffb5 	bl	b6a78 <_ZN5Print5writeEPKc>
}
   b6b0e:	b00b      	add	sp, #44	; 0x2c
   b6b10:	bd30      	pop	{r4, r5, pc}
	...

000b6b14 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b6b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6b18:	ec55 4b10 	vmov	r4, r5, d0
   b6b1c:	4606      	mov	r6, r0
   b6b1e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b6b20:	ee10 2a10 	vmov	r2, s0
   b6b24:	ee10 0a10 	vmov	r0, s0
   b6b28:	462b      	mov	r3, r5
   b6b2a:	4629      	mov	r1, r5
   b6b2c:	f001 fdee 	bl	b870c <__aeabi_dcmpun>
   b6b30:	b140      	cbz	r0, b6b44 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b6b32:	4953      	ldr	r1, [pc, #332]	; (b6c80 <_ZN5Print10printFloatEdh+0x16c>)
   b6b34:	4630      	mov	r0, r6
   b6b36:	f7ff ff9f 	bl	b6a78 <_ZN5Print5writeEPKc>
   b6b3a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b6b3c:	4650      	mov	r0, sl
   b6b3e:	b003      	add	sp, #12
   b6b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b6b44:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b6b48:	4b4e      	ldr	r3, [pc, #312]	; (b6c84 <_ZN5Print10printFloatEdh+0x170>)
   b6b4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6b4e:	4620      	mov	r0, r4
   b6b50:	4649      	mov	r1, r9
   b6b52:	f001 fddb 	bl	b870c <__aeabi_dcmpun>
   b6b56:	b948      	cbnz	r0, b6b6c <_ZN5Print10printFloatEdh+0x58>
   b6b58:	4b4a      	ldr	r3, [pc, #296]	; (b6c84 <_ZN5Print10printFloatEdh+0x170>)
   b6b5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6b5e:	4620      	mov	r0, r4
   b6b60:	4649      	mov	r1, r9
   b6b62:	f001 fdb5 	bl	b86d0 <__aeabi_dcmple>
   b6b66:	b908      	cbnz	r0, b6b6c <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b6b68:	4947      	ldr	r1, [pc, #284]	; (b6c88 <_ZN5Print10printFloatEdh+0x174>)
   b6b6a:	e7e3      	b.n	b6b34 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b6b6c:	4b47      	ldr	r3, [pc, #284]	; (b6c8c <_ZN5Print10printFloatEdh+0x178>)
   b6b6e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b6b72:	4620      	mov	r0, r4
   b6b74:	4629      	mov	r1, r5
   b6b76:	f001 fdbf 	bl	b86f8 <__aeabi_dcmpgt>
   b6b7a:	b108      	cbz	r0, b6b80 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b6b7c:	4944      	ldr	r1, [pc, #272]	; (b6c90 <_ZN5Print10printFloatEdh+0x17c>)
   b6b7e:	e7d9      	b.n	b6b34 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b6b80:	4b44      	ldr	r3, [pc, #272]	; (b6c94 <_ZN5Print10printFloatEdh+0x180>)
   b6b82:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b6b86:	4620      	mov	r0, r4
   b6b88:	4629      	mov	r1, r5
   b6b8a:	f001 fd97 	bl	b86bc <__aeabi_dcmplt>
   b6b8e:	2800      	cmp	r0, #0
   b6b90:	d1f4      	bne.n	b6b7c <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b6b92:	2200      	movs	r2, #0
   b6b94:	2300      	movs	r3, #0
   b6b96:	4620      	mov	r0, r4
   b6b98:	4629      	mov	r1, r5
   b6b9a:	f001 fd8f 	bl	b86bc <__aeabi_dcmplt>
   b6b9e:	b1d0      	cbz	r0, b6bd6 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b6ba0:	212d      	movs	r1, #45	; 0x2d
   b6ba2:	4630      	mov	r0, r6
   b6ba4:	f7ff ff7e 	bl	b6aa4 <_ZN5Print5printEc>
     number = -number;
   b6ba8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b6bac:	4682      	mov	sl, r0
     number = -number;
   b6bae:	461d      	mov	r5, r3
  double rounding = 0.5;
   b6bb0:	4939      	ldr	r1, [pc, #228]	; (b6c98 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b6bb2:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b6ca0 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b6bb6:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b6bba:	2000      	movs	r0, #0
    rounding /= 10.0;
   b6bbc:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b6bc0:	fa5f f38b 	uxtb.w	r3, fp
   b6bc4:	429f      	cmp	r7, r3
   b6bc6:	d908      	bls.n	b6bda <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b6bc8:	4642      	mov	r2, r8
   b6bca:	464b      	mov	r3, r9
   b6bcc:	f001 fc2e 	bl	b842c <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b6bd0:	f10b 0b01 	add.w	fp, fp, #1
   b6bd4:	e7f4      	b.n	b6bc0 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b6bd6:	4682      	mov	sl, r0
   b6bd8:	e7ea      	b.n	b6bb0 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b6bda:	4622      	mov	r2, r4
   b6bdc:	462b      	mov	r3, r5
   b6bde:	f001 f945 	bl	b7e6c <__adddf3>
   b6be2:	460d      	mov	r5, r1
   b6be4:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b6be6:	f001 fdcf 	bl	b8788 <__aeabi_d2uiz>
   b6bea:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b6bec:	f001 fa7a 	bl	b80e4 <__aeabi_ui2d>
   b6bf0:	4602      	mov	r2, r0
   b6bf2:	460b      	mov	r3, r1
   b6bf4:	4620      	mov	r0, r4
   b6bf6:	4629      	mov	r1, r5
   b6bf8:	f001 f936 	bl	b7e68 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b6bfc:	220a      	movs	r2, #10
   b6bfe:	4604      	mov	r4, r0
   b6c00:	460d      	mov	r5, r1
   b6c02:	4630      	mov	r0, r6
   b6c04:	4641      	mov	r1, r8
   b6c06:	f7ff ff66 	bl	b6ad6 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b6c0a:	4482      	add	sl, r0
  if (digits > 0) {
   b6c0c:	2f00      	cmp	r7, #0
   b6c0e:	d095      	beq.n	b6b3c <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b6c10:	4922      	ldr	r1, [pc, #136]	; (b6c9c <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b6c12:	f8df 908c 	ldr.w	r9, [pc, #140]	; b6ca0 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b6c16:	4630      	mov	r0, r6
   b6c18:	f7ff ff2e 	bl	b6a78 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b6c1c:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b6c20:	4482      	add	sl, r0
  while (digits-- > 0)
   b6c22:	2f00      	cmp	r7, #0
   b6c24:	d08a      	beq.n	b6b3c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b6c26:	4642      	mov	r2, r8
   b6c28:	464b      	mov	r3, r9
   b6c2a:	4620      	mov	r0, r4
   b6c2c:	4629      	mov	r1, r5
   b6c2e:	f001 fad3 	bl	b81d8 <__aeabi_dmul>
   b6c32:	4604      	mov	r4, r0
   b6c34:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b6c36:	f001 fd7f 	bl	b8738 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b6c3a:	f1b0 0b00 	subs.w	fp, r0, #0
   b6c3e:	da1c      	bge.n	b6c7a <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b6c40:	212d      	movs	r1, #45	; 0x2d
   b6c42:	4630      	mov	r0, r6
   b6c44:	f7ff ff2e 	bl	b6aa4 <_ZN5Print5printEc>
            val = -n;
   b6c48:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b6c4c:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b6c4e:	220a      	movs	r2, #10
   b6c50:	4630      	mov	r0, r6
   b6c52:	9301      	str	r3, [sp, #4]
   b6c54:	f7ff ff3f 	bl	b6ad6 <_ZN5Print11printNumberEmh>
   b6c58:	9b01      	ldr	r3, [sp, #4]
   b6c5a:	4418      	add	r0, r3
    n += print(toPrint);
   b6c5c:	4482      	add	sl, r0
    remainder -= toPrint;
   b6c5e:	4658      	mov	r0, fp
   b6c60:	f001 fa50 	bl	b8104 <__aeabi_i2d>
   b6c64:	4602      	mov	r2, r0
   b6c66:	460b      	mov	r3, r1
   b6c68:	4620      	mov	r0, r4
   b6c6a:	4629      	mov	r1, r5
   b6c6c:	f001 f8fc 	bl	b7e68 <__aeabi_dsub>
   b6c70:	3f01      	subs	r7, #1
   b6c72:	4604      	mov	r4, r0
   b6c74:	460d      	mov	r5, r1
   b6c76:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b6c78:	e7d3      	b.n	b6c22 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b6c7a:	4659      	mov	r1, fp
        size_t t = 0;
   b6c7c:	2300      	movs	r3, #0
   b6c7e:	e7e6      	b.n	b6c4e <_ZN5Print10printFloatEdh+0x13a>
   b6c80:	000b92bc 	.word	0x000b92bc
   b6c84:	7fefffff 	.word	0x7fefffff
   b6c88:	000b92c0 	.word	0x000b92c0
   b6c8c:	41efffff 	.word	0x41efffff
   b6c90:	000b92c4 	.word	0x000b92c4
   b6c94:	c1efffff 	.word	0xc1efffff
   b6c98:	3fe00000 	.word	0x3fe00000
   b6c9c:	000b8ad1 	.word	0x000b8ad1
   b6ca0:	40240000 	.word	0x40240000

000b6ca4 <_ZN5Print7printlnEdi>:
{
   b6ca4:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b6ca6:	b2c9      	uxtb	r1, r1
{
   b6ca8:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b6caa:	f7ff ff33 	bl	b6b14 <_ZN5Print10printFloatEdh>
   b6cae:	4604      	mov	r4, r0
  n += println();
   b6cb0:	4628      	mov	r0, r5
   b6cb2:	f7ff fefa 	bl	b6aaa <_ZN5Print7printlnEv>
}
   b6cb6:	4420      	add	r0, r4
   b6cb8:	bd38      	pop	{r3, r4, r5, pc}

000b6cba <_ZN5Print7printlnEfi>:
{
   b6cba:	b538      	push	{r3, r4, r5, lr}
   b6cbc:	4604      	mov	r4, r0
   b6cbe:	ee10 0a10 	vmov	r0, s0
   b6cc2:	460d      	mov	r5, r1
    return println((double)num, digits);
   b6cc4:	f001 fa30 	bl	b8128 <__aeabi_f2d>
   b6cc8:	ec41 0b10 	vmov	d0, r0, r1
   b6ccc:	4629      	mov	r1, r5
   b6cce:	4620      	mov	r0, r4
}
   b6cd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   b6cd4:	f7ff bfe6 	b.w	b6ca4 <_ZN5Print7printlnEdi>

000b6cd8 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6cdc:	b086      	sub	sp, #24
   b6cde:	af00      	add	r7, sp, #0
   b6ce0:	4605      	mov	r5, r0
   b6ce2:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6ce4:	1d38      	adds	r0, r7, #4
   b6ce6:	2114      	movs	r1, #20
{
   b6ce8:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6cea:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6cec:	f7ff fc9e 	bl	b662c <vsnprintf>

    if (n<bufsize)
   b6cf0:	2813      	cmp	r0, #19
   b6cf2:	d80e      	bhi.n	b6d12 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6cf4:	1d39      	adds	r1, r7, #4
   b6cf6:	4628      	mov	r0, r5
   b6cf8:	f7ff febe 	bl	b6a78 <_ZN5Print5writeEPKc>
   b6cfc:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6cfe:	b11e      	cbz	r6, b6d08 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6d00:	4628      	mov	r0, r5
   b6d02:	f7ff fed2 	bl	b6aaa <_ZN5Print7printlnEv>
   b6d06:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6d08:	4620      	mov	r0, r4
   b6d0a:	3718      	adds	r7, #24
   b6d0c:	46bd      	mov	sp, r7
   b6d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6d12:	f100 0308 	add.w	r3, r0, #8
   b6d16:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6d1a:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6d1c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6d20:	4622      	mov	r2, r4
   b6d22:	1c41      	adds	r1, r0, #1
   b6d24:	683b      	ldr	r3, [r7, #0]
   b6d26:	4668      	mov	r0, sp
   b6d28:	f7ff fc80 	bl	b662c <vsnprintf>
  return write(str);
   b6d2c:	4669      	mov	r1, sp
   b6d2e:	4628      	mov	r0, r5
   b6d30:	f7ff fea2 	bl	b6a78 <_ZN5Print5writeEPKc>
   b6d34:	4604      	mov	r4, r0
   b6d36:	46c5      	mov	sp, r8
   b6d38:	e7e1      	b.n	b6cfe <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>
	...

000b6d3c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6d3c:	4b01      	ldr	r3, [pc, #4]	; (b6d44 <_GLOBAL__sub_I_RGB+0x8>)
   b6d3e:	2200      	movs	r2, #0
   b6d40:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6d42:	4770      	bx	lr
   b6d44:	2003e6dc 	.word	0x2003e6dc

000b6d48 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6d48:	2100      	movs	r1, #0
   b6d4a:	f7ff bb2b 	b.w	b63a4 <hal_spi_release>

000b6d4e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6d4e:	2100      	movs	r1, #0
   b6d50:	f7ff bb20 	b.w	b6394 <hal_spi_acquire>

000b6d54 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6d54:	b510      	push	{r4, lr}
   b6d56:	4604      	mov	r4, r0
   b6d58:	4608      	mov	r0, r1
{
    _spi = spi;
   b6d5a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6d5c:	f7ff fb02 	bl	b6364 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6d60:	2300      	movs	r3, #0
   b6d62:	6063      	str	r3, [r4, #4]
}
   b6d64:	4620      	mov	r0, r4
   b6d66:	bd10      	pop	{r4, pc}

000b6d68 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6d68:	b513      	push	{r0, r1, r4, lr}
   b6d6a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6d6c:	7800      	ldrb	r0, [r0, #0]
   b6d6e:	f7ff ffee 	bl	b6d4e <_ZN8SPIClass4lockEv.isra.0>
   b6d72:	b958      	cbnz	r0, b6d8c <_ZN8SPIClass5beginEv+0x24>
   b6d74:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6d76:	9001      	str	r0, [sp, #4]
   b6d78:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6d7c:	f7ff faca 	bl	b6314 <hal_spi_begin>
        unlock();
   b6d80:	9801      	ldr	r0, [sp, #4]
    }
}
   b6d82:	b002      	add	sp, #8
   b6d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6d88:	f7ff bfde 	b.w	b6d48 <_ZN8SPIClass6unlockEv.isra.0>
   b6d8c:	b002      	add	sp, #8
   b6d8e:	bd10      	pop	{r4, pc}

000b6d90 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   b6d90:	b513      	push	{r0, r1, r4, lr}
   b6d92:	4604      	mov	r4, r0
    if (!lock())
   b6d94:	7800      	ldrb	r0, [r0, #0]
{
   b6d96:	9101      	str	r1, [sp, #4]
    if (!lock())
   b6d98:	f7ff ffd9 	bl	b6d4e <_ZN8SPIClass4lockEv.isra.0>
   b6d9c:	9901      	ldr	r1, [sp, #4]
   b6d9e:	b948      	cbnz	r0, b6db4 <_ZN8SPIClass11setBitOrderEh+0x24>
   b6da0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   b6da2:	9001      	str	r0, [sp, #4]
   b6da4:	f7ff fabe 	bl	b6324 <hal_spi_set_bit_order>
        unlock();
   b6da8:	9801      	ldr	r0, [sp, #4]
    }
}
   b6daa:	b002      	add	sp, #8
   b6dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6db0:	f7ff bfca 	b.w	b6d48 <_ZN8SPIClass6unlockEv.isra.0>
   b6db4:	b002      	add	sp, #8
   b6db6:	bd10      	pop	{r4, pc}

000b6db8 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   b6db8:	b513      	push	{r0, r1, r4, lr}
   b6dba:	4604      	mov	r4, r0
    if (!lock())
   b6dbc:	7800      	ldrb	r0, [r0, #0]
{
   b6dbe:	9101      	str	r1, [sp, #4]
    if (!lock())
   b6dc0:	f7ff ffc5 	bl	b6d4e <_ZN8SPIClass4lockEv.isra.0>
   b6dc4:	9901      	ldr	r1, [sp, #4]
   b6dc6:	b948      	cbnz	r0, b6ddc <_ZN8SPIClass11setDataModeEh+0x24>
   b6dc8:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_set_data_mode(_spi, mode);
   b6dca:	9001      	str	r0, [sp, #4]
   b6dcc:	f7ff fab2 	bl	b6334 <hal_spi_set_data_mode>
        unlock();
   b6dd0:	9801      	ldr	r0, [sp, #4]
    }
}
   b6dd2:	b002      	add	sp, #8
   b6dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6dd8:	f7ff bfb6 	b.w	b6d48 <_ZN8SPIClass6unlockEv.isra.0>
   b6ddc:	b002      	add	sp, #8
   b6dde:	bd10      	pop	{r4, pc}

000b6de0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6de0:	0840      	lsrs	r0, r0, #1
{
   b6de2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6de4:	6018      	str	r0, [r3, #0]
   b6de6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6de8:	6818      	ldr	r0, [r3, #0]
   b6dea:	4288      	cmp	r0, r1
   b6dec:	b2e5      	uxtb	r5, r4
   b6dee:	d906      	bls.n	b6dfe <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6df0:	3401      	adds	r4, #1
   b6df2:	2c08      	cmp	r4, #8
   b6df4:	d002      	beq.n	b6dfc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6df6:	0840      	lsrs	r0, r0, #1
   b6df8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6dfa:	e7f5      	b.n	b6de8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6dfc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6dfe:	4b02      	ldr	r3, [pc, #8]	; (b6e08 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6e00:	5d5b      	ldrb	r3, [r3, r5]
   b6e02:	7013      	strb	r3, [r2, #0]
}
   b6e04:	bd30      	pop	{r4, r5, pc}
   b6e06:	bf00      	nop
   b6e08:	000b92c8 	.word	0x000b92c8

000b6e0c <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   b6e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6e10:	b088      	sub	sp, #32
    unsigned clock = 0;
   b6e12:	2300      	movs	r3, #0
{
   b6e14:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   b6e16:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   b6e18:	9302      	str	r3, [sp, #8]
{
   b6e1a:	460e      	mov	r6, r1
   b6e1c:	4617      	mov	r7, r2
    if (!lock())
   b6e1e:	f7ff ff96 	bl	b6d4e <_ZN8SPIClass4lockEv.isra.0>
   b6e22:	4605      	mov	r5, r0
   b6e24:	bb00      	cbnz	r0, b6e68 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   b6e26:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6e2a:	4601      	mov	r1, r0
   b6e2c:	2214      	movs	r2, #20
   b6e2e:	a803      	add	r0, sp, #12
   b6e30:	f001 fce2 	bl	b87f8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6e34:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6e36:	462a      	mov	r2, r5
   b6e38:	a903      	add	r1, sp, #12
   b6e3a:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   b6e3c:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   b6e40:	f7ff faa0 	bl	b6384 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b6e44:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   b6e46:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   b6e4a:	ab02      	add	r3, sp, #8
   b6e4c:	f10d 0207 	add.w	r2, sp, #7
   b6e50:	fb07 f106 	mul.w	r1, r7, r6
   b6e54:	f7ff ffc4 	bl	b6de0 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   b6e58:	7820      	ldrb	r0, [r4, #0]
   b6e5a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b6e5e:	f7ff fa71 	bl	b6344 <hal_spi_set_clock_divider>
        unlock();
   b6e62:	7820      	ldrb	r0, [r4, #0]
   b6e64:	f7ff ff70 	bl	b6d48 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   b6e68:	9802      	ldr	r0, [sp, #8]
   b6e6a:	b008      	add	sp, #32
   b6e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6e70 <_ZN8SPIClass15setClockDividerEh>:
{
   b6e70:	b538      	push	{r3, r4, r5, lr}
   b6e72:	4604      	mov	r4, r0
    if (!lock())
   b6e74:	7800      	ldrb	r0, [r0, #0]
{
   b6e76:	460d      	mov	r5, r1
    if (!lock())
   b6e78:	f7ff ff69 	bl	b6d4e <_ZN8SPIClass4lockEv.isra.0>
   b6e7c:	4603      	mov	r3, r0
   b6e7e:	b9d0      	cbnz	r0, b6eb6 <_ZN8SPIClass15setClockDividerEh+0x46>
        if (_dividerReference)
   b6e80:	6861      	ldr	r1, [r4, #4]
   b6e82:	b199      	cbz	r1, b6eac <_ZN8SPIClass15setClockDividerEh+0x3c>
   b6e84:	4a0c      	ldr	r2, [pc, #48]	; (b6eb8 <_ZN8SPIClass15setClockDividerEh+0x48>)
        if (clock_divisors[result] == divider)
   b6e86:	f812 0b01 	ldrb.w	r0, [r2], #1
   b6e8a:	4285      	cmp	r5, r0
   b6e8c:	d002      	beq.n	b6e94 <_ZN8SPIClass15setClockDividerEh+0x24>
    for (; result < arraySize(clock_divisors); result++)
   b6e8e:	3301      	adds	r3, #1
   b6e90:	2b08      	cmp	r3, #8
   b6e92:	d1f8      	bne.n	b6e86 <_ZN8SPIClass15setClockDividerEh+0x16>
    return result + 1;
   b6e94:	3301      	adds	r3, #1
            unsigned targetSpeed = _dividerReference >> scale;
   b6e96:	b2db      	uxtb	r3, r3
            setClockSpeed(targetSpeed);
   b6e98:	2201      	movs	r2, #1
   b6e9a:	40d9      	lsrs	r1, r3
   b6e9c:	4620      	mov	r0, r4
   b6e9e:	f7ff ffb5 	bl	b6e0c <_ZN8SPIClass13setClockSpeedEjj>
        unlock();
   b6ea2:	7820      	ldrb	r0, [r4, #0]
}
   b6ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unlock();
   b6ea8:	f7ff bf4e 	b.w	b6d48 <_ZN8SPIClass6unlockEv.isra.0>
            hal_spi_set_clock_divider(_spi, rate);
   b6eac:	7820      	ldrb	r0, [r4, #0]
   b6eae:	4629      	mov	r1, r5
   b6eb0:	f7ff fa48 	bl	b6344 <hal_spi_set_clock_divider>
   b6eb4:	e7f5      	b.n	b6ea2 <_ZN8SPIClass15setClockDividerEh+0x32>
}
   b6eb6:	bd38      	pop	{r3, r4, r5, pc}
   b6eb8:	000b92c8 	.word	0x000b92c8

000b6ebc <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   b6ebc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6ebe:	7800      	ldrb	r0, [r0, #0]
   b6ec0:	f7ff fa48 	bl	b6354 <hal_spi_transfer>
}
   b6ec4:	b2c0      	uxtb	r0, r0
   b6ec6:	bd08      	pop	{r3, pc}

000b6ec8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b6ec8:	b510      	push	{r4, lr}
   b6eca:	4604      	mov	r4, r0
{
	free(buffer);
   b6ecc:	6800      	ldr	r0, [r0, #0]
   b6ece:	f7ff fb9d 	bl	b660c <free>
}
   b6ed2:	4620      	mov	r0, r4
   b6ed4:	bd10      	pop	{r4, pc}

000b6ed6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b6ed6:	b510      	push	{r4, lr}
   b6ed8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6eda:	6800      	ldr	r0, [r0, #0]
   b6edc:	b108      	cbz	r0, b6ee2 <_ZN6String10invalidateEv+0xc>
   b6ede:	f7ff fb95 	bl	b660c <free>
	buffer = NULL;
   b6ee2:	2300      	movs	r3, #0
	capacity = len = 0;
   b6ee4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6ee8:	6023      	str	r3, [r4, #0]
}
   b6eea:	bd10      	pop	{r4, pc}

000b6eec <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6eec:	b538      	push	{r3, r4, r5, lr}
   b6eee:	4604      	mov	r4, r0
   b6ef0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b6ef2:	6800      	ldr	r0, [r0, #0]
   b6ef4:	3101      	adds	r1, #1
   b6ef6:	f7ff fb91 	bl	b661c <realloc>
	if (newbuffer) {
   b6efa:	b110      	cbz	r0, b6f02 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6efc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6f00:	2001      	movs	r0, #1
	}
	return 0;
}
   b6f02:	bd38      	pop	{r3, r4, r5, pc}

000b6f04 <_ZN6String7reserveEj>:
{
   b6f04:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b6f06:	6803      	ldr	r3, [r0, #0]
{
   b6f08:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6f0a:	b123      	cbz	r3, b6f16 <_ZN6String7reserveEj+0x12>
   b6f0c:	6843      	ldr	r3, [r0, #4]
   b6f0e:	428b      	cmp	r3, r1
   b6f10:	d301      	bcc.n	b6f16 <_ZN6String7reserveEj+0x12>
   b6f12:	2001      	movs	r0, #1
}
   b6f14:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6f16:	4620      	mov	r0, r4
   b6f18:	f7ff ffe8 	bl	b6eec <_ZN6String12changeBufferEj>
   b6f1c:	2800      	cmp	r0, #0
   b6f1e:	d0f9      	beq.n	b6f14 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6f20:	68a3      	ldr	r3, [r4, #8]
   b6f22:	2b00      	cmp	r3, #0
   b6f24:	d1f5      	bne.n	b6f12 <_ZN6String7reserveEj+0xe>
   b6f26:	6822      	ldr	r2, [r4, #0]
   b6f28:	7013      	strb	r3, [r2, #0]
   b6f2a:	e7f2      	b.n	b6f12 <_ZN6String7reserveEj+0xe>

000b6f2c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6f2e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6f30:	4611      	mov	r1, r2
   b6f32:	9201      	str	r2, [sp, #4]
{
   b6f34:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6f36:	f7ff ffe5 	bl	b6f04 <_ZN6String7reserveEj>
   b6f3a:	9a01      	ldr	r2, [sp, #4]
   b6f3c:	b928      	cbnz	r0, b6f4a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6f3e:	4620      	mov	r0, r4
   b6f40:	f7ff ffc9 	bl	b6ed6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6f44:	4620      	mov	r0, r4
   b6f46:	b003      	add	sp, #12
   b6f48:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6f4a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6f4c:	4629      	mov	r1, r5
   b6f4e:	6820      	ldr	r0, [r4, #0]
   b6f50:	f001 fc44 	bl	b87dc <memcpy>
	buffer[len] = 0;
   b6f54:	6822      	ldr	r2, [r4, #0]
   b6f56:	68a3      	ldr	r3, [r4, #8]
   b6f58:	2100      	movs	r1, #0
   b6f5a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6f5c:	e7f2      	b.n	b6f44 <_ZN6String4copyEPKcj+0x18>

000b6f5e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6f5e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6f60:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6f62:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6f66:	4604      	mov	r4, r0
	len = 0;
   b6f68:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6f6a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6f6c:	b141      	cbz	r1, b6f80 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6f6e:	4608      	mov	r0, r1
   b6f70:	9101      	str	r1, [sp, #4]
   b6f72:	f001 fc89 	bl	b8888 <strlen>
   b6f76:	9901      	ldr	r1, [sp, #4]
   b6f78:	4602      	mov	r2, r0
   b6f7a:	4620      	mov	r0, r4
   b6f7c:	f7ff ffd6 	bl	b6f2c <_ZN6String4copyEPKcj>
}
   b6f80:	4620      	mov	r0, r4
   b6f82:	b002      	add	sp, #8
   b6f84:	bd10      	pop	{r4, pc}

000b6f86 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b6f86:	b513      	push	{r0, r1, r4, lr}
   b6f88:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b6f8a:	b159      	cbz	r1, b6fa4 <_ZN6StringaSEPKc+0x1e>
   b6f8c:	4608      	mov	r0, r1
   b6f8e:	9101      	str	r1, [sp, #4]
   b6f90:	f001 fc7a 	bl	b8888 <strlen>
   b6f94:	9901      	ldr	r1, [sp, #4]
   b6f96:	4602      	mov	r2, r0
   b6f98:	4620      	mov	r0, r4
   b6f9a:	f7ff ffc7 	bl	b6f2c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6f9e:	4620      	mov	r0, r4
   b6fa0:	b002      	add	sp, #8
   b6fa2:	bd10      	pop	{r4, pc}
	else invalidate();
   b6fa4:	f7ff ff97 	bl	b6ed6 <_ZN6String10invalidateEv>
   b6fa8:	e7f9      	b.n	b6f9e <_ZN6StringaSEPKc+0x18>

000b6faa <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b6faa:	b570      	push	{r4, r5, r6, lr}
   b6fac:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b6fae:	460e      	mov	r6, r1
   b6fb0:	b909      	cbnz	r1, b6fb6 <_ZN6String6concatEPKcj+0xc>
   b6fb2:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b6fb4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b6fb6:	b16a      	cbz	r2, b6fd4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b6fb8:	6884      	ldr	r4, [r0, #8]
   b6fba:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6fbc:	4621      	mov	r1, r4
   b6fbe:	f7ff ffa1 	bl	b6f04 <_ZN6String7reserveEj>
   b6fc2:	2800      	cmp	r0, #0
   b6fc4:	d0f5      	beq.n	b6fb2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b6fc6:	6828      	ldr	r0, [r5, #0]
   b6fc8:	68ab      	ldr	r3, [r5, #8]
   b6fca:	4631      	mov	r1, r6
   b6fcc:	4418      	add	r0, r3
   b6fce:	f001 fc53 	bl	b8878 <strcpy>
	len = newlen;
   b6fd2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b6fd4:	2001      	movs	r0, #1
   b6fd6:	e7ed      	b.n	b6fb4 <_ZN6String6concatEPKcj+0xa>

000b6fd8 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   b6fd8:	688a      	ldr	r2, [r1, #8]
   b6fda:	6809      	ldr	r1, [r1, #0]
   b6fdc:	f7ff bfe5 	b.w	b6faa <_ZN6String6concatEPKcj>

000b6fe0 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   b6fe0:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b6fe2:	6882      	ldr	r2, [r0, #8]
   b6fe4:	b93a      	cbnz	r2, b6ff6 <_ZNK6String6equalsEPKc+0x16>
   b6fe6:	b121      	cbz	r1, b6ff2 <_ZNK6String6equalsEPKc+0x12>
   b6fe8:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b6fea:	fab0 f080 	clz	r0, r0
   b6fee:	0940      	lsrs	r0, r0, #5
   b6ff0:	e000      	b.n	b6ff4 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b6ff2:	2001      	movs	r0, #1
}
   b6ff4:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b6ff6:	6800      	ldr	r0, [r0, #0]
   b6ff8:	b909      	cbnz	r1, b6ffe <_ZNK6String6equalsEPKc+0x1e>
   b6ffa:	7800      	ldrb	r0, [r0, #0]
   b6ffc:	e7f5      	b.n	b6fea <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b6ffe:	f001 fc31 	bl	b8864 <strcmp>
   b7002:	e7f2      	b.n	b6fea <_ZNK6String6equalsEPKc+0xa>

000b7004 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   b7004:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   b7006:	6883      	ldr	r3, [r0, #8]
   b7008:	4293      	cmp	r3, r2
   b700a:	d907      	bls.n	b701c <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   b700c:	6804      	ldr	r4, [r0, #0]
   b700e:	6809      	ldr	r1, [r1, #0]
   b7010:	18a0      	adds	r0, r4, r2
   b7012:	f001 fc41 	bl	b8898 <strstr>
	if (found == NULL) return -1;
   b7016:	b108      	cbz	r0, b701c <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   b7018:	1b00      	subs	r0, r0, r4
}
   b701a:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   b701c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7020:	e7fb      	b.n	b701a <_ZNK6String7indexOfERKS_j+0x16>

000b7022 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   b7022:	2200      	movs	r2, #0
   b7024:	f7ff bfee 	b.w	b7004 <_ZNK6String7indexOfERKS_j>

000b7028 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   b7028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   b702a:	429a      	cmp	r2, r3
{
   b702c:	460f      	mov	r7, r1
   b702e:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   b7030:	490c      	ldr	r1, [pc, #48]	; (b7064 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   b7032:	bf88      	it	hi
   b7034:	4613      	movhi	r3, r2
{
   b7036:	4614      	mov	r4, r2
   b7038:	4606      	mov	r6, r0
	if (left > right) {
   b703a:	bf84      	itt	hi
   b703c:	462c      	movhi	r4, r5
   b703e:	461d      	movhi	r5, r3
	String out;
   b7040:	f7ff ff8d 	bl	b6f5e <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   b7044:	68bb      	ldr	r3, [r7, #8]
   b7046:	42a3      	cmp	r3, r4
   b7048:	d30a      	bcc.n	b7060 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   b704a:	6839      	ldr	r1, [r7, #0]
   b704c:	42ab      	cmp	r3, r5
   b704e:	bf94      	ite	ls
   b7050:	ebc4 0203 	rsbls	r2, r4, r3
   b7054:	ebc4 0205 	rsbhi	r2, r4, r5
   b7058:	4421      	add	r1, r4
   b705a:	4630      	mov	r0, r6
   b705c:	f7ff ff66 	bl	b6f2c <_ZN6String4copyEPKcj>
	return out;
}
   b7060:	4630      	mov	r0, r6
   b7062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7064:	000b8ad5 	.word	0x000b8ad5

000b7068 <_ZNK6String9substringEj>:
{
   b7068:	b510      	push	{r4, lr}
   b706a:	4604      	mov	r4, r0
	return substring(left, len);
   b706c:	688b      	ldr	r3, [r1, #8]
   b706e:	f7ff ffdb 	bl	b7028 <_ZNK6String9substringEjj>
}
   b7072:	4620      	mov	r0, r4
   b7074:	bd10      	pop	{r4, pc}
	...

000b7078 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7078:	4b05      	ldr	r3, [pc, #20]	; (b7090 <_GLOBAL__sub_I_System+0x18>)
   b707a:	2202      	movs	r2, #2
   b707c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b707e:	4b05      	ldr	r3, [pc, #20]	; (b7094 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7080:	4a05      	ldr	r2, [pc, #20]	; (b7098 <_GLOBAL__sub_I_System+0x20>)
   b7082:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7084:	2000      	movs	r0, #0
   b7086:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b708a:	f7ff ba23 	b.w	b64d4 <set_system_mode>
   b708e:	bf00      	nop
   b7090:	2003e6f8 	.word	0x2003e6f8
   b7094:	2003e6ec 	.word	0x2003e6ec
   b7098:	ffff0000 	.word	0xffff0000

000b709c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b709c:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b709e:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b70a0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b70a4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b70a6:	2201      	movs	r2, #1
   b70a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b70ac:	f10d 0107 	add.w	r1, sp, #7
   b70b0:	47a0      	blx	r4
}
   b70b2:	b002      	add	sp, #8
   b70b4:	bd10      	pop	{r4, pc}

000b70b6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b70b6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b70b8:	6803      	ldr	r3, [r0, #0]
   b70ba:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b70bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b70c0:	46a4      	mov	ip, r4
}
   b70c2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b70c6:	4760      	bx	ip

000b70c8 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b70c8:	b513      	push	{r0, r1, r4, lr}
   b70ca:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b70cc:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b70ce:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b70d2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b70d4:	f10d 0107 	add.w	r1, sp, #7
   b70d8:	2201      	movs	r2, #1
   b70da:	47a0      	blx	r4
}
   b70dc:	b002      	add	sp, #8
   b70de:	bd10      	pop	{r4, pc}

000b70e0 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b70e0:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b70e2:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b70e4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b70e8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b70ec:	429a      	cmp	r2, r3
int TCPClient::read() {
   b70ee:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b70f0:	d008      	beq.n	b7104 <_ZN9TCPClient4readEv+0x24>
   b70f2:	6963      	ldr	r3, [r4, #20]
   b70f4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b70f8:	1c51      	adds	r1, r2, #1
   b70fa:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b70fe:	4413      	add	r3, r2
   b7100:	7918      	ldrb	r0, [r3, #4]
}
   b7102:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7104:	6803      	ldr	r3, [r0, #0]
   b7106:	691b      	ldr	r3, [r3, #16]
   b7108:	4798      	blx	r3
   b710a:	2800      	cmp	r0, #0
   b710c:	d1f1      	bne.n	b70f2 <_ZN9TCPClient4readEv+0x12>
   b710e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7112:	e7f6      	b.n	b7102 <_ZN9TCPClient4readEv+0x22>

000b7114 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b7114:	4770      	bx	lr

000b7116 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b7116:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7118:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b711a:	43c0      	mvns	r0, r0
   b711c:	0fc0      	lsrs	r0, r0, #31
   b711e:	4770      	bx	lr

000b7120 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7120:	4770      	bx	lr
	...

000b7124 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7124:	4b06      	ldr	r3, [pc, #24]	; (b7140 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7126:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7128:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b712a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b712e:	d005      	beq.n	b713c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7130:	4608      	mov	r0, r1
   b7132:	f000 fd83 	bl	b7c3c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7136:	2800      	cmp	r0, #0
   b7138:	bf08      	it	eq
   b713a:	2400      	moveq	r4, #0
      }
   b713c:	4620      	mov	r0, r4
   b713e:	bd10      	pop	{r4, pc}
   b7140:	000b91fc 	.word	0x000b91fc

000b7144 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7144:	b510      	push	{r4, lr}
   b7146:	21ac      	movs	r1, #172	; 0xac
   b7148:	4604      	mov	r4, r0
   b714a:	f7fc ffa6 	bl	b409a <_ZdlPvj>
   b714e:	4620      	mov	r0, r4
   b7150:	bd10      	pop	{r4, pc}

000b7152 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b7152:	21ac      	movs	r1, #172	; 0xac
   b7154:	f7fc bfa1 	b.w	b409a <_ZdlPvj>

000b7158 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b7158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b715c:	f04f 0800 	mov.w	r8, #0
   b7160:	b086      	sub	sp, #24
   b7162:	461c      	mov	r4, r3
   b7164:	f8c0 8004 	str.w	r8, [r0, #4]
   b7168:	4605      	mov	r5, r0
   b716a:	460e      	mov	r6, r1
   b716c:	4617      	mov	r7, r2
    struct timeval tv = {};
   b716e:	4641      	mov	r1, r8
   b7170:	2210      	movs	r2, #16
   b7172:	a802      	add	r0, sp, #8
   b7174:	f001 fb40 	bl	b87f8 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b7178:	1c63      	adds	r3, r4, #1
   b717a:	d009      	beq.n	b7190 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b717c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7180:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b7184:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b7188:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b718c:	435c      	muls	r4, r3
   b718e:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b7190:	6968      	ldr	r0, [r5, #20]
   b7192:	2310      	movs	r3, #16
   b7194:	9300      	str	r3, [sp, #0]
   b7196:	6800      	ldr	r0, [r0, #0]
   b7198:	ab02      	add	r3, sp, #8
   b719a:	f241 0205 	movw	r2, #4101	; 0x1005
   b719e:	f640 71ff 	movw	r1, #4095	; 0xfff
   b71a2:	f7ff f887 	bl	b62b4 <sock_setsockopt>
    if (ret < 0) {
   b71a6:	2800      	cmp	r0, #0
   b71a8:	da07      	bge.n	b71ba <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b71aa:	f7ff fa47 	bl	b663c <__errno>
   b71ae:	6803      	ldr	r3, [r0, #0]
   b71b0:	606b      	str	r3, [r5, #4]
        return 0;
   b71b2:	2000      	movs	r0, #0
}
   b71b4:	b006      	add	sp, #24
   b71b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b71ba:	6968      	ldr	r0, [r5, #20]
   b71bc:	2300      	movs	r3, #0
   b71be:	6800      	ldr	r0, [r0, #0]
   b71c0:	463a      	mov	r2, r7
   b71c2:	4631      	mov	r1, r6
   b71c4:	f7ff f896 	bl	b62f4 <sock_send>
    if (ret < 0) {
   b71c8:	1e03      	subs	r3, r0, #0
   b71ca:	dbee      	blt.n	b71aa <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b71cc:	4618      	mov	r0, r3
   b71ce:	e7f1      	b.n	b71b4 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b71d0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b71d0:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b71d2:	6984      	ldr	r4, [r0, #24]
   b71d4:	4b0a      	ldr	r3, [pc, #40]	; (b7200 <_ZN9TCPClientD1Ev+0x30>)
   b71d6:	6003      	str	r3, [r0, #0]
   b71d8:	4605      	mov	r5, r0
   b71da:	b17c      	cbz	r4, b71fc <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b71dc:	6863      	ldr	r3, [r4, #4]
   b71de:	3b01      	subs	r3, #1
   b71e0:	6063      	str	r3, [r4, #4]
   b71e2:	b95b      	cbnz	r3, b71fc <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b71e4:	6823      	ldr	r3, [r4, #0]
   b71e6:	4620      	mov	r0, r4
   b71e8:	689b      	ldr	r3, [r3, #8]
   b71ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b71ec:	68a3      	ldr	r3, [r4, #8]
   b71ee:	3b01      	subs	r3, #1
   b71f0:	60a3      	str	r3, [r4, #8]
   b71f2:	b91b      	cbnz	r3, b71fc <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b71f4:	6823      	ldr	r3, [r4, #0]
   b71f6:	4620      	mov	r0, r4
   b71f8:	68db      	ldr	r3, [r3, #12]
   b71fa:	4798      	blx	r3
   b71fc:	4628      	mov	r0, r5
   b71fe:	bd38      	pop	{r3, r4, r5, pc}
   b7200:	000b930c 	.word	0x000b930c

000b7204 <_ZN9TCPClientD0Ev>:
   b7204:	b510      	push	{r4, lr}
   b7206:	4604      	mov	r4, r0
   b7208:	f7ff ffe2 	bl	b71d0 <_ZN9TCPClientD1Ev>
   b720c:	4620      	mov	r0, r4
   b720e:	211c      	movs	r1, #28
   b7210:	f7fc ff43 	bl	b409a <_ZdlPvj>
   b7214:	4620      	mov	r0, r4
   b7216:	bd10      	pop	{r4, pc}

000b7218 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7218:	b530      	push	{r4, r5, lr}
   b721a:	b087      	sub	sp, #28
   b721c:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b721e:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b7220:	4668      	mov	r0, sp
   b7222:	f7ff fb49 	bl	b68b8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7228:	3404      	adds	r4, #4
   b722a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b722c:	682b      	ldr	r3, [r5, #0]
   b722e:	7023      	strb	r3, [r4, #0]
    }
   b7230:	b007      	add	sp, #28
   b7232:	bd30      	pop	{r4, r5, pc}

000b7234 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7234:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7236:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7238:	4b05      	ldr	r3, [pc, #20]	; (b7250 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b723a:	4604      	mov	r4, r0
   b723c:	358c      	adds	r5, #140	; 0x8c
   b723e:	f844 3b04 	str.w	r3, [r4], #4
   b7242:	4606      	mov	r6, r0
   b7244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7248:	682b      	ldr	r3, [r5, #0]
   b724a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b724c:	4630      	mov	r0, r6
   b724e:	bd70      	pop	{r4, r5, r6, pc}
   b7250:	000b9270 	.word	0x000b9270

000b7254 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7258:	4698      	mov	r8, r3
    stop();
   b725a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b725c:	b093      	sub	sp, #76	; 0x4c
   b725e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b7260:	2400      	movs	r4, #0
    stop();
   b7262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7264:	4606      	mov	r6, r0
   b7266:	4617      	mov	r7, r2
    stop();
   b7268:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b726a:	4628      	mov	r0, r5
   b726c:	466b      	mov	r3, sp
   b726e:	4622      	mov	r2, r4
   b7270:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b7272:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7274:	f7ff f816 	bl	b62a4 <netdb_getaddrinfo>
   b7278:	4605      	mov	r5, r0
   b727a:	2800      	cmp	r0, #0
   b727c:	d163      	bne.n	b7346 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b727e:	9b00      	ldr	r3, [sp, #0]
   b7280:	2b00      	cmp	r3, #0
   b7282:	d04b      	beq.n	b731c <_ZN9TCPClient7connectEPKctm+0xc8>
   b7284:	695b      	ldr	r3, [r3, #20]
   b7286:	2b00      	cmp	r3, #0
   b7288:	d048      	beq.n	b731c <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b728a:	a806      	add	r0, sp, #24
   b728c:	f7ff fad0 	bl	b6830 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b7290:	9b00      	ldr	r3, [sp, #0]
   b7292:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7294:	7863      	ldrb	r3, [r4, #1]
   b7296:	2b02      	cmp	r3, #2
   b7298:	d104      	bne.n	b72a4 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b729a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b729c:	a806      	add	r0, sp, #24
   b729e:	f7ff ffbb 	bl	b7218 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b72a2:	e026      	b.n	b72f2 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b72a4:	2b0a      	cmp	r3, #10
   b72a6:	d124      	bne.n	b72f2 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b72a8:	2211      	movs	r2, #17
   b72aa:	4629      	mov	r1, r5
   b72ac:	a801      	add	r0, sp, #4
   b72ae:	f001 faa3 	bl	b87f8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b72b2:	68a3      	ldr	r3, [r4, #8]
   b72b4:	2b00      	cmp	r3, #0
   b72b6:	d038      	beq.n	b732a <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b72b8:	f104 0308 	add.w	r3, r4, #8
   b72bc:	f10d 0c04 	add.w	ip, sp, #4
   b72c0:	3418      	adds	r4, #24
   b72c2:	6818      	ldr	r0, [r3, #0]
   b72c4:	6859      	ldr	r1, [r3, #4]
   b72c6:	4662      	mov	r2, ip
   b72c8:	c203      	stmia	r2!, {r0, r1}
   b72ca:	3308      	adds	r3, #8
   b72cc:	42a3      	cmp	r3, r4
   b72ce:	4694      	mov	ip, r2
   b72d0:	d1f7      	bne.n	b72c2 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b72d2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b72d4:	a901      	add	r1, sp, #4
   b72d6:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b72d8:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b72dc:	f7ff fab6 	bl	b684c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b72e0:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b72e4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b72e8:	ac07      	add	r4, sp, #28
   b72ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b72ec:	f8dc 3000 	ldr.w	r3, [ip]
   b72f0:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b72f2:	a806      	add	r0, sp, #24
   b72f4:	f7ff fabc 	bl	b6870 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b72f8:	b180      	cbz	r0, b731c <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b72fa:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b72fc:	ad07      	add	r5, sp, #28
   b72fe:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b7302:	4b12      	ldr	r3, [pc, #72]	; (b734c <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7304:	930c      	str	r3, [sp, #48]	; 0x30
   b7306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7308:	ac0d      	add	r4, sp, #52	; 0x34
   b730a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b730c:	682b      	ldr	r3, [r5, #0]
   b730e:	7023      	strb	r3, [r4, #0]
   b7310:	463a      	mov	r2, r7
   b7312:	4643      	mov	r3, r8
   b7314:	a90c      	add	r1, sp, #48	; 0x30
   b7316:	4630      	mov	r0, r6
   b7318:	47c8      	blx	r9
   b731a:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b731c:	9800      	ldr	r0, [sp, #0]
   b731e:	f7fe ffb9 	bl	b6294 <netdb_freeaddrinfo>
}
   b7322:	4628      	mov	r0, r5
   b7324:	b013      	add	sp, #76	; 0x4c
   b7326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b732a:	68e3      	ldr	r3, [r4, #12]
   b732c:	2b00      	cmp	r3, #0
   b732e:	d1c3      	bne.n	b72b8 <_ZN9TCPClient7connectEPKctm+0x64>
   b7330:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7334:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7338:	f7fe ff9c 	bl	b6274 <inet_htonl>
   b733c:	4581      	cmp	r9, r0
   b733e:	d1bb      	bne.n	b72b8 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b7340:	f104 0114 	add.w	r1, r4, #20
   b7344:	e7aa      	b.n	b729c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7346:	4625      	mov	r5, r4
   b7348:	e7e8      	b.n	b731c <_ZN9TCPClient7connectEPKctm+0xc8>
   b734a:	bf00      	nop
   b734c:	000b9270 	.word	0x000b9270

000b7350 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b7350:	b538      	push	{r3, r4, r5, lr}
   b7352:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7354:	681a      	ldr	r2, [r3, #0]
   b7356:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b7358:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b735a:	da10      	bge.n	b737e <_ZN9TCPClient9connectedEv+0x2e>
   b735c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7360:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7364:	429a      	cmp	r2, r3
   b7366:	d10a      	bne.n	b737e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7368:	6803      	ldr	r3, [r0, #0]
   b736a:	691b      	ldr	r3, [r3, #16]
   b736c:	4798      	blx	r3
        if (!rv) {
   b736e:	4604      	mov	r4, r0
   b7370:	b928      	cbnz	r0, b737e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b7372:	682b      	ldr	r3, [r5, #0]
   b7374:	4628      	mov	r0, r5
   b7376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7378:	4798      	blx	r3
        rv = available();
   b737a:	4620      	mov	r0, r4
}
   b737c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b737e:	2001      	movs	r0, #1
   b7380:	e7fc      	b.n	b737c <_ZN9TCPClient9connectedEv+0x2c>

000b7382 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b7382:	b510      	push	{r4, lr}
   b7384:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7386:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b738a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b738e:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b7390:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7392:	d005      	beq.n	b73a0 <_ZN9TCPClient4peekEv+0x1e>
   b7394:	6963      	ldr	r3, [r4, #20]
   b7396:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b739a:	4413      	add	r3, r2
   b739c:	7918      	ldrb	r0, [r3, #4]
}
   b739e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b73a0:	6803      	ldr	r3, [r0, #0]
   b73a2:	691b      	ldr	r3, [r3, #16]
   b73a4:	4798      	blx	r3
   b73a6:	2800      	cmp	r0, #0
   b73a8:	d1f4      	bne.n	b7394 <_ZN9TCPClient4peekEv+0x12>
   b73aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b73ae:	e7f6      	b.n	b739e <_ZN9TCPClient4peekEv+0x1c>

000b73b0 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b73b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b73b2:	6943      	ldr	r3, [r0, #20]
   b73b4:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b73b6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b73ba:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b73be:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b73c0:	4605      	mov	r5, r0
   b73c2:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b73c4:	d016      	beq.n	b73f4 <_ZN9TCPClient4readEPhj+0x44>
   b73c6:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b73c8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b73cc:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b73d0:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b73d2:	42bc      	cmp	r4, r7
   b73d4:	bf28      	it	cs
   b73d6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b73d8:	3304      	adds	r3, #4
   b73da:	4622      	mov	r2, r4
   b73dc:	4419      	add	r1, r3
   b73de:	4630      	mov	r0, r6
   b73e0:	f001 f9fc 	bl	b87dc <memcpy>
   b73e4:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b73e6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b73ea:	4423      	add	r3, r4
   b73ec:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b73f0:	4620      	mov	r0, r4
   b73f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b73f4:	6803      	ldr	r3, [r0, #0]
   b73f6:	691b      	ldr	r3, [r3, #16]
   b73f8:	4798      	blx	r3
   b73fa:	2800      	cmp	r0, #0
   b73fc:	d1e3      	bne.n	b73c6 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b73fe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b7402:	e7f5      	b.n	b73f0 <_ZN9TCPClient4readEPhj+0x40>

000b7404 <_ZN9TCPClient12flush_bufferEv>:
   b7404:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7406:	2300      	movs	r3, #0
   b7408:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b740c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b740e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b7412:	4770      	bx	lr

000b7414 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7418:	461f      	mov	r7, r3
    stop();
   b741a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b741c:	460c      	mov	r4, r1
    stop();
   b741e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7420:	b08a      	sub	sp, #40	; 0x28
   b7422:	4605      	mov	r5, r0
   b7424:	4616      	mov	r6, r2
    stop();
   b7426:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7428:	7d23      	ldrb	r3, [r4, #20]
   b742a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b742e:	2b04      	cmp	r3, #4
   b7430:	bf0c      	ite	eq
   b7432:	2002      	moveq	r0, #2
   b7434:	200a      	movne	r0, #10
   b7436:	2206      	movs	r2, #6
   b7438:	2101      	movs	r1, #1
   b743a:	f7fe ff63 	bl	b6304 <sock_socket>
   b743e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7442:	696b      	ldr	r3, [r5, #20]
   b7444:	681b      	ldr	r3, [r3, #0]
   b7446:	2b00      	cmp	r3, #0
   b7448:	da08      	bge.n	b745c <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b744a:	682b      	ldr	r3, [r5, #0]
   b744c:	4628      	mov	r0, r5
   b744e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7450:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b7452:	4798      	blx	r3
}
   b7454:	4620      	mov	r0, r4
   b7456:	b00a      	add	sp, #40	; 0x28
   b7458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b745c:	4628      	mov	r0, r5
   b745e:	f7ff ffd1 	bl	b7404 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b7462:	b1b7      	cbz	r7, b7492 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7464:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7466:	a903      	add	r1, sp, #12
   b7468:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b746a:	9303      	str	r3, [sp, #12]
   b746c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7470:	f7fe fef0 	bl	b6254 <if_index_to_name>
   b7474:	2800      	cmp	r0, #0
   b7476:	d1e8      	bne.n	b744a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7478:	6968      	ldr	r0, [r5, #20]
   b747a:	2306      	movs	r3, #6
   b747c:	9300      	str	r3, [sp, #0]
   b747e:	6800      	ldr	r0, [r0, #0]
   b7480:	ab03      	add	r3, sp, #12
   b7482:	f241 020b 	movw	r2, #4107	; 0x100b
   b7486:	f640 71ff 	movw	r1, #4095	; 0xfff
   b748a:	f7fe ff13 	bl	b62b4 <sock_setsockopt>
   b748e:	2800      	cmp	r0, #0
   b7490:	d1db      	bne.n	b744a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b7492:	221c      	movs	r2, #28
   b7494:	2100      	movs	r1, #0
   b7496:	a803      	add	r0, sp, #12
   b7498:	f001 f9ae 	bl	b87f8 <memset>
    if (ip.version() == 4) {
   b749c:	7d23      	ldrb	r3, [r4, #20]
   b749e:	2b04      	cmp	r3, #4
   b74a0:	d11d      	bne.n	b74de <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b74a2:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b74a6:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b74a8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b74ac:	f7fe feea 	bl	b6284 <inet_htons>
   b74b0:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b74b4:	6860      	ldr	r0, [r4, #4]
   b74b6:	f7fe fedd 	bl	b6274 <inet_htonl>
   b74ba:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b74bc:	696b      	ldr	r3, [r5, #20]
   b74be:	221c      	movs	r2, #28
   b74c0:	6818      	ldr	r0, [r3, #0]
   b74c2:	a903      	add	r1, sp, #12
   b74c4:	f7fe ff06 	bl	b62d4 <sock_connect>
   b74c8:	2800      	cmp	r0, #0
   b74ca:	d1be      	bne.n	b744a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b74cc:	3404      	adds	r4, #4
   b74ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b74d0:	696d      	ldr	r5, [r5, #20]
   b74d2:	358c      	adds	r5, #140	; 0x8c
   b74d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b74d6:	6823      	ldr	r3, [r4, #0]
   b74d8:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b74da:	2401      	movs	r4, #1
   b74dc:	e7ba      	b.n	b7454 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b74de:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b74e2:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b74e4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b74e8:	f7fe fecc 	bl	b6284 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b74ec:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b74ee:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b74f2:	1d23      	adds	r3, r4, #4
   b74f4:	f104 0714 	add.w	r7, r4, #20
   b74f8:	6818      	ldr	r0, [r3, #0]
   b74fa:	6859      	ldr	r1, [r3, #4]
   b74fc:	4632      	mov	r2, r6
   b74fe:	c203      	stmia	r2!, {r0, r1}
   b7500:	3308      	adds	r3, #8
   b7502:	42bb      	cmp	r3, r7
   b7504:	4616      	mov	r6, r2
   b7506:	d1f7      	bne.n	b74f8 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7508:	e7d8      	b.n	b74bc <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b750c <_ZN9TCPClient9availableEv>:
{
   b750c:	b530      	push	{r4, r5, lr}
   b750e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b7510:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7514:	b08b      	sub	sp, #44	; 0x2c
   b7516:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7518:	b12b      	cbz	r3, b7526 <_ZN9TCPClient9availableEv+0x1a>
   b751a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b751e:	429a      	cmp	r2, r3
   b7520:	d101      	bne.n	b7526 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b7522:	f7ff ff6f 	bl	b7404 <_ZN9TCPClient12flush_bufferEv>
   b7526:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7528:	6808      	ldr	r0, [r1, #0]
   b752a:	2800      	cmp	r0, #0
   b752c:	db18      	blt.n	b7560 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b752e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b7532:	2d7f      	cmp	r5, #127	; 0x7f
   b7534:	d814      	bhi.n	b7560 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7536:	3104      	adds	r1, #4
   b7538:	2308      	movs	r3, #8
   b753a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b753e:	4429      	add	r1, r5
   b7540:	f7fe fed0 	bl	b62e4 <sock_recv>
            if (ret > 0) {
   b7544:	2800      	cmp	r0, #0
   b7546:	dd13      	ble.n	b7570 <_ZN9TCPClient9availableEv+0x64>
   b7548:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b754a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b754e:	b90a      	cbnz	r2, b7554 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7550:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7554:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7556:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b755a:	4410      	add	r0, r2
   b755c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7560:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7562:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7566:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b756a:	1ac0      	subs	r0, r0, r3
   b756c:	b00b      	add	sp, #44	; 0x2c
   b756e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7570:	f7ff f864 	bl	b663c <__errno>
   b7574:	6803      	ldr	r3, [r0, #0]
   b7576:	2b0b      	cmp	r3, #11
   b7578:	d0f2      	beq.n	b7560 <_ZN9TCPClient9availableEv+0x54>
   b757a:	f7ff f85f 	bl	b663c <__errno>
   b757e:	6803      	ldr	r3, [r0, #0]
   b7580:	2b0b      	cmp	r3, #11
   b7582:	d0ed      	beq.n	b7560 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7584:	2320      	movs	r3, #32
   b7586:	2500      	movs	r5, #0
   b7588:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b758c:	f7ff f856 	bl	b663c <__errno>
   b7590:	6803      	ldr	r3, [r0, #0]
   b7592:	9301      	str	r3, [sp, #4]
   b7594:	4b08      	ldr	r3, [pc, #32]	; (b75b8 <_ZN9TCPClient9availableEv+0xac>)
   b7596:	4909      	ldr	r1, [pc, #36]	; (b75bc <_ZN9TCPClient9availableEv+0xb0>)
   b7598:	9300      	str	r3, [sp, #0]
   b759a:	aa02      	add	r2, sp, #8
   b759c:	462b      	mov	r3, r5
   b759e:	2032      	movs	r0, #50	; 0x32
   b75a0:	f7fe ff90 	bl	b64c4 <log_message>
                    sock_close(d_->sock);
   b75a4:	6963      	ldr	r3, [r4, #20]
   b75a6:	6818      	ldr	r0, [r3, #0]
   b75a8:	f7fe fe8c 	bl	b62c4 <sock_close>
   b75ac:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b75ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b75b2:	601a      	str	r2, [r3, #0]
   b75b4:	e7d4      	b.n	b7560 <_ZN9TCPClient9availableEv+0x54>
   b75b6:	bf00      	nop
   b75b8:	000b92d7 	.word	0x000b92d7
   b75bc:	000b92d0 	.word	0x000b92d0

000b75c0 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b75c0:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b75c2:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b75c4:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b75c6:	6818      	ldr	r0, [r3, #0]
   b75c8:	2800      	cmp	r0, #0
   b75ca:	db01      	blt.n	b75d0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b75cc:	f7fe fe7a 	bl	b62c4 <sock_close>
   b75d0:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b75d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b75d6:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b75d8:	6960      	ldr	r0, [r4, #20]
   b75da:	2211      	movs	r2, #17
   b75dc:	2100      	movs	r1, #0
   b75de:	308c      	adds	r0, #140	; 0x8c
   b75e0:	f001 f90a 	bl	b87f8 <memset>
    flush_buffer();
   b75e4:	4620      	mov	r0, r4
}
   b75e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b75ea:	f7ff bf0b 	b.w	b7404 <_ZN9TCPClient12flush_bufferEv>

000b75ee <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b75ee:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b75f0:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b75f2:	4604      	mov	r4, r0
          total(0) {
   b75f4:	6001      	str	r1, [r0, #0]
   b75f6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b75fa:	3088      	adds	r0, #136	; 0x88
   b75fc:	f7ff f918 	bl	b6830 <_ZN9IPAddressC1Ev>
}
   b7600:	4620      	mov	r0, r4
   b7602:	bd10      	pop	{r4, pc}

000b7604 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7604:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7606:	2300      	movs	r3, #0
   b7608:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b760c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b7610:	4a0e      	ldr	r2, [pc, #56]	; (b764c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b7612:	6103      	str	r3, [r0, #16]
   b7614:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7616:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7618:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b761a:	20ac      	movs	r0, #172	; 0xac
   b761c:	9101      	str	r1, [sp, #4]
   b761e:	f7fc fd38 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b7622:	1e05      	subs	r5, r0, #0
   b7624:	f105 060c 	add.w	r6, r5, #12
   b7628:	d008      	beq.n	b763c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b762a:	2301      	movs	r3, #1
   b762c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7630:	4b07      	ldr	r3, [pc, #28]	; (b7650 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7632:	9901      	ldr	r1, [sp, #4]
   b7634:	602b      	str	r3, [r5, #0]
   b7636:	4630      	mov	r0, r6
   b7638:	f7ff ffd9 	bl	b75ee <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b763c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b763e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b7642:	f7ff fedf 	bl	b7404 <_ZN9TCPClient12flush_bufferEv>
}
   b7646:	b002      	add	sp, #8
   b7648:	bd70      	pop	{r4, r5, r6, pc}
   b764a:	bf00      	nop
   b764c:	000b930c 	.word	0x000b930c
   b7650:	000b92f0 	.word	0x000b92f0

000b7654 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7654:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7656:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b765a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b765c:	f7ff ffd2 	bl	b7604 <_ZN9TCPClientC1Ei>
}
   b7660:	4620      	mov	r0, r4
   b7662:	bd10      	pop	{r4, pc}

000b7664 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7664:	b510      	push	{r4, lr}
   b7666:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7668:	6800      	ldr	r0, [r0, #0]
   b766a:	2800      	cmp	r0, #0
   b766c:	db01      	blt.n	b7672 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b766e:	f7fe fe29 	bl	b62c4 <sock_close>
    }
}
   b7672:	4620      	mov	r0, r4
   b7674:	bd10      	pop	{r4, pc}

000b7676 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7676:	300c      	adds	r0, #12
   b7678:	f7ff bff4 	b.w	b7664 <_ZN9TCPClient4DataD1Ev>

000b767c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b767c:	4b02      	ldr	r3, [pc, #8]	; (b7688 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b767e:	681a      	ldr	r2, [r3, #0]
   b7680:	4b02      	ldr	r3, [pc, #8]	; (b768c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7682:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7684:	4770      	bx	lr
   b7686:	bf00      	nop
   b7688:	2003dbf8 	.word	0x2003dbf8
   b768c:	2003e6fc 	.word	0x2003e6fc

000b7690 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7690:	4770      	bx	lr

000b7692 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7692:	7441      	strb	r1, [r0, #17]
}
   b7694:	4770      	bx	lr

000b7696 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7696:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7698:	7c00      	ldrb	r0, [r0, #16]
   b769a:	f7fe febb 	bl	b6414 <hal_usart_available_data_for_write>
}
   b769e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b76a2:	bd08      	pop	{r3, pc}

000b76a4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b76a4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b76a6:	7c00      	ldrb	r0, [r0, #16]
   b76a8:	f7fe fe8c 	bl	b63c4 <hal_usart_available>
}
   b76ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b76b0:	bd08      	pop	{r3, pc}

000b76b2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b76b2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b76b4:	7c00      	ldrb	r0, [r0, #16]
   b76b6:	f7fe fe95 	bl	b63e4 <hal_usart_peek>
}
   b76ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b76be:	bd08      	pop	{r3, pc}

000b76c0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b76c0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b76c2:	7c00      	ldrb	r0, [r0, #16]
   b76c4:	f7fe fe86 	bl	b63d4 <hal_usart_read>
}
   b76c8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b76cc:	bd08      	pop	{r3, pc}

000b76ce <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b76ce:	7c00      	ldrb	r0, [r0, #16]
   b76d0:	f7fe be90 	b.w	b63f4 <hal_usart_flush>

000b76d4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b76d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b76d6:	7c45      	ldrb	r5, [r0, #17]
{
   b76d8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b76da:	b12d      	cbz	r5, b76e8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b76dc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b76de:	b003      	add	sp, #12
   b76e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b76e4:	f7fe be66 	b.w	b63b4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b76e8:	7c00      	ldrb	r0, [r0, #16]
   b76ea:	9101      	str	r1, [sp, #4]
   b76ec:	f7fe fe92 	bl	b6414 <hal_usart_available_data_for_write>
   b76f0:	2800      	cmp	r0, #0
   b76f2:	9901      	ldr	r1, [sp, #4]
   b76f4:	dcf2      	bgt.n	b76dc <_ZN11USARTSerial5writeEh+0x8>
}
   b76f6:	4628      	mov	r0, r5
   b76f8:	b003      	add	sp, #12
   b76fa:	bd30      	pop	{r4, r5, pc}

000b76fc <_ZN11USARTSerialD0Ev>:
   b76fc:	b510      	push	{r4, lr}
   b76fe:	2114      	movs	r1, #20
   b7700:	4604      	mov	r4, r0
   b7702:	f7fc fcca 	bl	b409a <_ZdlPvj>
   b7706:	4620      	mov	r0, r4
   b7708:	bd10      	pop	{r4, pc}
	...

000b770c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b770c:	b510      	push	{r4, lr}
   b770e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7712:	4604      	mov	r4, r0
   b7714:	4608      	mov	r0, r1
   b7716:	4611      	mov	r1, r2
   b7718:	2200      	movs	r2, #0
   b771a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b771e:	4b04      	ldr	r3, [pc, #16]	; (b7730 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7720:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7722:	2301      	movs	r3, #1
  _serial = serial;
   b7724:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7726:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7728:	f7fe fe7c 	bl	b6424 <hal_usart_init_ex>
}
   b772c:	4620      	mov	r0, r4
   b772e:	bd10      	pop	{r4, pc}
   b7730:	000b9374 	.word	0x000b9374

000b7734 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7734:	7441      	strb	r1, [r0, #17]
}
   b7736:	4770      	bx	lr

000b7738 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7738:	4770      	bx	lr

000b773a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b773a:	4770      	bx	lr

000b773c <_ZN9USBSerial4readEv>:
{
   b773c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b773e:	2100      	movs	r1, #0
   b7740:	7c00      	ldrb	r0, [r0, #16]
   b7742:	f7fe fe97 	bl	b6474 <HAL_USB_USART_Receive_Data>
}
   b7746:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b774a:	bd08      	pop	{r3, pc}

000b774c <_ZN9USBSerial4peekEv>:
{
   b774c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b774e:	2101      	movs	r1, #1
   b7750:	7c00      	ldrb	r0, [r0, #16]
   b7752:	f7fe fe8f 	bl	b6474 <HAL_USB_USART_Receive_Data>
}
   b7756:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b775a:	bd08      	pop	{r3, pc}

000b775c <_ZN9USBSerial17availableForWriteEv>:
{
   b775c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b775e:	7c00      	ldrb	r0, [r0, #16]
   b7760:	f7fe fe80 	bl	b6464 <HAL_USB_USART_Available_Data_For_Write>
}
   b7764:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7768:	bd08      	pop	{r3, pc}

000b776a <_ZN9USBSerial9availableEv>:
{
   b776a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b776c:	7c00      	ldrb	r0, [r0, #16]
   b776e:	f7fe fe71 	bl	b6454 <HAL_USB_USART_Available_Data>
}
   b7772:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7776:	bd08      	pop	{r3, pc}

000b7778 <_ZN9USBSerial5writeEh>:
{
   b7778:	b513      	push	{r0, r1, r4, lr}
   b777a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b777c:	7c00      	ldrb	r0, [r0, #16]
{
   b777e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7780:	f7fe fe70 	bl	b6464 <HAL_USB_USART_Available_Data_For_Write>
   b7784:	2800      	cmp	r0, #0
   b7786:	9901      	ldr	r1, [sp, #4]
   b7788:	dc01      	bgt.n	b778e <_ZN9USBSerial5writeEh+0x16>
   b778a:	7c60      	ldrb	r0, [r4, #17]
   b778c:	b120      	cbz	r0, b7798 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b778e:	7c20      	ldrb	r0, [r4, #16]
   b7790:	f7fe fe78 	bl	b6484 <HAL_USB_USART_Send_Data>
   b7794:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7798:	b002      	add	sp, #8
   b779a:	bd10      	pop	{r4, pc}

000b779c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b779c:	7c00      	ldrb	r0, [r0, #16]
   b779e:	f7fe be79 	b.w	b6494 <HAL_USB_USART_Flush_Data>

000b77a2 <_ZN9USBSerialD0Ev>:
   b77a2:	b510      	push	{r4, lr}
   b77a4:	2114      	movs	r1, #20
   b77a6:	4604      	mov	r4, r0
   b77a8:	f7fc fc77 	bl	b409a <_ZdlPvj>
   b77ac:	4620      	mov	r0, r4
   b77ae:	bd10      	pop	{r4, pc}

000b77b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b77b0:	b510      	push	{r4, lr}
   b77b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b77b6:	4604      	mov	r4, r0
   b77b8:	4608      	mov	r0, r1
   b77ba:	2100      	movs	r1, #0
   b77bc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b77c0:	4b04      	ldr	r3, [pc, #16]	; (b77d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b77c2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b77c4:	2301      	movs	r3, #1
  _serial = serial;
   b77c6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b77c8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b77ca:	4611      	mov	r1, r2
   b77cc:	f7fe fe32 	bl	b6434 <HAL_USB_USART_Init>
}
   b77d0:	4620      	mov	r0, r4
   b77d2:	bd10      	pop	{r4, pc}
   b77d4:	000b93a4 	.word	0x000b93a4

000b77d8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b77d8:	7c00      	ldrb	r0, [r0, #16]
   b77da:	2200      	movs	r2, #0
   b77dc:	f7fe be32 	b.w	b6444 <HAL_USB_USART_Begin>

000b77e0 <_ZN9USBSerial11isConnectedEv>:
  return HAL_USB_USART_Is_Connected(_serial);
   b77e0:	7c00      	ldrb	r0, [r0, #16]
   b77e2:	f7fe be5f 	b.w	b64a4 <HAL_USB_USART_Is_Connected>

000b77e6 <_Z19acquireSerialBufferv>:
{
   b77e6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b77e8:	2214      	movs	r2, #20
{
   b77ea:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b77ec:	2100      	movs	r1, #0
   b77ee:	f001 f803 	bl	b87f8 <memset>
}
   b77f2:	4620      	mov	r0, r4
   b77f4:	bd10      	pop	{r4, pc}
	...

000b77f8 <_Z16_fetch_usbserialv>:
{
   b77f8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b77fa:	4c0f      	ldr	r4, [pc, #60]	; (b7838 <_Z16_fetch_usbserialv+0x40>)
{
   b77fc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b77fe:	a803      	add	r0, sp, #12
   b7800:	f7ff fff1 	bl	b77e6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7804:	7821      	ldrb	r1, [r4, #0]
   b7806:	f3bf 8f5b 	dmb	ish
   b780a:	f011 0101 	ands.w	r1, r1, #1
   b780e:	d10f      	bne.n	b7830 <_Z16_fetch_usbserialv+0x38>
   b7810:	4620      	mov	r0, r4
   b7812:	9101      	str	r1, [sp, #4]
   b7814:	f7fc fc50 	bl	b40b8 <__cxa_guard_acquire>
   b7818:	9901      	ldr	r1, [sp, #4]
   b781a:	b148      	cbz	r0, b7830 <_Z16_fetch_usbserialv+0x38>
   b781c:	aa03      	add	r2, sp, #12
   b781e:	4807      	ldr	r0, [pc, #28]	; (b783c <_Z16_fetch_usbserialv+0x44>)
   b7820:	f7ff ffc6 	bl	b77b0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7824:	4620      	mov	r0, r4
   b7826:	f7fc fc4c 	bl	b40c2 <__cxa_guard_release>
   b782a:	4805      	ldr	r0, [pc, #20]	; (b7840 <_Z16_fetch_usbserialv+0x48>)
   b782c:	f000 ffcc 	bl	b87c8 <atexit>
	return _usbserial;
}
   b7830:	4802      	ldr	r0, [pc, #8]	; (b783c <_Z16_fetch_usbserialv+0x44>)
   b7832:	b008      	add	sp, #32
   b7834:	bd10      	pop	{r4, pc}
   b7836:	bf00      	nop
   b7838:	2003e700 	.word	0x2003e700
   b783c:	2003e704 	.word	0x2003e704
   b7840:	000b7739 	.word	0x000b7739

000b7844 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7844:	2200      	movs	r2, #0
   b7846:	6840      	ldr	r0, [r0, #4]
   b7848:	4611      	mov	r1, r2
   b784a:	f7fe be8f 	b.w	b656c <network_ready>

000b784e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b784e:	2200      	movs	r2, #0
   b7850:	6840      	ldr	r0, [r0, #4]
   b7852:	4611      	mov	r1, r2
   b7854:	f7fe beaa 	b.w	b65ac <network_listening>

000b7858 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7858:	2200      	movs	r2, #0
   b785a:	6840      	ldr	r0, [r0, #4]
   b785c:	4611      	mov	r1, r2
   b785e:	f7fe beb5 	b.w	b65cc <network_get_listen_timeout>

000b7862 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7862:	6840      	ldr	r0, [r0, #4]
   b7864:	2200      	movs	r2, #0
   b7866:	f7fe bea9 	b.w	b65bc <network_set_listen_timeout>

000b786a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b786a:	6840      	ldr	r0, [r0, #4]
   b786c:	2200      	movs	r2, #0
   b786e:	f081 0101 	eor.w	r1, r1, #1
   b7872:	f7fe be93 	b.w	b659c <network_listen>

000b7876 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7876:	2300      	movs	r3, #0
   b7878:	6840      	ldr	r0, [r0, #4]
   b787a:	461a      	mov	r2, r3
   b787c:	4619      	mov	r1, r3
   b787e:	f7fe be85 	b.w	b658c <network_off>

000b7882 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7882:	2300      	movs	r3, #0
   b7884:	6840      	ldr	r0, [r0, #4]
   b7886:	461a      	mov	r2, r3
   b7888:	4619      	mov	r1, r3
   b788a:	f7fe be77 	b.w	b657c <network_on>

000b788e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b788e:	2200      	movs	r2, #0
   b7890:	6840      	ldr	r0, [r0, #4]
   b7892:	4611      	mov	r1, r2
   b7894:	f7fe be5a 	b.w	b654c <network_connecting>

000b7898 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7898:	6840      	ldr	r0, [r0, #4]
   b789a:	2200      	movs	r2, #0
   b789c:	2102      	movs	r1, #2
   b789e:	f7fe be5d 	b.w	b655c <network_disconnect>

000b78a2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b78a2:	2300      	movs	r3, #0
   b78a4:	6840      	ldr	r0, [r0, #4]
   b78a6:	461a      	mov	r2, r3
   b78a8:	f7fe be48 	b.w	b653c <network_connect>

000b78ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b78ac:	4b02      	ldr	r3, [pc, #8]	; (b78b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b78ae:	2204      	movs	r2, #4
   b78b0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b78b2:	4a02      	ldr	r2, [pc, #8]	; (b78bc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b78b4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b78b6:	4770      	bx	lr
   b78b8:	2003e718 	.word	0x2003e718
   b78bc:	000b93d4 	.word	0x000b93d4

000b78c0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b78c0:	4b01      	ldr	r3, [pc, #4]	; (b78c8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b78c2:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b78c4:	4770      	bx	lr
   b78c6:	bf00      	nop
   b78c8:	2003dbfc 	.word	0x2003dbfc

000b78cc <serialEventRun>:
{
   b78cc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b78ce:	4b0b      	ldr	r3, [pc, #44]	; (b78fc <serialEventRun+0x30>)
   b78d0:	b143      	cbz	r3, b78e4 <serialEventRun+0x18>
   b78d2:	f7ff ff91 	bl	b77f8 <_Z16_fetch_usbserialv>
   b78d6:	6803      	ldr	r3, [r0, #0]
   b78d8:	691b      	ldr	r3, [r3, #16]
   b78da:	4798      	blx	r3
   b78dc:	2800      	cmp	r0, #0
   b78de:	dd01      	ble.n	b78e4 <serialEventRun+0x18>
        serialEvent();
   b78e0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b78e4:	4b06      	ldr	r3, [pc, #24]	; (b7900 <serialEventRun+0x34>)
   b78e6:	b143      	cbz	r3, b78fa <serialEventRun+0x2e>
   b78e8:	f000 f982 	bl	b7bf0 <_Z22__fetch_global_Serial1v>
   b78ec:	6803      	ldr	r3, [r0, #0]
   b78ee:	691b      	ldr	r3, [r3, #16]
   b78f0:	4798      	blx	r3
   b78f2:	2800      	cmp	r0, #0
   b78f4:	dd01      	ble.n	b78fa <serialEventRun+0x2e>
        serialEvent1();
   b78f6:	f3af 8000 	nop.w
}
   b78fa:	bd08      	pop	{r3, pc}
	...

000b7904 <_post_loop>:
{
   b7904:	b508      	push	{r3, lr}
	serialEventRun();
   b7906:	f7ff ffe1 	bl	b78cc <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b790a:	f7fe fc13 	bl	b6134 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b790e:	4b01      	ldr	r3, [pc, #4]	; (b7914 <_post_loop+0x10>)
   b7910:	6018      	str	r0, [r3, #0]
}
   b7912:	bd08      	pop	{r3, pc}
   b7914:	2003e728 	.word	0x2003e728

000b7918 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7918:	4805      	ldr	r0, [pc, #20]	; (b7930 <_Z33system_initialize_user_backup_ramv+0x18>)
   b791a:	4a06      	ldr	r2, [pc, #24]	; (b7934 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b791c:	4906      	ldr	r1, [pc, #24]	; (b7938 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b791e:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7920:	1a12      	subs	r2, r2, r0
   b7922:	f000 ff5b 	bl	b87dc <memcpy>
    __backup_sram_signature = signature;
   b7926:	4b05      	ldr	r3, [pc, #20]	; (b793c <_Z33system_initialize_user_backup_ramv+0x24>)
   b7928:	4a05      	ldr	r2, [pc, #20]	; (b7940 <_Z33system_initialize_user_backup_ramv+0x28>)
   b792a:	601a      	str	r2, [r3, #0]
}
   b792c:	bd08      	pop	{r3, pc}
   b792e:	bf00      	nop
   b7930:	2003f400 	.word	0x2003f400
   b7934:	2003f404 	.word	0x2003f404
   b7938:	000b96c4 	.word	0x000b96c4
   b793c:	2003f400 	.word	0x2003f400
   b7940:	9a271c1e 	.word	0x9a271c1e

000b7944 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7944:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7946:	2300      	movs	r3, #0
   b7948:	9300      	str	r3, [sp, #0]
   b794a:	461a      	mov	r2, r3
   b794c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7950:	f7fe fdda 	bl	b6508 <system_ctrl_set_result>
}
   b7954:	b003      	add	sp, #12
   b7956:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b795c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b795c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b795e:	8843      	ldrh	r3, [r0, #2]
   b7960:	2b0a      	cmp	r3, #10
   b7962:	d008      	beq.n	b7976 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7964:	2b50      	cmp	r3, #80	; 0x50
   b7966:	d10b      	bne.n	b7980 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7968:	4b09      	ldr	r3, [pc, #36]	; (b7990 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b796a:	681b      	ldr	r3, [r3, #0]
   b796c:	b14b      	cbz	r3, b7982 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b796e:	b003      	add	sp, #12
   b7970:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7974:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7976:	f7ff ffe5 	bl	b7944 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b797a:	b003      	add	sp, #12
   b797c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7980:	2300      	movs	r3, #0
   b7982:	9300      	str	r3, [sp, #0]
   b7984:	461a      	mov	r2, r3
   b7986:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b798a:	f7fe fdbd 	bl	b6508 <system_ctrl_set_result>
}
   b798e:	e7f4      	b.n	b797a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7990:	2003e724 	.word	0x2003e724

000b7994 <module_user_init_hook>:
{
   b7994:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7996:	4812      	ldr	r0, [pc, #72]	; (b79e0 <module_user_init_hook+0x4c>)
   b7998:	2100      	movs	r1, #0
   b799a:	f7fe fe5f 	bl	b665c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b799e:	4b11      	ldr	r3, [pc, #68]	; (b79e4 <module_user_init_hook+0x50>)
   b79a0:	681a      	ldr	r2, [r3, #0]
   b79a2:	4b11      	ldr	r3, [pc, #68]	; (b79e8 <module_user_init_hook+0x54>)
   b79a4:	429a      	cmp	r2, r3
   b79a6:	4b11      	ldr	r3, [pc, #68]	; (b79ec <module_user_init_hook+0x58>)
   b79a8:	bf0c      	ite	eq
   b79aa:	2201      	moveq	r2, #1
   b79ac:	2200      	movne	r2, #0
   b79ae:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b79b0:	d001      	beq.n	b79b6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b79b2:	f7ff ffb1 	bl	b7918 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b79b6:	f7fe fba5 	bl	b6104 <HAL_RNG_GetRandomNumber>
   b79ba:	4604      	mov	r4, r0
    srand(seed);
   b79bc:	f000 ff24 	bl	b8808 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b79c0:	4b0b      	ldr	r3, [pc, #44]	; (b79f0 <module_user_init_hook+0x5c>)
   b79c2:	b113      	cbz	r3, b79ca <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b79c4:	4620      	mov	r0, r4
   b79c6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b79ca:	2100      	movs	r1, #0
   b79cc:	4808      	ldr	r0, [pc, #32]	; (b79f0 <module_user_init_hook+0x5c>)
   b79ce:	f7fe fdad 	bl	b652c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b79d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b79d6:	4807      	ldr	r0, [pc, #28]	; (b79f4 <module_user_init_hook+0x60>)
   b79d8:	2100      	movs	r1, #0
   b79da:	f7fe bd8b 	b.w	b64f4 <system_ctrl_set_app_request_handler>
   b79de:	bf00      	nop
   b79e0:	000b78c1 	.word	0x000b78c1
   b79e4:	2003f400 	.word	0x2003f400
   b79e8:	9a271c1e 	.word	0x9a271c1e
   b79ec:	2003e720 	.word	0x2003e720
   b79f0:	00000000 	.word	0x00000000
   b79f4:	000b795d 	.word	0x000b795d

000b79f8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b79f8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b79fa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b79fc:	d902      	bls.n	b7a04 <pinAvailable+0xc>
    return false;
   b79fe:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7a00:	b002      	add	sp, #8
   b7a02:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7a04:	f1a0 030b 	sub.w	r3, r0, #11
   b7a08:	2b02      	cmp	r3, #2
   b7a0a:	d81a      	bhi.n	b7a42 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7a0c:	4c17      	ldr	r4, [pc, #92]	; (b7a6c <pinAvailable+0x74>)
   b7a0e:	7821      	ldrb	r1, [r4, #0]
   b7a10:	f3bf 8f5b 	dmb	ish
   b7a14:	f011 0101 	ands.w	r1, r1, #1
   b7a18:	d10b      	bne.n	b7a32 <pinAvailable+0x3a>
   b7a1a:	4620      	mov	r0, r4
   b7a1c:	9101      	str	r1, [sp, #4]
   b7a1e:	f7fc fb4b 	bl	b40b8 <__cxa_guard_acquire>
   b7a22:	9901      	ldr	r1, [sp, #4]
   b7a24:	b128      	cbz	r0, b7a32 <pinAvailable+0x3a>
   b7a26:	4812      	ldr	r0, [pc, #72]	; (b7a70 <pinAvailable+0x78>)
   b7a28:	f7ff f994 	bl	b6d54 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b7a2c:	4620      	mov	r0, r4
   b7a2e:	f7fc fb48 	bl	b40c2 <__cxa_guard_release>
   b7a32:	4b0f      	ldr	r3, [pc, #60]	; (b7a70 <pinAvailable+0x78>)
   b7a34:	7818      	ldrb	r0, [r3, #0]
   b7a36:	f7fe fc9d 	bl	b6374 <hal_spi_is_enabled>
   b7a3a:	2800      	cmp	r0, #0
   b7a3c:	d1df      	bne.n	b79fe <pinAvailable+0x6>
  return true; // 'pin' is available
   b7a3e:	2001      	movs	r0, #1
   b7a40:	e7de      	b.n	b7a00 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b7a42:	2801      	cmp	r0, #1
   b7a44:	d809      	bhi.n	b7a5a <pinAvailable+0x62>
   b7a46:	f000 f893 	bl	b7b70 <_Z19__fetch_global_Wirev>
   b7a4a:	2100      	movs	r1, #0
   b7a4c:	7c00      	ldrb	r0, [r0, #16]
   b7a4e:	f7fe fbf1 	bl	b6234 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b7a52:	f080 0001 	eor.w	r0, r0, #1
   b7a56:	b2c0      	uxtb	r0, r0
   b7a58:	e7d2      	b.n	b7a00 <pinAvailable+0x8>
   b7a5a:	3809      	subs	r0, #9
   b7a5c:	2801      	cmp	r0, #1
   b7a5e:	d8ee      	bhi.n	b7a3e <pinAvailable+0x46>
   b7a60:	f000 f8c6 	bl	b7bf0 <_Z22__fetch_global_Serial1v>
   b7a64:	7c00      	ldrb	r0, [r0, #16]
   b7a66:	f7fe fccd 	bl	b6404 <hal_usart_is_enabled>
   b7a6a:	e7f2      	b.n	b7a52 <pinAvailable+0x5a>
   b7a6c:	2003e6b8 	.word	0x2003e6b8
   b7a70:	2003e6bc 	.word	0x2003e6bc

000b7a74 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7a74:	2823      	cmp	r0, #35	; 0x23
{
   b7a76:	b538      	push	{r3, r4, r5, lr}
   b7a78:	4604      	mov	r4, r0
   b7a7a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7a7c:	d80a      	bhi.n	b7a94 <pinMode+0x20>
   b7a7e:	29ff      	cmp	r1, #255	; 0xff
   b7a80:	d008      	beq.n	b7a94 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7a82:	f7ff ffb9 	bl	b79f8 <pinAvailable>
   b7a86:	b128      	cbz	r0, b7a94 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b7a88:	4629      	mov	r1, r5
   b7a8a:	4620      	mov	r0, r4
}
   b7a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7a90:	f7fe bb70 	b.w	b6174 <HAL_Pin_Mode>
}
   b7a94:	bd38      	pop	{r3, r4, r5, pc}

000b7a96 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b7a96:	b538      	push	{r3, r4, r5, lr}
   b7a98:	4604      	mov	r4, r0
   b7a9a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7a9c:	f7fe fb72 	bl	b6184 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7aa0:	28ff      	cmp	r0, #255	; 0xff
   b7aa2:	d010      	beq.n	b7ac6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7aa4:	2806      	cmp	r0, #6
   b7aa6:	d804      	bhi.n	b7ab2 <digitalWrite+0x1c>
   b7aa8:	234d      	movs	r3, #77	; 0x4d
   b7aaa:	fa23 f000 	lsr.w	r0, r3, r0
   b7aae:	07c3      	lsls	r3, r0, #31
   b7ab0:	d409      	bmi.n	b7ac6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7ab2:	4620      	mov	r0, r4
   b7ab4:	f7ff ffa0 	bl	b79f8 <pinAvailable>
   b7ab8:	b128      	cbz	r0, b7ac6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b7aba:	4629      	mov	r1, r5
   b7abc:	4620      	mov	r0, r4
}
   b7abe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b7ac2:	f7fe bb67 	b.w	b6194 <HAL_GPIO_Write>
}
   b7ac6:	bd38      	pop	{r3, r4, r5, pc}

000b7ac8 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b7ac8:	280d      	cmp	r0, #13
{
   b7aca:	b510      	push	{r4, lr}
   b7acc:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b7ace:	bf9c      	itt	ls
   b7ad0:	340e      	addls	r4, #14
   b7ad2:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b7ad4:	4620      	mov	r0, r4
   b7ad6:	f7ff ff8f 	bl	b79f8 <pinAvailable>
   b7ada:	b150      	cbz	r0, b7af2 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b7adc:	2103      	movs	r1, #3
   b7ade:	4620      	mov	r0, r4
   b7ae0:	f7fe fb40 	bl	b6164 <HAL_Validate_Pin_Function>
   b7ae4:	2803      	cmp	r0, #3
   b7ae6:	d104      	bne.n	b7af2 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b7ae8:	4620      	mov	r0, r4
}
   b7aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b7aee:	f7fe bb59 	b.w	b61a4 <hal_adc_read>
}
   b7af2:	2000      	movs	r0, #0
   b7af4:	bd10      	pop	{r4, pc}

000b7af6 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   b7af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7afa:	4690      	mov	r8, r2
   b7afc:	461f      	mov	r7, r3
   b7afe:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
   b7b00:	4606      	mov	r6, r0
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
   b7b02:	460d      	mov	r5, r1
    if (bitOrder == LSBFIRST)
   b7b04:	f1c4 0107 	rsb	r1, r4, #7
   b7b08:	f1b8 0f00 	cmp.w	r8, #0
   b7b0c:	d112      	bne.n	b7b34 <shiftOut+0x3e>
      digitalWrite(dataPin, !!(val & (1 << i)));
   b7b0e:	fa47 f101 	asr.w	r1, r7, r1
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b7b12:	f001 0101 	and.w	r1, r1, #1
   b7b16:	4630      	mov	r0, r6
   b7b18:	f7ff ffbd 	bl	b7a96 <digitalWrite>
    digitalWrite(clockPin, HIGH);
   b7b1c:	2101      	movs	r1, #1
   b7b1e:	4628      	mov	r0, r5
   b7b20:	f7ff ffb9 	bl	b7a96 <digitalWrite>
    digitalWrite(clockPin, LOW);
   b7b24:	2100      	movs	r1, #0
   b7b26:	4628      	mov	r0, r5
   b7b28:	f7ff ffb5 	bl	b7a96 <digitalWrite>
  for (i = 0; i < 8; i++)  {
   b7b2c:	3c01      	subs	r4, #1
   b7b2e:	d2e9      	bcs.n	b7b04 <shiftOut+0xe>
  }
}
   b7b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
   b7b34:	fa47 f104 	asr.w	r1, r7, r4
   b7b38:	e7eb      	b.n	b7b12 <shiftOut+0x1c>

000b7b3a <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7b3a:	4770      	bx	lr

000b7b3c <_Z17acquireWireBufferv>:
{
   b7b3c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7b3e:	4b0a      	ldr	r3, [pc, #40]	; (b7b68 <_Z17acquireWireBufferv+0x2c>)
   b7b40:	6003      	str	r3, [r0, #0]
   b7b42:	2301      	movs	r3, #1
{
   b7b44:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b7b46:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7b48:	4908      	ldr	r1, [pc, #32]	; (b7b6c <_Z17acquireWireBufferv+0x30>)
   b7b4a:	2020      	movs	r0, #32
   b7b4c:	f000 f874 	bl	b7c38 <_ZnajRKSt9nothrow_t>
	};
   b7b50:	2520      	movs	r5, #32
   b7b52:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7b54:	4905      	ldr	r1, [pc, #20]	; (b7b6c <_Z17acquireWireBufferv+0x30>)
	};
   b7b56:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7b58:	4628      	mov	r0, r5
   b7b5a:	f000 f86d 	bl	b7c38 <_ZnajRKSt9nothrow_t>
	};
   b7b5e:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7b62:	4620      	mov	r0, r4
   b7b64:	bd38      	pop	{r3, r4, r5, pc}
   b7b66:	bf00      	nop
   b7b68:	00010018 	.word	0x00010018
   b7b6c:	000b9408 	.word	0x000b9408

000b7b70 <_Z19__fetch_global_Wirev>:
{
   b7b70:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7b72:	4d0e      	ldr	r5, [pc, #56]	; (b7bac <_Z19__fetch_global_Wirev+0x3c>)
   b7b74:	7829      	ldrb	r1, [r5, #0]
   b7b76:	f3bf 8f5b 	dmb	ish
   b7b7a:	f011 0401 	ands.w	r4, r1, #1
{
   b7b7e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7b80:	d111      	bne.n	b7ba6 <_Z19__fetch_global_Wirev+0x36>
   b7b82:	4628      	mov	r0, r5
   b7b84:	f7fc fa98 	bl	b40b8 <__cxa_guard_acquire>
   b7b88:	b168      	cbz	r0, b7ba6 <_Z19__fetch_global_Wirev+0x36>
   b7b8a:	4668      	mov	r0, sp
   b7b8c:	f7ff ffd6 	bl	b7b3c <_Z17acquireWireBufferv>
   b7b90:	466a      	mov	r2, sp
   b7b92:	4621      	mov	r1, r4
   b7b94:	4806      	ldr	r0, [pc, #24]	; (b7bb0 <_Z19__fetch_global_Wirev+0x40>)
   b7b96:	f7fe fddf 	bl	b6758 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b7b9a:	4628      	mov	r0, r5
   b7b9c:	f7fc fa91 	bl	b40c2 <__cxa_guard_release>
   b7ba0:	4804      	ldr	r0, [pc, #16]	; (b7bb4 <_Z19__fetch_global_Wirev+0x44>)
   b7ba2:	f000 fe11 	bl	b87c8 <atexit>
	return wire;
}
   b7ba6:	4802      	ldr	r0, [pc, #8]	; (b7bb0 <_Z19__fetch_global_Wirev+0x40>)
   b7ba8:	b007      	add	sp, #28
   b7baa:	bd30      	pop	{r4, r5, pc}
   b7bac:	2003e72c 	.word	0x2003e72c
   b7bb0:	2003e730 	.word	0x2003e730
   b7bb4:	000b7b3b 	.word	0x000b7b3b

000b7bb8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7bb8:	4770      	bx	lr
	...

000b7bbc <_Z20acquireSerial1Bufferv>:
{
   b7bbc:	b538      	push	{r3, r4, r5, lr}
   b7bbe:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b7bc0:	2514      	movs	r5, #20
   b7bc2:	462a      	mov	r2, r5
   b7bc4:	2100      	movs	r1, #0
   b7bc6:	f000 fe17 	bl	b87f8 <memset>
   b7bca:	8025      	strh	r5, [r4, #0]
   b7bcc:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7bce:	4907      	ldr	r1, [pc, #28]	; (b7bec <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b7bd0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7bd2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b7bd4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7bd6:	f000 f82f 	bl	b7c38 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7bda:	4904      	ldr	r1, [pc, #16]	; (b7bec <_Z20acquireSerial1Bufferv+0x30>)
    };
   b7bdc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b7bde:	4628      	mov	r0, r5
   b7be0:	f000 f82a 	bl	b7c38 <_ZnajRKSt9nothrow_t>
    };
   b7be4:	60e0      	str	r0, [r4, #12]
}
   b7be6:	4620      	mov	r0, r4
   b7be8:	bd38      	pop	{r3, r4, r5, pc}
   b7bea:	bf00      	nop
   b7bec:	000b9408 	.word	0x000b9408

000b7bf0 <_Z22__fetch_global_Serial1v>:
{
   b7bf0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7bf2:	4d0e      	ldr	r5, [pc, #56]	; (b7c2c <_Z22__fetch_global_Serial1v+0x3c>)
   b7bf4:	7829      	ldrb	r1, [r5, #0]
   b7bf6:	f3bf 8f5b 	dmb	ish
   b7bfa:	f011 0401 	ands.w	r4, r1, #1
{
   b7bfe:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7c00:	d111      	bne.n	b7c26 <_Z22__fetch_global_Serial1v+0x36>
   b7c02:	4628      	mov	r0, r5
   b7c04:	f7fc fa58 	bl	b40b8 <__cxa_guard_acquire>
   b7c08:	b168      	cbz	r0, b7c26 <_Z22__fetch_global_Serial1v+0x36>
   b7c0a:	a801      	add	r0, sp, #4
   b7c0c:	f7ff ffd6 	bl	b7bbc <_Z20acquireSerial1Bufferv>
   b7c10:	aa01      	add	r2, sp, #4
   b7c12:	4621      	mov	r1, r4
   b7c14:	4806      	ldr	r0, [pc, #24]	; (b7c30 <_Z22__fetch_global_Serial1v+0x40>)
   b7c16:	f7ff fd79 	bl	b770c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b7c1a:	4628      	mov	r0, r5
   b7c1c:	f7fc fa51 	bl	b40c2 <__cxa_guard_release>
   b7c20:	4804      	ldr	r0, [pc, #16]	; (b7c34 <_Z22__fetch_global_Serial1v+0x44>)
   b7c22:	f000 fdd1 	bl	b87c8 <atexit>
    return serial1;
}
   b7c26:	4802      	ldr	r0, [pc, #8]	; (b7c30 <_Z22__fetch_global_Serial1v+0x40>)
   b7c28:	b007      	add	sp, #28
   b7c2a:	bd30      	pop	{r4, r5, pc}
   b7c2c:	2003e744 	.word	0x2003e744
   b7c30:	2003e748 	.word	0x2003e748
   b7c34:	000b7bb9 	.word	0x000b7bb9

000b7c38 <_ZnajRKSt9nothrow_t>:
   b7c38:	f7fc ba2d 	b.w	b4096 <_Znaj>

000b7c3c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b7c3c:	4901      	ldr	r1, [pc, #4]	; (b7c44 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b7c3e:	f000 b8f9 	b.w	b7e34 <_ZNKSt9type_infoeqERKS_>
   b7c42:	bf00      	nop
   b7c44:	000b9424 	.word	0x000b9424

000b7c48 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b7c48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b7c4a:	2400      	movs	r4, #0
   b7c4c:	2310      	movs	r3, #16
   b7c4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b7c52:	6803      	ldr	r3, [r0, #0]
   b7c54:	4615      	mov	r5, r2
   b7c56:	699e      	ldr	r6, [r3, #24]
   b7c58:	6812      	ldr	r2, [r2, #0]
   b7c5a:	466b      	mov	r3, sp
   b7c5c:	e9cd 4400 	strd	r4, r4, [sp]
   b7c60:	47b0      	blx	r6
   b7c62:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7c66:	f003 0306 	and.w	r3, r3, #6
   b7c6a:	2b06      	cmp	r3, #6
   b7c6c:	bf03      	ittte	eq
   b7c6e:	9b00      	ldreq	r3, [sp, #0]
   b7c70:	602b      	streq	r3, [r5, #0]
   b7c72:	2001      	moveq	r0, #1
   b7c74:	4620      	movne	r0, r4
   b7c76:	b004      	add	sp, #16
   b7c78:	bd70      	pop	{r4, r5, r6, pc}

000b7c7a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b7c7a:	9800      	ldr	r0, [sp, #0]
   b7c7c:	4290      	cmp	r0, r2
   b7c7e:	bf14      	ite	ne
   b7c80:	2001      	movne	r0, #1
   b7c82:	2006      	moveq	r0, #6
   b7c84:	4770      	bx	lr
	...

000b7c88 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b7c88:	b510      	push	{r4, lr}
   b7c8a:	4b03      	ldr	r3, [pc, #12]	; (b7c98 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b7c8c:	6003      	str	r3, [r0, #0]
   b7c8e:	4604      	mov	r4, r0
   b7c90:	f000 f8cd 	bl	b7e2e <_ZNSt9type_infoD1Ev>
   b7c94:	4620      	mov	r0, r4
   b7c96:	bd10      	pop	{r4, pc}
   b7c98:	000b9464 	.word	0x000b9464

000b7c9c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b7c9c:	b510      	push	{r4, lr}
   b7c9e:	4604      	mov	r4, r0
   b7ca0:	f7ff fff2 	bl	b7c88 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7ca4:	4620      	mov	r0, r4
   b7ca6:	2108      	movs	r1, #8
   b7ca8:	f7fc f9f7 	bl	b409a <_ZdlPvj>
   b7cac:	4620      	mov	r0, r4
   b7cae:	bd10      	pop	{r4, pc}

000b7cb0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b7cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7cb4:	461f      	mov	r7, r3
   b7cb6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b7cba:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b7cbe:	4598      	cmp	r8, r3
   b7cc0:	4606      	mov	r6, r0
   b7cc2:	4615      	mov	r5, r2
   b7cc4:	d107      	bne.n	b7cd6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7cc6:	9907      	ldr	r1, [sp, #28]
   b7cc8:	f000 f8b4 	bl	b7e34 <_ZNKSt9type_infoeqERKS_>
   b7ccc:	b118      	cbz	r0, b7cd6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b7cce:	7165      	strb	r5, [r4, #5]
   b7cd0:	2000      	movs	r0, #0
   b7cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7cd6:	4639      	mov	r1, r7
   b7cd8:	4630      	mov	r0, r6
   b7cda:	f000 f8ab 	bl	b7e34 <_ZNKSt9type_infoeqERKS_>
   b7cde:	2800      	cmp	r0, #0
   b7ce0:	d0f6      	beq.n	b7cd0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b7ce2:	2301      	movs	r3, #1
   b7ce4:	f8c4 8000 	str.w	r8, [r4]
   b7ce8:	7125      	strb	r5, [r4, #4]
   b7cea:	71a3      	strb	r3, [r4, #6]
   b7cec:	e7f0      	b.n	b7cd0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b7cee <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b7cee:	b538      	push	{r3, r4, r5, lr}
   b7cf0:	4615      	mov	r5, r2
   b7cf2:	461c      	mov	r4, r3
   b7cf4:	f000 f89e 	bl	b7e34 <_ZNKSt9type_infoeqERKS_>
   b7cf8:	b120      	cbz	r0, b7d04 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b7cfa:	2308      	movs	r3, #8
   b7cfc:	60e3      	str	r3, [r4, #12]
   b7cfe:	2306      	movs	r3, #6
   b7d00:	6025      	str	r5, [r4, #0]
   b7d02:	7123      	strb	r3, [r4, #4]
   b7d04:	bd38      	pop	{r3, r4, r5, pc}

000b7d06 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b7d06:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7d08:	4605      	mov	r5, r0
   b7d0a:	460c      	mov	r4, r1
   b7d0c:	9201      	str	r2, [sp, #4]
   b7d0e:	461e      	mov	r6, r3
   b7d10:	f000 f890 	bl	b7e34 <_ZNKSt9type_infoeqERKS_>
   b7d14:	b950      	cbnz	r0, b7d2c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7d16:	2e03      	cmp	r6, #3
   b7d18:	d808      	bhi.n	b7d2c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b7d1a:	6823      	ldr	r3, [r4, #0]
   b7d1c:	9a01      	ldr	r2, [sp, #4]
   b7d1e:	695b      	ldr	r3, [r3, #20]
   b7d20:	4629      	mov	r1, r5
   b7d22:	4620      	mov	r0, r4
   b7d24:	b002      	add	sp, #8
   b7d26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7d2a:	4718      	bx	r3
   b7d2c:	b002      	add	sp, #8
   b7d2e:	bd70      	pop	{r4, r5, r6, pc}

000b7d30 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b7d30:	b510      	push	{r4, lr}
   b7d32:	4b03      	ldr	r3, [pc, #12]	; (b7d40 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b7d34:	6003      	str	r3, [r0, #0]
   b7d36:	4604      	mov	r4, r0
   b7d38:	f7ff ffa6 	bl	b7c88 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b7d3c:	4620      	mov	r0, r4
   b7d3e:	bd10      	pop	{r4, pc}
   b7d40:	000b94c4 	.word	0x000b94c4

000b7d44 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b7d44:	b510      	push	{r4, lr}
   b7d46:	4604      	mov	r4, r0
   b7d48:	f7ff fff2 	bl	b7d30 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b7d4c:	4620      	mov	r0, r4
   b7d4e:	210c      	movs	r1, #12
   b7d50:	f7fc f9a3 	bl	b409a <_ZdlPvj>
   b7d54:	4620      	mov	r0, r4
   b7d56:	bd10      	pop	{r4, pc}

000b7d58 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b7d58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7d5a:	9f08      	ldr	r7, [sp, #32]
   b7d5c:	4297      	cmp	r7, r2
   b7d5e:	4605      	mov	r5, r0
   b7d60:	460e      	mov	r6, r1
   b7d62:	4614      	mov	r4, r2
   b7d64:	d00a      	beq.n	b7d7c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b7d66:	68a8      	ldr	r0, [r5, #8]
   b7d68:	6802      	ldr	r2, [r0, #0]
   b7d6a:	9708      	str	r7, [sp, #32]
   b7d6c:	6a15      	ldr	r5, [r2, #32]
   b7d6e:	4631      	mov	r1, r6
   b7d70:	4622      	mov	r2, r4
   b7d72:	46ac      	mov	ip, r5
   b7d74:	b003      	add	sp, #12
   b7d76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b7d7a:	4760      	bx	ip
   b7d7c:	4619      	mov	r1, r3
   b7d7e:	9301      	str	r3, [sp, #4]
   b7d80:	f000 f858 	bl	b7e34 <_ZNKSt9type_infoeqERKS_>
   b7d84:	9b01      	ldr	r3, [sp, #4]
   b7d86:	2800      	cmp	r0, #0
   b7d88:	d0ed      	beq.n	b7d66 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b7d8a:	2006      	movs	r0, #6
   b7d8c:	b003      	add	sp, #12
   b7d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7d90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b7d90:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7d94:	460d      	mov	r5, r1
   b7d96:	4619      	mov	r1, r3
   b7d98:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b7d9c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b7da0:	4681      	mov	r9, r0
   b7da2:	4617      	mov	r7, r2
   b7da4:	4698      	mov	r8, r3
   b7da6:	f000 f845 	bl	b7e34 <_ZNKSt9type_infoeqERKS_>
   b7daa:	b190      	cbz	r0, b7dd2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b7dac:	2d00      	cmp	r5, #0
   b7dae:	6034      	str	r4, [r6, #0]
   b7db0:	7137      	strb	r7, [r6, #4]
   b7db2:	db09      	blt.n	b7dc8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b7db4:	1961      	adds	r1, r4, r5
   b7db6:	458a      	cmp	sl, r1
   b7db8:	bf0c      	ite	eq
   b7dba:	2106      	moveq	r1, #6
   b7dbc:	2101      	movne	r1, #1
   b7dbe:	71b1      	strb	r1, [r6, #6]
   b7dc0:	2000      	movs	r0, #0
   b7dc2:	b001      	add	sp, #4
   b7dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7dc8:	3502      	adds	r5, #2
   b7dca:	d1f9      	bne.n	b7dc0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7dcc:	2301      	movs	r3, #1
   b7dce:	71b3      	strb	r3, [r6, #6]
   b7dd0:	e7f6      	b.n	b7dc0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7dd2:	4554      	cmp	r4, sl
   b7dd4:	d106      	bne.n	b7de4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7dd6:	4659      	mov	r1, fp
   b7dd8:	4648      	mov	r0, r9
   b7dda:	f000 f82b 	bl	b7e34 <_ZNKSt9type_infoeqERKS_>
   b7dde:	b108      	cbz	r0, b7de4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b7de0:	7177      	strb	r7, [r6, #5]
   b7de2:	e7ed      	b.n	b7dc0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b7de4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b7de8:	6803      	ldr	r3, [r0, #0]
   b7dea:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b7dee:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b7df2:	69dc      	ldr	r4, [r3, #28]
   b7df4:	463a      	mov	r2, r7
   b7df6:	4643      	mov	r3, r8
   b7df8:	4629      	mov	r1, r5
   b7dfa:	46a4      	mov	ip, r4
   b7dfc:	b001      	add	sp, #4
   b7dfe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7e02:	4760      	bx	ip

000b7e04 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b7e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7e08:	4607      	mov	r7, r0
   b7e0a:	460c      	mov	r4, r1
   b7e0c:	4615      	mov	r5, r2
   b7e0e:	461e      	mov	r6, r3
   b7e10:	f7ff ff6d 	bl	b7cee <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b7e14:	b948      	cbnz	r0, b7e2a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b7e16:	68b8      	ldr	r0, [r7, #8]
   b7e18:	6803      	ldr	r3, [r0, #0]
   b7e1a:	699f      	ldr	r7, [r3, #24]
   b7e1c:	462a      	mov	r2, r5
   b7e1e:	4633      	mov	r3, r6
   b7e20:	4621      	mov	r1, r4
   b7e22:	46bc      	mov	ip, r7
   b7e24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b7e28:	4760      	bx	ip
   b7e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7e2e <_ZNSt9type_infoD1Ev>:
   b7e2e:	4770      	bx	lr

000b7e30 <_ZNKSt9type_info14__is_pointer_pEv>:
   b7e30:	2000      	movs	r0, #0
   b7e32:	4770      	bx	lr

000b7e34 <_ZNKSt9type_infoeqERKS_>:
   b7e34:	4281      	cmp	r1, r0
   b7e36:	b508      	push	{r3, lr}
   b7e38:	d00e      	beq.n	b7e58 <_ZNKSt9type_infoeqERKS_+0x24>
   b7e3a:	6840      	ldr	r0, [r0, #4]
   b7e3c:	7803      	ldrb	r3, [r0, #0]
   b7e3e:	2b2a      	cmp	r3, #42	; 0x2a
   b7e40:	d00c      	beq.n	b7e5c <_ZNKSt9type_infoeqERKS_+0x28>
   b7e42:	6849      	ldr	r1, [r1, #4]
   b7e44:	780b      	ldrb	r3, [r1, #0]
   b7e46:	2b2a      	cmp	r3, #42	; 0x2a
   b7e48:	bf08      	it	eq
   b7e4a:	3101      	addeq	r1, #1
   b7e4c:	f000 fd0a 	bl	b8864 <strcmp>
   b7e50:	fab0 f080 	clz	r0, r0
   b7e54:	0940      	lsrs	r0, r0, #5
   b7e56:	bd08      	pop	{r3, pc}
   b7e58:	2001      	movs	r0, #1
   b7e5a:	e7fc      	b.n	b7e56 <_ZNKSt9type_infoeqERKS_+0x22>
   b7e5c:	2000      	movs	r0, #0
   b7e5e:	e7fa      	b.n	b7e56 <_ZNKSt9type_infoeqERKS_+0x22>

000b7e60 <__aeabi_drsub>:
   b7e60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b7e64:	e002      	b.n	b7e6c <__adddf3>
   b7e66:	bf00      	nop

000b7e68 <__aeabi_dsub>:
   b7e68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b7e6c <__adddf3>:
   b7e6c:	b530      	push	{r4, r5, lr}
   b7e6e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b7e72:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b7e76:	ea94 0f05 	teq	r4, r5
   b7e7a:	bf08      	it	eq
   b7e7c:	ea90 0f02 	teqeq	r0, r2
   b7e80:	bf1f      	itttt	ne
   b7e82:	ea54 0c00 	orrsne.w	ip, r4, r0
   b7e86:	ea55 0c02 	orrsne.w	ip, r5, r2
   b7e8a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b7e8e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b7e92:	f000 80e2 	beq.w	b805a <__adddf3+0x1ee>
   b7e96:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b7e9a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b7e9e:	bfb8      	it	lt
   b7ea0:	426d      	neglt	r5, r5
   b7ea2:	dd0c      	ble.n	b7ebe <__adddf3+0x52>
   b7ea4:	442c      	add	r4, r5
   b7ea6:	ea80 0202 	eor.w	r2, r0, r2
   b7eaa:	ea81 0303 	eor.w	r3, r1, r3
   b7eae:	ea82 0000 	eor.w	r0, r2, r0
   b7eb2:	ea83 0101 	eor.w	r1, r3, r1
   b7eb6:	ea80 0202 	eor.w	r2, r0, r2
   b7eba:	ea81 0303 	eor.w	r3, r1, r3
   b7ebe:	2d36      	cmp	r5, #54	; 0x36
   b7ec0:	bf88      	it	hi
   b7ec2:	bd30      	pophi	{r4, r5, pc}
   b7ec4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b7ec8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b7ecc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b7ed0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b7ed4:	d002      	beq.n	b7edc <__adddf3+0x70>
   b7ed6:	4240      	negs	r0, r0
   b7ed8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7edc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b7ee0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b7ee4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b7ee8:	d002      	beq.n	b7ef0 <__adddf3+0x84>
   b7eea:	4252      	negs	r2, r2
   b7eec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b7ef0:	ea94 0f05 	teq	r4, r5
   b7ef4:	f000 80a7 	beq.w	b8046 <__adddf3+0x1da>
   b7ef8:	f1a4 0401 	sub.w	r4, r4, #1
   b7efc:	f1d5 0e20 	rsbs	lr, r5, #32
   b7f00:	db0d      	blt.n	b7f1e <__adddf3+0xb2>
   b7f02:	fa02 fc0e 	lsl.w	ip, r2, lr
   b7f06:	fa22 f205 	lsr.w	r2, r2, r5
   b7f0a:	1880      	adds	r0, r0, r2
   b7f0c:	f141 0100 	adc.w	r1, r1, #0
   b7f10:	fa03 f20e 	lsl.w	r2, r3, lr
   b7f14:	1880      	adds	r0, r0, r2
   b7f16:	fa43 f305 	asr.w	r3, r3, r5
   b7f1a:	4159      	adcs	r1, r3
   b7f1c:	e00e      	b.n	b7f3c <__adddf3+0xd0>
   b7f1e:	f1a5 0520 	sub.w	r5, r5, #32
   b7f22:	f10e 0e20 	add.w	lr, lr, #32
   b7f26:	2a01      	cmp	r2, #1
   b7f28:	fa03 fc0e 	lsl.w	ip, r3, lr
   b7f2c:	bf28      	it	cs
   b7f2e:	f04c 0c02 	orrcs.w	ip, ip, #2
   b7f32:	fa43 f305 	asr.w	r3, r3, r5
   b7f36:	18c0      	adds	r0, r0, r3
   b7f38:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b7f3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b7f40:	d507      	bpl.n	b7f52 <__adddf3+0xe6>
   b7f42:	f04f 0e00 	mov.w	lr, #0
   b7f46:	f1dc 0c00 	rsbs	ip, ip, #0
   b7f4a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b7f4e:	eb6e 0101 	sbc.w	r1, lr, r1
   b7f52:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b7f56:	d31b      	bcc.n	b7f90 <__adddf3+0x124>
   b7f58:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b7f5c:	d30c      	bcc.n	b7f78 <__adddf3+0x10c>
   b7f5e:	0849      	lsrs	r1, r1, #1
   b7f60:	ea5f 0030 	movs.w	r0, r0, rrx
   b7f64:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b7f68:	f104 0401 	add.w	r4, r4, #1
   b7f6c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b7f70:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b7f74:	f080 809a 	bcs.w	b80ac <__adddf3+0x240>
   b7f78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b7f7c:	bf08      	it	eq
   b7f7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b7f82:	f150 0000 	adcs.w	r0, r0, #0
   b7f86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b7f8a:	ea41 0105 	orr.w	r1, r1, r5
   b7f8e:	bd30      	pop	{r4, r5, pc}
   b7f90:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b7f94:	4140      	adcs	r0, r0
   b7f96:	eb41 0101 	adc.w	r1, r1, r1
   b7f9a:	3c01      	subs	r4, #1
   b7f9c:	bf28      	it	cs
   b7f9e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b7fa2:	d2e9      	bcs.n	b7f78 <__adddf3+0x10c>
   b7fa4:	f091 0f00 	teq	r1, #0
   b7fa8:	bf04      	itt	eq
   b7faa:	4601      	moveq	r1, r0
   b7fac:	2000      	moveq	r0, #0
   b7fae:	fab1 f381 	clz	r3, r1
   b7fb2:	bf08      	it	eq
   b7fb4:	3320      	addeq	r3, #32
   b7fb6:	f1a3 030b 	sub.w	r3, r3, #11
   b7fba:	f1b3 0220 	subs.w	r2, r3, #32
   b7fbe:	da0c      	bge.n	b7fda <__adddf3+0x16e>
   b7fc0:	320c      	adds	r2, #12
   b7fc2:	dd08      	ble.n	b7fd6 <__adddf3+0x16a>
   b7fc4:	f102 0c14 	add.w	ip, r2, #20
   b7fc8:	f1c2 020c 	rsb	r2, r2, #12
   b7fcc:	fa01 f00c 	lsl.w	r0, r1, ip
   b7fd0:	fa21 f102 	lsr.w	r1, r1, r2
   b7fd4:	e00c      	b.n	b7ff0 <__adddf3+0x184>
   b7fd6:	f102 0214 	add.w	r2, r2, #20
   b7fda:	bfd8      	it	le
   b7fdc:	f1c2 0c20 	rsble	ip, r2, #32
   b7fe0:	fa01 f102 	lsl.w	r1, r1, r2
   b7fe4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b7fe8:	bfdc      	itt	le
   b7fea:	ea41 010c 	orrle.w	r1, r1, ip
   b7fee:	4090      	lslle	r0, r2
   b7ff0:	1ae4      	subs	r4, r4, r3
   b7ff2:	bfa2      	ittt	ge
   b7ff4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b7ff8:	4329      	orrge	r1, r5
   b7ffa:	bd30      	popge	{r4, r5, pc}
   b7ffc:	ea6f 0404 	mvn.w	r4, r4
   b8000:	3c1f      	subs	r4, #31
   b8002:	da1c      	bge.n	b803e <__adddf3+0x1d2>
   b8004:	340c      	adds	r4, #12
   b8006:	dc0e      	bgt.n	b8026 <__adddf3+0x1ba>
   b8008:	f104 0414 	add.w	r4, r4, #20
   b800c:	f1c4 0220 	rsb	r2, r4, #32
   b8010:	fa20 f004 	lsr.w	r0, r0, r4
   b8014:	fa01 f302 	lsl.w	r3, r1, r2
   b8018:	ea40 0003 	orr.w	r0, r0, r3
   b801c:	fa21 f304 	lsr.w	r3, r1, r4
   b8020:	ea45 0103 	orr.w	r1, r5, r3
   b8024:	bd30      	pop	{r4, r5, pc}
   b8026:	f1c4 040c 	rsb	r4, r4, #12
   b802a:	f1c4 0220 	rsb	r2, r4, #32
   b802e:	fa20 f002 	lsr.w	r0, r0, r2
   b8032:	fa01 f304 	lsl.w	r3, r1, r4
   b8036:	ea40 0003 	orr.w	r0, r0, r3
   b803a:	4629      	mov	r1, r5
   b803c:	bd30      	pop	{r4, r5, pc}
   b803e:	fa21 f004 	lsr.w	r0, r1, r4
   b8042:	4629      	mov	r1, r5
   b8044:	bd30      	pop	{r4, r5, pc}
   b8046:	f094 0f00 	teq	r4, #0
   b804a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b804e:	bf06      	itte	eq
   b8050:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b8054:	3401      	addeq	r4, #1
   b8056:	3d01      	subne	r5, #1
   b8058:	e74e      	b.n	b7ef8 <__adddf3+0x8c>
   b805a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b805e:	bf18      	it	ne
   b8060:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8064:	d029      	beq.n	b80ba <__adddf3+0x24e>
   b8066:	ea94 0f05 	teq	r4, r5
   b806a:	bf08      	it	eq
   b806c:	ea90 0f02 	teqeq	r0, r2
   b8070:	d005      	beq.n	b807e <__adddf3+0x212>
   b8072:	ea54 0c00 	orrs.w	ip, r4, r0
   b8076:	bf04      	itt	eq
   b8078:	4619      	moveq	r1, r3
   b807a:	4610      	moveq	r0, r2
   b807c:	bd30      	pop	{r4, r5, pc}
   b807e:	ea91 0f03 	teq	r1, r3
   b8082:	bf1e      	ittt	ne
   b8084:	2100      	movne	r1, #0
   b8086:	2000      	movne	r0, #0
   b8088:	bd30      	popne	{r4, r5, pc}
   b808a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b808e:	d105      	bne.n	b809c <__adddf3+0x230>
   b8090:	0040      	lsls	r0, r0, #1
   b8092:	4149      	adcs	r1, r1
   b8094:	bf28      	it	cs
   b8096:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b809a:	bd30      	pop	{r4, r5, pc}
   b809c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b80a0:	bf3c      	itt	cc
   b80a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b80a6:	bd30      	popcc	{r4, r5, pc}
   b80a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b80ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b80b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b80b4:	f04f 0000 	mov.w	r0, #0
   b80b8:	bd30      	pop	{r4, r5, pc}
   b80ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b80be:	bf1a      	itte	ne
   b80c0:	4619      	movne	r1, r3
   b80c2:	4610      	movne	r0, r2
   b80c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b80c8:	bf1c      	itt	ne
   b80ca:	460b      	movne	r3, r1
   b80cc:	4602      	movne	r2, r0
   b80ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b80d2:	bf06      	itte	eq
   b80d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b80d8:	ea91 0f03 	teqeq	r1, r3
   b80dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b80e0:	bd30      	pop	{r4, r5, pc}
   b80e2:	bf00      	nop

000b80e4 <__aeabi_ui2d>:
   b80e4:	f090 0f00 	teq	r0, #0
   b80e8:	bf04      	itt	eq
   b80ea:	2100      	moveq	r1, #0
   b80ec:	4770      	bxeq	lr
   b80ee:	b530      	push	{r4, r5, lr}
   b80f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b80f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b80f8:	f04f 0500 	mov.w	r5, #0
   b80fc:	f04f 0100 	mov.w	r1, #0
   b8100:	e750      	b.n	b7fa4 <__adddf3+0x138>
   b8102:	bf00      	nop

000b8104 <__aeabi_i2d>:
   b8104:	f090 0f00 	teq	r0, #0
   b8108:	bf04      	itt	eq
   b810a:	2100      	moveq	r1, #0
   b810c:	4770      	bxeq	lr
   b810e:	b530      	push	{r4, r5, lr}
   b8110:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8114:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8118:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b811c:	bf48      	it	mi
   b811e:	4240      	negmi	r0, r0
   b8120:	f04f 0100 	mov.w	r1, #0
   b8124:	e73e      	b.n	b7fa4 <__adddf3+0x138>
   b8126:	bf00      	nop

000b8128 <__aeabi_f2d>:
   b8128:	0042      	lsls	r2, r0, #1
   b812a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b812e:	ea4f 0131 	mov.w	r1, r1, rrx
   b8132:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b8136:	bf1f      	itttt	ne
   b8138:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b813c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b8140:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b8144:	4770      	bxne	lr
   b8146:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b814a:	bf08      	it	eq
   b814c:	4770      	bxeq	lr
   b814e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b8152:	bf04      	itt	eq
   b8154:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b8158:	4770      	bxeq	lr
   b815a:	b530      	push	{r4, r5, lr}
   b815c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b8160:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8164:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8168:	e71c      	b.n	b7fa4 <__adddf3+0x138>
   b816a:	bf00      	nop

000b816c <__aeabi_ul2d>:
   b816c:	ea50 0201 	orrs.w	r2, r0, r1
   b8170:	bf08      	it	eq
   b8172:	4770      	bxeq	lr
   b8174:	b530      	push	{r4, r5, lr}
   b8176:	f04f 0500 	mov.w	r5, #0
   b817a:	e00a      	b.n	b8192 <__aeabi_l2d+0x16>

000b817c <__aeabi_l2d>:
   b817c:	ea50 0201 	orrs.w	r2, r0, r1
   b8180:	bf08      	it	eq
   b8182:	4770      	bxeq	lr
   b8184:	b530      	push	{r4, r5, lr}
   b8186:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b818a:	d502      	bpl.n	b8192 <__aeabi_l2d+0x16>
   b818c:	4240      	negs	r0, r0
   b818e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8192:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8196:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b819a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b819e:	f43f aed8 	beq.w	b7f52 <__adddf3+0xe6>
   b81a2:	f04f 0203 	mov.w	r2, #3
   b81a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b81aa:	bf18      	it	ne
   b81ac:	3203      	addne	r2, #3
   b81ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b81b2:	bf18      	it	ne
   b81b4:	3203      	addne	r2, #3
   b81b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b81ba:	f1c2 0320 	rsb	r3, r2, #32
   b81be:	fa00 fc03 	lsl.w	ip, r0, r3
   b81c2:	fa20 f002 	lsr.w	r0, r0, r2
   b81c6:	fa01 fe03 	lsl.w	lr, r1, r3
   b81ca:	ea40 000e 	orr.w	r0, r0, lr
   b81ce:	fa21 f102 	lsr.w	r1, r1, r2
   b81d2:	4414      	add	r4, r2
   b81d4:	e6bd      	b.n	b7f52 <__adddf3+0xe6>
   b81d6:	bf00      	nop

000b81d8 <__aeabi_dmul>:
   b81d8:	b570      	push	{r4, r5, r6, lr}
   b81da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b81de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b81e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b81e6:	bf1d      	ittte	ne
   b81e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b81ec:	ea94 0f0c 	teqne	r4, ip
   b81f0:	ea95 0f0c 	teqne	r5, ip
   b81f4:	f000 f8de 	bleq	b83b4 <__aeabi_dmul+0x1dc>
   b81f8:	442c      	add	r4, r5
   b81fa:	ea81 0603 	eor.w	r6, r1, r3
   b81fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b8202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b8206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b820a:	bf18      	it	ne
   b820c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b8210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8218:	d038      	beq.n	b828c <__aeabi_dmul+0xb4>
   b821a:	fba0 ce02 	umull	ip, lr, r0, r2
   b821e:	f04f 0500 	mov.w	r5, #0
   b8222:	fbe1 e502 	umlal	lr, r5, r1, r2
   b8226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b822a:	fbe0 e503 	umlal	lr, r5, r0, r3
   b822e:	f04f 0600 	mov.w	r6, #0
   b8232:	fbe1 5603 	umlal	r5, r6, r1, r3
   b8236:	f09c 0f00 	teq	ip, #0
   b823a:	bf18      	it	ne
   b823c:	f04e 0e01 	orrne.w	lr, lr, #1
   b8240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b8244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b8248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b824c:	d204      	bcs.n	b8258 <__aeabi_dmul+0x80>
   b824e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b8252:	416d      	adcs	r5, r5
   b8254:	eb46 0606 	adc.w	r6, r6, r6
   b8258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b825c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b8260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b8264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b8268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b826c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b8270:	bf88      	it	hi
   b8272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8276:	d81e      	bhi.n	b82b6 <__aeabi_dmul+0xde>
   b8278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b827c:	bf08      	it	eq
   b827e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b8282:	f150 0000 	adcs.w	r0, r0, #0
   b8286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b828a:	bd70      	pop	{r4, r5, r6, pc}
   b828c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b8290:	ea46 0101 	orr.w	r1, r6, r1
   b8294:	ea40 0002 	orr.w	r0, r0, r2
   b8298:	ea81 0103 	eor.w	r1, r1, r3
   b829c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b82a0:	bfc2      	ittt	gt
   b82a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   b82a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b82aa:	bd70      	popgt	{r4, r5, r6, pc}
   b82ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b82b0:	f04f 0e00 	mov.w	lr, #0
   b82b4:	3c01      	subs	r4, #1
   b82b6:	f300 80ab 	bgt.w	b8410 <__aeabi_dmul+0x238>
   b82ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b82be:	bfde      	ittt	le
   b82c0:	2000      	movle	r0, #0
   b82c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b82c6:	bd70      	pople	{r4, r5, r6, pc}
   b82c8:	f1c4 0400 	rsb	r4, r4, #0
   b82cc:	3c20      	subs	r4, #32
   b82ce:	da35      	bge.n	b833c <__aeabi_dmul+0x164>
   b82d0:	340c      	adds	r4, #12
   b82d2:	dc1b      	bgt.n	b830c <__aeabi_dmul+0x134>
   b82d4:	f104 0414 	add.w	r4, r4, #20
   b82d8:	f1c4 0520 	rsb	r5, r4, #32
   b82dc:	fa00 f305 	lsl.w	r3, r0, r5
   b82e0:	fa20 f004 	lsr.w	r0, r0, r4
   b82e4:	fa01 f205 	lsl.w	r2, r1, r5
   b82e8:	ea40 0002 	orr.w	r0, r0, r2
   b82ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b82f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b82f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b82f8:	fa21 f604 	lsr.w	r6, r1, r4
   b82fc:	eb42 0106 	adc.w	r1, r2, r6
   b8300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8304:	bf08      	it	eq
   b8306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b830a:	bd70      	pop	{r4, r5, r6, pc}
   b830c:	f1c4 040c 	rsb	r4, r4, #12
   b8310:	f1c4 0520 	rsb	r5, r4, #32
   b8314:	fa00 f304 	lsl.w	r3, r0, r4
   b8318:	fa20 f005 	lsr.w	r0, r0, r5
   b831c:	fa01 f204 	lsl.w	r2, r1, r4
   b8320:	ea40 0002 	orr.w	r0, r0, r2
   b8324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b832c:	f141 0100 	adc.w	r1, r1, #0
   b8330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8334:	bf08      	it	eq
   b8336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b833a:	bd70      	pop	{r4, r5, r6, pc}
   b833c:	f1c4 0520 	rsb	r5, r4, #32
   b8340:	fa00 f205 	lsl.w	r2, r0, r5
   b8344:	ea4e 0e02 	orr.w	lr, lr, r2
   b8348:	fa20 f304 	lsr.w	r3, r0, r4
   b834c:	fa01 f205 	lsl.w	r2, r1, r5
   b8350:	ea43 0302 	orr.w	r3, r3, r2
   b8354:	fa21 f004 	lsr.w	r0, r1, r4
   b8358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b835c:	fa21 f204 	lsr.w	r2, r1, r4
   b8360:	ea20 0002 	bic.w	r0, r0, r2
   b8364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b8368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b836c:	bf08      	it	eq
   b836e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8372:	bd70      	pop	{r4, r5, r6, pc}
   b8374:	f094 0f00 	teq	r4, #0
   b8378:	d10f      	bne.n	b839a <__aeabi_dmul+0x1c2>
   b837a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b837e:	0040      	lsls	r0, r0, #1
   b8380:	eb41 0101 	adc.w	r1, r1, r1
   b8384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8388:	bf08      	it	eq
   b838a:	3c01      	subeq	r4, #1
   b838c:	d0f7      	beq.n	b837e <__aeabi_dmul+0x1a6>
   b838e:	ea41 0106 	orr.w	r1, r1, r6
   b8392:	f095 0f00 	teq	r5, #0
   b8396:	bf18      	it	ne
   b8398:	4770      	bxne	lr
   b839a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b839e:	0052      	lsls	r2, r2, #1
   b83a0:	eb43 0303 	adc.w	r3, r3, r3
   b83a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b83a8:	bf08      	it	eq
   b83aa:	3d01      	subeq	r5, #1
   b83ac:	d0f7      	beq.n	b839e <__aeabi_dmul+0x1c6>
   b83ae:	ea43 0306 	orr.w	r3, r3, r6
   b83b2:	4770      	bx	lr
   b83b4:	ea94 0f0c 	teq	r4, ip
   b83b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b83bc:	bf18      	it	ne
   b83be:	ea95 0f0c 	teqne	r5, ip
   b83c2:	d00c      	beq.n	b83de <__aeabi_dmul+0x206>
   b83c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b83c8:	bf18      	it	ne
   b83ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b83ce:	d1d1      	bne.n	b8374 <__aeabi_dmul+0x19c>
   b83d0:	ea81 0103 	eor.w	r1, r1, r3
   b83d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b83d8:	f04f 0000 	mov.w	r0, #0
   b83dc:	bd70      	pop	{r4, r5, r6, pc}
   b83de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b83e2:	bf06      	itte	eq
   b83e4:	4610      	moveq	r0, r2
   b83e6:	4619      	moveq	r1, r3
   b83e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b83ec:	d019      	beq.n	b8422 <__aeabi_dmul+0x24a>
   b83ee:	ea94 0f0c 	teq	r4, ip
   b83f2:	d102      	bne.n	b83fa <__aeabi_dmul+0x222>
   b83f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b83f8:	d113      	bne.n	b8422 <__aeabi_dmul+0x24a>
   b83fa:	ea95 0f0c 	teq	r5, ip
   b83fe:	d105      	bne.n	b840c <__aeabi_dmul+0x234>
   b8400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b8404:	bf1c      	itt	ne
   b8406:	4610      	movne	r0, r2
   b8408:	4619      	movne	r1, r3
   b840a:	d10a      	bne.n	b8422 <__aeabi_dmul+0x24a>
   b840c:	ea81 0103 	eor.w	r1, r1, r3
   b8410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b841c:	f04f 0000 	mov.w	r0, #0
   b8420:	bd70      	pop	{r4, r5, r6, pc}
   b8422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b842a:	bd70      	pop	{r4, r5, r6, pc}

000b842c <__aeabi_ddiv>:
   b842c:	b570      	push	{r4, r5, r6, lr}
   b842e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b8432:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8436:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b843a:	bf1d      	ittte	ne
   b843c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8440:	ea94 0f0c 	teqne	r4, ip
   b8444:	ea95 0f0c 	teqne	r5, ip
   b8448:	f000 f8a7 	bleq	b859a <__aeabi_ddiv+0x16e>
   b844c:	eba4 0405 	sub.w	r4, r4, r5
   b8450:	ea81 0e03 	eor.w	lr, r1, r3
   b8454:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8458:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b845c:	f000 8088 	beq.w	b8570 <__aeabi_ddiv+0x144>
   b8460:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8464:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b8468:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b846c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b8470:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b8474:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b8478:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b847c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b8480:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b8484:	429d      	cmp	r5, r3
   b8486:	bf08      	it	eq
   b8488:	4296      	cmpeq	r6, r2
   b848a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b848e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b8492:	d202      	bcs.n	b849a <__aeabi_ddiv+0x6e>
   b8494:	085b      	lsrs	r3, r3, #1
   b8496:	ea4f 0232 	mov.w	r2, r2, rrx
   b849a:	1ab6      	subs	r6, r6, r2
   b849c:	eb65 0503 	sbc.w	r5, r5, r3
   b84a0:	085b      	lsrs	r3, r3, #1
   b84a2:	ea4f 0232 	mov.w	r2, r2, rrx
   b84a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b84aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b84ae:	ebb6 0e02 	subs.w	lr, r6, r2
   b84b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b84b6:	bf22      	ittt	cs
   b84b8:	1ab6      	subcs	r6, r6, r2
   b84ba:	4675      	movcs	r5, lr
   b84bc:	ea40 000c 	orrcs.w	r0, r0, ip
   b84c0:	085b      	lsrs	r3, r3, #1
   b84c2:	ea4f 0232 	mov.w	r2, r2, rrx
   b84c6:	ebb6 0e02 	subs.w	lr, r6, r2
   b84ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   b84ce:	bf22      	ittt	cs
   b84d0:	1ab6      	subcs	r6, r6, r2
   b84d2:	4675      	movcs	r5, lr
   b84d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b84d8:	085b      	lsrs	r3, r3, #1
   b84da:	ea4f 0232 	mov.w	r2, r2, rrx
   b84de:	ebb6 0e02 	subs.w	lr, r6, r2
   b84e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b84e6:	bf22      	ittt	cs
   b84e8:	1ab6      	subcs	r6, r6, r2
   b84ea:	4675      	movcs	r5, lr
   b84ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b84f0:	085b      	lsrs	r3, r3, #1
   b84f2:	ea4f 0232 	mov.w	r2, r2, rrx
   b84f6:	ebb6 0e02 	subs.w	lr, r6, r2
   b84fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   b84fe:	bf22      	ittt	cs
   b8500:	1ab6      	subcs	r6, r6, r2
   b8502:	4675      	movcs	r5, lr
   b8504:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b8508:	ea55 0e06 	orrs.w	lr, r5, r6
   b850c:	d018      	beq.n	b8540 <__aeabi_ddiv+0x114>
   b850e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b8512:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b8516:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b851a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b851e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b8522:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b8526:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b852a:	d1c0      	bne.n	b84ae <__aeabi_ddiv+0x82>
   b852c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8530:	d10b      	bne.n	b854a <__aeabi_ddiv+0x11e>
   b8532:	ea41 0100 	orr.w	r1, r1, r0
   b8536:	f04f 0000 	mov.w	r0, #0
   b853a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b853e:	e7b6      	b.n	b84ae <__aeabi_ddiv+0x82>
   b8540:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8544:	bf04      	itt	eq
   b8546:	4301      	orreq	r1, r0
   b8548:	2000      	moveq	r0, #0
   b854a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b854e:	bf88      	it	hi
   b8550:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8554:	f63f aeaf 	bhi.w	b82b6 <__aeabi_dmul+0xde>
   b8558:	ebb5 0c03 	subs.w	ip, r5, r3
   b855c:	bf04      	itt	eq
   b855e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b8562:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8566:	f150 0000 	adcs.w	r0, r0, #0
   b856a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b856e:	bd70      	pop	{r4, r5, r6, pc}
   b8570:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b8574:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b8578:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b857c:	bfc2      	ittt	gt
   b857e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8582:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8586:	bd70      	popgt	{r4, r5, r6, pc}
   b8588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b858c:	f04f 0e00 	mov.w	lr, #0
   b8590:	3c01      	subs	r4, #1
   b8592:	e690      	b.n	b82b6 <__aeabi_dmul+0xde>
   b8594:	ea45 0e06 	orr.w	lr, r5, r6
   b8598:	e68d      	b.n	b82b6 <__aeabi_dmul+0xde>
   b859a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b859e:	ea94 0f0c 	teq	r4, ip
   b85a2:	bf08      	it	eq
   b85a4:	ea95 0f0c 	teqeq	r5, ip
   b85a8:	f43f af3b 	beq.w	b8422 <__aeabi_dmul+0x24a>
   b85ac:	ea94 0f0c 	teq	r4, ip
   b85b0:	d10a      	bne.n	b85c8 <__aeabi_ddiv+0x19c>
   b85b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b85b6:	f47f af34 	bne.w	b8422 <__aeabi_dmul+0x24a>
   b85ba:	ea95 0f0c 	teq	r5, ip
   b85be:	f47f af25 	bne.w	b840c <__aeabi_dmul+0x234>
   b85c2:	4610      	mov	r0, r2
   b85c4:	4619      	mov	r1, r3
   b85c6:	e72c      	b.n	b8422 <__aeabi_dmul+0x24a>
   b85c8:	ea95 0f0c 	teq	r5, ip
   b85cc:	d106      	bne.n	b85dc <__aeabi_ddiv+0x1b0>
   b85ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b85d2:	f43f aefd 	beq.w	b83d0 <__aeabi_dmul+0x1f8>
   b85d6:	4610      	mov	r0, r2
   b85d8:	4619      	mov	r1, r3
   b85da:	e722      	b.n	b8422 <__aeabi_dmul+0x24a>
   b85dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b85e0:	bf18      	it	ne
   b85e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b85e6:	f47f aec5 	bne.w	b8374 <__aeabi_dmul+0x19c>
   b85ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b85ee:	f47f af0d 	bne.w	b840c <__aeabi_dmul+0x234>
   b85f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b85f6:	f47f aeeb 	bne.w	b83d0 <__aeabi_dmul+0x1f8>
   b85fa:	e712      	b.n	b8422 <__aeabi_dmul+0x24a>

000b85fc <__gedf2>:
   b85fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8600:	e006      	b.n	b8610 <__cmpdf2+0x4>
   b8602:	bf00      	nop

000b8604 <__ledf2>:
   b8604:	f04f 0c01 	mov.w	ip, #1
   b8608:	e002      	b.n	b8610 <__cmpdf2+0x4>
   b860a:	bf00      	nop

000b860c <__cmpdf2>:
   b860c:	f04f 0c01 	mov.w	ip, #1
   b8610:	f84d cd04 	str.w	ip, [sp, #-4]!
   b8614:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8618:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b861c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8620:	bf18      	it	ne
   b8622:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b8626:	d01b      	beq.n	b8660 <__cmpdf2+0x54>
   b8628:	b001      	add	sp, #4
   b862a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b862e:	bf0c      	ite	eq
   b8630:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b8634:	ea91 0f03 	teqne	r1, r3
   b8638:	bf02      	ittt	eq
   b863a:	ea90 0f02 	teqeq	r0, r2
   b863e:	2000      	moveq	r0, #0
   b8640:	4770      	bxeq	lr
   b8642:	f110 0f00 	cmn.w	r0, #0
   b8646:	ea91 0f03 	teq	r1, r3
   b864a:	bf58      	it	pl
   b864c:	4299      	cmppl	r1, r3
   b864e:	bf08      	it	eq
   b8650:	4290      	cmpeq	r0, r2
   b8652:	bf2c      	ite	cs
   b8654:	17d8      	asrcs	r0, r3, #31
   b8656:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b865a:	f040 0001 	orr.w	r0, r0, #1
   b865e:	4770      	bx	lr
   b8660:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8664:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8668:	d102      	bne.n	b8670 <__cmpdf2+0x64>
   b866a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b866e:	d107      	bne.n	b8680 <__cmpdf2+0x74>
   b8670:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8674:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8678:	d1d6      	bne.n	b8628 <__cmpdf2+0x1c>
   b867a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b867e:	d0d3      	beq.n	b8628 <__cmpdf2+0x1c>
   b8680:	f85d 0b04 	ldr.w	r0, [sp], #4
   b8684:	4770      	bx	lr
   b8686:	bf00      	nop

000b8688 <__aeabi_cdrcmple>:
   b8688:	4684      	mov	ip, r0
   b868a:	4610      	mov	r0, r2
   b868c:	4662      	mov	r2, ip
   b868e:	468c      	mov	ip, r1
   b8690:	4619      	mov	r1, r3
   b8692:	4663      	mov	r3, ip
   b8694:	e000      	b.n	b8698 <__aeabi_cdcmpeq>
   b8696:	bf00      	nop

000b8698 <__aeabi_cdcmpeq>:
   b8698:	b501      	push	{r0, lr}
   b869a:	f7ff ffb7 	bl	b860c <__cmpdf2>
   b869e:	2800      	cmp	r0, #0
   b86a0:	bf48      	it	mi
   b86a2:	f110 0f00 	cmnmi.w	r0, #0
   b86a6:	bd01      	pop	{r0, pc}

000b86a8 <__aeabi_dcmpeq>:
   b86a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b86ac:	f7ff fff4 	bl	b8698 <__aeabi_cdcmpeq>
   b86b0:	bf0c      	ite	eq
   b86b2:	2001      	moveq	r0, #1
   b86b4:	2000      	movne	r0, #0
   b86b6:	f85d fb08 	ldr.w	pc, [sp], #8
   b86ba:	bf00      	nop

000b86bc <__aeabi_dcmplt>:
   b86bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   b86c0:	f7ff ffea 	bl	b8698 <__aeabi_cdcmpeq>
   b86c4:	bf34      	ite	cc
   b86c6:	2001      	movcc	r0, #1
   b86c8:	2000      	movcs	r0, #0
   b86ca:	f85d fb08 	ldr.w	pc, [sp], #8
   b86ce:	bf00      	nop

000b86d0 <__aeabi_dcmple>:
   b86d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b86d4:	f7ff ffe0 	bl	b8698 <__aeabi_cdcmpeq>
   b86d8:	bf94      	ite	ls
   b86da:	2001      	movls	r0, #1
   b86dc:	2000      	movhi	r0, #0
   b86de:	f85d fb08 	ldr.w	pc, [sp], #8
   b86e2:	bf00      	nop

000b86e4 <__aeabi_dcmpge>:
   b86e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b86e8:	f7ff ffce 	bl	b8688 <__aeabi_cdrcmple>
   b86ec:	bf94      	ite	ls
   b86ee:	2001      	movls	r0, #1
   b86f0:	2000      	movhi	r0, #0
   b86f2:	f85d fb08 	ldr.w	pc, [sp], #8
   b86f6:	bf00      	nop

000b86f8 <__aeabi_dcmpgt>:
   b86f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b86fc:	f7ff ffc4 	bl	b8688 <__aeabi_cdrcmple>
   b8700:	bf34      	ite	cc
   b8702:	2001      	movcc	r0, #1
   b8704:	2000      	movcs	r0, #0
   b8706:	f85d fb08 	ldr.w	pc, [sp], #8
   b870a:	bf00      	nop

000b870c <__aeabi_dcmpun>:
   b870c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8710:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8714:	d102      	bne.n	b871c <__aeabi_dcmpun+0x10>
   b8716:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b871a:	d10a      	bne.n	b8732 <__aeabi_dcmpun+0x26>
   b871c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8720:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8724:	d102      	bne.n	b872c <__aeabi_dcmpun+0x20>
   b8726:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b872a:	d102      	bne.n	b8732 <__aeabi_dcmpun+0x26>
   b872c:	f04f 0000 	mov.w	r0, #0
   b8730:	4770      	bx	lr
   b8732:	f04f 0001 	mov.w	r0, #1
   b8736:	4770      	bx	lr

000b8738 <__aeabi_d2iz>:
   b8738:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b873c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b8740:	d215      	bcs.n	b876e <__aeabi_d2iz+0x36>
   b8742:	d511      	bpl.n	b8768 <__aeabi_d2iz+0x30>
   b8744:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b8748:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b874c:	d912      	bls.n	b8774 <__aeabi_d2iz+0x3c>
   b874e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8752:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b8756:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b875a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b875e:	fa23 f002 	lsr.w	r0, r3, r2
   b8762:	bf18      	it	ne
   b8764:	4240      	negne	r0, r0
   b8766:	4770      	bx	lr
   b8768:	f04f 0000 	mov.w	r0, #0
   b876c:	4770      	bx	lr
   b876e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b8772:	d105      	bne.n	b8780 <__aeabi_d2iz+0x48>
   b8774:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b8778:	bf08      	it	eq
   b877a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b877e:	4770      	bx	lr
   b8780:	f04f 0000 	mov.w	r0, #0
   b8784:	4770      	bx	lr
   b8786:	bf00      	nop

000b8788 <__aeabi_d2uiz>:
   b8788:	004a      	lsls	r2, r1, #1
   b878a:	d211      	bcs.n	b87b0 <__aeabi_d2uiz+0x28>
   b878c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b8790:	d211      	bcs.n	b87b6 <__aeabi_d2uiz+0x2e>
   b8792:	d50d      	bpl.n	b87b0 <__aeabi_d2uiz+0x28>
   b8794:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b8798:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b879c:	d40e      	bmi.n	b87bc <__aeabi_d2uiz+0x34>
   b879e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b87a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b87a6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b87aa:	fa23 f002 	lsr.w	r0, r3, r2
   b87ae:	4770      	bx	lr
   b87b0:	f04f 0000 	mov.w	r0, #0
   b87b4:	4770      	bx	lr
   b87b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b87ba:	d102      	bne.n	b87c2 <__aeabi_d2uiz+0x3a>
   b87bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b87c0:	4770      	bx	lr
   b87c2:	f04f 0000 	mov.w	r0, #0
   b87c6:	4770      	bx	lr

000b87c8 <atexit>:
   b87c8:	2300      	movs	r3, #0
   b87ca:	4601      	mov	r1, r0
   b87cc:	461a      	mov	r2, r3
   b87ce:	4618      	mov	r0, r3
   b87d0:	f000 b904 	b.w	b89dc <__register_exitproc>

000b87d4 <atoi>:
   b87d4:	220a      	movs	r2, #10
   b87d6:	2100      	movs	r1, #0
   b87d8:	f000 b8f6 	b.w	b89c8 <strtol>

000b87dc <memcpy>:
   b87dc:	440a      	add	r2, r1
   b87de:	4291      	cmp	r1, r2
   b87e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b87e4:	d100      	bne.n	b87e8 <memcpy+0xc>
   b87e6:	4770      	bx	lr
   b87e8:	b510      	push	{r4, lr}
   b87ea:	f811 4b01 	ldrb.w	r4, [r1], #1
   b87ee:	f803 4f01 	strb.w	r4, [r3, #1]!
   b87f2:	4291      	cmp	r1, r2
   b87f4:	d1f9      	bne.n	b87ea <memcpy+0xe>
   b87f6:	bd10      	pop	{r4, pc}

000b87f8 <memset>:
   b87f8:	4402      	add	r2, r0
   b87fa:	4603      	mov	r3, r0
   b87fc:	4293      	cmp	r3, r2
   b87fe:	d100      	bne.n	b8802 <memset+0xa>
   b8800:	4770      	bx	lr
   b8802:	f803 1b01 	strb.w	r1, [r3], #1
   b8806:	e7f9      	b.n	b87fc <memset+0x4>

000b8808 <srand>:
   b8808:	b538      	push	{r3, r4, r5, lr}
   b880a:	4b10      	ldr	r3, [pc, #64]	; (b884c <srand+0x44>)
   b880c:	681d      	ldr	r5, [r3, #0]
   b880e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8810:	4604      	mov	r4, r0
   b8812:	b9b3      	cbnz	r3, b8842 <srand+0x3a>
   b8814:	2018      	movs	r0, #24
   b8816:	f7fd fef1 	bl	b65fc <malloc>
   b881a:	4602      	mov	r2, r0
   b881c:	63a8      	str	r0, [r5, #56]	; 0x38
   b881e:	b920      	cbnz	r0, b882a <srand+0x22>
   b8820:	4b0b      	ldr	r3, [pc, #44]	; (b8850 <srand+0x48>)
   b8822:	480c      	ldr	r0, [pc, #48]	; (b8854 <srand+0x4c>)
   b8824:	2142      	movs	r1, #66	; 0x42
   b8826:	f7fd ff11 	bl	b664c <__assert_func>
   b882a:	490b      	ldr	r1, [pc, #44]	; (b8858 <srand+0x50>)
   b882c:	4b0b      	ldr	r3, [pc, #44]	; (b885c <srand+0x54>)
   b882e:	e9c0 1300 	strd	r1, r3, [r0]
   b8832:	4b0b      	ldr	r3, [pc, #44]	; (b8860 <srand+0x58>)
   b8834:	6083      	str	r3, [r0, #8]
   b8836:	230b      	movs	r3, #11
   b8838:	8183      	strh	r3, [r0, #12]
   b883a:	2100      	movs	r1, #0
   b883c:	2001      	movs	r0, #1
   b883e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8842:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8844:	2200      	movs	r2, #0
   b8846:	611c      	str	r4, [r3, #16]
   b8848:	615a      	str	r2, [r3, #20]
   b884a:	bd38      	pop	{r3, r4, r5, pc}
   b884c:	2003dbfc 	.word	0x2003dbfc
   b8850:	000b94fd 	.word	0x000b94fd
   b8854:	000b9514 	.word	0x000b9514
   b8858:	abcd330e 	.word	0xabcd330e
   b885c:	e66d1234 	.word	0xe66d1234
   b8860:	0005deec 	.word	0x0005deec

000b8864 <strcmp>:
   b8864:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8868:	f811 3b01 	ldrb.w	r3, [r1], #1
   b886c:	2a01      	cmp	r2, #1
   b886e:	bf28      	it	cs
   b8870:	429a      	cmpcs	r2, r3
   b8872:	d0f7      	beq.n	b8864 <strcmp>
   b8874:	1ad0      	subs	r0, r2, r3
   b8876:	4770      	bx	lr

000b8878 <strcpy>:
   b8878:	4603      	mov	r3, r0
   b887a:	f811 2b01 	ldrb.w	r2, [r1], #1
   b887e:	f803 2b01 	strb.w	r2, [r3], #1
   b8882:	2a00      	cmp	r2, #0
   b8884:	d1f9      	bne.n	b887a <strcpy+0x2>
   b8886:	4770      	bx	lr

000b8888 <strlen>:
   b8888:	4603      	mov	r3, r0
   b888a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b888e:	2a00      	cmp	r2, #0
   b8890:	d1fb      	bne.n	b888a <strlen+0x2>
   b8892:	1a18      	subs	r0, r3, r0
   b8894:	3801      	subs	r0, #1
   b8896:	4770      	bx	lr

000b8898 <strstr>:
   b8898:	780a      	ldrb	r2, [r1, #0]
   b889a:	b570      	push	{r4, r5, r6, lr}
   b889c:	b96a      	cbnz	r2, b88ba <strstr+0x22>
   b889e:	bd70      	pop	{r4, r5, r6, pc}
   b88a0:	429a      	cmp	r2, r3
   b88a2:	d109      	bne.n	b88b8 <strstr+0x20>
   b88a4:	460c      	mov	r4, r1
   b88a6:	4605      	mov	r5, r0
   b88a8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   b88ac:	2b00      	cmp	r3, #0
   b88ae:	d0f6      	beq.n	b889e <strstr+0x6>
   b88b0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   b88b4:	429e      	cmp	r6, r3
   b88b6:	d0f7      	beq.n	b88a8 <strstr+0x10>
   b88b8:	3001      	adds	r0, #1
   b88ba:	7803      	ldrb	r3, [r0, #0]
   b88bc:	2b00      	cmp	r3, #0
   b88be:	d1ef      	bne.n	b88a0 <strstr+0x8>
   b88c0:	4618      	mov	r0, r3
   b88c2:	e7ec      	b.n	b889e <strstr+0x6>

000b88c4 <_strtol_l.constprop.0>:
   b88c4:	2b01      	cmp	r3, #1
   b88c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b88ca:	d001      	beq.n	b88d0 <_strtol_l.constprop.0+0xc>
   b88cc:	2b24      	cmp	r3, #36	; 0x24
   b88ce:	d906      	bls.n	b88de <_strtol_l.constprop.0+0x1a>
   b88d0:	f7fd feb4 	bl	b663c <__errno>
   b88d4:	2316      	movs	r3, #22
   b88d6:	6003      	str	r3, [r0, #0]
   b88d8:	2000      	movs	r0, #0
   b88da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b88de:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b89c4 <_strtol_l.constprop.0+0x100>
   b88e2:	460d      	mov	r5, r1
   b88e4:	462e      	mov	r6, r5
   b88e6:	f815 4b01 	ldrb.w	r4, [r5], #1
   b88ea:	f814 700c 	ldrb.w	r7, [r4, ip]
   b88ee:	f017 0708 	ands.w	r7, r7, #8
   b88f2:	d1f7      	bne.n	b88e4 <_strtol_l.constprop.0+0x20>
   b88f4:	2c2d      	cmp	r4, #45	; 0x2d
   b88f6:	d132      	bne.n	b895e <_strtol_l.constprop.0+0x9a>
   b88f8:	782c      	ldrb	r4, [r5, #0]
   b88fa:	2701      	movs	r7, #1
   b88fc:	1cb5      	adds	r5, r6, #2
   b88fe:	2b00      	cmp	r3, #0
   b8900:	d05b      	beq.n	b89ba <_strtol_l.constprop.0+0xf6>
   b8902:	2b10      	cmp	r3, #16
   b8904:	d109      	bne.n	b891a <_strtol_l.constprop.0+0x56>
   b8906:	2c30      	cmp	r4, #48	; 0x30
   b8908:	d107      	bne.n	b891a <_strtol_l.constprop.0+0x56>
   b890a:	782c      	ldrb	r4, [r5, #0]
   b890c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b8910:	2c58      	cmp	r4, #88	; 0x58
   b8912:	d14d      	bne.n	b89b0 <_strtol_l.constprop.0+0xec>
   b8914:	786c      	ldrb	r4, [r5, #1]
   b8916:	2310      	movs	r3, #16
   b8918:	3502      	adds	r5, #2
   b891a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b891e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8922:	f04f 0c00 	mov.w	ip, #0
   b8926:	fbb8 f9f3 	udiv	r9, r8, r3
   b892a:	4666      	mov	r6, ip
   b892c:	fb03 8a19 	mls	sl, r3, r9, r8
   b8930:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b8934:	f1be 0f09 	cmp.w	lr, #9
   b8938:	d816      	bhi.n	b8968 <_strtol_l.constprop.0+0xa4>
   b893a:	4674      	mov	r4, lr
   b893c:	42a3      	cmp	r3, r4
   b893e:	dd24      	ble.n	b898a <_strtol_l.constprop.0+0xc6>
   b8940:	f1bc 0f00 	cmp.w	ip, #0
   b8944:	db1e      	blt.n	b8984 <_strtol_l.constprop.0+0xc0>
   b8946:	45b1      	cmp	r9, r6
   b8948:	d31c      	bcc.n	b8984 <_strtol_l.constprop.0+0xc0>
   b894a:	d101      	bne.n	b8950 <_strtol_l.constprop.0+0x8c>
   b894c:	45a2      	cmp	sl, r4
   b894e:	db19      	blt.n	b8984 <_strtol_l.constprop.0+0xc0>
   b8950:	fb06 4603 	mla	r6, r6, r3, r4
   b8954:	f04f 0c01 	mov.w	ip, #1
   b8958:	f815 4b01 	ldrb.w	r4, [r5], #1
   b895c:	e7e8      	b.n	b8930 <_strtol_l.constprop.0+0x6c>
   b895e:	2c2b      	cmp	r4, #43	; 0x2b
   b8960:	bf04      	itt	eq
   b8962:	782c      	ldrbeq	r4, [r5, #0]
   b8964:	1cb5      	addeq	r5, r6, #2
   b8966:	e7ca      	b.n	b88fe <_strtol_l.constprop.0+0x3a>
   b8968:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b896c:	f1be 0f19 	cmp.w	lr, #25
   b8970:	d801      	bhi.n	b8976 <_strtol_l.constprop.0+0xb2>
   b8972:	3c37      	subs	r4, #55	; 0x37
   b8974:	e7e2      	b.n	b893c <_strtol_l.constprop.0+0x78>
   b8976:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b897a:	f1be 0f19 	cmp.w	lr, #25
   b897e:	d804      	bhi.n	b898a <_strtol_l.constprop.0+0xc6>
   b8980:	3c57      	subs	r4, #87	; 0x57
   b8982:	e7db      	b.n	b893c <_strtol_l.constprop.0+0x78>
   b8984:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8988:	e7e6      	b.n	b8958 <_strtol_l.constprop.0+0x94>
   b898a:	f1bc 0f00 	cmp.w	ip, #0
   b898e:	da05      	bge.n	b899c <_strtol_l.constprop.0+0xd8>
   b8990:	2322      	movs	r3, #34	; 0x22
   b8992:	6003      	str	r3, [r0, #0]
   b8994:	4646      	mov	r6, r8
   b8996:	b942      	cbnz	r2, b89aa <_strtol_l.constprop.0+0xe6>
   b8998:	4630      	mov	r0, r6
   b899a:	e79e      	b.n	b88da <_strtol_l.constprop.0+0x16>
   b899c:	b107      	cbz	r7, b89a0 <_strtol_l.constprop.0+0xdc>
   b899e:	4276      	negs	r6, r6
   b89a0:	2a00      	cmp	r2, #0
   b89a2:	d0f9      	beq.n	b8998 <_strtol_l.constprop.0+0xd4>
   b89a4:	f1bc 0f00 	cmp.w	ip, #0
   b89a8:	d000      	beq.n	b89ac <_strtol_l.constprop.0+0xe8>
   b89aa:	1e69      	subs	r1, r5, #1
   b89ac:	6011      	str	r1, [r2, #0]
   b89ae:	e7f3      	b.n	b8998 <_strtol_l.constprop.0+0xd4>
   b89b0:	2430      	movs	r4, #48	; 0x30
   b89b2:	2b00      	cmp	r3, #0
   b89b4:	d1b1      	bne.n	b891a <_strtol_l.constprop.0+0x56>
   b89b6:	2308      	movs	r3, #8
   b89b8:	e7af      	b.n	b891a <_strtol_l.constprop.0+0x56>
   b89ba:	2c30      	cmp	r4, #48	; 0x30
   b89bc:	d0a5      	beq.n	b890a <_strtol_l.constprop.0+0x46>
   b89be:	230a      	movs	r3, #10
   b89c0:	e7ab      	b.n	b891a <_strtol_l.constprop.0+0x56>
   b89c2:	bf00      	nop
   b89c4:	000b956e 	.word	0x000b956e

000b89c8 <strtol>:
   b89c8:	4613      	mov	r3, r2
   b89ca:	460a      	mov	r2, r1
   b89cc:	4601      	mov	r1, r0
   b89ce:	4802      	ldr	r0, [pc, #8]	; (b89d8 <strtol+0x10>)
   b89d0:	6800      	ldr	r0, [r0, #0]
   b89d2:	f7ff bf77 	b.w	b88c4 <_strtol_l.constprop.0>
   b89d6:	bf00      	nop
   b89d8:	2003dbfc 	.word	0x2003dbfc

000b89dc <__register_exitproc>:
   b89dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b89e0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8a9c <__register_exitproc+0xc0>
   b89e4:	4606      	mov	r6, r0
   b89e6:	f8d8 0000 	ldr.w	r0, [r8]
   b89ea:	461f      	mov	r7, r3
   b89ec:	460d      	mov	r5, r1
   b89ee:	4691      	mov	r9, r2
   b89f0:	f000 f856 	bl	b8aa0 <__retarget_lock_acquire_recursive>
   b89f4:	4b25      	ldr	r3, [pc, #148]	; (b8a8c <__register_exitproc+0xb0>)
   b89f6:	681c      	ldr	r4, [r3, #0]
   b89f8:	b934      	cbnz	r4, b8a08 <__register_exitproc+0x2c>
   b89fa:	4c25      	ldr	r4, [pc, #148]	; (b8a90 <__register_exitproc+0xb4>)
   b89fc:	601c      	str	r4, [r3, #0]
   b89fe:	4b25      	ldr	r3, [pc, #148]	; (b8a94 <__register_exitproc+0xb8>)
   b8a00:	b113      	cbz	r3, b8a08 <__register_exitproc+0x2c>
   b8a02:	681b      	ldr	r3, [r3, #0]
   b8a04:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8a08:	6863      	ldr	r3, [r4, #4]
   b8a0a:	2b1f      	cmp	r3, #31
   b8a0c:	dd07      	ble.n	b8a1e <__register_exitproc+0x42>
   b8a0e:	f8d8 0000 	ldr.w	r0, [r8]
   b8a12:	f000 f847 	bl	b8aa4 <__retarget_lock_release_recursive>
   b8a16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8a1e:	b34e      	cbz	r6, b8a74 <__register_exitproc+0x98>
   b8a20:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8a24:	b988      	cbnz	r0, b8a4a <__register_exitproc+0x6e>
   b8a26:	4b1c      	ldr	r3, [pc, #112]	; (b8a98 <__register_exitproc+0xbc>)
   b8a28:	b923      	cbnz	r3, b8a34 <__register_exitproc+0x58>
   b8a2a:	f8d8 0000 	ldr.w	r0, [r8]
   b8a2e:	f000 f838 	bl	b8aa2 <__retarget_lock_release>
   b8a32:	e7f0      	b.n	b8a16 <__register_exitproc+0x3a>
   b8a34:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8a38:	f7fd fde0 	bl	b65fc <malloc>
   b8a3c:	2800      	cmp	r0, #0
   b8a3e:	d0f4      	beq.n	b8a2a <__register_exitproc+0x4e>
   b8a40:	2300      	movs	r3, #0
   b8a42:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8a46:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8a4a:	6863      	ldr	r3, [r4, #4]
   b8a4c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8a50:	2201      	movs	r2, #1
   b8a52:	409a      	lsls	r2, r3
   b8a54:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8a58:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8a5c:	4313      	orrs	r3, r2
   b8a5e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8a62:	2e02      	cmp	r6, #2
   b8a64:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8a68:	bf02      	ittt	eq
   b8a6a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8a6e:	4313      	orreq	r3, r2
   b8a70:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8a74:	6863      	ldr	r3, [r4, #4]
   b8a76:	f8d8 0000 	ldr.w	r0, [r8]
   b8a7a:	1c5a      	adds	r2, r3, #1
   b8a7c:	3302      	adds	r3, #2
   b8a7e:	6062      	str	r2, [r4, #4]
   b8a80:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8a84:	f000 f80e 	bl	b8aa4 <__retarget_lock_release_recursive>
   b8a88:	2000      	movs	r0, #0
   b8a8a:	e7c6      	b.n	b8a1a <__register_exitproc+0x3e>
   b8a8c:	2003e7e8 	.word	0x2003e7e8
   b8a90:	2003e75c 	.word	0x2003e75c
   b8a94:	00000000 	.word	0x00000000
   b8a98:	000b65fd 	.word	0x000b65fd
   b8a9c:	2003dc60 	.word	0x2003dc60

000b8aa0 <__retarget_lock_acquire_recursive>:
   b8aa0:	4770      	bx	lr

000b8aa2 <__retarget_lock_release>:
   b8aa2:	4770      	bx	lr

000b8aa4 <__retarget_lock_release_recursive>:
   b8aa4:	4770      	bx	lr

000b8aa6 <link_code_end>:
	...

000b8aa8 <dynalib_user>:
   b8aa8:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b8ab8:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b8ac8:	7620 7269 7574 6c61 2e00 0a00 000a 6944      virtual......Di
   b8ad8:	7473 6e61 6563 5220 6165 2064 7369 2520     stance Read is %
   b8ae8:	0a69 2f00 7061 2f69 2e31 2f31 6677 772f     i../api/1.1/wf/w
   b8af8:	6165 6874 7265 6572 6f70 7472 4700 5445     eatherreport.GET
   b8b08:	4d00 6961 206e 6554 706d 203a 4c00 776f     .Main Temp: .Low
   b8b18:	5420 6d65 3a70 0020 6948 6867 5420 6d65      Temp: .High Tem
   b8b28:	3a70 0020 5448 5054 4720 5445 7220 7165     p: .HTTP GET req
   b8b38:	6575 7473 6620 6961 656c 2c64 6520 7272     uest failed, err
   b8b48:	726f 203a 4c00 7665 6c65 3020 200a 6156     or: .Level 0. Va
   b8b58:	756c 2065 6925 000a 654c 6576 206c 0a31     lue %i..Level 1.
   b8b68:	5620 6c61 6575 2520 0a69 4c00 7665 6c65      Value %i..Level
   b8b78:	3220 200a 6156 756c 2065 6925 000a 654c      2. Value %i..Le
   b8b88:	6576 206c 0a33 5620 6c61 6575 2520 0a69     vel 3. Value %i.
   b8b98:	4c00 7665 6c65 3420 200a 6156 756c 2065     .Level 4. Value 
   b8ba8:	6925 000a 654c 6576 206c 0a35 5620 6c61     %i..Level 5. Val
   b8bb8:	6575 2520 0a69 4c00 7665 6c65 3620 200a     ue %i..Level 6. 
   b8bc8:	6156 756c 2065 6925 000a 0000               Value %i....

000b8bd4 <_ZTV16JsonParserStaticILj1024ELj20EE>:
	...
   b8bdc:	40c9 000b 40dd 000b 6c67 6575 6562 636e     .@...@..gluebenc
   b8bec:	2e68 7562 6262 656c 7061 7370 692e 006f     h.bubbleapps.io.
   b8bfc:	3766 6366 6635 6134 6233 3364 3730 3530     f7fc5f4a3bd30705
   b8c0c:	6562 3635 6434 3535 6430 3833 3231 3434     be564d550d381244
   b8c1c:	0000 0000                                   ....

000b8c20 <CSWTCH.88>:
   b8c20:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   b8c30:	0050 0000                                   P...

000b8c34 <_ZL4font>:
   b8c34:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b8c44:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b8c54:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b8c64:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b8c74:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b8c84:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b8c94:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b8ca4:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b8cb4:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b8cc4:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b8cd4:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b8ce4:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b8cf4:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b8d04:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b8d14:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b8d24:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b8d34:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b8d44:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b8d54:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b8d64:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b8d74:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b8d84:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b8d94:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b8da4:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b8db4:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b8dc4:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b8dd4:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b8de4:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b8df4:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b8e04:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b8e14:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b8e24:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b8e34:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b8e44:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b8e54:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b8e64:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b8e74:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b8e84:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b8e94:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b8ea4:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b8eb4:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b8ec4:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
   b8ed4:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b8ee4:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b8ef4:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
   b8f04:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b8f14:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
   b8f24:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
   b8f34:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
   b8f44:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b8f54:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b8f64:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b8f74:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b8f84:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b8f94:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b8fa4:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
   b8fb4:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
   b8fc4:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
   b8fd4:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
   b8fe4:	141f 1414 001f 1010 f010 0000 0000 101f     ................
   b8ff4:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
   b9004:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
   b9014:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
   b9024:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
   b9034:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
   b9044:	1414 f414 1014 f010 f010 0000 101f 001f     ................
   b9054:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
   b9064:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
   b9074:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
   b9084:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
   b9094:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
   b90a4:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
   b90b4:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
   b90c4:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
   b90d4:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
   b90e4:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
   b90f4:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
   b9104:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
   b9114:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
   b9124:	0012 3c3c 3c3c 0000 0000 0000               ..<<<<......

000b9130 <_ZTV12Adafruit_GFX>:
	...
   b9140:	5185 000b 6a4d 000b 40a1 000b 4e9d 000b     .Q..Mj...@...N..
   b9150:	4fc3 000b 4fdf 000b 4f5b 000b 4ff9 000b     .O...O..[O...O..
   b9160:	502f 000b 504b 000b                         /P..KP..

000b9168 <_ZTV16Adafruit_SSD1306>:
	...
   b9170:	5511 000b 55a1 000b 5185 000b 6a4d 000b     .U...U...Q..Mj..
   b9180:	5515 000b 4e9d 000b 539d 000b 522d 000b     .U...N...S..-R..
   b9190:	4f5b 000b 4ff9 000b 502f 000b 504b 000b     [O...O../P..KP..

000b91a0 <_ZTV10JsonBuffer>:
	...
   b91a8:	595d 000b 5979 000b                         ]Y..yY..

000b91b0 <_ZTV10JsonParser>:
	...
   b91b8:	598d 000b 59b1 000b 4820 5454 2f50 2e31     .Y...Y.. HTTP/1.
   b91c8:	0d30 000a 6c63 736f 0065 6f43 6e6e 6365     0...close.Connec
   b91d8:	6974 6e6f 4800 534f 0054 6f43 746e 6e65     tion.HOST.Conten
   b91e8:	2d74 654c 676e 6874 5000 534f 0054 0a0d     t-Length.POST...
   b91f8:	0a0d 0000                                   ....

000b91fc <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b9204 <_ZTVN5spark13EthernetClassE>:
	...
   b920c:	66e3 000b 66d9 000b 66cf 000b 66c5 000b     .f...f...f...f..
   b921c:	66b9 000b 66ad 000b 6929 000b 6931 000b     .f...f..)i..1i..
   b922c:	66a1 000b 6699 000b 668f 000b 6685 000b     .f...f...f...f..
   b923c:	6961 000b                                   ai..

000b9240 <_ZTV7TwoWire>:
	...
   b9248:	6701 000b 674b 000b 6723 000b 6703 000b     .g..Kg..#g...g..
   b9258:	672b 000b 6733 000b 673b 000b 6743 000b     +g..3g..;g..Cg..

000b9268 <_ZTV9IPAddress>:
	...
   b9270:	67cd 000b 67bd 000b 67bf 000b 7061 0070     .g...g...g..app.

000b9280 <_ZTVN5spark12NetworkClassE>:
	...
   b9288:	68e9 000b 68f3 000b 68fd 000b 6907 000b     .h...h...h...i..
   b9298:	6911 000b 691d 000b 6929 000b 6931 000b     .i...i..)i..1i..
   b92a8:	6939 000b 6945 000b 694d 000b 6957 000b     9i..Ei..Mi..Wi..
   b92b8:	6961 000b 616e 006e 6e69 0066 766f 0066     ai..nan.inf.ovf.

000b92c8 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b92c8:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   b92d8:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000b92e8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b92f0:	7121 000b 7145 000b 7677 000b 7153 000b     !q..Eq..wv..Sq..
   b9300:	7125 000b                                   %q..

000b9304 <_ZTV9TCPClient>:
	...
   b930c:	71d1 000b 7205 000b 709d 000b 70b7 000b     .q...r...p...p..
   b931c:	750d 000b 70e1 000b 7383 000b 7115 000b     .u...p...s...q..
   b932c:	7415 000b 7255 000b 73b1 000b 75c1 000b     .t..Ur...s...u..
   b933c:	7351 000b 7117 000b 70c9 000b 7159 000b     Qs...q...p..Yq..
   b934c:	7235 000b 5925 252d 2d6d 6425 2554 3a48     5r..%Y-%m-%dT%H:
   b935c:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b936c <_ZTV11USARTSerial>:
	...
   b9374:	7691 000b 76fd 000b 76d5 000b 6a4d 000b     .v...v...v..Mj..
   b9384:	76a5 000b 76c1 000b 76b3 000b 76cf 000b     .v...v...v...v..
   b9394:	7693 000b 7697 000b                         .v...v..

000b939c <_ZTV9USBSerial>:
	...
   b93a4:	773b 000b 77a3 000b 7779 000b 6a4d 000b     ;w...w..yw..Mj..
   b93b4:	776b 000b 773d 000b 774d 000b 779d 000b     kw..=w..Mw...w..
   b93c4:	775d 000b 7735 000b                         ]w..5w..

000b93cc <_ZTVN5spark9WiFiClassE>:
	...
   b93d4:	78a3 000b 7899 000b 788f 000b 7845 000b     .x...x...x..Ex..
   b93e4:	7883 000b 7877 000b 6929 000b 6931 000b     .x..wx..)i..1i..
   b93f4:	786b 000b 7863 000b 7859 000b 784f 000b     kx..cx..Yx..Ox..
   b9404:	6961 000b                                   ai..

000b9408 <_ZSt7nothrow>:
	...

000b9409 <_ZTSSt19_Sp_make_shared_tag>:
   b9409:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b9419:	6572 5f64 6174 0067 0000                     red_tag....

000b9424 <_ZTISt19_Sp_make_shared_tag>:
   b9424:	9464 000b 9409 000b                         d.......

000b942c <_ZTIN10__cxxabiv117__class_type_infoE>:
   b942c:	94c4 000b 9438 000b 94e8 000b               ....8.......

000b9438 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b9438:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b9448:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b9458:	0045 0000                                   E...

000b945c <_ZTVN10__cxxabiv117__class_type_infoE>:
   b945c:	0000 0000 942c 000b 7c89 000b 7c9d 000b     ....,....|...|..
   b946c:	7e31 000b 7e31 000b 7d07 000b 7c49 000b     1~..1~...}..I|..
   b947c:	7cef 000b 7cb1 000b 7c7b 000b               .|...|..{|..

000b9488 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b9488:	94c4 000b 9494 000b 942c 000b               ........,...

000b9494 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b9494:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b94a4:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b94b4:	666e 456f 0000 0000                         nfoE....

000b94bc <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b94bc:	0000 0000 9488 000b 7d31 000b 7d45 000b     ........1}..E}..
   b94cc:	7e31 000b 7e31 000b 7d07 000b 7c49 000b     1~..1~...}..I|..
   b94dc:	7e05 000b 7d91 000b 7d59 000b               .~...}..Y}..

000b94e8 <_ZTISt9type_info>:
   b94e8:	9464 000b 94f0 000b                         d.......

000b94f0 <_ZTSSt9type_info>:
   b94f0:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b9500:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b9510:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b9520:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b9530:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b9540:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b9550:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b9560:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b956d <_ctype_>:
   b956d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b957d:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b958d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b959d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b95ad:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b95bd:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b95cd:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b95dd:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b95ed:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b966e <link_const_variable_data_end>:
	...

000b9670 <link_constructors_location>:
   b9670:	000b4905 	.word	0x000b4905
   b9674:	000b4e8d 	.word	0x000b4e8d
   b9678:	000b6675 	.word	0x000b6675
   b967c:	000b66ed 	.word	0x000b66ed
   b9680:	000b68d9 	.word	0x000b68d9
   b9684:	000b6a39 	.word	0x000b6a39
   b9688:	000b6d3d 	.word	0x000b6d3d
   b968c:	000b7079 	.word	0x000b7079
   b9690:	000b767d 	.word	0x000b767d
   b9694:	000b78ad 	.word	0x000b78ad

000b9698 <link_constructors_end>:
	...
